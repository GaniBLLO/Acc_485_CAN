
ACC_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043fc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004508  08004508  00014508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800458c  0800458c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800458c  0800458c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800458c  0800458c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800458c  0800458c  0001458c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004590  08004590  00014590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004594  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000074  08004608  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  08004608  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f4db  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002322  00000000  00000000  0002f578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  000318a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf0  00000000  00000000  00032660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001868b  00000000  00000000  00033350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001056a  00000000  00000000  0004b9db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089e14  00000000  00000000  0005bf45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e5d59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d2c  00000000  00000000  000e5dac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	080044f0 	.word	0x080044f0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	080044f0 	.word	0x080044f0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <update_ACC_data>:

ACC_SETTING	ACC_set = ACC_SETTING_DEFAULT;
OUT_DATA	OUT 	= OUT_DATA_XYZ_DEFAULT;
extern RS_DATA_STRUCT	rs;

void update_ACC_data(I2C_HandleTypeDef *i2c){
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af04      	add	r7, sp, #16
 8000162:	6078      	str	r0, [r7, #4]

	uint8_t		command[1];

	HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_STATUS_REG, 1, &command[0], 1, 1000);		//Обнвляем статус регистров
 8000164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000168:	9302      	str	r3, [sp, #8]
 800016a:	2301      	movs	r3, #1
 800016c:	9301      	str	r3, [sp, #4]
 800016e:	f107 030c 	add.w	r3, r7, #12
 8000172:	9300      	str	r3, [sp, #0]
 8000174:	2301      	movs	r3, #1
 8000176:	2227      	movs	r2, #39	; 0x27
 8000178:	2130      	movs	r1, #48	; 0x30
 800017a:	6878      	ldr	r0, [r7, #4]
 800017c:	f001 fafe 	bl	800177c <HAL_I2C_Mem_Read>
	ACC_set.STATUS_REG.all = command[0];
 8000180:	7b3a      	ldrb	r2, [r7, #12]
 8000182:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <update_ACC_data+0x4c>)
 8000184:	70da      	strb	r2, [r3, #3]

	if(rs.RS_DataSended){
 8000186:	4b09      	ldr	r3, [pc, #36]	; (80001ac <update_ACC_data+0x50>)
 8000188:	685b      	ldr	r3, [r3, #4]
 800018a:	2b00      	cmp	r3, #0
 800018c:	d008      	beq.n	80001a0 <update_ACC_data+0x44>
		read_x_axis(i2c);
 800018e:	6878      	ldr	r0, [r7, #4]
 8000190:	f000 f80e 	bl	80001b0 <read_x_axis>
		read_y_axis(i2c);
 8000194:	6878      	ldr	r0, [r7, #4]
 8000196:	f000 f84b 	bl	8000230 <read_y_axis>
		read_z_axis(i2c);
 800019a:	6878      	ldr	r0, [r7, #4]
 800019c:	f000 f88a 	bl	80002b4 <read_z_axis>
	}
}
 80001a0:	bf00      	nop
 80001a2:	3710      	adds	r7, #16
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	20000000 	.word	0x20000000
 80001ac:	20000098 	.word	0x20000098

080001b0 <read_x_axis>:
    HAL_I2C_Mem_Read(i2c, address, COMMAND_CTRL_REG2, 1, &command_arr[1], 1, 50);
    HAL_I2C_Mem_Read(i2c, address, COMMAND_CTRL_REG4, 1, &command_arr[2], 1, 50);
}


void read_x_axis(I2C_HandleTypeDef *i2c){
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b088      	sub	sp, #32
 80001b4:	af04      	add	r7, sp, #16
 80001b6:	6078      	str	r0, [r7, #4]

    uint8_t data_LO_RX[1], data_HI_RX[1];

    if(ACC_set.STATUS_REG.bit.XOR || ACC_set.STATUS_REG.bit.XDA){
 80001b8:	4b1a      	ldr	r3, [pc, #104]	; (8000224 <read_x_axis+0x74>)
 80001ba:	78db      	ldrb	r3, [r3, #3]
 80001bc:	f003 0310 	and.w	r3, r3, #16
 80001c0:	b2db      	uxtb	r3, r3
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d106      	bne.n	80001d4 <read_x_axis+0x24>
 80001c6:	4b17      	ldr	r3, [pc, #92]	; (8000224 <read_x_axis+0x74>)
 80001c8:	78db      	ldrb	r3, [r3, #3]
 80001ca:	f003 0301 	and.w	r3, r3, #1
 80001ce:	b2db      	uxtb	r3, r3
 80001d0:	2b00      	cmp	r3, #0
 80001d2:	d022      	beq.n	800021a <read_x_axis+0x6a>

		HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_X_HI, 1, &data_HI_RX[0], 1, 10);		//Считали данные с регистра и записали в структуру
 80001d4:	230a      	movs	r3, #10
 80001d6:	9302      	str	r3, [sp, #8]
 80001d8:	2301      	movs	r3, #1
 80001da:	9301      	str	r3, [sp, #4]
 80001dc:	f107 0308 	add.w	r3, r7, #8
 80001e0:	9300      	str	r3, [sp, #0]
 80001e2:	2301      	movs	r3, #1
 80001e4:	2229      	movs	r2, #41	; 0x29
 80001e6:	2130      	movs	r1, #48	; 0x30
 80001e8:	6878      	ldr	r0, [r7, #4]
 80001ea:	f001 fac7 	bl	800177c <HAL_I2C_Mem_Read>
		OUT.X.bit.HI = data_HI_RX[0] & 0xff;
 80001ee:	7a3a      	ldrb	r2, [r7, #8]
 80001f0:	4b0d      	ldr	r3, [pc, #52]	; (8000228 <read_x_axis+0x78>)
 80001f2:	705a      	strb	r2, [r3, #1]

		HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_X_LO, 1, &data_LO_RX[0], 1, 10);
 80001f4:	230a      	movs	r3, #10
 80001f6:	9302      	str	r3, [sp, #8]
 80001f8:	2301      	movs	r3, #1
 80001fa:	9301      	str	r3, [sp, #4]
 80001fc:	f107 030c 	add.w	r3, r7, #12
 8000200:	9300      	str	r3, [sp, #0]
 8000202:	2301      	movs	r3, #1
 8000204:	2228      	movs	r2, #40	; 0x28
 8000206:	2130      	movs	r1, #48	; 0x30
 8000208:	6878      	ldr	r0, [r7, #4]
 800020a:	f001 fab7 	bl	800177c <HAL_I2C_Mem_Read>
		OUT.X.bit.LO = data_LO_RX[0] & 0xff;
 800020e:	7b3a      	ldrb	r2, [r7, #12]
 8000210:	4b05      	ldr	r3, [pc, #20]	; (8000228 <read_x_axis+0x78>)
 8000212:	701a      	strb	r2, [r3, #0]

		rs.RS_X_axis_data = 1;															//Данные готовы к отправке
 8000214:	4b05      	ldr	r3, [pc, #20]	; (800022c <read_x_axis+0x7c>)
 8000216:	2201      	movs	r2, #1
 8000218:	609a      	str	r2, [r3, #8]
	}
}
 800021a:	bf00      	nop
 800021c:	3710      	adds	r7, #16
 800021e:	46bd      	mov	sp, r7
 8000220:	bd80      	pop	{r7, pc}
 8000222:	bf00      	nop
 8000224:	20000000 	.word	0x20000000
 8000228:	20000090 	.word	0x20000090
 800022c:	20000098 	.word	0x20000098

08000230 <read_y_axis>:


void read_y_axis(I2C_HandleTypeDef *i2c){
 8000230:	b580      	push	{r7, lr}
 8000232:	b088      	sub	sp, #32
 8000234:	af04      	add	r7, sp, #16
 8000236:	6078      	str	r0, [r7, #4]

    uint8_t data_LO_RX[1], data_HI_RX[1];

    if(ACC_set.STATUS_REG.bit.YOR || ACC_set.STATUS_REG.bit.YDA){
 8000238:	4b1b      	ldr	r3, [pc, #108]	; (80002a8 <read_y_axis+0x78>)
 800023a:	78db      	ldrb	r3, [r3, #3]
 800023c:	f003 0320 	and.w	r3, r3, #32
 8000240:	b2db      	uxtb	r3, r3
 8000242:	2b00      	cmp	r3, #0
 8000244:	d106      	bne.n	8000254 <read_y_axis+0x24>
 8000246:	4b18      	ldr	r3, [pc, #96]	; (80002a8 <read_y_axis+0x78>)
 8000248:	78db      	ldrb	r3, [r3, #3]
 800024a:	f003 0302 	and.w	r3, r3, #2
 800024e:	b2db      	uxtb	r3, r3
 8000250:	2b00      	cmp	r3, #0
 8000252:	d024      	beq.n	800029e <read_y_axis+0x6e>

		HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_Y_HI, 1, &data_HI_RX[0], 1, 1000);
 8000254:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000258:	9302      	str	r3, [sp, #8]
 800025a:	2301      	movs	r3, #1
 800025c:	9301      	str	r3, [sp, #4]
 800025e:	f107 0308 	add.w	r3, r7, #8
 8000262:	9300      	str	r3, [sp, #0]
 8000264:	2301      	movs	r3, #1
 8000266:	222b      	movs	r2, #43	; 0x2b
 8000268:	2130      	movs	r1, #48	; 0x30
 800026a:	6878      	ldr	r0, [r7, #4]
 800026c:	f001 fa86 	bl	800177c <HAL_I2C_Mem_Read>
		OUT.Y.bit.HI = data_HI_RX[0] & 0xff;
 8000270:	7a3a      	ldrb	r2, [r7, #8]
 8000272:	4b0e      	ldr	r3, [pc, #56]	; (80002ac <read_y_axis+0x7c>)
 8000274:	70da      	strb	r2, [r3, #3]

		HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_Y_LO, 1, &data_LO_RX[0], 1, 1000);
 8000276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800027a:	9302      	str	r3, [sp, #8]
 800027c:	2301      	movs	r3, #1
 800027e:	9301      	str	r3, [sp, #4]
 8000280:	f107 030c 	add.w	r3, r7, #12
 8000284:	9300      	str	r3, [sp, #0]
 8000286:	2301      	movs	r3, #1
 8000288:	222a      	movs	r2, #42	; 0x2a
 800028a:	2130      	movs	r1, #48	; 0x30
 800028c:	6878      	ldr	r0, [r7, #4]
 800028e:	f001 fa75 	bl	800177c <HAL_I2C_Mem_Read>
		OUT.Y.bit.LO = data_LO_RX[0] & 0xff;
 8000292:	7b3a      	ldrb	r2, [r7, #12]
 8000294:	4b05      	ldr	r3, [pc, #20]	; (80002ac <read_y_axis+0x7c>)
 8000296:	709a      	strb	r2, [r3, #2]

	    rs.RS_Y_axis_data = 1;
 8000298:	4b05      	ldr	r3, [pc, #20]	; (80002b0 <read_y_axis+0x80>)
 800029a:	2201      	movs	r2, #1
 800029c:	60da      	str	r2, [r3, #12]
    }

}
 800029e:	bf00      	nop
 80002a0:	3710      	adds	r7, #16
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bd80      	pop	{r7, pc}
 80002a6:	bf00      	nop
 80002a8:	20000000 	.word	0x20000000
 80002ac:	20000090 	.word	0x20000090
 80002b0:	20000098 	.word	0x20000098

080002b4 <read_z_axis>:


void read_z_axis(I2C_HandleTypeDef *i2c){
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b088      	sub	sp, #32
 80002b8:	af04      	add	r7, sp, #16
 80002ba:	6078      	str	r0, [r7, #4]

    uint8_t data_LO_RX[1], data_HI_RX[1];
    if(ACC_set.STATUS_REG.bit.ZOR || ACC_set.STATUS_REG.bit.ZDA){
 80002bc:	4b22      	ldr	r3, [pc, #136]	; (8000348 <read_z_axis+0x94>)
 80002be:	78db      	ldrb	r3, [r3, #3]
 80002c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d106      	bne.n	80002d8 <read_z_axis+0x24>
 80002ca:	4b1f      	ldr	r3, [pc, #124]	; (8000348 <read_z_axis+0x94>)
 80002cc:	78db      	ldrb	r3, [r3, #3]
 80002ce:	f003 0304 	and.w	r3, r3, #4
 80002d2:	b2db      	uxtb	r3, r3
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d024      	beq.n	8000322 <read_z_axis+0x6e>

		HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_Z_HI, 1, &data_HI_RX[0], 1, 1000);
 80002d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002dc:	9302      	str	r3, [sp, #8]
 80002de:	2301      	movs	r3, #1
 80002e0:	9301      	str	r3, [sp, #4]
 80002e2:	f107 0308 	add.w	r3, r7, #8
 80002e6:	9300      	str	r3, [sp, #0]
 80002e8:	2301      	movs	r3, #1
 80002ea:	222d      	movs	r2, #45	; 0x2d
 80002ec:	2130      	movs	r1, #48	; 0x30
 80002ee:	6878      	ldr	r0, [r7, #4]
 80002f0:	f001 fa44 	bl	800177c <HAL_I2C_Mem_Read>
		OUT.Z.bit.HI = data_HI_RX[0] & 0xff;
 80002f4:	7a3a      	ldrb	r2, [r7, #8]
 80002f6:	4b15      	ldr	r3, [pc, #84]	; (800034c <read_z_axis+0x98>)
 80002f8:	715a      	strb	r2, [r3, #5]

		HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_Z_LO, 1, &data_LO_RX[0], 1, 1000);
 80002fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002fe:	9302      	str	r3, [sp, #8]
 8000300:	2301      	movs	r3, #1
 8000302:	9301      	str	r3, [sp, #4]
 8000304:	f107 030c 	add.w	r3, r7, #12
 8000308:	9300      	str	r3, [sp, #0]
 800030a:	2301      	movs	r3, #1
 800030c:	222c      	movs	r2, #44	; 0x2c
 800030e:	2130      	movs	r1, #48	; 0x30
 8000310:	6878      	ldr	r0, [r7, #4]
 8000312:	f001 fa33 	bl	800177c <HAL_I2C_Mem_Read>
		OUT.Z.bit.LO = data_LO_RX[0] & 0xff;
 8000316:	7b3a      	ldrb	r2, [r7, #12]
 8000318:	4b0c      	ldr	r3, [pc, #48]	; (800034c <read_z_axis+0x98>)
 800031a:	711a      	strb	r2, [r3, #4]

		rs.RS_Z_axis_data = 1;
 800031c:	4b0c      	ldr	r3, [pc, #48]	; (8000350 <read_z_axis+0x9c>)
 800031e:	2201      	movs	r2, #1
 8000320:	611a      	str	r2, [r3, #16]
    }

    if(rs.RS_Z_axis_data && rs.RS_X_axis_data && rs.RS_Y_axis_data)
 8000322:	4b0b      	ldr	r3, [pc, #44]	; (8000350 <read_z_axis+0x9c>)
 8000324:	691b      	ldr	r3, [r3, #16]
 8000326:	2b00      	cmp	r3, #0
 8000328:	d00a      	beq.n	8000340 <read_z_axis+0x8c>
 800032a:	4b09      	ldr	r3, [pc, #36]	; (8000350 <read_z_axis+0x9c>)
 800032c:	689b      	ldr	r3, [r3, #8]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d006      	beq.n	8000340 <read_z_axis+0x8c>
 8000332:	4b07      	ldr	r3, [pc, #28]	; (8000350 <read_z_axis+0x9c>)
 8000334:	68db      	ldr	r3, [r3, #12]
 8000336:	2b00      	cmp	r3, #0
 8000338:	d002      	beq.n	8000340 <read_z_axis+0x8c>
    	rs.RS_DataReady = 1;
 800033a:	4b05      	ldr	r3, [pc, #20]	; (8000350 <read_z_axis+0x9c>)
 800033c:	2201      	movs	r2, #1
 800033e:	601a      	str	r2, [r3, #0]

}
 8000340:	bf00      	nop
 8000342:	3710      	adds	r7, #16
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}
 8000348:	20000000 	.word	0x20000000
 800034c:	20000090 	.word	0x20000090
 8000350:	20000098 	.word	0x20000098

08000354 <MCP2515_Initialize>:
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);


/* MCP2515 초기화 */
bool MCP2515_Initialize(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b082      	sub	sp, #8
 8000358:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();
 800035a:	2201      	movs	r2, #1
 800035c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000360:	480b      	ldr	r0, [pc, #44]	; (8000390 <MCP2515_Initialize+0x3c>)
 8000362:	f001 f8af 	bl	80014c4 <HAL_GPIO_WritePin>

  uint8_t loop = 10;
 8000366:	230a      	movs	r3, #10
 8000368:	71fb      	strb	r3, [r7, #7]

  do {
    /* SPI Ready 확인 */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 800036a:	480a      	ldr	r0, [pc, #40]	; (8000394 <MCP2515_Initialize+0x40>)
 800036c:	f003 f935 	bl	80035da <HAL_SPI_GetState>
 8000370:	4603      	mov	r3, r0
 8000372:	2b01      	cmp	r3, #1
 8000374:	d101      	bne.n	800037a <MCP2515_Initialize+0x26>
      return true;
 8000376:	2301      	movs	r3, #1
 8000378:	e006      	b.n	8000388 <MCP2515_Initialize+0x34>

    loop--;
 800037a:	79fb      	ldrb	r3, [r7, #7]
 800037c:	3b01      	subs	r3, #1
 800037e:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d1f1      	bne.n	800036a <MCP2515_Initialize+0x16>

  return false;
 8000386:	2300      	movs	r3, #0
}
 8000388:	4618      	mov	r0, r3
 800038a:	3708      	adds	r7, #8
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40010800 	.word	0x40010800
 8000394:	20000130 	.word	0x20000130

08000398 <MCP2515_SetConfigMode>:

/* MCP2515 를 설정모드로 전환 */

bool MCP2515_SetConfigMode(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
  /* CANCTRL Register Configuration 모드 설정 */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 800039e:	2180      	movs	r1, #128	; 0x80
 80003a0:	200f      	movs	r0, #15
 80003a2:	f000 f83b 	bl	800041c <MCP2515_WriteByte>

  uint8_t loop = 10;
 80003a6:	230a      	movs	r3, #10
 80003a8:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 80003aa:	200e      	movs	r0, #14
 80003ac:	f000 f812 	bl	80003d4 <MCP2515_ReadByte>
 80003b0:	4603      	mov	r3, r0
 80003b2:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80003b6:	2b80      	cmp	r3, #128	; 0x80
 80003b8:	d101      	bne.n	80003be <MCP2515_SetConfigMode+0x26>
      return true;
 80003ba:	2301      	movs	r3, #1
 80003bc:	e006      	b.n	80003cc <MCP2515_SetConfigMode+0x34>

    loop--;
 80003be:	79fb      	ldrb	r3, [r7, #7]
 80003c0:	3b01      	subs	r3, #1
 80003c2:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 80003c4:	79fb      	ldrb	r3, [r7, #7]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d1ef      	bne.n	80003aa <MCP2515_SetConfigMode+0x12>

  return false;
 80003ca:	2300      	movs	r3, #0
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	3708      	adds	r7, #8
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}

080003d4 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* 1바이트 읽기 */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b084      	sub	sp, #16
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;

  MCP2515_CS_LOW();
 80003de:	2200      	movs	r2, #0
 80003e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80003e4:	480c      	ldr	r0, [pc, #48]	; (8000418 <MCP2515_ReadByte+0x44>)
 80003e6:	f001 f86d 	bl	80014c4 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ);
 80003ea:	2003      	movs	r0, #3
 80003ec:	f000 f836 	bl	800045c <SPI_Tx>
  SPI_Tx(address);
 80003f0:	79fb      	ldrb	r3, [r7, #7]
 80003f2:	4618      	mov	r0, r3
 80003f4:	f000 f832 	bl	800045c <SPI_Tx>
  retVal = SPI_Rx();
 80003f8:	f000 f842 	bl	8000480 <SPI_Rx>
 80003fc:	4603      	mov	r3, r0
 80003fe:	73fb      	strb	r3, [r7, #15]

  MCP2515_CS_HIGH();
 8000400:	2201      	movs	r2, #1
 8000402:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000406:	4804      	ldr	r0, [pc, #16]	; (8000418 <MCP2515_ReadByte+0x44>)
 8000408:	f001 f85c 	bl	80014c4 <HAL_GPIO_WritePin>

  return retVal;
 800040c:	7bfb      	ldrb	r3, [r7, #15]
}
 800040e:	4618      	mov	r0, r3
 8000410:	3710      	adds	r7, #16
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}
 8000416:	bf00      	nop
 8000418:	40010800 	.word	0x40010800

0800041c <MCP2515_WriteByte>:
  MCP2515_CS_HIGH();
}

/* 1바이트 쓰기 */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	4603      	mov	r3, r0
 8000424:	460a      	mov	r2, r1
 8000426:	71fb      	strb	r3, [r7, #7]
 8000428:	4613      	mov	r3, r2
 800042a:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 800042c:	2200      	movs	r2, #0
 800042e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000432:	4809      	ldr	r0, [pc, #36]	; (8000458 <MCP2515_WriteByte+0x3c>)
 8000434:	f001 f846 	bl	80014c4 <HAL_GPIO_WritePin>
//  SPI_Tx(MCP2515_WRITE);
//  SPI_Tx(0xC);
//  SPI_Tx(0xf0);

  SPI_Tx(0x8F);
 8000438:	208f      	movs	r0, #143	; 0x8f
 800043a:	f000 f80f 	bl	800045c <SPI_Tx>
  SPI_Tx(0x0F);
 800043e:	200f      	movs	r0, #15
 8000440:	f000 f80c 	bl	800045c <SPI_Tx>

  MCP2515_CS_HIGH();
 8000444:	2201      	movs	r2, #1
 8000446:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800044a:	4803      	ldr	r0, [pc, #12]	; (8000458 <MCP2515_WriteByte+0x3c>)
 800044c:	f001 f83a 	bl	80014c4 <HAL_GPIO_WritePin>

}
 8000450:	bf00      	nop
 8000452:	3708      	adds	r7, #8
 8000454:	46bd      	mov	sp, r7
 8000456:	bd80      	pop	{r7, pc}
 8000458:	40010800 	.word	0x40010800

0800045c <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx Wrapper 함수 */
static void SPI_Tx(uint8_t data)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	4603      	mov	r3, r0
 8000464:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 8000466:	1df9      	adds	r1, r7, #7
 8000468:	230a      	movs	r3, #10
 800046a:	2201      	movs	r2, #1
 800046c:	4803      	ldr	r0, [pc, #12]	; (800047c <SPI_Tx+0x20>)
 800046e:	f002 fb5f 	bl	8002b30 <HAL_SPI_Transmit>
}
 8000472:	bf00      	nop
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	20000130 	.word	0x20000130

08000480 <SPI_Rx>:
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
}

/* SPI Rx Wrapper 함수 */
static uint8_t SPI_Rx(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8000486:	1df9      	adds	r1, r7, #7
 8000488:	230a      	movs	r3, #10
 800048a:	2201      	movs	r2, #1
 800048c:	4803      	ldr	r0, [pc, #12]	; (800049c <SPI_Rx+0x1c>)
 800048e:	f002 fcb4 	bl	8002dfa <HAL_SPI_Receive>
  return retVal;
 8000492:	79fb      	ldrb	r3, [r7, #7]
}
 8000494:	4618      	mov	r0, r3
 8000496:	3708      	adds	r7, #8
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	20000130 	.word	0x20000130

080004a0 <RS_Send>:
#include "stdio.h"

RS_DATA_STRUCT	rs;
extern OUT_DATA	OUT;

void RS_Send(UART_HandleTypeDef *uart){
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b092      	sub	sp, #72	; 0x48
 80004a4:	af02      	add	r7, sp, #8
 80004a6:	6078      	str	r0, [r7, #4]

    char			buffer[50]; //44
    HAL_StatusTypeDef	result;

    if(rs.RS_DataReady){
 80004a8:	4b20      	ldr	r3, [pc, #128]	; (800052c <RS_Send+0x8c>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d038      	beq.n	8000522 <RS_Send+0x82>

		sprintf(buffer, "X_axis: %d\tY_axis: %d\tZ_axis: %d\r\n", (int16_t)OUT.X.all, (int16_t)OUT.Y.all, (int16_t)OUT.Z.all);
 80004b0:	4b1f      	ldr	r3, [pc, #124]	; (8000530 <RS_Send+0x90>)
 80004b2:	881b      	ldrh	r3, [r3, #0]
 80004b4:	b21b      	sxth	r3, r3
 80004b6:	461a      	mov	r2, r3
 80004b8:	4b1d      	ldr	r3, [pc, #116]	; (8000530 <RS_Send+0x90>)
 80004ba:	885b      	ldrh	r3, [r3, #2]
 80004bc:	b21b      	sxth	r3, r3
 80004be:	4619      	mov	r1, r3
 80004c0:	4b1b      	ldr	r3, [pc, #108]	; (8000530 <RS_Send+0x90>)
 80004c2:	889b      	ldrh	r3, [r3, #4]
 80004c4:	b21b      	sxth	r3, r3
 80004c6:	f107 000c 	add.w	r0, r7, #12
 80004ca:	9300      	str	r3, [sp, #0]
 80004cc:	460b      	mov	r3, r1
 80004ce:	4919      	ldr	r1, [pc, #100]	; (8000534 <RS_Send+0x94>)
 80004d0:	f003 fb94 	bl	8003bfc <siprintf>

		result = HAL_UART_Transmit(uart, (uint8_t*) buffer, strlen(buffer), 10);
 80004d4:	f107 030c 	add.w	r3, r7, #12
 80004d8:	4618      	mov	r0, r3
 80004da:	f7ff fe37 	bl	800014c <strlen>
 80004de:	4603      	mov	r3, r0
 80004e0:	b29a      	uxth	r2, r3
 80004e2:	f107 010c 	add.w	r1, r7, #12
 80004e6:	230a      	movs	r3, #10
 80004e8:	6878      	ldr	r0, [r7, #4]
 80004ea:	f003 f9d5 	bl	8003898 <HAL_UART_Transmit>
 80004ee:	4603      	mov	r3, r0
 80004f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if(result == HAL_OK){
 80004f4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d10f      	bne.n	800051c <RS_Send+0x7c>

			rs.RS_X_axis_data = 0;
 80004fc:	4b0b      	ldr	r3, [pc, #44]	; (800052c <RS_Send+0x8c>)
 80004fe:	2200      	movs	r2, #0
 8000500:	609a      	str	r2, [r3, #8]
			rs.RS_Y_axis_data = 0;
 8000502:	4b0a      	ldr	r3, [pc, #40]	; (800052c <RS_Send+0x8c>)
 8000504:	2200      	movs	r2, #0
 8000506:	60da      	str	r2, [r3, #12]
			rs.RS_Z_axis_data = 0;
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <RS_Send+0x8c>)
 800050a:	2200      	movs	r2, #0
 800050c:	611a      	str	r2, [r3, #16]

			rs.RS_DataSended = 1;
 800050e:	4b07      	ldr	r3, [pc, #28]	; (800052c <RS_Send+0x8c>)
 8000510:	2201      	movs	r2, #1
 8000512:	605a      	str	r2, [r3, #4]
		    rs.RS_DataReady = 0;
 8000514:	4b05      	ldr	r3, [pc, #20]	; (800052c <RS_Send+0x8c>)
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
	//HAL_UART_Transmit(uart, (uint8_t*) "\033[0;0H", 6 , 5);
	//HAL_UART_Transmit(uart, (uint8_t*) "\033[2J", 4, 5);

    }

}
 800051a:	e002      	b.n	8000522 <RS_Send+0x82>
			rs.RS_DataSended = 0;
 800051c:	4b03      	ldr	r3, [pc, #12]	; (800052c <RS_Send+0x8c>)
 800051e:	2200      	movs	r2, #0
 8000520:	605a      	str	r2, [r3, #4]
}
 8000522:	bf00      	nop
 8000524:	3740      	adds	r7, #64	; 0x40
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	20000098 	.word	0x20000098
 8000530:	20000090 	.word	0x20000090
 8000534:	08004508 	.word	0x08004508

08000538 <GPIO_init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void GPIO_init(){
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0

    RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;				//Тактирование
 800053c:	4b0d      	ldr	r3, [pc, #52]	; (8000574 <GPIO_init+0x3c>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	4a0c      	ldr	r2, [pc, #48]	; (8000574 <GPIO_init+0x3c>)
 8000542:	f043 0310 	orr.w	r3, r3, #16
 8000546:	6193      	str	r3, [r2, #24]

    GPIOC->CRH &= ~GPIO_CRH_CNF13;				//Oбнуление регистра CNF0/1 = 00
 8000548:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <GPIO_init+0x40>)
 800054a:	685b      	ldr	r3, [r3, #4]
 800054c:	4a0a      	ldr	r2, [pc, #40]	; (8000578 <GPIO_init+0x40>)
 800054e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000552:	6053      	str	r3, [r2, #4]
    GPIOC->CRH |= GPIO_CRH_MODE13;				//MODE 11 => max 50MHz
 8000554:	4b08      	ldr	r3, [pc, #32]	; (8000578 <GPIO_init+0x40>)
 8000556:	685b      	ldr	r3, [r3, #4]
 8000558:	4a07      	ldr	r2, [pc, #28]	; (8000578 <GPIO_init+0x40>)
 800055a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800055e:	6053      	str	r3, [r2, #4]
    GPIOC->BSRR |= GPIO_BSRR_BR13;
 8000560:	4b05      	ldr	r3, [pc, #20]	; (8000578 <GPIO_init+0x40>)
 8000562:	691b      	ldr	r3, [r3, #16]
 8000564:	4a04      	ldr	r2, [pc, #16]	; (8000578 <GPIO_init+0x40>)
 8000566:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800056a:	6113      	str	r3, [r2, #16]
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr
 8000574:	40021000 	.word	0x40021000
 8000578:	40011000 	.word	0x40011000

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f000 fb9a 	bl	8000cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f82c 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 f948 	bl	800081c <MX_GPIO_Init>
  MX_I2C1_Init();
 800058c:	f000 f8b6 	bl	80006fc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000590:	f000 f91a 	bl	80007c8 <MX_USART1_UART_Init>
  MX_CRC_Init();
 8000594:	f000 f89e 	bl	80006d4 <MX_CRC_Init>
  MX_SPI2_Init();
 8000598:	f000 f8de 	bl	8000758 <MX_SPI2_Init>
  MX_CAN_Init();
 800059c:	f000 f866 	bl	800066c <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  GPIO_init();
 80005a0:	f7ff ffca 	bl	8000538 <GPIO_init>
//  ACC_init(&hi2c1);

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, SET);
 80005a4:	2201      	movs	r2, #1
 80005a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005aa:	480a      	ldr	r0, [pc, #40]	; (80005d4 <main+0x58>)
 80005ac:	f000 ff8a 	bl	80014c4 <HAL_GPIO_WritePin>
//  while(1);

  if(MCP2515_Initialize() == true){
 80005b0:	f7ff fed0 	bl	8000354 <MCP2515_Initialize>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <main+0x42>
	  MCP2515_SetConfigMode();
 80005ba:	f7ff feed 	bl	8000398 <MCP2515_SetConfigMode>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  update_ACC_data(&hi2c1);
 80005be:	4806      	ldr	r0, [pc, #24]	; (80005d8 <main+0x5c>)
 80005c0:	f7ff fdcc 	bl	800015c <update_ACC_data>
	  RS_Send(&huart1);
 80005c4:	4805      	ldr	r0, [pc, #20]	; (80005dc <main+0x60>)
 80005c6:	f7ff ff6b 	bl	80004a0 <RS_Send>
	  HAL_Delay(10);
 80005ca:	200a      	movs	r0, #10
 80005cc:	f000 fbd6 	bl	8000d7c <HAL_Delay>
	  update_ACC_data(&hi2c1);
 80005d0:	e7f5      	b.n	80005be <main+0x42>
 80005d2:	bf00      	nop
 80005d4:	40010c00 	.word	0x40010c00
 80005d8:	200000dc 	.word	0x200000dc
 80005dc:	20000188 	.word	0x20000188

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b090      	sub	sp, #64	; 0x40
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0318 	add.w	r3, r7, #24
 80005ea:	2228      	movs	r2, #40	; 0x28
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f003 fafc 	bl	8003bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000602:	2301      	movs	r3, #1
 8000604:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000606:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800060a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000610:	2301      	movs	r3, #1
 8000612:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000614:	2302      	movs	r3, #2
 8000616:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000618:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800061c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800061e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000622:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000624:	f107 0318 	add.w	r3, r7, #24
 8000628:	4618      	mov	r0, r3
 800062a:	f001 fde5 	bl	80021f8 <HAL_RCC_OscConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000634:	f000 f93e 	bl	80008b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000638:	230f      	movs	r3, #15
 800063a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063c:	2302      	movs	r3, #2
 800063e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000648:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064a:	2300      	movs	r3, #0
 800064c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	2102      	movs	r1, #2
 8000652:	4618      	mov	r0, r3
 8000654:	f002 f852 	bl	80026fc <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800065e:	f000 f929 	bl	80008b4 <Error_Handler>
  }
}
 8000662:	bf00      	nop
 8000664:	3740      	adds	r7, #64	; 0x40
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000670:	4b16      	ldr	r3, [pc, #88]	; (80006cc <MX_CAN_Init+0x60>)
 8000672:	4a17      	ldr	r2, [pc, #92]	; (80006d0 <MX_CAN_Init+0x64>)
 8000674:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8000676:	4b15      	ldr	r3, [pc, #84]	; (80006cc <MX_CAN_Init+0x60>)
 8000678:	2210      	movs	r2, #16
 800067a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800067c:	4b13      	ldr	r3, [pc, #76]	; (80006cc <MX_CAN_Init+0x60>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000682:	4b12      	ldr	r3, [pc, #72]	; (80006cc <MX_CAN_Init+0x60>)
 8000684:	2200      	movs	r2, #0
 8000686:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000688:	4b10      	ldr	r3, [pc, #64]	; (80006cc <MX_CAN_Init+0x60>)
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800068e:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <MX_CAN_Init+0x60>)
 8000690:	2200      	movs	r2, #0
 8000692:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000694:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <MX_CAN_Init+0x60>)
 8000696:	2200      	movs	r2, #0
 8000698:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800069a:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <MX_CAN_Init+0x60>)
 800069c:	2200      	movs	r2, #0
 800069e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80006a0:	4b0a      	ldr	r3, [pc, #40]	; (80006cc <MX_CAN_Init+0x60>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80006a6:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_CAN_Init+0x60>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80006ac:	4b07      	ldr	r3, [pc, #28]	; (80006cc <MX_CAN_Init+0x60>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80006b2:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_CAN_Init+0x60>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80006b8:	4804      	ldr	r0, [pc, #16]	; (80006cc <MX_CAN_Init+0x60>)
 80006ba:	f000 fb83 	bl	8000dc4 <HAL_CAN_Init>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80006c4:	f000 f8f6 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	200000ac 	.word	0x200000ac
 80006d0:	40006400 	.word	0x40006400

080006d4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_CRC_Init+0x20>)
 80006da:	4a07      	ldr	r2, [pc, #28]	; (80006f8 <MX_CRC_Init+0x24>)
 80006dc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MX_CRC_Init+0x20>)
 80006e0:	f000 fd4f 	bl	8001182 <HAL_CRC_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006ea:	f000 f8e3 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	200000d4 	.word	0x200000d4
 80006f8:	40023000 	.word	0x40023000

080006fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000700:	4b12      	ldr	r3, [pc, #72]	; (800074c <MX_I2C1_Init+0x50>)
 8000702:	4a13      	ldr	r2, [pc, #76]	; (8000750 <MX_I2C1_Init+0x54>)
 8000704:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000706:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_I2C1_Init+0x50>)
 8000708:	4a12      	ldr	r2, [pc, #72]	; (8000754 <MX_I2C1_Init+0x58>)
 800070a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <MX_I2C1_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_I2C1_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_I2C1_Init+0x50>)
 800071a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800071e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000720:	4b0a      	ldr	r3, [pc, #40]	; (800074c <MX_I2C1_Init+0x50>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_I2C1_Init+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800072c:	4b07      	ldr	r3, [pc, #28]	; (800074c <MX_I2C1_Init+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_I2C1_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	; (800074c <MX_I2C1_Init+0x50>)
 800073a:	f000 fedb 	bl	80014f4 <HAL_I2C_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000744:	f000 f8b6 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	200000dc 	.word	0x200000dc
 8000750:	40005400 	.word	0x40005400
 8000754:	000186a0 	.word	0x000186a0

08000758 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800075c:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <MX_SPI2_Init+0x68>)
 800075e:	4a19      	ldr	r2, [pc, #100]	; (80007c4 <MX_SPI2_Init+0x6c>)
 8000760:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000762:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <MX_SPI2_Init+0x68>)
 8000764:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000768:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <MX_SPI2_Init+0x68>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000770:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <MX_SPI2_Init+0x68>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000776:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <MX_SPI2_Init+0x68>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800077c:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <MX_SPI2_Init+0x68>)
 800077e:	2200      	movs	r2, #0
 8000780:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <MX_SPI2_Init+0x68>)
 8000784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000788:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800078a:	4b0d      	ldr	r3, [pc, #52]	; (80007c0 <MX_SPI2_Init+0x68>)
 800078c:	2200      	movs	r2, #0
 800078e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000790:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <MX_SPI2_Init+0x68>)
 8000792:	2200      	movs	r2, #0
 8000794:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000796:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <MX_SPI2_Init+0x68>)
 8000798:	2200      	movs	r2, #0
 800079a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 800079c:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <MX_SPI2_Init+0x68>)
 800079e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007a2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_SPI2_Init+0x68>)
 80007a6:	220a      	movs	r2, #10
 80007a8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_SPI2_Init+0x68>)
 80007ac:	f002 f934 	bl	8002a18 <HAL_SPI_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80007b6:	f000 f87d 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000130 	.word	0x20000130
 80007c4:	40003800 	.word	0x40003800

080007c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007cc:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_USART1_UART_Init+0x4c>)
 80007ce:	4a12      	ldr	r2, [pc, #72]	; (8000818 <MX_USART1_UART_Init+0x50>)
 80007d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <MX_USART1_UART_Init+0x4c>)
 80007d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_USART1_UART_Init+0x4c>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_USART1_UART_Init+0x4c>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b0b      	ldr	r3, [pc, #44]	; (8000814 <MX_USART1_UART_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_USART1_UART_Init+0x4c>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <MX_USART1_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_USART1_UART_Init+0x4c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_USART1_UART_Init+0x4c>)
 8000800:	f002 fffa 	bl	80037f8 <HAL_UART_Init>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800080a:	f000 f853 	bl	80008b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800080e:	bf00      	nop
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	20000188 	.word	0x20000188
 8000818:	40013800 	.word	0x40013800

0800081c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b088      	sub	sp, #32
 8000820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	f107 0310 	add.w	r3, r7, #16
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000830:	4b1e      	ldr	r3, [pc, #120]	; (80008ac <MX_GPIO_Init+0x90>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a1d      	ldr	r2, [pc, #116]	; (80008ac <MX_GPIO_Init+0x90>)
 8000836:	f043 0320 	orr.w	r3, r3, #32
 800083a:	6193      	str	r3, [r2, #24]
 800083c:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <MX_GPIO_Init+0x90>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f003 0320 	and.w	r3, r3, #32
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000848:	4b18      	ldr	r3, [pc, #96]	; (80008ac <MX_GPIO_Init+0x90>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a17      	ldr	r2, [pc, #92]	; (80008ac <MX_GPIO_Init+0x90>)
 800084e:	f043 0308 	orr.w	r3, r3, #8
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b15      	ldr	r3, [pc, #84]	; (80008ac <MX_GPIO_Init+0x90>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0308 	and.w	r3, r3, #8
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <MX_GPIO_Init+0x90>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	4a11      	ldr	r2, [pc, #68]	; (80008ac <MX_GPIO_Init+0x90>)
 8000866:	f043 0304 	orr.w	r3, r3, #4
 800086a:	6193      	str	r3, [r2, #24]
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_GPIO_Init+0x90>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f003 0304 	and.w	r3, r3, #4
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000878:	2200      	movs	r2, #0
 800087a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800087e:	480c      	ldr	r0, [pc, #48]	; (80008b0 <MX_GPIO_Init+0x94>)
 8000880:	f000 fe20 	bl	80014c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000884:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000888:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088a:	2301      	movs	r3, #1
 800088c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2302      	movs	r3, #2
 8000894:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 0310 	add.w	r3, r7, #16
 800089a:	4619      	mov	r1, r3
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <MX_GPIO_Init+0x94>)
 800089e:	f000 fc8d 	bl	80011bc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008a2:	bf00      	nop
 80008a4:	3720      	adds	r7, #32
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40021000 	.word	0x40021000
 80008b0:	40010800 	.word	0x40010800

080008b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b8:	b672      	cpsid	i
}
 80008ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008bc:	e7fe      	b.n	80008bc <Error_Handler+0x8>
	...

080008c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <HAL_MspInit+0x5c>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	4a14      	ldr	r2, [pc, #80]	; (800091c <HAL_MspInit+0x5c>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6193      	str	r3, [r2, #24]
 80008d2:	4b12      	ldr	r3, [pc, #72]	; (800091c <HAL_MspInit+0x5c>)
 80008d4:	699b      	ldr	r3, [r3, #24]
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <HAL_MspInit+0x5c>)
 80008e0:	69db      	ldr	r3, [r3, #28]
 80008e2:	4a0e      	ldr	r2, [pc, #56]	; (800091c <HAL_MspInit+0x5c>)
 80008e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e8:	61d3      	str	r3, [r2, #28]
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <HAL_MspInit+0x5c>)
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008f6:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <HAL_MspInit+0x60>)
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	4a04      	ldr	r2, [pc, #16]	; (8000920 <HAL_MspInit+0x60>)
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000912:	bf00      	nop
 8000914:	3714      	adds	r7, #20
 8000916:	46bd      	mov	sp, r7
 8000918:	bc80      	pop	{r7}
 800091a:	4770      	bx	lr
 800091c:	40021000 	.word	0x40021000
 8000920:	40010000 	.word	0x40010000

08000924 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b088      	sub	sp, #32
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	f107 0310 	add.w	r3, r7, #16
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4a1c      	ldr	r2, [pc, #112]	; (80009b0 <HAL_CAN_MspInit+0x8c>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d131      	bne.n	80009a8 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000944:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <HAL_CAN_MspInit+0x90>)
 8000946:	69db      	ldr	r3, [r3, #28]
 8000948:	4a1a      	ldr	r2, [pc, #104]	; (80009b4 <HAL_CAN_MspInit+0x90>)
 800094a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800094e:	61d3      	str	r3, [r2, #28]
 8000950:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <HAL_CAN_MspInit+0x90>)
 8000952:	69db      	ldr	r3, [r3, #28]
 8000954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095c:	4b15      	ldr	r3, [pc, #84]	; (80009b4 <HAL_CAN_MspInit+0x90>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4a14      	ldr	r2, [pc, #80]	; (80009b4 <HAL_CAN_MspInit+0x90>)
 8000962:	f043 0304 	orr.w	r3, r3, #4
 8000966:	6193      	str	r3, [r2, #24]
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <HAL_CAN_MspInit+0x90>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f003 0304 	and.w	r3, r3, #4
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000974:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000978:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	f107 0310 	add.w	r3, r7, #16
 8000986:	4619      	mov	r1, r3
 8000988:	480b      	ldr	r0, [pc, #44]	; (80009b8 <HAL_CAN_MspInit+0x94>)
 800098a:	f000 fc17 	bl	80011bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800098e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000992:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000994:	2302      	movs	r3, #2
 8000996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000998:	2303      	movs	r3, #3
 800099a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099c:	f107 0310 	add.w	r3, r7, #16
 80009a0:	4619      	mov	r1, r3
 80009a2:	4805      	ldr	r0, [pc, #20]	; (80009b8 <HAL_CAN_MspInit+0x94>)
 80009a4:	f000 fc0a 	bl	80011bc <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80009a8:	bf00      	nop
 80009aa:	3720      	adds	r7, #32
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40006400 	.word	0x40006400
 80009b4:	40021000 	.word	0x40021000
 80009b8:	40010800 	.word	0x40010800

080009bc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a09      	ldr	r2, [pc, #36]	; (80009f0 <HAL_CRC_MspInit+0x34>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d10b      	bne.n	80009e6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <HAL_CRC_MspInit+0x38>)
 80009d0:	695b      	ldr	r3, [r3, #20]
 80009d2:	4a08      	ldr	r2, [pc, #32]	; (80009f4 <HAL_CRC_MspInit+0x38>)
 80009d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009d8:	6153      	str	r3, [r2, #20]
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <HAL_CRC_MspInit+0x38>)
 80009dc:	695b      	ldr	r3, [r3, #20]
 80009de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80009e6:	bf00      	nop
 80009e8:	3714      	adds	r7, #20
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr
 80009f0:	40023000 	.word	0x40023000
 80009f4:	40021000 	.word	0x40021000

080009f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b088      	sub	sp, #32
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 0310 	add.w	r3, r7, #16
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a15      	ldr	r2, [pc, #84]	; (8000a68 <HAL_I2C_MspInit+0x70>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d123      	bne.n	8000a60 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <HAL_I2C_MspInit+0x74>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	4a13      	ldr	r2, [pc, #76]	; (8000a6c <HAL_I2C_MspInit+0x74>)
 8000a1e:	f043 0308 	orr.w	r3, r3, #8
 8000a22:	6193      	str	r3, [r2, #24]
 8000a24:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <HAL_I2C_MspInit+0x74>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	f003 0308 	and.w	r3, r3, #8
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a30:	23c0      	movs	r3, #192	; 0xc0
 8000a32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a34:	2312      	movs	r3, #18
 8000a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3c:	f107 0310 	add.w	r3, r7, #16
 8000a40:	4619      	mov	r1, r3
 8000a42:	480b      	ldr	r0, [pc, #44]	; (8000a70 <HAL_I2C_MspInit+0x78>)
 8000a44:	f000 fbba 	bl	80011bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a48:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <HAL_I2C_MspInit+0x74>)
 8000a4a:	69db      	ldr	r3, [r3, #28]
 8000a4c:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <HAL_I2C_MspInit+0x74>)
 8000a4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a52:	61d3      	str	r3, [r2, #28]
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <HAL_I2C_MspInit+0x74>)
 8000a56:	69db      	ldr	r3, [r3, #28]
 8000a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a60:	bf00      	nop
 8000a62:	3720      	adds	r7, #32
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40005400 	.word	0x40005400
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40010c00 	.word	0x40010c00

08000a74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b088      	sub	sp, #32
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0310 	add.w	r3, r7, #16
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a1c      	ldr	r2, [pc, #112]	; (8000b00 <HAL_SPI_MspInit+0x8c>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d131      	bne.n	8000af8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a94:	4b1b      	ldr	r3, [pc, #108]	; (8000b04 <HAL_SPI_MspInit+0x90>)
 8000a96:	69db      	ldr	r3, [r3, #28]
 8000a98:	4a1a      	ldr	r2, [pc, #104]	; (8000b04 <HAL_SPI_MspInit+0x90>)
 8000a9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9e:	61d3      	str	r3, [r2, #28]
 8000aa0:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <HAL_SPI_MspInit+0x90>)
 8000aa2:	69db      	ldr	r3, [r3, #28]
 8000aa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aac:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <HAL_SPI_MspInit+0x90>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	4a14      	ldr	r2, [pc, #80]	; (8000b04 <HAL_SPI_MspInit+0x90>)
 8000ab2:	f043 0308 	orr.w	r3, r3, #8
 8000ab6:	6193      	str	r3, [r2, #24]
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <HAL_SPI_MspInit+0x90>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	f003 0308 	and.w	r3, r3, #8
 8000ac0:	60bb      	str	r3, [r7, #8]
 8000ac2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000ac4:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000ac8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad2:	f107 0310 	add.w	r3, r7, #16
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	480b      	ldr	r0, [pc, #44]	; (8000b08 <HAL_SPI_MspInit+0x94>)
 8000ada:	f000 fb6f 	bl	80011bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000ade:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ae2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aec:	f107 0310 	add.w	r3, r7, #16
 8000af0:	4619      	mov	r1, r3
 8000af2:	4805      	ldr	r0, [pc, #20]	; (8000b08 <HAL_SPI_MspInit+0x94>)
 8000af4:	f000 fb62 	bl	80011bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000af8:	bf00      	nop
 8000afa:	3720      	adds	r7, #32
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40003800 	.word	0x40003800
 8000b04:	40021000 	.word	0x40021000
 8000b08:	40010c00 	.word	0x40010c00

08000b0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b088      	sub	sp, #32
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b14:	f107 0310 	add.w	r3, r7, #16
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a1c      	ldr	r2, [pc, #112]	; (8000b98 <HAL_UART_MspInit+0x8c>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d131      	bne.n	8000b90 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b2c:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <HAL_UART_MspInit+0x90>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	4a1a      	ldr	r2, [pc, #104]	; (8000b9c <HAL_UART_MspInit+0x90>)
 8000b32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b36:	6193      	str	r3, [r2, #24]
 8000b38:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <HAL_UART_MspInit+0x90>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b44:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <HAL_UART_MspInit+0x90>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	4a14      	ldr	r2, [pc, #80]	; (8000b9c <HAL_UART_MspInit+0x90>)
 8000b4a:	f043 0304 	orr.w	r3, r3, #4
 8000b4e:	6193      	str	r3, [r2, #24]
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <HAL_UART_MspInit+0x90>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	f003 0304 	and.w	r3, r3, #4
 8000b58:	60bb      	str	r3, [r7, #8]
 8000b5a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b62:	2302      	movs	r3, #2
 8000b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b66:	2303      	movs	r3, #3
 8000b68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6a:	f107 0310 	add.w	r3, r7, #16
 8000b6e:	4619      	mov	r1, r3
 8000b70:	480b      	ldr	r0, [pc, #44]	; (8000ba0 <HAL_UART_MspInit+0x94>)
 8000b72:	f000 fb23 	bl	80011bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b84:	f107 0310 	add.w	r3, r7, #16
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <HAL_UART_MspInit+0x94>)
 8000b8c:	f000 fb16 	bl	80011bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000b90:	bf00      	nop
 8000b92:	3720      	adds	r7, #32
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40013800 	.word	0x40013800
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	40010800 	.word	0x40010800

08000ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <NMI_Handler+0x4>

08000baa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000baa:	b480      	push	{r7}
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bae:	e7fe      	b.n	8000bae <HardFault_Handler+0x4>

08000bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb4:	e7fe      	b.n	8000bb4 <MemManage_Handler+0x4>

08000bb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bba:	e7fe      	b.n	8000bba <BusFault_Handler+0x4>

08000bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc0:	e7fe      	b.n	8000bc0 <UsageFault_Handler+0x4>

08000bc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bc80      	pop	{r7}
 8000bcc:	4770      	bx	lr

08000bce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bc80      	pop	{r7}
 8000bd8:	4770      	bx	lr

08000bda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bda:	b480      	push	{r7}
 8000bdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bc80      	pop	{r7}
 8000be4:	4770      	bx	lr

08000be6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be6:	b580      	push	{r7, lr}
 8000be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bea:	f000 f8ab 	bl	8000d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
	...

08000bf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bfc:	4a14      	ldr	r2, [pc, #80]	; (8000c50 <_sbrk+0x5c>)
 8000bfe:	4b15      	ldr	r3, [pc, #84]	; (8000c54 <_sbrk+0x60>)
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c08:	4b13      	ldr	r3, [pc, #76]	; (8000c58 <_sbrk+0x64>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d102      	bne.n	8000c16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c10:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <_sbrk+0x64>)
 8000c12:	4a12      	ldr	r2, [pc, #72]	; (8000c5c <_sbrk+0x68>)
 8000c14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <_sbrk+0x64>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d207      	bcs.n	8000c34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c24:	f002 ffb8 	bl	8003b98 <__errno>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	220c      	movs	r2, #12
 8000c2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c32:	e009      	b.n	8000c48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c34:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <_sbrk+0x64>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c3a:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <_sbrk+0x64>)
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	4413      	add	r3, r2
 8000c42:	4a05      	ldr	r2, [pc, #20]	; (8000c58 <_sbrk+0x64>)
 8000c44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c46:	68fb      	ldr	r3, [r7, #12]
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3718      	adds	r7, #24
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20005000 	.word	0x20005000
 8000c54:	00000400 	.word	0x00000400
 8000c58:	200001d0 	.word	0x200001d0
 8000c5c:	200001e8 	.word	0x200001e8

08000c60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr

08000c6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c6c:	f7ff fff8 	bl	8000c60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c70:	480b      	ldr	r0, [pc, #44]	; (8000ca0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c72:	490c      	ldr	r1, [pc, #48]	; (8000ca4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c74:	4a0c      	ldr	r2, [pc, #48]	; (8000ca8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c78:	e002      	b.n	8000c80 <LoopCopyDataInit>

08000c7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c7e:	3304      	adds	r3, #4

08000c80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c84:	d3f9      	bcc.n	8000c7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c86:	4a09      	ldr	r2, [pc, #36]	; (8000cac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c88:	4c09      	ldr	r4, [pc, #36]	; (8000cb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c8c:	e001      	b.n	8000c92 <LoopFillZerobss>

08000c8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c90:	3204      	adds	r2, #4

08000c92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c94:	d3fb      	bcc.n	8000c8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c96:	f002 ff85 	bl	8003ba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c9a:	f7ff fc6f 	bl	800057c <main>
  bx lr
 8000c9e:	4770      	bx	lr
  ldr r0, =_sdata
 8000ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ca8:	08004594 	.word	0x08004594
  ldr r2, =_sbss
 8000cac:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000cb0:	200001e8 	.word	0x200001e8

08000cb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cb4:	e7fe      	b.n	8000cb4 <ADC1_2_IRQHandler>
	...

08000cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <HAL_Init+0x28>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a07      	ldr	r2, [pc, #28]	; (8000ce0 <HAL_Init+0x28>)
 8000cc2:	f043 0310 	orr.w	r3, r3, #16
 8000cc6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc8:	2003      	movs	r0, #3
 8000cca:	f000 fa27 	bl	800111c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cce:	200f      	movs	r0, #15
 8000cd0:	f000 f808 	bl	8000ce4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cd4:	f7ff fdf4 	bl	80008c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	40022000 	.word	0x40022000

08000ce4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cec:	4b12      	ldr	r3, [pc, #72]	; (8000d38 <HAL_InitTick+0x54>)
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <HAL_InitTick+0x58>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d02:	4618      	mov	r0, r3
 8000d04:	f000 fa31 	bl	800116a <HAL_SYSTICK_Config>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	e00e      	b.n	8000d30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2b0f      	cmp	r3, #15
 8000d16:	d80a      	bhi.n	8000d2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d18:	2200      	movs	r2, #0
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d20:	f000 fa07 	bl	8001132 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d24:	4a06      	ldr	r2, [pc, #24]	; (8000d40 <HAL_InitTick+0x5c>)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	e000      	b.n	8000d30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	20000004 	.word	0x20000004
 8000d3c:	2000000c 	.word	0x2000000c
 8000d40:	20000008 	.word	0x20000008

08000d44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <HAL_IncTick+0x1c>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <HAL_IncTick+0x20>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4413      	add	r3, r2
 8000d54:	4a03      	ldr	r2, [pc, #12]	; (8000d64 <HAL_IncTick+0x20>)
 8000d56:	6013      	str	r3, [r2, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr
 8000d60:	2000000c 	.word	0x2000000c
 8000d64:	200001d4 	.word	0x200001d4

08000d68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d6c:	4b02      	ldr	r3, [pc, #8]	; (8000d78 <HAL_GetTick+0x10>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr
 8000d78:	200001d4 	.word	0x200001d4

08000d7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d84:	f7ff fff0 	bl	8000d68 <HAL_GetTick>
 8000d88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d94:	d005      	beq.n	8000da2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <HAL_Delay+0x44>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4413      	add	r3, r2
 8000da0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000da2:	bf00      	nop
 8000da4:	f7ff ffe0 	bl	8000d68 <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	68bb      	ldr	r3, [r7, #8]
 8000dac:	1ad3      	subs	r3, r2, r3
 8000dae:	68fa      	ldr	r2, [r7, #12]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d8f7      	bhi.n	8000da4 <HAL_Delay+0x28>
  {
  }
}
 8000db4:	bf00      	nop
 8000db6:	bf00      	nop
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	2000000c 	.word	0x2000000c

08000dc4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d101      	bne.n	8000dd6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e0ed      	b.n	8000fb2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d102      	bne.n	8000de8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff fd9e 	bl	8000924 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f042 0201 	orr.w	r2, r2, #1
 8000df6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000df8:	f7ff ffb6 	bl	8000d68 <HAL_GetTick>
 8000dfc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000dfe:	e012      	b.n	8000e26 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e00:	f7ff ffb2 	bl	8000d68 <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	2b0a      	cmp	r3, #10
 8000e0c:	d90b      	bls.n	8000e26 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e12:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2205      	movs	r2, #5
 8000e1e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e0c5      	b.n	8000fb2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d0e5      	beq.n	8000e00 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f022 0202 	bic.w	r2, r2, #2
 8000e42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e44:	f7ff ff90 	bl	8000d68 <HAL_GetTick>
 8000e48:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e4a:	e012      	b.n	8000e72 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e4c:	f7ff ff8c 	bl	8000d68 <HAL_GetTick>
 8000e50:	4602      	mov	r2, r0
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	2b0a      	cmp	r3, #10
 8000e58:	d90b      	bls.n	8000e72 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2205      	movs	r2, #5
 8000e6a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e09f      	b.n	8000fb2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 0302 	and.w	r3, r3, #2
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d1e5      	bne.n	8000e4c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	7e1b      	ldrb	r3, [r3, #24]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d108      	bne.n	8000e9a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	e007      	b.n	8000eaa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ea8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	7e5b      	ldrb	r3, [r3, #25]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d108      	bne.n	8000ec4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	e007      	b.n	8000ed4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ed2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	7e9b      	ldrb	r3, [r3, #26]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d108      	bne.n	8000eee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f042 0220 	orr.w	r2, r2, #32
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	e007      	b.n	8000efe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f022 0220 	bic.w	r2, r2, #32
 8000efc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	7edb      	ldrb	r3, [r3, #27]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d108      	bne.n	8000f18 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f022 0210 	bic.w	r2, r2, #16
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	e007      	b.n	8000f28 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f042 0210 	orr.w	r2, r2, #16
 8000f26:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	7f1b      	ldrb	r3, [r3, #28]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d108      	bne.n	8000f42 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f042 0208 	orr.w	r2, r2, #8
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	e007      	b.n	8000f52 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f022 0208 	bic.w	r2, r2, #8
 8000f50:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	7f5b      	ldrb	r3, [r3, #29]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d108      	bne.n	8000f6c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f042 0204 	orr.w	r2, r2, #4
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	e007      	b.n	8000f7c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f022 0204 	bic.w	r2, r2, #4
 8000f7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689a      	ldr	r2, [r3, #8]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	431a      	orrs	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	691b      	ldr	r3, [r3, #16]
 8000f8a:	431a      	orrs	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	695b      	ldr	r3, [r3, #20]
 8000f90:	ea42 0103 	orr.w	r1, r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	1e5a      	subs	r2, r3, #1
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2201      	movs	r2, #1
 8000fac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fee:	4a04      	ldr	r2, [pc, #16]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	60d3      	str	r3, [r2, #12]
}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <__NVIC_GetPriorityGrouping+0x18>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	f003 0307 	and.w	r3, r3, #7
}
 8001012:	4618      	mov	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001030:	2b00      	cmp	r3, #0
 8001032:	db0a      	blt.n	800104a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	b2da      	uxtb	r2, r3
 8001038:	490c      	ldr	r1, [pc, #48]	; (800106c <__NVIC_SetPriority+0x4c>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	0112      	lsls	r2, r2, #4
 8001040:	b2d2      	uxtb	r2, r2
 8001042:	440b      	add	r3, r1
 8001044:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001048:	e00a      	b.n	8001060 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4908      	ldr	r1, [pc, #32]	; (8001070 <__NVIC_SetPriority+0x50>)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	f003 030f 	and.w	r3, r3, #15
 8001056:	3b04      	subs	r3, #4
 8001058:	0112      	lsls	r2, r2, #4
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	440b      	add	r3, r1
 800105e:	761a      	strb	r2, [r3, #24]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	bc80      	pop	{r7}
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	e000e100 	.word	0xe000e100
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001074:	b480      	push	{r7}
 8001076:	b089      	sub	sp, #36	; 0x24
 8001078:	af00      	add	r7, sp, #0
 800107a:	60f8      	str	r0, [r7, #12]
 800107c:	60b9      	str	r1, [r7, #8]
 800107e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	f1c3 0307 	rsb	r3, r3, #7
 800108e:	2b04      	cmp	r3, #4
 8001090:	bf28      	it	cs
 8001092:	2304      	movcs	r3, #4
 8001094:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3304      	adds	r3, #4
 800109a:	2b06      	cmp	r3, #6
 800109c:	d902      	bls.n	80010a4 <NVIC_EncodePriority+0x30>
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3b03      	subs	r3, #3
 80010a2:	e000      	b.n	80010a6 <NVIC_EncodePriority+0x32>
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43da      	mvns	r2, r3
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	401a      	ands	r2, r3
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010bc:	f04f 31ff 	mov.w	r1, #4294967295
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	fa01 f303 	lsl.w	r3, r1, r3
 80010c6:	43d9      	mvns	r1, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	4313      	orrs	r3, r2
         );
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3724      	adds	r7, #36	; 0x24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr

080010d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	3b01      	subs	r3, #1
 80010e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010e8:	d301      	bcc.n	80010ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ea:	2301      	movs	r3, #1
 80010ec:	e00f      	b.n	800110e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ee:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <SysTick_Config+0x40>)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010f6:	210f      	movs	r1, #15
 80010f8:	f04f 30ff 	mov.w	r0, #4294967295
 80010fc:	f7ff ff90 	bl	8001020 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <SysTick_Config+0x40>)
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001106:	4b04      	ldr	r3, [pc, #16]	; (8001118 <SysTick_Config+0x40>)
 8001108:	2207      	movs	r2, #7
 800110a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	e000e010 	.word	0xe000e010

0800111c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001124:	6878      	ldr	r0, [r7, #4]
 8001126:	f7ff ff49 	bl	8000fbc <__NVIC_SetPriorityGrouping>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001132:	b580      	push	{r7, lr}
 8001134:	b086      	sub	sp, #24
 8001136:	af00      	add	r7, sp, #0
 8001138:	4603      	mov	r3, r0
 800113a:	60b9      	str	r1, [r7, #8]
 800113c:	607a      	str	r2, [r7, #4]
 800113e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001144:	f7ff ff5e 	bl	8001004 <__NVIC_GetPriorityGrouping>
 8001148:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	68b9      	ldr	r1, [r7, #8]
 800114e:	6978      	ldr	r0, [r7, #20]
 8001150:	f7ff ff90 	bl	8001074 <NVIC_EncodePriority>
 8001154:	4602      	mov	r2, r0
 8001156:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800115a:	4611      	mov	r1, r2
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ff5f 	bl	8001020 <__NVIC_SetPriority>
}
 8001162:	bf00      	nop
 8001164:	3718      	adds	r7, #24
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff ffb0 	bl	80010d8 <SysTick_Config>
 8001178:	4603      	mov	r3, r0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b082      	sub	sp, #8
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d101      	bne.n	8001194 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e00e      	b.n	80011b2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	795b      	ldrb	r3, [r3, #5]
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	d105      	bne.n	80011aa <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80011a4:	6878      	ldr	r0, [r7, #4]
 80011a6:	f7ff fc09 	bl	80009bc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2201      	movs	r2, #1
 80011ae:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011bc:	b480      	push	{r7}
 80011be:	b08b      	sub	sp, #44	; 0x2c
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011c6:	2300      	movs	r3, #0
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80011ca:	2300      	movs	r3, #0
 80011cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ce:	e169      	b.n	80014a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80011d0:	2201      	movs	r2, #1
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	69fa      	ldr	r2, [r7, #28]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	f040 8158 	bne.w	800149e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	4a9a      	ldr	r2, [pc, #616]	; (800145c <HAL_GPIO_Init+0x2a0>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d05e      	beq.n	80012b6 <HAL_GPIO_Init+0xfa>
 80011f8:	4a98      	ldr	r2, [pc, #608]	; (800145c <HAL_GPIO_Init+0x2a0>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d875      	bhi.n	80012ea <HAL_GPIO_Init+0x12e>
 80011fe:	4a98      	ldr	r2, [pc, #608]	; (8001460 <HAL_GPIO_Init+0x2a4>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d058      	beq.n	80012b6 <HAL_GPIO_Init+0xfa>
 8001204:	4a96      	ldr	r2, [pc, #600]	; (8001460 <HAL_GPIO_Init+0x2a4>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d86f      	bhi.n	80012ea <HAL_GPIO_Init+0x12e>
 800120a:	4a96      	ldr	r2, [pc, #600]	; (8001464 <HAL_GPIO_Init+0x2a8>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d052      	beq.n	80012b6 <HAL_GPIO_Init+0xfa>
 8001210:	4a94      	ldr	r2, [pc, #592]	; (8001464 <HAL_GPIO_Init+0x2a8>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d869      	bhi.n	80012ea <HAL_GPIO_Init+0x12e>
 8001216:	4a94      	ldr	r2, [pc, #592]	; (8001468 <HAL_GPIO_Init+0x2ac>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d04c      	beq.n	80012b6 <HAL_GPIO_Init+0xfa>
 800121c:	4a92      	ldr	r2, [pc, #584]	; (8001468 <HAL_GPIO_Init+0x2ac>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d863      	bhi.n	80012ea <HAL_GPIO_Init+0x12e>
 8001222:	4a92      	ldr	r2, [pc, #584]	; (800146c <HAL_GPIO_Init+0x2b0>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d046      	beq.n	80012b6 <HAL_GPIO_Init+0xfa>
 8001228:	4a90      	ldr	r2, [pc, #576]	; (800146c <HAL_GPIO_Init+0x2b0>)
 800122a:	4293      	cmp	r3, r2
 800122c:	d85d      	bhi.n	80012ea <HAL_GPIO_Init+0x12e>
 800122e:	2b12      	cmp	r3, #18
 8001230:	d82a      	bhi.n	8001288 <HAL_GPIO_Init+0xcc>
 8001232:	2b12      	cmp	r3, #18
 8001234:	d859      	bhi.n	80012ea <HAL_GPIO_Init+0x12e>
 8001236:	a201      	add	r2, pc, #4	; (adr r2, 800123c <HAL_GPIO_Init+0x80>)
 8001238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800123c:	080012b7 	.word	0x080012b7
 8001240:	08001291 	.word	0x08001291
 8001244:	080012a3 	.word	0x080012a3
 8001248:	080012e5 	.word	0x080012e5
 800124c:	080012eb 	.word	0x080012eb
 8001250:	080012eb 	.word	0x080012eb
 8001254:	080012eb 	.word	0x080012eb
 8001258:	080012eb 	.word	0x080012eb
 800125c:	080012eb 	.word	0x080012eb
 8001260:	080012eb 	.word	0x080012eb
 8001264:	080012eb 	.word	0x080012eb
 8001268:	080012eb 	.word	0x080012eb
 800126c:	080012eb 	.word	0x080012eb
 8001270:	080012eb 	.word	0x080012eb
 8001274:	080012eb 	.word	0x080012eb
 8001278:	080012eb 	.word	0x080012eb
 800127c:	080012eb 	.word	0x080012eb
 8001280:	08001299 	.word	0x08001299
 8001284:	080012ad 	.word	0x080012ad
 8001288:	4a79      	ldr	r2, [pc, #484]	; (8001470 <HAL_GPIO_Init+0x2b4>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d013      	beq.n	80012b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800128e:	e02c      	b.n	80012ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	623b      	str	r3, [r7, #32]
          break;
 8001296:	e029      	b.n	80012ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	3304      	adds	r3, #4
 800129e:	623b      	str	r3, [r7, #32]
          break;
 80012a0:	e024      	b.n	80012ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	3308      	adds	r3, #8
 80012a8:	623b      	str	r3, [r7, #32]
          break;
 80012aa:	e01f      	b.n	80012ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	330c      	adds	r3, #12
 80012b2:	623b      	str	r3, [r7, #32]
          break;
 80012b4:	e01a      	b.n	80012ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d102      	bne.n	80012c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80012be:	2304      	movs	r3, #4
 80012c0:	623b      	str	r3, [r7, #32]
          break;
 80012c2:	e013      	b.n	80012ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d105      	bne.n	80012d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012cc:	2308      	movs	r3, #8
 80012ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	69fa      	ldr	r2, [r7, #28]
 80012d4:	611a      	str	r2, [r3, #16]
          break;
 80012d6:	e009      	b.n	80012ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80012d8:	2308      	movs	r3, #8
 80012da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	69fa      	ldr	r2, [r7, #28]
 80012e0:	615a      	str	r2, [r3, #20]
          break;
 80012e2:	e003      	b.n	80012ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80012e4:	2300      	movs	r3, #0
 80012e6:	623b      	str	r3, [r7, #32]
          break;
 80012e8:	e000      	b.n	80012ec <HAL_GPIO_Init+0x130>
          break;
 80012ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80012ec:	69bb      	ldr	r3, [r7, #24]
 80012ee:	2bff      	cmp	r3, #255	; 0xff
 80012f0:	d801      	bhi.n	80012f6 <HAL_GPIO_Init+0x13a>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	e001      	b.n	80012fa <HAL_GPIO_Init+0x13e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	3304      	adds	r3, #4
 80012fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	2bff      	cmp	r3, #255	; 0xff
 8001300:	d802      	bhi.n	8001308 <HAL_GPIO_Init+0x14c>
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	e002      	b.n	800130e <HAL_GPIO_Init+0x152>
 8001308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130a:	3b08      	subs	r3, #8
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	210f      	movs	r1, #15
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	fa01 f303 	lsl.w	r3, r1, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	401a      	ands	r2, r3
 8001320:	6a39      	ldr	r1, [r7, #32]
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	fa01 f303 	lsl.w	r3, r1, r3
 8001328:	431a      	orrs	r2, r3
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001336:	2b00      	cmp	r3, #0
 8001338:	f000 80b1 	beq.w	800149e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800133c:	4b4d      	ldr	r3, [pc, #308]	; (8001474 <HAL_GPIO_Init+0x2b8>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	4a4c      	ldr	r2, [pc, #304]	; (8001474 <HAL_GPIO_Init+0x2b8>)
 8001342:	f043 0301 	orr.w	r3, r3, #1
 8001346:	6193      	str	r3, [r2, #24]
 8001348:	4b4a      	ldr	r3, [pc, #296]	; (8001474 <HAL_GPIO_Init+0x2b8>)
 800134a:	699b      	ldr	r3, [r3, #24]
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001354:	4a48      	ldr	r2, [pc, #288]	; (8001478 <HAL_GPIO_Init+0x2bc>)
 8001356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001358:	089b      	lsrs	r3, r3, #2
 800135a:	3302      	adds	r3, #2
 800135c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001360:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001364:	f003 0303 	and.w	r3, r3, #3
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	220f      	movs	r2, #15
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	43db      	mvns	r3, r3
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	4013      	ands	r3, r2
 8001376:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	4a40      	ldr	r2, [pc, #256]	; (800147c <HAL_GPIO_Init+0x2c0>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d013      	beq.n	80013a8 <HAL_GPIO_Init+0x1ec>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a3f      	ldr	r2, [pc, #252]	; (8001480 <HAL_GPIO_Init+0x2c4>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d00d      	beq.n	80013a4 <HAL_GPIO_Init+0x1e8>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4a3e      	ldr	r2, [pc, #248]	; (8001484 <HAL_GPIO_Init+0x2c8>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d007      	beq.n	80013a0 <HAL_GPIO_Init+0x1e4>
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a3d      	ldr	r2, [pc, #244]	; (8001488 <HAL_GPIO_Init+0x2cc>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d101      	bne.n	800139c <HAL_GPIO_Init+0x1e0>
 8001398:	2303      	movs	r3, #3
 800139a:	e006      	b.n	80013aa <HAL_GPIO_Init+0x1ee>
 800139c:	2304      	movs	r3, #4
 800139e:	e004      	b.n	80013aa <HAL_GPIO_Init+0x1ee>
 80013a0:	2302      	movs	r3, #2
 80013a2:	e002      	b.n	80013aa <HAL_GPIO_Init+0x1ee>
 80013a4:	2301      	movs	r3, #1
 80013a6:	e000      	b.n	80013aa <HAL_GPIO_Init+0x1ee>
 80013a8:	2300      	movs	r3, #0
 80013aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013ac:	f002 0203 	and.w	r2, r2, #3
 80013b0:	0092      	lsls	r2, r2, #2
 80013b2:	4093      	lsls	r3, r2
 80013b4:	68fa      	ldr	r2, [r7, #12]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80013ba:	492f      	ldr	r1, [pc, #188]	; (8001478 <HAL_GPIO_Init+0x2bc>)
 80013bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013be:	089b      	lsrs	r3, r3, #2
 80013c0:	3302      	adds	r3, #2
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d006      	beq.n	80013e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013d4:	4b2d      	ldr	r3, [pc, #180]	; (800148c <HAL_GPIO_Init+0x2d0>)
 80013d6:	689a      	ldr	r2, [r3, #8]
 80013d8:	492c      	ldr	r1, [pc, #176]	; (800148c <HAL_GPIO_Init+0x2d0>)
 80013da:	69bb      	ldr	r3, [r7, #24]
 80013dc:	4313      	orrs	r3, r2
 80013de:	608b      	str	r3, [r1, #8]
 80013e0:	e006      	b.n	80013f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013e2:	4b2a      	ldr	r3, [pc, #168]	; (800148c <HAL_GPIO_Init+0x2d0>)
 80013e4:	689a      	ldr	r2, [r3, #8]
 80013e6:	69bb      	ldr	r3, [r7, #24]
 80013e8:	43db      	mvns	r3, r3
 80013ea:	4928      	ldr	r1, [pc, #160]	; (800148c <HAL_GPIO_Init+0x2d0>)
 80013ec:	4013      	ands	r3, r2
 80013ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d006      	beq.n	800140a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013fc:	4b23      	ldr	r3, [pc, #140]	; (800148c <HAL_GPIO_Init+0x2d0>)
 80013fe:	68da      	ldr	r2, [r3, #12]
 8001400:	4922      	ldr	r1, [pc, #136]	; (800148c <HAL_GPIO_Init+0x2d0>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	4313      	orrs	r3, r2
 8001406:	60cb      	str	r3, [r1, #12]
 8001408:	e006      	b.n	8001418 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800140a:	4b20      	ldr	r3, [pc, #128]	; (800148c <HAL_GPIO_Init+0x2d0>)
 800140c:	68da      	ldr	r2, [r3, #12]
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	43db      	mvns	r3, r3
 8001412:	491e      	ldr	r1, [pc, #120]	; (800148c <HAL_GPIO_Init+0x2d0>)
 8001414:	4013      	ands	r3, r2
 8001416:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d006      	beq.n	8001432 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001424:	4b19      	ldr	r3, [pc, #100]	; (800148c <HAL_GPIO_Init+0x2d0>)
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	4918      	ldr	r1, [pc, #96]	; (800148c <HAL_GPIO_Init+0x2d0>)
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	4313      	orrs	r3, r2
 800142e:	604b      	str	r3, [r1, #4]
 8001430:	e006      	b.n	8001440 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001432:	4b16      	ldr	r3, [pc, #88]	; (800148c <HAL_GPIO_Init+0x2d0>)
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	43db      	mvns	r3, r3
 800143a:	4914      	ldr	r1, [pc, #80]	; (800148c <HAL_GPIO_Init+0x2d0>)
 800143c:	4013      	ands	r3, r2
 800143e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d021      	beq.n	8001490 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800144c:	4b0f      	ldr	r3, [pc, #60]	; (800148c <HAL_GPIO_Init+0x2d0>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	490e      	ldr	r1, [pc, #56]	; (800148c <HAL_GPIO_Init+0x2d0>)
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	4313      	orrs	r3, r2
 8001456:	600b      	str	r3, [r1, #0]
 8001458:	e021      	b.n	800149e <HAL_GPIO_Init+0x2e2>
 800145a:	bf00      	nop
 800145c:	10320000 	.word	0x10320000
 8001460:	10310000 	.word	0x10310000
 8001464:	10220000 	.word	0x10220000
 8001468:	10210000 	.word	0x10210000
 800146c:	10120000 	.word	0x10120000
 8001470:	10110000 	.word	0x10110000
 8001474:	40021000 	.word	0x40021000
 8001478:	40010000 	.word	0x40010000
 800147c:	40010800 	.word	0x40010800
 8001480:	40010c00 	.word	0x40010c00
 8001484:	40011000 	.word	0x40011000
 8001488:	40011400 	.word	0x40011400
 800148c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001490:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <HAL_GPIO_Init+0x304>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	43db      	mvns	r3, r3
 8001498:	4909      	ldr	r1, [pc, #36]	; (80014c0 <HAL_GPIO_Init+0x304>)
 800149a:	4013      	ands	r3, r2
 800149c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800149e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a0:	3301      	adds	r3, #1
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014aa:	fa22 f303 	lsr.w	r3, r2, r3
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	f47f ae8e 	bne.w	80011d0 <HAL_GPIO_Init+0x14>
  }
}
 80014b4:	bf00      	nop
 80014b6:	bf00      	nop
 80014b8:	372c      	adds	r7, #44	; 0x2c
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr
 80014c0:	40010400 	.word	0x40010400

080014c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	460b      	mov	r3, r1
 80014ce:	807b      	strh	r3, [r7, #2]
 80014d0:	4613      	mov	r3, r2
 80014d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014d4:	787b      	ldrb	r3, [r7, #1]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014da:	887a      	ldrh	r2, [r7, #2]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80014e0:	e003      	b.n	80014ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80014e2:	887b      	ldrh	r3, [r7, #2]
 80014e4:	041a      	lsls	r2, r3, #16
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	611a      	str	r2, [r3, #16]
}
 80014ea:	bf00      	nop
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr

080014f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d101      	bne.n	8001506 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e12b      	b.n	800175e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	d106      	bne.n	8001520 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff fa6c 	bl	80009f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2224      	movs	r2, #36	; 0x24
 8001524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 0201 	bic.w	r2, r2, #1
 8001536:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001546:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001556:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001558:	f001 fa18 	bl	800298c <HAL_RCC_GetPCLK1Freq>
 800155c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	4a81      	ldr	r2, [pc, #516]	; (8001768 <HAL_I2C_Init+0x274>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d807      	bhi.n	8001578 <HAL_I2C_Init+0x84>
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	4a80      	ldr	r2, [pc, #512]	; (800176c <HAL_I2C_Init+0x278>)
 800156c:	4293      	cmp	r3, r2
 800156e:	bf94      	ite	ls
 8001570:	2301      	movls	r3, #1
 8001572:	2300      	movhi	r3, #0
 8001574:	b2db      	uxtb	r3, r3
 8001576:	e006      	b.n	8001586 <HAL_I2C_Init+0x92>
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4a7d      	ldr	r2, [pc, #500]	; (8001770 <HAL_I2C_Init+0x27c>)
 800157c:	4293      	cmp	r3, r2
 800157e:	bf94      	ite	ls
 8001580:	2301      	movls	r3, #1
 8001582:	2300      	movhi	r3, #0
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e0e7      	b.n	800175e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4a78      	ldr	r2, [pc, #480]	; (8001774 <HAL_I2C_Init+0x280>)
 8001592:	fba2 2303 	umull	r2, r3, r2, r3
 8001596:	0c9b      	lsrs	r3, r3, #18
 8001598:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	68ba      	ldr	r2, [r7, #8]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	4a6a      	ldr	r2, [pc, #424]	; (8001768 <HAL_I2C_Init+0x274>)
 80015be:	4293      	cmp	r3, r2
 80015c0:	d802      	bhi.n	80015c8 <HAL_I2C_Init+0xd4>
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	3301      	adds	r3, #1
 80015c6:	e009      	b.n	80015dc <HAL_I2C_Init+0xe8>
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80015ce:	fb02 f303 	mul.w	r3, r2, r3
 80015d2:	4a69      	ldr	r2, [pc, #420]	; (8001778 <HAL_I2C_Init+0x284>)
 80015d4:	fba2 2303 	umull	r2, r3, r2, r3
 80015d8:	099b      	lsrs	r3, r3, #6
 80015da:	3301      	adds	r3, #1
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	6812      	ldr	r2, [r2, #0]
 80015e0:	430b      	orrs	r3, r1
 80015e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80015ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	495c      	ldr	r1, [pc, #368]	; (8001768 <HAL_I2C_Init+0x274>)
 80015f8:	428b      	cmp	r3, r1
 80015fa:	d819      	bhi.n	8001630 <HAL_I2C_Init+0x13c>
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	1e59      	subs	r1, r3, #1
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	fbb1 f3f3 	udiv	r3, r1, r3
 800160a:	1c59      	adds	r1, r3, #1
 800160c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001610:	400b      	ands	r3, r1
 8001612:	2b00      	cmp	r3, #0
 8001614:	d00a      	beq.n	800162c <HAL_I2C_Init+0x138>
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	1e59      	subs	r1, r3, #1
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	fbb1 f3f3 	udiv	r3, r1, r3
 8001624:	3301      	adds	r3, #1
 8001626:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800162a:	e051      	b.n	80016d0 <HAL_I2C_Init+0x1dc>
 800162c:	2304      	movs	r3, #4
 800162e:	e04f      	b.n	80016d0 <HAL_I2C_Init+0x1dc>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d111      	bne.n	800165c <HAL_I2C_Init+0x168>
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	1e58      	subs	r0, r3, #1
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6859      	ldr	r1, [r3, #4]
 8001640:	460b      	mov	r3, r1
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	440b      	add	r3, r1
 8001646:	fbb0 f3f3 	udiv	r3, r0, r3
 800164a:	3301      	adds	r3, #1
 800164c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001650:	2b00      	cmp	r3, #0
 8001652:	bf0c      	ite	eq
 8001654:	2301      	moveq	r3, #1
 8001656:	2300      	movne	r3, #0
 8001658:	b2db      	uxtb	r3, r3
 800165a:	e012      	b.n	8001682 <HAL_I2C_Init+0x18e>
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	1e58      	subs	r0, r3, #1
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6859      	ldr	r1, [r3, #4]
 8001664:	460b      	mov	r3, r1
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	440b      	add	r3, r1
 800166a:	0099      	lsls	r1, r3, #2
 800166c:	440b      	add	r3, r1
 800166e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001672:	3301      	adds	r3, #1
 8001674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001678:	2b00      	cmp	r3, #0
 800167a:	bf0c      	ite	eq
 800167c:	2301      	moveq	r3, #1
 800167e:	2300      	movne	r3, #0
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <HAL_I2C_Init+0x196>
 8001686:	2301      	movs	r3, #1
 8001688:	e022      	b.n	80016d0 <HAL_I2C_Init+0x1dc>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d10e      	bne.n	80016b0 <HAL_I2C_Init+0x1bc>
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	1e58      	subs	r0, r3, #1
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6859      	ldr	r1, [r3, #4]
 800169a:	460b      	mov	r3, r1
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	440b      	add	r3, r1
 80016a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80016a4:	3301      	adds	r3, #1
 80016a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016ae:	e00f      	b.n	80016d0 <HAL_I2C_Init+0x1dc>
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	1e58      	subs	r0, r3, #1
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6859      	ldr	r1, [r3, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	440b      	add	r3, r1
 80016be:	0099      	lsls	r1, r3, #2
 80016c0:	440b      	add	r3, r1
 80016c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80016c6:	3301      	adds	r3, #1
 80016c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	6809      	ldr	r1, [r1, #0]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69da      	ldr	r2, [r3, #28]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	431a      	orrs	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80016fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001702:	687a      	ldr	r2, [r7, #4]
 8001704:	6911      	ldr	r1, [r2, #16]
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	68d2      	ldr	r2, [r2, #12]
 800170a:	4311      	orrs	r1, r2
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	6812      	ldr	r2, [r2, #0]
 8001710:	430b      	orrs	r3, r1
 8001712:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	695a      	ldr	r2, [r3, #20]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	431a      	orrs	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	430a      	orrs	r2, r1
 800172e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f042 0201 	orr.w	r2, r2, #1
 800173e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2220      	movs	r2, #32
 800174a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	000186a0 	.word	0x000186a0
 800176c:	001e847f 	.word	0x001e847f
 8001770:	003d08ff 	.word	0x003d08ff
 8001774:	431bde83 	.word	0x431bde83
 8001778:	10624dd3 	.word	0x10624dd3

0800177c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08c      	sub	sp, #48	; 0x30
 8001780:	af02      	add	r7, sp, #8
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	4608      	mov	r0, r1
 8001786:	4611      	mov	r1, r2
 8001788:	461a      	mov	r2, r3
 800178a:	4603      	mov	r3, r0
 800178c:	817b      	strh	r3, [r7, #10]
 800178e:	460b      	mov	r3, r1
 8001790:	813b      	strh	r3, [r7, #8]
 8001792:	4613      	mov	r3, r2
 8001794:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001796:	2300      	movs	r3, #0
 8001798:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800179a:	f7ff fae5 	bl	8000d68 <HAL_GetTick>
 800179e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b20      	cmp	r3, #32
 80017aa:	f040 8244 	bne.w	8001c36 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	2319      	movs	r3, #25
 80017b4:	2201      	movs	r2, #1
 80017b6:	4982      	ldr	r1, [pc, #520]	; (80019c0 <HAL_I2C_Mem_Read+0x244>)
 80017b8:	68f8      	ldr	r0, [r7, #12]
 80017ba:	f000 fb2f 	bl	8001e1c <I2C_WaitOnFlagUntilTimeout>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80017c4:	2302      	movs	r3, #2
 80017c6:	e237      	b.n	8001c38 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d101      	bne.n	80017d6 <HAL_I2C_Mem_Read+0x5a>
 80017d2:	2302      	movs	r3, #2
 80017d4:	e230      	b.n	8001c38 <HAL_I2C_Mem_Read+0x4bc>
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d007      	beq.n	80017fc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f042 0201 	orr.w	r2, r2, #1
 80017fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800180a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2222      	movs	r2, #34	; 0x22
 8001810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2240      	movs	r2, #64	; 0x40
 8001818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2200      	movs	r2, #0
 8001820:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001826:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800182c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001832:	b29a      	uxth	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4a62      	ldr	r2, [pc, #392]	; (80019c4 <HAL_I2C_Mem_Read+0x248>)
 800183c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800183e:	88f8      	ldrh	r0, [r7, #6]
 8001840:	893a      	ldrh	r2, [r7, #8]
 8001842:	8979      	ldrh	r1, [r7, #10]
 8001844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001846:	9301      	str	r3, [sp, #4]
 8001848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	4603      	mov	r3, r0
 800184e:	68f8      	ldr	r0, [r7, #12]
 8001850:	f000 f9fc 	bl	8001c4c <I2C_RequestMemoryRead>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e1ec      	b.n	8001c38 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001862:	2b00      	cmp	r3, #0
 8001864:	d113      	bne.n	800188e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001866:	2300      	movs	r3, #0
 8001868:	61fb      	str	r3, [r7, #28]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	61fb      	str	r3, [r7, #28]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	699b      	ldr	r3, [r3, #24]
 8001878:	61fb      	str	r3, [r7, #28]
 800187a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	e1c0      	b.n	8001c10 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001892:	2b01      	cmp	r3, #1
 8001894:	d11e      	bne.n	80018d4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80018a6:	b672      	cpsid	i
}
 80018a8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018aa:	2300      	movs	r3, #0
 80018ac:	61bb      	str	r3, [r7, #24]
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	61bb      	str	r3, [r7, #24]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	61bb      	str	r3, [r7, #24]
 80018be:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80018d0:	b662      	cpsie	i
}
 80018d2:	e035      	b.n	8001940 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d11e      	bne.n	800191a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80018ec:	b672      	cpsid	i
}
 80018ee:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	699b      	ldr	r3, [r3, #24]
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001914:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001916:	b662      	cpsie	i
}
 8001918:	e012      	b.n	8001940 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001928:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	695b      	ldr	r3, [r3, #20]
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001940:	e166      	b.n	8001c10 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001946:	2b03      	cmp	r3, #3
 8001948:	f200 811f 	bhi.w	8001b8a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001950:	2b01      	cmp	r3, #1
 8001952:	d123      	bne.n	800199c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001956:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001958:	68f8      	ldr	r0, [r7, #12]
 800195a:	f000 fbc1 	bl	80020e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e167      	b.n	8001c38 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	691a      	ldr	r2, [r3, #16]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001972:	b2d2      	uxtb	r2, r2
 8001974:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197a:	1c5a      	adds	r2, r3, #1
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001984:	3b01      	subs	r3, #1
 8001986:	b29a      	uxth	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001990:	b29b      	uxth	r3, r3
 8001992:	3b01      	subs	r3, #1
 8001994:	b29a      	uxth	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	855a      	strh	r2, [r3, #42]	; 0x2a
 800199a:	e139      	b.n	8001c10 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d152      	bne.n	8001a4a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80019a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019aa:	2200      	movs	r2, #0
 80019ac:	4906      	ldr	r1, [pc, #24]	; (80019c8 <HAL_I2C_Mem_Read+0x24c>)
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f000 fa34 	bl	8001e1c <I2C_WaitOnFlagUntilTimeout>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d008      	beq.n	80019cc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e13c      	b.n	8001c38 <HAL_I2C_Mem_Read+0x4bc>
 80019be:	bf00      	nop
 80019c0:	00100002 	.word	0x00100002
 80019c4:	ffff0000 	.word	0xffff0000
 80019c8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80019cc:	b672      	cpsid	i
}
 80019ce:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	691a      	ldr	r2, [r3, #16]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ea:	b2d2      	uxtb	r2, r2
 80019ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f2:	1c5a      	adds	r2, r3, #1
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019fc:	3b01      	subs	r3, #1
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001a12:	b662      	cpsie	i
}
 8001a14:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	691a      	ldr	r2, [r3, #16]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a20:	b2d2      	uxtb	r2, r2
 8001a22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a28:	1c5a      	adds	r2, r3, #1
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a32:	3b01      	subs	r3, #1
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	3b01      	subs	r3, #1
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001a48:	e0e2      	b.n	8001c10 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a50:	2200      	movs	r2, #0
 8001a52:	497b      	ldr	r1, [pc, #492]	; (8001c40 <HAL_I2C_Mem_Read+0x4c4>)
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f000 f9e1 	bl	8001e1c <I2C_WaitOnFlagUntilTimeout>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e0e9      	b.n	8001c38 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a72:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a74:	b672      	cpsid	i
}
 8001a76:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	691a      	ldr	r2, [r3, #16]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a94:	3b01      	subs	r3, #1
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001aaa:	4b66      	ldr	r3, [pc, #408]	; (8001c44 <HAL_I2C_Mem_Read+0x4c8>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	08db      	lsrs	r3, r3, #3
 8001ab0:	4a65      	ldr	r2, [pc, #404]	; (8001c48 <HAL_I2C_Mem_Read+0x4cc>)
 8001ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab6:	0a1a      	lsrs	r2, r3, #8
 8001ab8:	4613      	mov	r3, r2
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	00da      	lsls	r2, r3, #3
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001ac4:	6a3b      	ldr	r3, [r7, #32]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001aca:	6a3b      	ldr	r3, [r7, #32]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d118      	bne.n	8001b02 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2220      	movs	r2, #32
 8001ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f043 0220 	orr.w	r2, r3, #32
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001af2:	b662      	cpsie	i
}
 8001af4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e09a      	b.n	8001c38 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d1d9      	bne.n	8001ac4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	691a      	ldr	r2, [r3, #16]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b32:	1c5a      	adds	r2, r3, #1
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001b52:	b662      	cpsie	i
}
 8001b54:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	691a      	ldr	r2, [r3, #16]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	b2d2      	uxtb	r2, r2
 8001b62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	1c5a      	adds	r2, r3, #1
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b72:	3b01      	subs	r3, #1
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	3b01      	subs	r3, #1
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b88:	e042      	b.n	8001c10 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001b8e:	68f8      	ldr	r0, [r7, #12]
 8001b90:	f000 faa6 	bl	80020e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e04c      	b.n	8001c38 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	691a      	ldr	r2, [r3, #16]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	1c5a      	adds	r2, r3, #1
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	b29a      	uxth	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	f003 0304 	and.w	r3, r3, #4
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	d118      	bne.n	8001c10 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	691a      	ldr	r2, [r3, #16]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf0:	1c5a      	adds	r2, r3, #1
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f47f ae94 	bne.w	8001942 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	e000      	b.n	8001c38 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8001c36:	2302      	movs	r3, #2
  }
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3728      	adds	r7, #40	; 0x28
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	00010004 	.word	0x00010004
 8001c44:	20000004 	.word	0x20000004
 8001c48:	14f8b589 	.word	0x14f8b589

08001c4c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af02      	add	r7, sp, #8
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	4608      	mov	r0, r1
 8001c56:	4611      	mov	r1, r2
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	817b      	strh	r3, [r7, #10]
 8001c5e:	460b      	mov	r3, r1
 8001c60:	813b      	strh	r3, [r7, #8]
 8001c62:	4613      	mov	r3, r2
 8001c64:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c74:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	6a3b      	ldr	r3, [r7, #32]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f000 f8c2 	bl	8001e1c <I2C_WaitOnFlagUntilTimeout>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00d      	beq.n	8001cba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cac:	d103      	bne.n	8001cb6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cb4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e0aa      	b.n	8001e10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cba:	897b      	ldrh	r3, [r7, #10]
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001cc8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ccc:	6a3a      	ldr	r2, [r7, #32]
 8001cce:	4952      	ldr	r1, [pc, #328]	; (8001e18 <I2C_RequestMemoryRead+0x1cc>)
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f000 f91d 	bl	8001f10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e097      	b.n	8001e10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	695b      	ldr	r3, [r3, #20]
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	699b      	ldr	r3, [r3, #24]
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cf8:	6a39      	ldr	r1, [r7, #32]
 8001cfa:	68f8      	ldr	r0, [r7, #12]
 8001cfc:	f000 f9a8 	bl	8002050 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00d      	beq.n	8001d22 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	d107      	bne.n	8001d1e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e076      	b.n	8001e10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d22:	88fb      	ldrh	r3, [r7, #6]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d105      	bne.n	8001d34 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d28:	893b      	ldrh	r3, [r7, #8]
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	611a      	str	r2, [r3, #16]
 8001d32:	e021      	b.n	8001d78 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001d34:	893b      	ldrh	r3, [r7, #8]
 8001d36:	0a1b      	lsrs	r3, r3, #8
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d44:	6a39      	ldr	r1, [r7, #32]
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f000 f982 	bl	8002050 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00d      	beq.n	8001d6e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	d107      	bne.n	8001d6a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e050      	b.n	8001e10 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001d6e:	893b      	ldrh	r3, [r7, #8]
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d7a:	6a39      	ldr	r1, [r7, #32]
 8001d7c:	68f8      	ldr	r0, [r7, #12]
 8001d7e:	f000 f967 	bl	8002050 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d00d      	beq.n	8001da4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	2b04      	cmp	r3, #4
 8001d8e:	d107      	bne.n	8001da0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d9e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e035      	b.n	8001e10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001db2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	6a3b      	ldr	r3, [r7, #32]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f000 f82b 	bl	8001e1c <I2C_WaitOnFlagUntilTimeout>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00d      	beq.n	8001de8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dda:	d103      	bne.n	8001de4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001de2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e013      	b.n	8001e10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001de8:	897b      	ldrh	r3, [r7, #10]
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	6a3a      	ldr	r2, [r7, #32]
 8001dfc:	4906      	ldr	r1, [pc, #24]	; (8001e18 <I2C_RequestMemoryRead+0x1cc>)
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f000 f886 	bl	8001f10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e000      	b.n	8001e10 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001e0e:	2300      	movs	r3, #0
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	00010002 	.word	0x00010002

08001e1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	603b      	str	r3, [r7, #0]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e2c:	e048      	b.n	8001ec0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e34:	d044      	beq.n	8001ec0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e36:	f7fe ff97 	bl	8000d68 <HAL_GetTick>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d302      	bcc.n	8001e4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d139      	bne.n	8001ec0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	0c1b      	lsrs	r3, r3, #16
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d10d      	bne.n	8001e72 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	43da      	mvns	r2, r3
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	4013      	ands	r3, r2
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	bf0c      	ite	eq
 8001e68:	2301      	moveq	r3, #1
 8001e6a:	2300      	movne	r3, #0
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	461a      	mov	r2, r3
 8001e70:	e00c      	b.n	8001e8c <I2C_WaitOnFlagUntilTimeout+0x70>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	43da      	mvns	r2, r3
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	bf0c      	ite	eq
 8001e84:	2301      	moveq	r3, #1
 8001e86:	2300      	movne	r3, #0
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d116      	bne.n	8001ec0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2200      	movs	r2, #0
 8001e96:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eac:	f043 0220 	orr.w	r2, r3, #32
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e023      	b.n	8001f08 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	0c1b      	lsrs	r3, r3, #16
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d10d      	bne.n	8001ee6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	695b      	ldr	r3, [r3, #20]
 8001ed0:	43da      	mvns	r2, r3
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	bf0c      	ite	eq
 8001edc:	2301      	moveq	r3, #1
 8001ede:	2300      	movne	r3, #0
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	e00c      	b.n	8001f00 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	43da      	mvns	r2, r3
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	bf0c      	ite	eq
 8001ef8:	2301      	moveq	r3, #1
 8001efa:	2300      	movne	r3, #0
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	461a      	mov	r2, r3
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d093      	beq.n	8001e2e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3710      	adds	r7, #16
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
 8001f1c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f1e:	e071      	b.n	8002004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f2e:	d123      	bne.n	8001f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f3e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2220      	movs	r2, #32
 8001f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	f043 0204 	orr.w	r2, r3, #4
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e067      	b.n	8002048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f7e:	d041      	beq.n	8002004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f80:	f7fe fef2 	bl	8000d68 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d302      	bcc.n	8001f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d136      	bne.n	8002004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	0c1b      	lsrs	r3, r3, #16
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d10c      	bne.n	8001fba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	43da      	mvns	r2, r3
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	4013      	ands	r3, r2
 8001fac:	b29b      	uxth	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	bf14      	ite	ne
 8001fb2:	2301      	movne	r3, #1
 8001fb4:	2300      	moveq	r3, #0
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	e00b      	b.n	8001fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	43da      	mvns	r2, r3
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	bf14      	ite	ne
 8001fcc:	2301      	movne	r3, #1
 8001fce:	2300      	moveq	r3, #0
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d016      	beq.n	8002004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2220      	movs	r2, #32
 8001fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	f043 0220 	orr.w	r2, r3, #32
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e021      	b.n	8002048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	0c1b      	lsrs	r3, r3, #16
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b01      	cmp	r3, #1
 800200c:	d10c      	bne.n	8002028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	43da      	mvns	r2, r3
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	4013      	ands	r3, r2
 800201a:	b29b      	uxth	r3, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	bf14      	ite	ne
 8002020:	2301      	movne	r3, #1
 8002022:	2300      	moveq	r3, #0
 8002024:	b2db      	uxtb	r3, r3
 8002026:	e00b      	b.n	8002040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	43da      	mvns	r2, r3
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	4013      	ands	r3, r2
 8002034:	b29b      	uxth	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	bf14      	ite	ne
 800203a:	2301      	movne	r3, #1
 800203c:	2300      	moveq	r3, #0
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b00      	cmp	r3, #0
 8002042:	f47f af6d 	bne.w	8001f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800205c:	e034      	b.n	80020c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f000 f89b 	bl	800219a <I2C_IsAcknowledgeFailed>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e034      	b.n	80020d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002074:	d028      	beq.n	80020c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002076:	f7fe fe77 	bl	8000d68 <HAL_GetTick>
 800207a:	4602      	mov	r2, r0
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	68ba      	ldr	r2, [r7, #8]
 8002082:	429a      	cmp	r2, r3
 8002084:	d302      	bcc.n	800208c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d11d      	bne.n	80020c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002096:	2b80      	cmp	r3, #128	; 0x80
 8002098:	d016      	beq.n	80020c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2220      	movs	r2, #32
 80020a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b4:	f043 0220 	orr.w	r2, r3, #32
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e007      	b.n	80020d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d2:	2b80      	cmp	r3, #128	; 0x80
 80020d4:	d1c3      	bne.n	800205e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80020ec:	e049      	b.n	8002182 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	f003 0310 	and.w	r3, r3, #16
 80020f8:	2b10      	cmp	r3, #16
 80020fa:	d119      	bne.n	8002130 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f06f 0210 	mvn.w	r2, #16
 8002104:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2220      	movs	r2, #32
 8002110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e030      	b.n	8002192 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002130:	f7fe fe1a 	bl	8000d68 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	68ba      	ldr	r2, [r7, #8]
 800213c:	429a      	cmp	r2, r3
 800213e:	d302      	bcc.n	8002146 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d11d      	bne.n	8002182 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	695b      	ldr	r3, [r3, #20]
 800214c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002150:	2b40      	cmp	r3, #64	; 0x40
 8002152:	d016      	beq.n	8002182 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	2200      	movs	r2, #0
 8002158:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2220      	movs	r2, #32
 800215e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	f043 0220 	orr.w	r2, r3, #32
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e007      	b.n	8002192 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800218c:	2b40      	cmp	r3, #64	; 0x40
 800218e:	d1ae      	bne.n	80020ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021b0:	d11b      	bne.n	80021ea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80021ba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2220      	movs	r2, #32
 80021c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f043 0204 	orr.w	r2, r3, #4
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e000      	b.n	80021ec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bc80      	pop	{r7}
 80021f4:	4770      	bx	lr
	...

080021f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e272      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 8087 	beq.w	8002326 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002218:	4b92      	ldr	r3, [pc, #584]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 030c 	and.w	r3, r3, #12
 8002220:	2b04      	cmp	r3, #4
 8002222:	d00c      	beq.n	800223e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002224:	4b8f      	ldr	r3, [pc, #572]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 030c 	and.w	r3, r3, #12
 800222c:	2b08      	cmp	r3, #8
 800222e:	d112      	bne.n	8002256 <HAL_RCC_OscConfig+0x5e>
 8002230:	4b8c      	ldr	r3, [pc, #560]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800223c:	d10b      	bne.n	8002256 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800223e:	4b89      	ldr	r3, [pc, #548]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d06c      	beq.n	8002324 <HAL_RCC_OscConfig+0x12c>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d168      	bne.n	8002324 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e24c      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800225e:	d106      	bne.n	800226e <HAL_RCC_OscConfig+0x76>
 8002260:	4b80      	ldr	r3, [pc, #512]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a7f      	ldr	r2, [pc, #508]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	e02e      	b.n	80022cc <HAL_RCC_OscConfig+0xd4>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10c      	bne.n	8002290 <HAL_RCC_OscConfig+0x98>
 8002276:	4b7b      	ldr	r3, [pc, #492]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a7a      	ldr	r2, [pc, #488]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 800227c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002280:	6013      	str	r3, [r2, #0]
 8002282:	4b78      	ldr	r3, [pc, #480]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a77      	ldr	r2, [pc, #476]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002288:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	e01d      	b.n	80022cc <HAL_RCC_OscConfig+0xd4>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002298:	d10c      	bne.n	80022b4 <HAL_RCC_OscConfig+0xbc>
 800229a:	4b72      	ldr	r3, [pc, #456]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a71      	ldr	r2, [pc, #452]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	4b6f      	ldr	r3, [pc, #444]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a6e      	ldr	r2, [pc, #440]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	e00b      	b.n	80022cc <HAL_RCC_OscConfig+0xd4>
 80022b4:	4b6b      	ldr	r3, [pc, #428]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a6a      	ldr	r2, [pc, #424]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	4b68      	ldr	r3, [pc, #416]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a67      	ldr	r2, [pc, #412]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d013      	beq.n	80022fc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d4:	f7fe fd48 	bl	8000d68 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022dc:	f7fe fd44 	bl	8000d68 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b64      	cmp	r3, #100	; 0x64
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e200      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ee:	4b5d      	ldr	r3, [pc, #372]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0xe4>
 80022fa:	e014      	b.n	8002326 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022fc:	f7fe fd34 	bl	8000d68 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002304:	f7fe fd30 	bl	8000d68 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b64      	cmp	r3, #100	; 0x64
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e1ec      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002316:	4b53      	ldr	r3, [pc, #332]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0x10c>
 8002322:	e000      	b.n	8002326 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d063      	beq.n	80023fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002332:	4b4c      	ldr	r3, [pc, #304]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 030c 	and.w	r3, r3, #12
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00b      	beq.n	8002356 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800233e:	4b49      	ldr	r3, [pc, #292]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 030c 	and.w	r3, r3, #12
 8002346:	2b08      	cmp	r3, #8
 8002348:	d11c      	bne.n	8002384 <HAL_RCC_OscConfig+0x18c>
 800234a:	4b46      	ldr	r3, [pc, #280]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d116      	bne.n	8002384 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002356:	4b43      	ldr	r3, [pc, #268]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d005      	beq.n	800236e <HAL_RCC_OscConfig+0x176>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	2b01      	cmp	r3, #1
 8002368:	d001      	beq.n	800236e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e1c0      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236e:	4b3d      	ldr	r3, [pc, #244]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4939      	ldr	r1, [pc, #228]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 800237e:	4313      	orrs	r3, r2
 8002380:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002382:	e03a      	b.n	80023fa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d020      	beq.n	80023ce <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800238c:	4b36      	ldr	r3, [pc, #216]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 800238e:	2201      	movs	r2, #1
 8002390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002392:	f7fe fce9 	bl	8000d68 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239a:	f7fe fce5 	bl	8000d68 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e1a1      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ac:	4b2d      	ldr	r3, [pc, #180]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d0f0      	beq.n	800239a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b8:	4b2a      	ldr	r3, [pc, #168]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	695b      	ldr	r3, [r3, #20]
 80023c4:	00db      	lsls	r3, r3, #3
 80023c6:	4927      	ldr	r1, [pc, #156]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	600b      	str	r3, [r1, #0]
 80023cc:	e015      	b.n	80023fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ce:	4b26      	ldr	r3, [pc, #152]	; (8002468 <HAL_RCC_OscConfig+0x270>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d4:	f7fe fcc8 	bl	8000d68 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023dc:	f7fe fcc4 	bl	8000d68 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e180      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ee:	4b1d      	ldr	r3, [pc, #116]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	2b00      	cmp	r3, #0
 8002404:	d03a      	beq.n	800247c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d019      	beq.n	8002442 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800240e:	4b17      	ldr	r3, [pc, #92]	; (800246c <HAL_RCC_OscConfig+0x274>)
 8002410:	2201      	movs	r2, #1
 8002412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002414:	f7fe fca8 	bl	8000d68 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800241c:	f7fe fca4 	bl	8000d68 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e160      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800242e:	4b0d      	ldr	r3, [pc, #52]	; (8002464 <HAL_RCC_OscConfig+0x26c>)
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800243a:	2001      	movs	r0, #1
 800243c:	f000 face 	bl	80029dc <RCC_Delay>
 8002440:	e01c      	b.n	800247c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002442:	4b0a      	ldr	r3, [pc, #40]	; (800246c <HAL_RCC_OscConfig+0x274>)
 8002444:	2200      	movs	r2, #0
 8002446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002448:	f7fe fc8e 	bl	8000d68 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800244e:	e00f      	b.n	8002470 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002450:	f7fe fc8a 	bl	8000d68 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d908      	bls.n	8002470 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e146      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
 8002462:	bf00      	nop
 8002464:	40021000 	.word	0x40021000
 8002468:	42420000 	.word	0x42420000
 800246c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002470:	4b92      	ldr	r3, [pc, #584]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1e9      	bne.n	8002450 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 80a6 	beq.w	80025d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800248a:	2300      	movs	r3, #0
 800248c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800248e:	4b8b      	ldr	r3, [pc, #556]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10d      	bne.n	80024b6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800249a:	4b88      	ldr	r3, [pc, #544]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 800249c:	69db      	ldr	r3, [r3, #28]
 800249e:	4a87      	ldr	r2, [pc, #540]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 80024a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024a4:	61d3      	str	r3, [r2, #28]
 80024a6:	4b85      	ldr	r3, [pc, #532]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ae:	60bb      	str	r3, [r7, #8]
 80024b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024b2:	2301      	movs	r3, #1
 80024b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b6:	4b82      	ldr	r3, [pc, #520]	; (80026c0 <HAL_RCC_OscConfig+0x4c8>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d118      	bne.n	80024f4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024c2:	4b7f      	ldr	r3, [pc, #508]	; (80026c0 <HAL_RCC_OscConfig+0x4c8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a7e      	ldr	r2, [pc, #504]	; (80026c0 <HAL_RCC_OscConfig+0x4c8>)
 80024c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ce:	f7fe fc4b 	bl	8000d68 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d6:	f7fe fc47 	bl	8000d68 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b64      	cmp	r3, #100	; 0x64
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e103      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e8:	4b75      	ldr	r3, [pc, #468]	; (80026c0 <HAL_RCC_OscConfig+0x4c8>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0f0      	beq.n	80024d6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d106      	bne.n	800250a <HAL_RCC_OscConfig+0x312>
 80024fc:	4b6f      	ldr	r3, [pc, #444]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	4a6e      	ldr	r2, [pc, #440]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	6213      	str	r3, [r2, #32]
 8002508:	e02d      	b.n	8002566 <HAL_RCC_OscConfig+0x36e>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10c      	bne.n	800252c <HAL_RCC_OscConfig+0x334>
 8002512:	4b6a      	ldr	r3, [pc, #424]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	4a69      	ldr	r2, [pc, #420]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002518:	f023 0301 	bic.w	r3, r3, #1
 800251c:	6213      	str	r3, [r2, #32]
 800251e:	4b67      	ldr	r3, [pc, #412]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002520:	6a1b      	ldr	r3, [r3, #32]
 8002522:	4a66      	ldr	r2, [pc, #408]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002524:	f023 0304 	bic.w	r3, r3, #4
 8002528:	6213      	str	r3, [r2, #32]
 800252a:	e01c      	b.n	8002566 <HAL_RCC_OscConfig+0x36e>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	2b05      	cmp	r3, #5
 8002532:	d10c      	bne.n	800254e <HAL_RCC_OscConfig+0x356>
 8002534:	4b61      	ldr	r3, [pc, #388]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	4a60      	ldr	r2, [pc, #384]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 800253a:	f043 0304 	orr.w	r3, r3, #4
 800253e:	6213      	str	r3, [r2, #32]
 8002540:	4b5e      	ldr	r3, [pc, #376]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002542:	6a1b      	ldr	r3, [r3, #32]
 8002544:	4a5d      	ldr	r2, [pc, #372]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002546:	f043 0301 	orr.w	r3, r3, #1
 800254a:	6213      	str	r3, [r2, #32]
 800254c:	e00b      	b.n	8002566 <HAL_RCC_OscConfig+0x36e>
 800254e:	4b5b      	ldr	r3, [pc, #364]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	4a5a      	ldr	r2, [pc, #360]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002554:	f023 0301 	bic.w	r3, r3, #1
 8002558:	6213      	str	r3, [r2, #32]
 800255a:	4b58      	ldr	r3, [pc, #352]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	4a57      	ldr	r2, [pc, #348]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002560:	f023 0304 	bic.w	r3, r3, #4
 8002564:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d015      	beq.n	800259a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256e:	f7fe fbfb 	bl	8000d68 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002574:	e00a      	b.n	800258c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002576:	f7fe fbf7 	bl	8000d68 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	f241 3288 	movw	r2, #5000	; 0x1388
 8002584:	4293      	cmp	r3, r2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e0b1      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800258c:	4b4b      	ldr	r3, [pc, #300]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0ee      	beq.n	8002576 <HAL_RCC_OscConfig+0x37e>
 8002598:	e014      	b.n	80025c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259a:	f7fe fbe5 	bl	8000d68 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025a0:	e00a      	b.n	80025b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a2:	f7fe fbe1 	bl	8000d68 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e09b      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b8:	4b40      	ldr	r3, [pc, #256]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 80025ba:	6a1b      	ldr	r3, [r3, #32]
 80025bc:	f003 0302 	and.w	r3, r3, #2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1ee      	bne.n	80025a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025c4:	7dfb      	ldrb	r3, [r7, #23]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d105      	bne.n	80025d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ca:	4b3c      	ldr	r3, [pc, #240]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	4a3b      	ldr	r2, [pc, #236]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 80025d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 8087 	beq.w	80026ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025e0:	4b36      	ldr	r3, [pc, #216]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f003 030c 	and.w	r3, r3, #12
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	d061      	beq.n	80026b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d146      	bne.n	8002682 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f4:	4b33      	ldr	r3, [pc, #204]	; (80026c4 <HAL_RCC_OscConfig+0x4cc>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fa:	f7fe fbb5 	bl	8000d68 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002602:	f7fe fbb1 	bl	8000d68 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e06d      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002614:	4b29      	ldr	r3, [pc, #164]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1f0      	bne.n	8002602 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002628:	d108      	bne.n	800263c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800262a:	4b24      	ldr	r3, [pc, #144]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	4921      	ldr	r1, [pc, #132]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002638:	4313      	orrs	r3, r2
 800263a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800263c:	4b1f      	ldr	r3, [pc, #124]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a19      	ldr	r1, [r3, #32]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	430b      	orrs	r3, r1
 800264e:	491b      	ldr	r1, [pc, #108]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002650:	4313      	orrs	r3, r2
 8002652:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002654:	4b1b      	ldr	r3, [pc, #108]	; (80026c4 <HAL_RCC_OscConfig+0x4cc>)
 8002656:	2201      	movs	r2, #1
 8002658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265a:	f7fe fb85 	bl	8000d68 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002662:	f7fe fb81 	bl	8000d68 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e03d      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002674:	4b11      	ldr	r3, [pc, #68]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0f0      	beq.n	8002662 <HAL_RCC_OscConfig+0x46a>
 8002680:	e035      	b.n	80026ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002682:	4b10      	ldr	r3, [pc, #64]	; (80026c4 <HAL_RCC_OscConfig+0x4cc>)
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002688:	f7fe fb6e 	bl	8000d68 <HAL_GetTick>
 800268c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800268e:	e008      	b.n	80026a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002690:	f7fe fb6a 	bl	8000d68 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e026      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a2:	4b06      	ldr	r3, [pc, #24]	; (80026bc <HAL_RCC_OscConfig+0x4c4>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d1f0      	bne.n	8002690 <HAL_RCC_OscConfig+0x498>
 80026ae:	e01e      	b.n	80026ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d107      	bne.n	80026c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e019      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
 80026bc:	40021000 	.word	0x40021000
 80026c0:	40007000 	.word	0x40007000
 80026c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026c8:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <HAL_RCC_OscConfig+0x500>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	429a      	cmp	r2, r3
 80026da:	d106      	bne.n	80026ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d001      	beq.n	80026ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026ee:	2300      	movs	r3, #0
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	40021000 	.word	0x40021000

080026fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e0d0      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002710:	4b6a      	ldr	r3, [pc, #424]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d910      	bls.n	8002740 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271e:	4b67      	ldr	r3, [pc, #412]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 0207 	bic.w	r2, r3, #7
 8002726:	4965      	ldr	r1, [pc, #404]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	4313      	orrs	r3, r2
 800272c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800272e:	4b63      	ldr	r3, [pc, #396]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d001      	beq.n	8002740 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e0b8      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d020      	beq.n	800278e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	d005      	beq.n	8002764 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002758:	4b59      	ldr	r3, [pc, #356]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	4a58      	ldr	r2, [pc, #352]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800275e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002762:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0308 	and.w	r3, r3, #8
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002770:	4b53      	ldr	r3, [pc, #332]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	4a52      	ldr	r2, [pc, #328]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002776:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800277a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800277c:	4b50      	ldr	r3, [pc, #320]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	494d      	ldr	r1, [pc, #308]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800278a:	4313      	orrs	r3, r2
 800278c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b00      	cmp	r3, #0
 8002798:	d040      	beq.n	800281c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d107      	bne.n	80027b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027a2:	4b47      	ldr	r3, [pc, #284]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d115      	bne.n	80027da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e07f      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d107      	bne.n	80027ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ba:	4b41      	ldr	r3, [pc, #260]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d109      	bne.n	80027da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e073      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ca:	4b3d      	ldr	r3, [pc, #244]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e06b      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027da:	4b39      	ldr	r3, [pc, #228]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f023 0203 	bic.w	r2, r3, #3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	4936      	ldr	r1, [pc, #216]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027ec:	f7fe fabc 	bl	8000d68 <HAL_GetTick>
 80027f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f2:	e00a      	b.n	800280a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f4:	f7fe fab8 	bl	8000d68 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002802:	4293      	cmp	r3, r2
 8002804:	d901      	bls.n	800280a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e053      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280a:	4b2d      	ldr	r3, [pc, #180]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f003 020c 	and.w	r2, r3, #12
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	429a      	cmp	r2, r3
 800281a:	d1eb      	bne.n	80027f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800281c:	4b27      	ldr	r3, [pc, #156]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	429a      	cmp	r2, r3
 8002828:	d210      	bcs.n	800284c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282a:	4b24      	ldr	r3, [pc, #144]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f023 0207 	bic.w	r2, r3, #7
 8002832:	4922      	ldr	r1, [pc, #136]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	4313      	orrs	r3, r2
 8002838:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800283a:	4b20      	ldr	r3, [pc, #128]	; (80028bc <HAL_RCC_ClockConfig+0x1c0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	683a      	ldr	r2, [r7, #0]
 8002844:	429a      	cmp	r2, r3
 8002846:	d001      	beq.n	800284c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e032      	b.n	80028b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	d008      	beq.n	800286a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002858:	4b19      	ldr	r3, [pc, #100]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	4916      	ldr	r1, [pc, #88]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002866:	4313      	orrs	r3, r2
 8002868:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0308 	and.w	r3, r3, #8
 8002872:	2b00      	cmp	r3, #0
 8002874:	d009      	beq.n	800288a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002876:	4b12      	ldr	r3, [pc, #72]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	490e      	ldr	r1, [pc, #56]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002886:	4313      	orrs	r3, r2
 8002888:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800288a:	f000 f821 	bl	80028d0 <HAL_RCC_GetSysClockFreq>
 800288e:	4602      	mov	r2, r0
 8002890:	4b0b      	ldr	r3, [pc, #44]	; (80028c0 <HAL_RCC_ClockConfig+0x1c4>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	091b      	lsrs	r3, r3, #4
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	490a      	ldr	r1, [pc, #40]	; (80028c4 <HAL_RCC_ClockConfig+0x1c8>)
 800289c:	5ccb      	ldrb	r3, [r1, r3]
 800289e:	fa22 f303 	lsr.w	r3, r2, r3
 80028a2:	4a09      	ldr	r2, [pc, #36]	; (80028c8 <HAL_RCC_ClockConfig+0x1cc>)
 80028a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028a6:	4b09      	ldr	r3, [pc, #36]	; (80028cc <HAL_RCC_ClockConfig+0x1d0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fe fa1a 	bl	8000ce4 <HAL_InitTick>

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40022000 	.word	0x40022000
 80028c0:	40021000 	.word	0x40021000
 80028c4:	0800452c 	.word	0x0800452c
 80028c8:	20000004 	.word	0x20000004
 80028cc:	20000008 	.word	0x20000008

080028d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b087      	sub	sp, #28
 80028d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028d6:	2300      	movs	r3, #0
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	2300      	movs	r3, #0
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	2300      	movs	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]
 80028e2:	2300      	movs	r3, #0
 80028e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028e6:	2300      	movs	r3, #0
 80028e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028ea:	4b1e      	ldr	r3, [pc, #120]	; (8002964 <HAL_RCC_GetSysClockFreq+0x94>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f003 030c 	and.w	r3, r3, #12
 80028f6:	2b04      	cmp	r3, #4
 80028f8:	d002      	beq.n	8002900 <HAL_RCC_GetSysClockFreq+0x30>
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d003      	beq.n	8002906 <HAL_RCC_GetSysClockFreq+0x36>
 80028fe:	e027      	b.n	8002950 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002900:	4b19      	ldr	r3, [pc, #100]	; (8002968 <HAL_RCC_GetSysClockFreq+0x98>)
 8002902:	613b      	str	r3, [r7, #16]
      break;
 8002904:	e027      	b.n	8002956 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	0c9b      	lsrs	r3, r3, #18
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	4a17      	ldr	r2, [pc, #92]	; (800296c <HAL_RCC_GetSysClockFreq+0x9c>)
 8002910:	5cd3      	ldrb	r3, [r2, r3]
 8002912:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d010      	beq.n	8002940 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800291e:	4b11      	ldr	r3, [pc, #68]	; (8002964 <HAL_RCC_GetSysClockFreq+0x94>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	0c5b      	lsrs	r3, r3, #17
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	4a11      	ldr	r2, [pc, #68]	; (8002970 <HAL_RCC_GetSysClockFreq+0xa0>)
 800292a:	5cd3      	ldrb	r3, [r2, r3]
 800292c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a0d      	ldr	r2, [pc, #52]	; (8002968 <HAL_RCC_GetSysClockFreq+0x98>)
 8002932:	fb03 f202 	mul.w	r2, r3, r2
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	fbb2 f3f3 	udiv	r3, r2, r3
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	e004      	b.n	800294a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a0c      	ldr	r2, [pc, #48]	; (8002974 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002944:	fb02 f303 	mul.w	r3, r2, r3
 8002948:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	613b      	str	r3, [r7, #16]
      break;
 800294e:	e002      	b.n	8002956 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002950:	4b05      	ldr	r3, [pc, #20]	; (8002968 <HAL_RCC_GetSysClockFreq+0x98>)
 8002952:	613b      	str	r3, [r7, #16]
      break;
 8002954:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002956:	693b      	ldr	r3, [r7, #16]
}
 8002958:	4618      	mov	r0, r3
 800295a:	371c      	adds	r7, #28
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40021000 	.word	0x40021000
 8002968:	007a1200 	.word	0x007a1200
 800296c:	08004544 	.word	0x08004544
 8002970:	08004554 	.word	0x08004554
 8002974:	003d0900 	.word	0x003d0900

08002978 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800297c:	4b02      	ldr	r3, [pc, #8]	; (8002988 <HAL_RCC_GetHCLKFreq+0x10>)
 800297e:	681b      	ldr	r3, [r3, #0]
}
 8002980:	4618      	mov	r0, r3
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr
 8002988:	20000004 	.word	0x20000004

0800298c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002990:	f7ff fff2 	bl	8002978 <HAL_RCC_GetHCLKFreq>
 8002994:	4602      	mov	r2, r0
 8002996:	4b05      	ldr	r3, [pc, #20]	; (80029ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	0a1b      	lsrs	r3, r3, #8
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	4903      	ldr	r1, [pc, #12]	; (80029b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029a2:	5ccb      	ldrb	r3, [r1, r3]
 80029a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40021000 	.word	0x40021000
 80029b0:	0800453c 	.word	0x0800453c

080029b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029b8:	f7ff ffde 	bl	8002978 <HAL_RCC_GetHCLKFreq>
 80029bc:	4602      	mov	r2, r0
 80029be:	4b05      	ldr	r3, [pc, #20]	; (80029d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	0adb      	lsrs	r3, r3, #11
 80029c4:	f003 0307 	and.w	r3, r3, #7
 80029c8:	4903      	ldr	r1, [pc, #12]	; (80029d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029ca:	5ccb      	ldrb	r3, [r1, r3]
 80029cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40021000 	.word	0x40021000
 80029d8:	0800453c 	.word	0x0800453c

080029dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029e4:	4b0a      	ldr	r3, [pc, #40]	; (8002a10 <RCC_Delay+0x34>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a0a      	ldr	r2, [pc, #40]	; (8002a14 <RCC_Delay+0x38>)
 80029ea:	fba2 2303 	umull	r2, r3, r2, r3
 80029ee:	0a5b      	lsrs	r3, r3, #9
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	fb02 f303 	mul.w	r3, r2, r3
 80029f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029f8:	bf00      	nop
  }
  while (Delay --);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	1e5a      	subs	r2, r3, #1
 80029fe:	60fa      	str	r2, [r7, #12]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1f9      	bne.n	80029f8 <RCC_Delay+0x1c>
}
 8002a04:	bf00      	nop
 8002a06:	bf00      	nop
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr
 8002a10:	20000004 	.word	0x20000004
 8002a14:	10624dd3 	.word	0x10624dd3

08002a18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e07e      	b.n	8002b28 <HAL_SPI_Init+0x110>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d108      	bne.n	8002a44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a3a:	d009      	beq.n	8002a50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	61da      	str	r2, [r3, #28]
 8002a42:	e005      	b.n	8002a50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d106      	bne.n	8002a6a <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f7fe f805 	bl	8000a74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2202      	movs	r2, #2
 8002a6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a80:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002a92:	431a      	orrs	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aba:	431a      	orrs	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ace:	ea42 0103 	orr.w	r1, r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	0c1a      	lsrs	r2, r3, #16
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f002 0204 	and.w	r2, r2, #4
 8002af0:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002afa:	d105      	bne.n	8002b08 <HAL_SPI_Init+0xf0>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	b292      	uxth	r2, r2
 8002b06:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	69da      	ldr	r2, [r3, #28]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b16:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3708      	adds	r7, #8
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b088      	sub	sp, #32
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	603b      	str	r3, [r7, #0]
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b40:	2300      	movs	r3, #0
 8002b42:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d101      	bne.n	8002b52 <HAL_SPI_Transmit+0x22>
 8002b4e:	2302      	movs	r3, #2
 8002b50:	e14f      	b.n	8002df2 <HAL_SPI_Transmit+0x2c2>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b5a:	f7fe f905 	bl	8000d68 <HAL_GetTick>
 8002b5e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002b60:	88fb      	ldrh	r3, [r7, #6]
 8002b62:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d002      	beq.n	8002b76 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002b70:	2302      	movs	r3, #2
 8002b72:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b74:	e138      	b.n	8002de8 <HAL_SPI_Transmit+0x2b8>
  }

  if ((pData == NULL) || (Size == 0U))
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d002      	beq.n	8002b82 <HAL_SPI_Transmit+0x52>
 8002b7c:	88fb      	ldrh	r3, [r7, #6]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d102      	bne.n	8002b88 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002b86:	e12f      	b.n	8002de8 <HAL_SPI_Transmit+0x2b8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	88fa      	ldrh	r2, [r7, #6]
 8002ba0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	88fa      	ldrh	r2, [r7, #6]
 8002ba6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bce:	d10f      	bne.n	8002bf0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bde:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bee:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bf8:	d10f      	bne.n	8002c1a <HAL_SPI_Transmit+0xea>
  {
    SPI_RESET_CRC(hspi);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c08:	601a      	str	r2, [r3, #0]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c18:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c24:	2b40      	cmp	r3, #64	; 0x40
 8002c26:	d007      	beq.n	8002c38 <HAL_SPI_Transmit+0x108>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c40:	d14f      	bne.n	8002ce2 <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d002      	beq.n	8002c50 <HAL_SPI_Transmit+0x120>
 8002c4a:	8afb      	ldrh	r3, [r7, #22]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d142      	bne.n	8002cd6 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c54:	881a      	ldrh	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c60:	1c9a      	adds	r2, r3, #2
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c74:	e02f      	b.n	8002cd6 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d112      	bne.n	8002caa <HAL_SPI_Transmit+0x17a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c88:	881a      	ldrh	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	1c9a      	adds	r2, r3, #2
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	3b01      	subs	r3, #1
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	86da      	strh	r2, [r3, #54]	; 0x36
 8002ca8:	e015      	b.n	8002cd6 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002caa:	f7fe f85d 	bl	8000d68 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d803      	bhi.n	8002cc2 <HAL_SPI_Transmit+0x192>
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc0:	d102      	bne.n	8002cc8 <HAL_SPI_Transmit+0x198>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d106      	bne.n	8002cd6 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002cd4:	e088      	b.n	8002de8 <HAL_SPI_Transmit+0x2b8>
    while (hspi->TxXferCount > 0U)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1ca      	bne.n	8002c76 <HAL_SPI_Transmit+0x146>
 8002ce0:	e050      	b.n	8002d84 <HAL_SPI_Transmit+0x254>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <HAL_SPI_Transmit+0x1c0>
 8002cea:	8afb      	ldrh	r3, [r7, #22]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d144      	bne.n	8002d7a <HAL_SPI_Transmit+0x24a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	330c      	adds	r3, #12
 8002cfa:	7812      	ldrb	r2, [r2, #0]
 8002cfc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	1c5a      	adds	r2, r3, #1
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d0c:	b29b      	uxth	r3, r3
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002d16:	e030      	b.n	8002d7a <HAL_SPI_Transmit+0x24a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d113      	bne.n	8002d4e <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	330c      	adds	r3, #12
 8002d30:	7812      	ldrb	r2, [r2, #0]
 8002d32:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d38:	1c5a      	adds	r2, r3, #1
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	86da      	strh	r2, [r3, #54]	; 0x36
 8002d4c:	e015      	b.n	8002d7a <HAL_SPI_Transmit+0x24a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d4e:	f7fe f80b 	bl	8000d68 <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d803      	bhi.n	8002d66 <HAL_SPI_Transmit+0x236>
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d64:	d102      	bne.n	8002d6c <HAL_SPI_Transmit+0x23c>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d106      	bne.n	8002d7a <HAL_SPI_Transmit+0x24a>
        {
          errorcode = HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002d78:	e036      	b.n	8002de8 <HAL_SPI_Transmit+0x2b8>
    while (hspi->TxXferCount > 0U)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1c9      	bne.n	8002d18 <HAL_SPI_Transmit+0x1e8>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d8c:	d107      	bne.n	8002d9e <HAL_SPI_Transmit+0x26e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d9c:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	6839      	ldr	r1, [r7, #0]
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 fd00 	bl	80037a8 <SPI_EndRxTxTransaction>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d002      	beq.n	8002db4 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2220      	movs	r2, #32
 8002db2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10a      	bne.n	8002dd2 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	613b      	str	r3, [r7, #16]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	613b      	str	r3, [r7, #16]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	613b      	str	r3, [r7, #16]
 8002dd0:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d002      	beq.n	8002de0 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	77fb      	strb	r3, [r7, #31]
 8002dde:	e003      	b.n	8002de8 <HAL_SPI_Transmit+0x2b8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002df0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3720      	adds	r7, #32
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b08a      	sub	sp, #40	; 0x28
 8002dfe:	af02      	add	r7, sp, #8
 8002e00:	60f8      	str	r0, [r7, #12]
 8002e02:	60b9      	str	r1, [r7, #8]
 8002e04:	603b      	str	r3, [r7, #0]
 8002e06:	4613      	mov	r3, r2
 8002e08:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	77fb      	strb	r3, [r7, #31]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d002      	beq.n	8002e24 <HAL_SPI_Receive+0x2a>
  {
    errorcode = HAL_BUSY;
 8002e1e:	2302      	movs	r3, #2
 8002e20:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e22:	e199      	b.n	8003158 <HAL_SPI_Receive+0x35e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e2c:	d112      	bne.n	8002e54 <HAL_SPI_Receive+0x5a>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10e      	bne.n	8002e54 <HAL_SPI_Receive+0x5a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2204      	movs	r2, #4
 8002e3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002e3e:	88fa      	ldrh	r2, [r7, #6]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	4613      	mov	r3, r2
 8002e46:	68ba      	ldr	r2, [r7, #8]
 8002e48:	68b9      	ldr	r1, [r7, #8]
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f000 f98d 	bl	800316a <HAL_SPI_TransmitReceive>
 8002e50:	4603      	mov	r3, r0
 8002e52:	e186      	b.n	8003162 <HAL_SPI_Receive+0x368>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d101      	bne.n	8002e62 <HAL_SPI_Receive+0x68>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	e17f      	b.n	8003162 <HAL_SPI_Receive+0x368>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e6a:	f7fd ff7d 	bl	8000d68 <HAL_GetTick>
 8002e6e:	61b8      	str	r0, [r7, #24]

  if ((pData == NULL) || (Size == 0U))
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <HAL_SPI_Receive+0x82>
 8002e76:	88fb      	ldrh	r3, [r7, #6]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d102      	bne.n	8002e82 <HAL_SPI_Receive+0x88>
  {
    errorcode = HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e80:	e16a      	b.n	8003158 <HAL_SPI_Receive+0x35e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2204      	movs	r2, #4
 8002e86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	88fa      	ldrh	r2, [r7, #6]
 8002e9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	88fa      	ldrh	r2, [r7, #6]
 8002ea0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ec8:	d116      	bne.n	8002ef8 <HAL_SPI_Receive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ed8:	601a      	str	r2, [r3, #0]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ee8:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	87da      	strh	r2, [r3, #62]	; 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f00:	d10f      	bne.n	8002f22 <HAL_SPI_Receive+0x128>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f20:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f2c:	2b40      	cmp	r3, #64	; 0x40
 8002f2e:	d007      	beq.n	8002f40 <HAL_SPI_Receive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f3e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d16a      	bne.n	800301e <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f48:	e032      	b.n	8002fb0 <HAL_SPI_Receive+0x1b6>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d115      	bne.n	8002f84 <HAL_SPI_Receive+0x18a>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f103 020c 	add.w	r2, r3, #12
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f64:	7812      	ldrb	r2, [r2, #0]
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6e:	1c5a      	adds	r2, r3, #1
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f82:	e015      	b.n	8002fb0 <HAL_SPI_Receive+0x1b6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f84:	f7fd fef0 	bl	8000d68 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d803      	bhi.n	8002f9c <HAL_SPI_Receive+0x1a2>
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9a:	d102      	bne.n	8002fa2 <HAL_SPI_Receive+0x1a8>
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d106      	bne.n	8002fb0 <HAL_SPI_Receive+0x1b6>
        {
          errorcode = HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8002fae:	e0d3      	b.n	8003158 <HAL_SPI_Receive+0x35e>
    while (hspi->RxXferCount > 0U)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1c7      	bne.n	8002f4a <HAL_SPI_Receive+0x150>
 8002fba:	e035      	b.n	8003028 <HAL_SPI_Receive+0x22e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d113      	bne.n	8002ff2 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68da      	ldr	r2, [r3, #12]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd4:	b292      	uxth	r2, r2
 8002fd6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fdc:	1c9a      	adds	r2, r3, #2
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	3b01      	subs	r3, #1
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ff0:	e015      	b.n	800301e <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ff2:	f7fd feb9 	bl	8000d68 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d803      	bhi.n	800300a <HAL_SPI_Receive+0x210>
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003008:	d102      	bne.n	8003010 <HAL_SPI_Receive+0x216>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d106      	bne.n	800301e <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800301c:	e09c      	b.n	8003158 <HAL_SPI_Receive+0x35e>
    while (hspi->RxXferCount > 0U)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003022:	b29b      	uxth	r3, r3
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1c9      	bne.n	8002fbc <HAL_SPI_Receive+0x1c2>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003030:	d153      	bne.n	80030da <HAL_SPI_Receive+0x2e0>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003040:	601a      	str	r2, [r3, #0]

    /* Check if CRCNEXT is well reset by hardware */
    if (READ_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT))
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d007      	beq.n	8003060 <HAL_SPI_Receive+0x266>
    {
      /* Workaround to force CRCNEXT bit to zero in case of CRCNEXT is not reset automatically by hardware */
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800305e:	601a      	str	r2, [r3, #0]
    }
    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	2201      	movs	r2, #1
 8003068:	2101      	movs	r1, #1
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 fac2 	bl	80035f4 <SPI_WaitFlagStateUntilTimeout>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d002      	beq.n	800307c <HAL_SPI_Receive+0x282>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8003076:	2303      	movs	r3, #3
 8003078:	77fb      	strb	r3, [r7, #31]
      goto error;
 800307a:	e06d      	b.n	8003158 <HAL_SPI_Receive+0x35e>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003084:	d107      	bne.n	8003096 <HAL_SPI_Receive+0x29c>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68da      	ldr	r2, [r3, #12]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003090:	b292      	uxth	r2, r2
 8003092:	801a      	strh	r2, [r3, #0]
 8003094:	e008      	b.n	80030a8 <HAL_SPI_Receive+0x2ae>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f103 020c 	add.w	r2, r3, #12
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a2:	7812      	ldrb	r2, [r2, #0]
 80030a4:	b2d2      	uxtb	r2, r2
 80030a6:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	9300      	str	r3, [sp, #0]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	2201      	movs	r2, #1
 80030b0:	2101      	movs	r1, #1
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 fa9e 	bl	80035f4 <SPI_WaitFlagStateUntilTimeout>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d008      	beq.n	80030d0 <HAL_SPI_Receive+0x2d6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c2:	f043 0202 	orr.w	r2, r3, #2
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	77fb      	strb	r3, [r7, #31]
      goto error;
 80030ce:	e043      	b.n	8003158 <HAL_SPI_Receive+0x35e>
    }

    /* Read CRC to Flush DR and RXNE flag */
    tmpreg = READ_REG(hspi->Instance->DR);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	617b      	str	r3, [r7, #20]
    /* To avoid GCC warning */
    UNUSED(tmpreg);
 80030d8:	697b      	ldr	r3, [r7, #20]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	6839      	ldr	r1, [r7, #0]
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 fb10 	bl	8003704 <SPI_EndRxTransaction>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d002      	beq.n	80030f0 <HAL_SPI_Receive+0x2f6>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2220      	movs	r2, #32
 80030ee:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f003 0310 	and.w	r3, r3, #16
 80030fa:	2b10      	cmp	r3, #16
 80030fc:	d121      	bne.n	8003142 <HAL_SPI_Receive+0x348>
  {
    /* Check if CRC error is valid or not (workaround to be applied or not) */
    if (SPI_ISCRCErrorValid(hspi) == SPI_VALID_CRC_ERROR)
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f000 fb70 	bl	80037e4 <SPI_ISCRCErrorValid>
 8003104:	4603      	mov	r3, r0
 8003106:	2b01      	cmp	r3, #1
 8003108:	d116      	bne.n	8003138 <HAL_SPI_Receive+0x33e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310e:	f043 0202 	orr.w	r2, r3, #2
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	655a      	str	r2, [r3, #84]	; 0x54

      /* Reset CRC Calculation */
      SPI_RESET_CRC(hspi);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003124:	601a      	str	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	e004      	b.n	8003142 <HAL_SPI_Receive+0x348>
    }
    else
    {
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8003140:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <HAL_SPI_Receive+0x356>
  {
    errorcode = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	77fb      	strb	r3, [r7, #31]
 800314e:	e003      	b.n	8003158 <HAL_SPI_Receive+0x35e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003160:	7ffb      	ldrb	r3, [r7, #31]
}
 8003162:	4618      	mov	r0, r3
 8003164:	3720      	adds	r7, #32
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b08e      	sub	sp, #56	; 0x38
 800316e:	af02      	add	r7, sp, #8
 8003170:	60f8      	str	r0, [r7, #12]
 8003172:	60b9      	str	r1, [r7, #8]
 8003174:	607a      	str	r2, [r7, #4]
 8003176:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_TxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	617b      	str	r3, [r7, #20]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800317c:	2301      	movs	r3, #1
 800317e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003180:	2300      	movs	r3, #0
 8003182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800318c:	2b01      	cmp	r3, #1
 800318e:	d101      	bne.n	8003194 <HAL_SPI_TransmitReceive+0x2a>
 8003190:	2302      	movs	r3, #2
 8003192:	e21e      	b.n	80035d2 <HAL_SPI_TransmitReceive+0x468>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800319c:	f7fd fde4 	bl	8000d68 <HAL_GetTick>
 80031a0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80031b2:	887b      	ldrh	r3, [r7, #2]
 80031b4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80031b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d00f      	beq.n	80031de <HAL_SPI_TransmitReceive+0x74>
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031c4:	d107      	bne.n	80031d6 <HAL_SPI_TransmitReceive+0x6c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d103      	bne.n	80031d6 <HAL_SPI_TransmitReceive+0x6c>
 80031ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d003      	beq.n	80031de <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 80031d6:	2302      	movs	r3, #2
 80031d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80031dc:	e1f3      	b.n	80035c6 <HAL_SPI_TransmitReceive+0x45c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <HAL_SPI_TransmitReceive+0x86>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d002      	beq.n	80031f0 <HAL_SPI_TransmitReceive+0x86>
 80031ea:	887b      	ldrh	r3, [r7, #2]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d103      	bne.n	80031f8 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80031f6:	e1e6      	b.n	80035c6 <HAL_SPI_TransmitReceive+0x45c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	2b04      	cmp	r3, #4
 8003202:	d003      	beq.n	800320c <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2205      	movs	r2, #5
 8003208:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2200      	movs	r2, #0
 8003210:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	887a      	ldrh	r2, [r7, #2]
 800321c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	887a      	ldrh	r2, [r7, #2]
 8003222:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	68ba      	ldr	r2, [r7, #8]
 8003228:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	887a      	ldrh	r2, [r7, #2]
 800322e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	887a      	ldrh	r2, [r7, #2]
 8003234:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2200      	movs	r2, #0
 800323a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003246:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800324a:	d10f      	bne.n	800326c <HAL_SPI_TransmitReceive+0x102>
  {
    SPI_RESET_CRC(hspi);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800326a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003276:	2b40      	cmp	r3, #64	; 0x40
 8003278:	d007      	beq.n	800328a <HAL_SPI_TransmitReceive+0x120>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003288:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003292:	f040 808f 	bne.w	80033b4 <HAL_SPI_TransmitReceive+0x24a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d002      	beq.n	80032a4 <HAL_SPI_TransmitReceive+0x13a>
 800329e:	8b7b      	ldrh	r3, [r7, #26]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d17c      	bne.n	800339e <HAL_SPI_TransmitReceive+0x234>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a8:	881a      	ldrh	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b4:	1c9a      	adds	r2, r3, #2
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032be:	b29b      	uxth	r3, r3
 80032c0:	3b01      	subs	r3, #1
 80032c2:	b29a      	uxth	r2, r3
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032c8:	e069      	b.n	800339e <HAL_SPI_TransmitReceive+0x234>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d12d      	bne.n	8003334 <HAL_SPI_TransmitReceive+0x1ca>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80032dc:	b29b      	uxth	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d028      	beq.n	8003334 <HAL_SPI_TransmitReceive+0x1ca>
 80032e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d125      	bne.n	8003334 <HAL_SPI_TransmitReceive+0x1ca>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ec:	881a      	ldrh	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f8:	1c9a      	adds	r2, r3, #2
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003302:	b29b      	uxth	r3, r3
 8003304:	3b01      	subs	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003314:	b29b      	uxth	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10c      	bne.n	8003334 <HAL_SPI_TransmitReceive+0x1ca>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003322:	d107      	bne.n	8003334 <HAL_SPI_TransmitReceive+0x1ca>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003332:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b01      	cmp	r3, #1
 8003340:	d119      	bne.n	8003376 <HAL_SPI_TransmitReceive+0x20c>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003346:	b29b      	uxth	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d014      	beq.n	8003376 <HAL_SPI_TransmitReceive+0x20c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003356:	b292      	uxth	r2, r2
 8003358:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335e:	1c9a      	adds	r2, r3, #2
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003368:	b29b      	uxth	r3, r3
 800336a:	3b01      	subs	r3, #1
 800336c:	b29a      	uxth	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003372:	2301      	movs	r3, #1
 8003374:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003376:	f7fd fcf7 	bl	8000d68 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003382:	429a      	cmp	r2, r3
 8003384:	d80b      	bhi.n	800339e <HAL_SPI_TransmitReceive+0x234>
 8003386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338c:	d007      	beq.n	800339e <HAL_SPI_TransmitReceive+0x234>
      {
        errorcode = HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800339c:	e113      	b.n	80035c6 <HAL_SPI_TransmitReceive+0x45c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d190      	bne.n	80032ca <HAL_SPI_TransmitReceive+0x160>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d18b      	bne.n	80032ca <HAL_SPI_TransmitReceive+0x160>
 80033b2:	e093      	b.n	80034dc <HAL_SPI_TransmitReceive+0x372>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d003      	beq.n	80033c4 <HAL_SPI_TransmitReceive+0x25a>
 80033bc:	8b7b      	ldrh	r3, [r7, #26]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	f040 8082 	bne.w	80034c8 <HAL_SPI_TransmitReceive+0x35e>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	330c      	adds	r3, #12
 80033ce:	7812      	ldrb	r2, [r2, #0]
 80033d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d6:	1c5a      	adds	r2, r3, #1
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033ea:	e06d      	b.n	80034c8 <HAL_SPI_TransmitReceive+0x35e>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d12e      	bne.n	8003458 <HAL_SPI_TransmitReceive+0x2ee>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033fe:	b29b      	uxth	r3, r3
 8003400:	2b00      	cmp	r3, #0
 8003402:	d029      	beq.n	8003458 <HAL_SPI_TransmitReceive+0x2ee>
 8003404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003406:	2b01      	cmp	r3, #1
 8003408:	d126      	bne.n	8003458 <HAL_SPI_TransmitReceive+0x2ee>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	330c      	adds	r3, #12
 8003414:	7812      	ldrb	r2, [r2, #0]
 8003416:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	1c5a      	adds	r2, r3, #1
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003426:	b29b      	uxth	r3, r3
 8003428:	3b01      	subs	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003438:	b29b      	uxth	r3, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10c      	bne.n	8003458 <HAL_SPI_TransmitReceive+0x2ee>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003446:	d107      	bne.n	8003458 <HAL_SPI_TransmitReceive+0x2ee>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003456:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b01      	cmp	r3, #1
 8003464:	d119      	bne.n	800349a <HAL_SPI_TransmitReceive+0x330>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800346a:	b29b      	uxth	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	d014      	beq.n	800349a <HAL_SPI_TransmitReceive+0x330>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68da      	ldr	r2, [r3, #12]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347a:	b2d2      	uxtb	r2, r2
 800347c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003482:	1c5a      	adds	r2, r3, #1
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800348c:	b29b      	uxth	r3, r3
 800348e:	3b01      	subs	r3, #1
 8003490:	b29a      	uxth	r2, r3
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003496:	2301      	movs	r3, #1
 8003498:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800349a:	f7fd fc65 	bl	8000d68 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d803      	bhi.n	80034b2 <HAL_SPI_TransmitReceive+0x348>
 80034aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b0:	d102      	bne.n	80034b8 <HAL_SPI_TransmitReceive+0x34e>
 80034b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d107      	bne.n	80034c8 <HAL_SPI_TransmitReceive+0x35e>
      {
        errorcode = HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80034c6:	e07e      	b.n	80035c6 <HAL_SPI_TransmitReceive+0x45c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d18c      	bne.n	80033ec <HAL_SPI_TransmitReceive+0x282>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d187      	bne.n	80033ec <HAL_SPI_TransmitReceive+0x282>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034e4:	d119      	bne.n	800351a <HAL_SPI_TransmitReceive+0x3b0>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80034e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e8:	9300      	str	r3, [sp, #0]
 80034ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ec:	2201      	movs	r2, #1
 80034ee:	2101      	movs	r1, #1
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f000 f87f 	bl	80035f4 <SPI_WaitFlagStateUntilTimeout>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d009      	beq.n	8003510 <HAL_SPI_TransmitReceive+0x3a6>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003500:	f043 0202 	orr.w	r2, r3, #2
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 800350e:	e05a      	b.n	80035c6 <HAL_SPI_TransmitReceive+0x45c>
    }
    /* Read CRC */
    tmpreg = READ_REG(hspi->Instance->DR);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	617b      	str	r3, [r7, #20]
    /* To avoid GCC warning */
    UNUSED(tmpreg);
 8003518:	697b      	ldr	r3, [r7, #20]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 0310 	and.w	r3, r3, #16
 8003524:	2b10      	cmp	r3, #16
 8003526:	d124      	bne.n	8003572 <HAL_SPI_TransmitReceive+0x408>
  {
    /* Check if CRC error is valid or not (workaround to be applied or not) */
    if (SPI_ISCRCErrorValid(hspi) == SPI_VALID_CRC_ERROR)
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f000 f95b 	bl	80037e4 <SPI_ISCRCErrorValid>
 800352e:	4603      	mov	r3, r0
 8003530:	2b01      	cmp	r3, #1
 8003532:	d119      	bne.n	8003568 <HAL_SPI_TransmitReceive+0x3fe>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003538:	f043 0202 	orr.w	r2, r3, #2
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Reset CRC Calculation */
      SPI_RESET_CRC(hspi);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800355e:	601a      	str	r2, [r3, #0]

      errorcode = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003566:	e004      	b.n	8003572 <HAL_SPI_TransmitReceive+0x408>
    }
    else
    {
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8003570:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003574:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 f916 	bl	80037a8 <SPI_EndRxTxTransaction>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d006      	beq.n	8003590 <HAL_SPI_TransmitReceive+0x426>
  {
    errorcode = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2220      	movs	r2, #32
 800358c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800358e:	e01a      	b.n	80035c6 <HAL_SPI_TransmitReceive+0x45c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10a      	bne.n	80035ae <HAL_SPI_TransmitReceive+0x444>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003598:	2300      	movs	r3, #0
 800359a:	613b      	str	r3, [r7, #16]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	613b      	str	r3, [r7, #16]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	613b      	str	r3, [r7, #16]
 80035ac:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_SPI_TransmitReceive+0x454>
  {
    errorcode = HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035bc:	e003      	b.n	80035c6 <HAL_SPI_TransmitReceive+0x45c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80035ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3730      	adds	r7, #48	; 0x30
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035e8:	b2db      	uxtb	r3, r3
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bc80      	pop	{r7}
 80035f2:	4770      	bx	lr

080035f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b088      	sub	sp, #32
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	603b      	str	r3, [r7, #0]
 8003600:	4613      	mov	r3, r2
 8003602:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003604:	f7fd fbb0 	bl	8000d68 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360c:	1a9b      	subs	r3, r3, r2
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	4413      	add	r3, r2
 8003612:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003614:	f7fd fba8 	bl	8000d68 <HAL_GetTick>
 8003618:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800361a:	4b39      	ldr	r3, [pc, #228]	; (8003700 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	015b      	lsls	r3, r3, #5
 8003620:	0d1b      	lsrs	r3, r3, #20
 8003622:	69fa      	ldr	r2, [r7, #28]
 8003624:	fb02 f303 	mul.w	r3, r2, r3
 8003628:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800362a:	e054      	b.n	80036d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003632:	d050      	beq.n	80036d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003634:	f7fd fb98 	bl	8000d68 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	69fa      	ldr	r2, [r7, #28]
 8003640:	429a      	cmp	r2, r3
 8003642:	d902      	bls.n	800364a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d13d      	bne.n	80036c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003658:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003662:	d111      	bne.n	8003688 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800366c:	d004      	beq.n	8003678 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003676:	d107      	bne.n	8003688 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003686:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003690:	d10f      	bne.n	80036b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e017      	b.n	80036f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	3b01      	subs	r3, #1
 80036d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	4013      	ands	r3, r2
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	bf0c      	ite	eq
 80036e6:	2301      	moveq	r3, #1
 80036e8:	2300      	movne	r3, #0
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	461a      	mov	r2, r3
 80036ee:	79fb      	ldrb	r3, [r7, #7]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d19b      	bne.n	800362c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3720      	adds	r7, #32
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	20000004 	.word	0x20000004

08003704 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af02      	add	r7, sp, #8
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003718:	d111      	bne.n	800373e <SPI_EndRxTransaction+0x3a>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003722:	d004      	beq.n	800372e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800372c:	d107      	bne.n	800373e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800373c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003746:	d117      	bne.n	8003778 <SPI_EndRxTransaction+0x74>
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003750:	d112      	bne.n	8003778 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	2200      	movs	r2, #0
 800375a:	2101      	movs	r1, #1
 800375c:	68f8      	ldr	r0, [r7, #12]
 800375e:	f7ff ff49 	bl	80035f4 <SPI_WaitFlagStateUntilTimeout>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d01a      	beq.n	800379e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376c:	f043 0220 	orr.w	r2, r3, #32
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e013      	b.n	80037a0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	2200      	movs	r2, #0
 8003780:	2180      	movs	r1, #128	; 0x80
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f7ff ff36 	bl	80035f4 <SPI_WaitFlagStateUntilTimeout>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d007      	beq.n	800379e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003792:	f043 0220 	orr.w	r2, r3, #32
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e000      	b.n	80037a0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af02      	add	r7, sp, #8
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	9300      	str	r3, [sp, #0]
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	2200      	movs	r2, #0
 80037bc:	2180      	movs	r1, #128	; 0x80
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f7ff ff18 	bl	80035f4 <SPI_WaitFlagStateUntilTimeout>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d007      	beq.n	80037da <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ce:	f043 0220 	orr.w	r2, r3, #32
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e000      	b.n	80037dc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <SPI_ISCRCErrorValid>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval CRC error validity (SPI_INVALID_CRC_ERROR or SPI_VALID_CRC_ERROR).
  */
uint8_t SPI_ISCRCErrorValid(SPI_HandleTypeDef *hspi)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  }
#endif /* USE_SPI_CRC_ERROR_WORKAROUND */
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);

  return (SPI_VALID_CRC_ERROR);
 80037ec:	2301      	movs	r3, #1
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr

080037f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e042      	b.n	8003890 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d106      	bne.n	8003824 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7fd f974 	bl	8000b0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2224      	movs	r2, #36	; 0x24
 8003828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800383a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f91d 	bl	8003a7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	691a      	ldr	r2, [r3, #16]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003850:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	695a      	ldr	r2, [r3, #20]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003860:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003870:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2220      	movs	r2, #32
 800387c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2220      	movs	r2, #32
 8003884:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b08a      	sub	sp, #40	; 0x28
 800389c:	af02      	add	r7, sp, #8
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	603b      	str	r3, [r7, #0]
 80038a4:	4613      	mov	r3, r2
 80038a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038b2:	b2db      	uxtb	r3, r3
 80038b4:	2b20      	cmp	r3, #32
 80038b6:	d16d      	bne.n	8003994 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d002      	beq.n	80038c4 <HAL_UART_Transmit+0x2c>
 80038be:	88fb      	ldrh	r3, [r7, #6]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d101      	bne.n	80038c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e066      	b.n	8003996 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2221      	movs	r2, #33	; 0x21
 80038d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038d6:	f7fd fa47 	bl	8000d68 <HAL_GetTick>
 80038da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	88fa      	ldrh	r2, [r7, #6]
 80038e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	88fa      	ldrh	r2, [r7, #6]
 80038e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038f0:	d108      	bne.n	8003904 <HAL_UART_Transmit+0x6c>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d104      	bne.n	8003904 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80038fa:	2300      	movs	r3, #0
 80038fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	61bb      	str	r3, [r7, #24]
 8003902:	e003      	b.n	800390c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003908:	2300      	movs	r3, #0
 800390a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800390c:	e02a      	b.n	8003964 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	2200      	movs	r2, #0
 8003916:	2180      	movs	r1, #128	; 0x80
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 f840 	bl	800399e <UART_WaitOnFlagUntilTimeout>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e036      	b.n	8003996 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10b      	bne.n	8003946 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	461a      	mov	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800393c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	3302      	adds	r3, #2
 8003942:	61bb      	str	r3, [r7, #24]
 8003944:	e007      	b.n	8003956 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	781a      	ldrb	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	3301      	adds	r3, #1
 8003954:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800395a:	b29b      	uxth	r3, r3
 800395c:	3b01      	subs	r3, #1
 800395e:	b29a      	uxth	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003968:	b29b      	uxth	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d1cf      	bne.n	800390e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	2200      	movs	r2, #0
 8003976:	2140      	movs	r1, #64	; 0x40
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 f810 	bl	800399e <UART_WaitOnFlagUntilTimeout>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e006      	b.n	8003996 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2220      	movs	r2, #32
 800398c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003990:	2300      	movs	r3, #0
 8003992:	e000      	b.n	8003996 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003994:	2302      	movs	r3, #2
  }
}
 8003996:	4618      	mov	r0, r3
 8003998:	3720      	adds	r7, #32
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b090      	sub	sp, #64	; 0x40
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	60f8      	str	r0, [r7, #12]
 80039a6:	60b9      	str	r1, [r7, #8]
 80039a8:	603b      	str	r3, [r7, #0]
 80039aa:	4613      	mov	r3, r2
 80039ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039ae:	e050      	b.n	8003a52 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b6:	d04c      	beq.n	8003a52 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80039b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d007      	beq.n	80039ce <UART_WaitOnFlagUntilTimeout+0x30>
 80039be:	f7fd f9d3 	bl	8000d68 <HAL_GetTick>
 80039c2:	4602      	mov	r2, r0
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d241      	bcs.n	8003a52 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	330c      	adds	r3, #12
 80039d4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d8:	e853 3f00 	ldrex	r3, [r3]
 80039dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	330c      	adds	r3, #12
 80039ec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039ee:	637a      	str	r2, [r7, #52]	; 0x34
 80039f0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80039f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039f6:	e841 2300 	strex	r3, r2, [r1]
 80039fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80039fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1e5      	bne.n	80039ce <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	3314      	adds	r3, #20
 8003a08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	e853 3f00 	ldrex	r3, [r3]
 8003a10:	613b      	str	r3, [r7, #16]
   return(result);
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	f023 0301 	bic.w	r3, r3, #1
 8003a18:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	3314      	adds	r3, #20
 8003a20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a22:	623a      	str	r2, [r7, #32]
 8003a24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a26:	69f9      	ldr	r1, [r7, #28]
 8003a28:	6a3a      	ldr	r2, [r7, #32]
 8003a2a:	e841 2300 	strex	r3, r2, [r1]
 8003a2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1e5      	bne.n	8003a02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2220      	movs	r2, #32
 8003a42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e00f      	b.n	8003a72 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	bf0c      	ite	eq
 8003a62:	2301      	moveq	r3, #1
 8003a64:	2300      	movne	r3, #0
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	461a      	mov	r2, r3
 8003a6a:	79fb      	ldrb	r3, [r7, #7]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d09f      	beq.n	80039b0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3740      	adds	r7, #64	; 0x40
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
	...

08003a7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68da      	ldr	r2, [r3, #12]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689a      	ldr	r2, [r3, #8]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003ab6:	f023 030c 	bic.w	r3, r3, #12
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6812      	ldr	r2, [r2, #0]
 8003abe:	68b9      	ldr	r1, [r7, #8]
 8003ac0:	430b      	orrs	r3, r1
 8003ac2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699a      	ldr	r2, [r3, #24]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a2c      	ldr	r2, [pc, #176]	; (8003b90 <UART_SetConfig+0x114>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d103      	bne.n	8003aec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ae4:	f7fe ff66 	bl	80029b4 <HAL_RCC_GetPCLK2Freq>
 8003ae8:	60f8      	str	r0, [r7, #12]
 8003aea:	e002      	b.n	8003af2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003aec:	f7fe ff4e 	bl	800298c <HAL_RCC_GetPCLK1Freq>
 8003af0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	4613      	mov	r3, r2
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4413      	add	r3, r2
 8003afa:	009a      	lsls	r2, r3, #2
 8003afc:	441a      	add	r2, r3
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b08:	4a22      	ldr	r2, [pc, #136]	; (8003b94 <UART_SetConfig+0x118>)
 8003b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0e:	095b      	lsrs	r3, r3, #5
 8003b10:	0119      	lsls	r1, r3, #4
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	009a      	lsls	r2, r3, #2
 8003b1c:	441a      	add	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b28:	4b1a      	ldr	r3, [pc, #104]	; (8003b94 <UART_SetConfig+0x118>)
 8003b2a:	fba3 0302 	umull	r0, r3, r3, r2
 8003b2e:	095b      	lsrs	r3, r3, #5
 8003b30:	2064      	movs	r0, #100	; 0x64
 8003b32:	fb00 f303 	mul.w	r3, r0, r3
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	3332      	adds	r3, #50	; 0x32
 8003b3c:	4a15      	ldr	r2, [pc, #84]	; (8003b94 <UART_SetConfig+0x118>)
 8003b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b42:	095b      	lsrs	r3, r3, #5
 8003b44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b48:	4419      	add	r1, r3
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	4413      	add	r3, r2
 8003b52:	009a      	lsls	r2, r3, #2
 8003b54:	441a      	add	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b60:	4b0c      	ldr	r3, [pc, #48]	; (8003b94 <UART_SetConfig+0x118>)
 8003b62:	fba3 0302 	umull	r0, r3, r3, r2
 8003b66:	095b      	lsrs	r3, r3, #5
 8003b68:	2064      	movs	r0, #100	; 0x64
 8003b6a:	fb00 f303 	mul.w	r3, r0, r3
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	3332      	adds	r3, #50	; 0x32
 8003b74:	4a07      	ldr	r2, [pc, #28]	; (8003b94 <UART_SetConfig+0x118>)
 8003b76:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7a:	095b      	lsrs	r3, r3, #5
 8003b7c:	f003 020f 	and.w	r2, r3, #15
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	440a      	add	r2, r1
 8003b86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b88:	bf00      	nop
 8003b8a:	3710      	adds	r7, #16
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40013800 	.word	0x40013800
 8003b94:	51eb851f 	.word	0x51eb851f

08003b98 <__errno>:
 8003b98:	4b01      	ldr	r3, [pc, #4]	; (8003ba0 <__errno+0x8>)
 8003b9a:	6818      	ldr	r0, [r3, #0]
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	20000010 	.word	0x20000010

08003ba4 <__libc_init_array>:
 8003ba4:	b570      	push	{r4, r5, r6, lr}
 8003ba6:	2600      	movs	r6, #0
 8003ba8:	4d0c      	ldr	r5, [pc, #48]	; (8003bdc <__libc_init_array+0x38>)
 8003baa:	4c0d      	ldr	r4, [pc, #52]	; (8003be0 <__libc_init_array+0x3c>)
 8003bac:	1b64      	subs	r4, r4, r5
 8003bae:	10a4      	asrs	r4, r4, #2
 8003bb0:	42a6      	cmp	r6, r4
 8003bb2:	d109      	bne.n	8003bc8 <__libc_init_array+0x24>
 8003bb4:	f000 fc9c 	bl	80044f0 <_init>
 8003bb8:	2600      	movs	r6, #0
 8003bba:	4d0a      	ldr	r5, [pc, #40]	; (8003be4 <__libc_init_array+0x40>)
 8003bbc:	4c0a      	ldr	r4, [pc, #40]	; (8003be8 <__libc_init_array+0x44>)
 8003bbe:	1b64      	subs	r4, r4, r5
 8003bc0:	10a4      	asrs	r4, r4, #2
 8003bc2:	42a6      	cmp	r6, r4
 8003bc4:	d105      	bne.n	8003bd2 <__libc_init_array+0x2e>
 8003bc6:	bd70      	pop	{r4, r5, r6, pc}
 8003bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bcc:	4798      	blx	r3
 8003bce:	3601      	adds	r6, #1
 8003bd0:	e7ee      	b.n	8003bb0 <__libc_init_array+0xc>
 8003bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bd6:	4798      	blx	r3
 8003bd8:	3601      	adds	r6, #1
 8003bda:	e7f2      	b.n	8003bc2 <__libc_init_array+0x1e>
 8003bdc:	0800458c 	.word	0x0800458c
 8003be0:	0800458c 	.word	0x0800458c
 8003be4:	0800458c 	.word	0x0800458c
 8003be8:	08004590 	.word	0x08004590

08003bec <memset>:
 8003bec:	4603      	mov	r3, r0
 8003bee:	4402      	add	r2, r0
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d100      	bne.n	8003bf6 <memset+0xa>
 8003bf4:	4770      	bx	lr
 8003bf6:	f803 1b01 	strb.w	r1, [r3], #1
 8003bfa:	e7f9      	b.n	8003bf0 <memset+0x4>

08003bfc <siprintf>:
 8003bfc:	b40e      	push	{r1, r2, r3}
 8003bfe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c02:	b500      	push	{lr}
 8003c04:	b09c      	sub	sp, #112	; 0x70
 8003c06:	ab1d      	add	r3, sp, #116	; 0x74
 8003c08:	9002      	str	r0, [sp, #8]
 8003c0a:	9006      	str	r0, [sp, #24]
 8003c0c:	9107      	str	r1, [sp, #28]
 8003c0e:	9104      	str	r1, [sp, #16]
 8003c10:	4808      	ldr	r0, [pc, #32]	; (8003c34 <siprintf+0x38>)
 8003c12:	4909      	ldr	r1, [pc, #36]	; (8003c38 <siprintf+0x3c>)
 8003c14:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c18:	9105      	str	r1, [sp, #20]
 8003c1a:	6800      	ldr	r0, [r0, #0]
 8003c1c:	a902      	add	r1, sp, #8
 8003c1e:	9301      	str	r3, [sp, #4]
 8003c20:	f000 f868 	bl	8003cf4 <_svfiprintf_r>
 8003c24:	2200      	movs	r2, #0
 8003c26:	9b02      	ldr	r3, [sp, #8]
 8003c28:	701a      	strb	r2, [r3, #0]
 8003c2a:	b01c      	add	sp, #112	; 0x70
 8003c2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c30:	b003      	add	sp, #12
 8003c32:	4770      	bx	lr
 8003c34:	20000010 	.word	0x20000010
 8003c38:	ffff0208 	.word	0xffff0208

08003c3c <__ssputs_r>:
 8003c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c40:	688e      	ldr	r6, [r1, #8]
 8003c42:	4682      	mov	sl, r0
 8003c44:	429e      	cmp	r6, r3
 8003c46:	460c      	mov	r4, r1
 8003c48:	4690      	mov	r8, r2
 8003c4a:	461f      	mov	r7, r3
 8003c4c:	d838      	bhi.n	8003cc0 <__ssputs_r+0x84>
 8003c4e:	898a      	ldrh	r2, [r1, #12]
 8003c50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003c54:	d032      	beq.n	8003cbc <__ssputs_r+0x80>
 8003c56:	6825      	ldr	r5, [r4, #0]
 8003c58:	6909      	ldr	r1, [r1, #16]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	eba5 0901 	sub.w	r9, r5, r1
 8003c60:	6965      	ldr	r5, [r4, #20]
 8003c62:	444b      	add	r3, r9
 8003c64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c6c:	106d      	asrs	r5, r5, #1
 8003c6e:	429d      	cmp	r5, r3
 8003c70:	bf38      	it	cc
 8003c72:	461d      	movcc	r5, r3
 8003c74:	0553      	lsls	r3, r2, #21
 8003c76:	d531      	bpl.n	8003cdc <__ssputs_r+0xa0>
 8003c78:	4629      	mov	r1, r5
 8003c7a:	f000 fb6f 	bl	800435c <_malloc_r>
 8003c7e:	4606      	mov	r6, r0
 8003c80:	b950      	cbnz	r0, 8003c98 <__ssputs_r+0x5c>
 8003c82:	230c      	movs	r3, #12
 8003c84:	f04f 30ff 	mov.w	r0, #4294967295
 8003c88:	f8ca 3000 	str.w	r3, [sl]
 8003c8c:	89a3      	ldrh	r3, [r4, #12]
 8003c8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c92:	81a3      	strh	r3, [r4, #12]
 8003c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c98:	464a      	mov	r2, r9
 8003c9a:	6921      	ldr	r1, [r4, #16]
 8003c9c:	f000 face 	bl	800423c <memcpy>
 8003ca0:	89a3      	ldrh	r3, [r4, #12]
 8003ca2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003caa:	81a3      	strh	r3, [r4, #12]
 8003cac:	6126      	str	r6, [r4, #16]
 8003cae:	444e      	add	r6, r9
 8003cb0:	6026      	str	r6, [r4, #0]
 8003cb2:	463e      	mov	r6, r7
 8003cb4:	6165      	str	r5, [r4, #20]
 8003cb6:	eba5 0509 	sub.w	r5, r5, r9
 8003cba:	60a5      	str	r5, [r4, #8]
 8003cbc:	42be      	cmp	r6, r7
 8003cbe:	d900      	bls.n	8003cc2 <__ssputs_r+0x86>
 8003cc0:	463e      	mov	r6, r7
 8003cc2:	4632      	mov	r2, r6
 8003cc4:	4641      	mov	r1, r8
 8003cc6:	6820      	ldr	r0, [r4, #0]
 8003cc8:	f000 fac6 	bl	8004258 <memmove>
 8003ccc:	68a3      	ldr	r3, [r4, #8]
 8003cce:	2000      	movs	r0, #0
 8003cd0:	1b9b      	subs	r3, r3, r6
 8003cd2:	60a3      	str	r3, [r4, #8]
 8003cd4:	6823      	ldr	r3, [r4, #0]
 8003cd6:	4433      	add	r3, r6
 8003cd8:	6023      	str	r3, [r4, #0]
 8003cda:	e7db      	b.n	8003c94 <__ssputs_r+0x58>
 8003cdc:	462a      	mov	r2, r5
 8003cde:	f000 fbb1 	bl	8004444 <_realloc_r>
 8003ce2:	4606      	mov	r6, r0
 8003ce4:	2800      	cmp	r0, #0
 8003ce6:	d1e1      	bne.n	8003cac <__ssputs_r+0x70>
 8003ce8:	4650      	mov	r0, sl
 8003cea:	6921      	ldr	r1, [r4, #16]
 8003cec:	f000 face 	bl	800428c <_free_r>
 8003cf0:	e7c7      	b.n	8003c82 <__ssputs_r+0x46>
	...

08003cf4 <_svfiprintf_r>:
 8003cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cf8:	4698      	mov	r8, r3
 8003cfa:	898b      	ldrh	r3, [r1, #12]
 8003cfc:	4607      	mov	r7, r0
 8003cfe:	061b      	lsls	r3, r3, #24
 8003d00:	460d      	mov	r5, r1
 8003d02:	4614      	mov	r4, r2
 8003d04:	b09d      	sub	sp, #116	; 0x74
 8003d06:	d50e      	bpl.n	8003d26 <_svfiprintf_r+0x32>
 8003d08:	690b      	ldr	r3, [r1, #16]
 8003d0a:	b963      	cbnz	r3, 8003d26 <_svfiprintf_r+0x32>
 8003d0c:	2140      	movs	r1, #64	; 0x40
 8003d0e:	f000 fb25 	bl	800435c <_malloc_r>
 8003d12:	6028      	str	r0, [r5, #0]
 8003d14:	6128      	str	r0, [r5, #16]
 8003d16:	b920      	cbnz	r0, 8003d22 <_svfiprintf_r+0x2e>
 8003d18:	230c      	movs	r3, #12
 8003d1a:	603b      	str	r3, [r7, #0]
 8003d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d20:	e0d1      	b.n	8003ec6 <_svfiprintf_r+0x1d2>
 8003d22:	2340      	movs	r3, #64	; 0x40
 8003d24:	616b      	str	r3, [r5, #20]
 8003d26:	2300      	movs	r3, #0
 8003d28:	9309      	str	r3, [sp, #36]	; 0x24
 8003d2a:	2320      	movs	r3, #32
 8003d2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d30:	2330      	movs	r3, #48	; 0x30
 8003d32:	f04f 0901 	mov.w	r9, #1
 8003d36:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d3a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003ee0 <_svfiprintf_r+0x1ec>
 8003d3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d42:	4623      	mov	r3, r4
 8003d44:	469a      	mov	sl, r3
 8003d46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d4a:	b10a      	cbz	r2, 8003d50 <_svfiprintf_r+0x5c>
 8003d4c:	2a25      	cmp	r2, #37	; 0x25
 8003d4e:	d1f9      	bne.n	8003d44 <_svfiprintf_r+0x50>
 8003d50:	ebba 0b04 	subs.w	fp, sl, r4
 8003d54:	d00b      	beq.n	8003d6e <_svfiprintf_r+0x7a>
 8003d56:	465b      	mov	r3, fp
 8003d58:	4622      	mov	r2, r4
 8003d5a:	4629      	mov	r1, r5
 8003d5c:	4638      	mov	r0, r7
 8003d5e:	f7ff ff6d 	bl	8003c3c <__ssputs_r>
 8003d62:	3001      	adds	r0, #1
 8003d64:	f000 80aa 	beq.w	8003ebc <_svfiprintf_r+0x1c8>
 8003d68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003d6a:	445a      	add	r2, fp
 8003d6c:	9209      	str	r2, [sp, #36]	; 0x24
 8003d6e:	f89a 3000 	ldrb.w	r3, [sl]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f000 80a2 	beq.w	8003ebc <_svfiprintf_r+0x1c8>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d82:	f10a 0a01 	add.w	sl, sl, #1
 8003d86:	9304      	str	r3, [sp, #16]
 8003d88:	9307      	str	r3, [sp, #28]
 8003d8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003d8e:	931a      	str	r3, [sp, #104]	; 0x68
 8003d90:	4654      	mov	r4, sl
 8003d92:	2205      	movs	r2, #5
 8003d94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d98:	4851      	ldr	r0, [pc, #324]	; (8003ee0 <_svfiprintf_r+0x1ec>)
 8003d9a:	f000 fa41 	bl	8004220 <memchr>
 8003d9e:	9a04      	ldr	r2, [sp, #16]
 8003da0:	b9d8      	cbnz	r0, 8003dda <_svfiprintf_r+0xe6>
 8003da2:	06d0      	lsls	r0, r2, #27
 8003da4:	bf44      	itt	mi
 8003da6:	2320      	movmi	r3, #32
 8003da8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003dac:	0711      	lsls	r1, r2, #28
 8003dae:	bf44      	itt	mi
 8003db0:	232b      	movmi	r3, #43	; 0x2b
 8003db2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003db6:	f89a 3000 	ldrb.w	r3, [sl]
 8003dba:	2b2a      	cmp	r3, #42	; 0x2a
 8003dbc:	d015      	beq.n	8003dea <_svfiprintf_r+0xf6>
 8003dbe:	4654      	mov	r4, sl
 8003dc0:	2000      	movs	r0, #0
 8003dc2:	f04f 0c0a 	mov.w	ip, #10
 8003dc6:	9a07      	ldr	r2, [sp, #28]
 8003dc8:	4621      	mov	r1, r4
 8003dca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dce:	3b30      	subs	r3, #48	; 0x30
 8003dd0:	2b09      	cmp	r3, #9
 8003dd2:	d94e      	bls.n	8003e72 <_svfiprintf_r+0x17e>
 8003dd4:	b1b0      	cbz	r0, 8003e04 <_svfiprintf_r+0x110>
 8003dd6:	9207      	str	r2, [sp, #28]
 8003dd8:	e014      	b.n	8003e04 <_svfiprintf_r+0x110>
 8003dda:	eba0 0308 	sub.w	r3, r0, r8
 8003dde:	fa09 f303 	lsl.w	r3, r9, r3
 8003de2:	4313      	orrs	r3, r2
 8003de4:	46a2      	mov	sl, r4
 8003de6:	9304      	str	r3, [sp, #16]
 8003de8:	e7d2      	b.n	8003d90 <_svfiprintf_r+0x9c>
 8003dea:	9b03      	ldr	r3, [sp, #12]
 8003dec:	1d19      	adds	r1, r3, #4
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	9103      	str	r1, [sp, #12]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	bfbb      	ittet	lt
 8003df6:	425b      	neglt	r3, r3
 8003df8:	f042 0202 	orrlt.w	r2, r2, #2
 8003dfc:	9307      	strge	r3, [sp, #28]
 8003dfe:	9307      	strlt	r3, [sp, #28]
 8003e00:	bfb8      	it	lt
 8003e02:	9204      	strlt	r2, [sp, #16]
 8003e04:	7823      	ldrb	r3, [r4, #0]
 8003e06:	2b2e      	cmp	r3, #46	; 0x2e
 8003e08:	d10c      	bne.n	8003e24 <_svfiprintf_r+0x130>
 8003e0a:	7863      	ldrb	r3, [r4, #1]
 8003e0c:	2b2a      	cmp	r3, #42	; 0x2a
 8003e0e:	d135      	bne.n	8003e7c <_svfiprintf_r+0x188>
 8003e10:	9b03      	ldr	r3, [sp, #12]
 8003e12:	3402      	adds	r4, #2
 8003e14:	1d1a      	adds	r2, r3, #4
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	9203      	str	r2, [sp, #12]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	bfb8      	it	lt
 8003e1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e22:	9305      	str	r3, [sp, #20]
 8003e24:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003ee4 <_svfiprintf_r+0x1f0>
 8003e28:	2203      	movs	r2, #3
 8003e2a:	4650      	mov	r0, sl
 8003e2c:	7821      	ldrb	r1, [r4, #0]
 8003e2e:	f000 f9f7 	bl	8004220 <memchr>
 8003e32:	b140      	cbz	r0, 8003e46 <_svfiprintf_r+0x152>
 8003e34:	2340      	movs	r3, #64	; 0x40
 8003e36:	eba0 000a 	sub.w	r0, r0, sl
 8003e3a:	fa03 f000 	lsl.w	r0, r3, r0
 8003e3e:	9b04      	ldr	r3, [sp, #16]
 8003e40:	3401      	adds	r4, #1
 8003e42:	4303      	orrs	r3, r0
 8003e44:	9304      	str	r3, [sp, #16]
 8003e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e4a:	2206      	movs	r2, #6
 8003e4c:	4826      	ldr	r0, [pc, #152]	; (8003ee8 <_svfiprintf_r+0x1f4>)
 8003e4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e52:	f000 f9e5 	bl	8004220 <memchr>
 8003e56:	2800      	cmp	r0, #0
 8003e58:	d038      	beq.n	8003ecc <_svfiprintf_r+0x1d8>
 8003e5a:	4b24      	ldr	r3, [pc, #144]	; (8003eec <_svfiprintf_r+0x1f8>)
 8003e5c:	bb1b      	cbnz	r3, 8003ea6 <_svfiprintf_r+0x1b2>
 8003e5e:	9b03      	ldr	r3, [sp, #12]
 8003e60:	3307      	adds	r3, #7
 8003e62:	f023 0307 	bic.w	r3, r3, #7
 8003e66:	3308      	adds	r3, #8
 8003e68:	9303      	str	r3, [sp, #12]
 8003e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e6c:	4433      	add	r3, r6
 8003e6e:	9309      	str	r3, [sp, #36]	; 0x24
 8003e70:	e767      	b.n	8003d42 <_svfiprintf_r+0x4e>
 8003e72:	460c      	mov	r4, r1
 8003e74:	2001      	movs	r0, #1
 8003e76:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e7a:	e7a5      	b.n	8003dc8 <_svfiprintf_r+0xd4>
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	f04f 0c0a 	mov.w	ip, #10
 8003e82:	4619      	mov	r1, r3
 8003e84:	3401      	adds	r4, #1
 8003e86:	9305      	str	r3, [sp, #20]
 8003e88:	4620      	mov	r0, r4
 8003e8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e8e:	3a30      	subs	r2, #48	; 0x30
 8003e90:	2a09      	cmp	r2, #9
 8003e92:	d903      	bls.n	8003e9c <_svfiprintf_r+0x1a8>
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0c5      	beq.n	8003e24 <_svfiprintf_r+0x130>
 8003e98:	9105      	str	r1, [sp, #20]
 8003e9a:	e7c3      	b.n	8003e24 <_svfiprintf_r+0x130>
 8003e9c:	4604      	mov	r4, r0
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	fb0c 2101 	mla	r1, ip, r1, r2
 8003ea4:	e7f0      	b.n	8003e88 <_svfiprintf_r+0x194>
 8003ea6:	ab03      	add	r3, sp, #12
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	462a      	mov	r2, r5
 8003eac:	4638      	mov	r0, r7
 8003eae:	4b10      	ldr	r3, [pc, #64]	; (8003ef0 <_svfiprintf_r+0x1fc>)
 8003eb0:	a904      	add	r1, sp, #16
 8003eb2:	f3af 8000 	nop.w
 8003eb6:	1c42      	adds	r2, r0, #1
 8003eb8:	4606      	mov	r6, r0
 8003eba:	d1d6      	bne.n	8003e6a <_svfiprintf_r+0x176>
 8003ebc:	89ab      	ldrh	r3, [r5, #12]
 8003ebe:	065b      	lsls	r3, r3, #25
 8003ec0:	f53f af2c 	bmi.w	8003d1c <_svfiprintf_r+0x28>
 8003ec4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ec6:	b01d      	add	sp, #116	; 0x74
 8003ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ecc:	ab03      	add	r3, sp, #12
 8003ece:	9300      	str	r3, [sp, #0]
 8003ed0:	462a      	mov	r2, r5
 8003ed2:	4638      	mov	r0, r7
 8003ed4:	4b06      	ldr	r3, [pc, #24]	; (8003ef0 <_svfiprintf_r+0x1fc>)
 8003ed6:	a904      	add	r1, sp, #16
 8003ed8:	f000 f87c 	bl	8003fd4 <_printf_i>
 8003edc:	e7eb      	b.n	8003eb6 <_svfiprintf_r+0x1c2>
 8003ede:	bf00      	nop
 8003ee0:	08004556 	.word	0x08004556
 8003ee4:	0800455c 	.word	0x0800455c
 8003ee8:	08004560 	.word	0x08004560
 8003eec:	00000000 	.word	0x00000000
 8003ef0:	08003c3d 	.word	0x08003c3d

08003ef4 <_printf_common>:
 8003ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ef8:	4616      	mov	r6, r2
 8003efa:	4699      	mov	r9, r3
 8003efc:	688a      	ldr	r2, [r1, #8]
 8003efe:	690b      	ldr	r3, [r1, #16]
 8003f00:	4607      	mov	r7, r0
 8003f02:	4293      	cmp	r3, r2
 8003f04:	bfb8      	it	lt
 8003f06:	4613      	movlt	r3, r2
 8003f08:	6033      	str	r3, [r6, #0]
 8003f0a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f0e:	460c      	mov	r4, r1
 8003f10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f14:	b10a      	cbz	r2, 8003f1a <_printf_common+0x26>
 8003f16:	3301      	adds	r3, #1
 8003f18:	6033      	str	r3, [r6, #0]
 8003f1a:	6823      	ldr	r3, [r4, #0]
 8003f1c:	0699      	lsls	r1, r3, #26
 8003f1e:	bf42      	ittt	mi
 8003f20:	6833      	ldrmi	r3, [r6, #0]
 8003f22:	3302      	addmi	r3, #2
 8003f24:	6033      	strmi	r3, [r6, #0]
 8003f26:	6825      	ldr	r5, [r4, #0]
 8003f28:	f015 0506 	ands.w	r5, r5, #6
 8003f2c:	d106      	bne.n	8003f3c <_printf_common+0x48>
 8003f2e:	f104 0a19 	add.w	sl, r4, #25
 8003f32:	68e3      	ldr	r3, [r4, #12]
 8003f34:	6832      	ldr	r2, [r6, #0]
 8003f36:	1a9b      	subs	r3, r3, r2
 8003f38:	42ab      	cmp	r3, r5
 8003f3a:	dc28      	bgt.n	8003f8e <_printf_common+0x9a>
 8003f3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f40:	1e13      	subs	r3, r2, #0
 8003f42:	6822      	ldr	r2, [r4, #0]
 8003f44:	bf18      	it	ne
 8003f46:	2301      	movne	r3, #1
 8003f48:	0692      	lsls	r2, r2, #26
 8003f4a:	d42d      	bmi.n	8003fa8 <_printf_common+0xb4>
 8003f4c:	4649      	mov	r1, r9
 8003f4e:	4638      	mov	r0, r7
 8003f50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f54:	47c0      	blx	r8
 8003f56:	3001      	adds	r0, #1
 8003f58:	d020      	beq.n	8003f9c <_printf_common+0xa8>
 8003f5a:	6823      	ldr	r3, [r4, #0]
 8003f5c:	68e5      	ldr	r5, [r4, #12]
 8003f5e:	f003 0306 	and.w	r3, r3, #6
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	bf18      	it	ne
 8003f66:	2500      	movne	r5, #0
 8003f68:	6832      	ldr	r2, [r6, #0]
 8003f6a:	f04f 0600 	mov.w	r6, #0
 8003f6e:	68a3      	ldr	r3, [r4, #8]
 8003f70:	bf08      	it	eq
 8003f72:	1aad      	subeq	r5, r5, r2
 8003f74:	6922      	ldr	r2, [r4, #16]
 8003f76:	bf08      	it	eq
 8003f78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	bfc4      	itt	gt
 8003f80:	1a9b      	subgt	r3, r3, r2
 8003f82:	18ed      	addgt	r5, r5, r3
 8003f84:	341a      	adds	r4, #26
 8003f86:	42b5      	cmp	r5, r6
 8003f88:	d11a      	bne.n	8003fc0 <_printf_common+0xcc>
 8003f8a:	2000      	movs	r0, #0
 8003f8c:	e008      	b.n	8003fa0 <_printf_common+0xac>
 8003f8e:	2301      	movs	r3, #1
 8003f90:	4652      	mov	r2, sl
 8003f92:	4649      	mov	r1, r9
 8003f94:	4638      	mov	r0, r7
 8003f96:	47c0      	blx	r8
 8003f98:	3001      	adds	r0, #1
 8003f9a:	d103      	bne.n	8003fa4 <_printf_common+0xb0>
 8003f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003fa4:	3501      	adds	r5, #1
 8003fa6:	e7c4      	b.n	8003f32 <_printf_common+0x3e>
 8003fa8:	2030      	movs	r0, #48	; 0x30
 8003faa:	18e1      	adds	r1, r4, r3
 8003fac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fb0:	1c5a      	adds	r2, r3, #1
 8003fb2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fb6:	4422      	add	r2, r4
 8003fb8:	3302      	adds	r3, #2
 8003fba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fbe:	e7c5      	b.n	8003f4c <_printf_common+0x58>
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	4622      	mov	r2, r4
 8003fc4:	4649      	mov	r1, r9
 8003fc6:	4638      	mov	r0, r7
 8003fc8:	47c0      	blx	r8
 8003fca:	3001      	adds	r0, #1
 8003fcc:	d0e6      	beq.n	8003f9c <_printf_common+0xa8>
 8003fce:	3601      	adds	r6, #1
 8003fd0:	e7d9      	b.n	8003f86 <_printf_common+0x92>
	...

08003fd4 <_printf_i>:
 8003fd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fd8:	7e0f      	ldrb	r7, [r1, #24]
 8003fda:	4691      	mov	r9, r2
 8003fdc:	2f78      	cmp	r7, #120	; 0x78
 8003fde:	4680      	mov	r8, r0
 8003fe0:	460c      	mov	r4, r1
 8003fe2:	469a      	mov	sl, r3
 8003fe4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003fe6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003fea:	d807      	bhi.n	8003ffc <_printf_i+0x28>
 8003fec:	2f62      	cmp	r7, #98	; 0x62
 8003fee:	d80a      	bhi.n	8004006 <_printf_i+0x32>
 8003ff0:	2f00      	cmp	r7, #0
 8003ff2:	f000 80d9 	beq.w	80041a8 <_printf_i+0x1d4>
 8003ff6:	2f58      	cmp	r7, #88	; 0x58
 8003ff8:	f000 80a4 	beq.w	8004144 <_printf_i+0x170>
 8003ffc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004000:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004004:	e03a      	b.n	800407c <_printf_i+0xa8>
 8004006:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800400a:	2b15      	cmp	r3, #21
 800400c:	d8f6      	bhi.n	8003ffc <_printf_i+0x28>
 800400e:	a101      	add	r1, pc, #4	; (adr r1, 8004014 <_printf_i+0x40>)
 8004010:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004014:	0800406d 	.word	0x0800406d
 8004018:	08004081 	.word	0x08004081
 800401c:	08003ffd 	.word	0x08003ffd
 8004020:	08003ffd 	.word	0x08003ffd
 8004024:	08003ffd 	.word	0x08003ffd
 8004028:	08003ffd 	.word	0x08003ffd
 800402c:	08004081 	.word	0x08004081
 8004030:	08003ffd 	.word	0x08003ffd
 8004034:	08003ffd 	.word	0x08003ffd
 8004038:	08003ffd 	.word	0x08003ffd
 800403c:	08003ffd 	.word	0x08003ffd
 8004040:	0800418f 	.word	0x0800418f
 8004044:	080040b1 	.word	0x080040b1
 8004048:	08004171 	.word	0x08004171
 800404c:	08003ffd 	.word	0x08003ffd
 8004050:	08003ffd 	.word	0x08003ffd
 8004054:	080041b1 	.word	0x080041b1
 8004058:	08003ffd 	.word	0x08003ffd
 800405c:	080040b1 	.word	0x080040b1
 8004060:	08003ffd 	.word	0x08003ffd
 8004064:	08003ffd 	.word	0x08003ffd
 8004068:	08004179 	.word	0x08004179
 800406c:	682b      	ldr	r3, [r5, #0]
 800406e:	1d1a      	adds	r2, r3, #4
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	602a      	str	r2, [r5, #0]
 8004074:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004078:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800407c:	2301      	movs	r3, #1
 800407e:	e0a4      	b.n	80041ca <_printf_i+0x1f6>
 8004080:	6820      	ldr	r0, [r4, #0]
 8004082:	6829      	ldr	r1, [r5, #0]
 8004084:	0606      	lsls	r6, r0, #24
 8004086:	f101 0304 	add.w	r3, r1, #4
 800408a:	d50a      	bpl.n	80040a2 <_printf_i+0xce>
 800408c:	680e      	ldr	r6, [r1, #0]
 800408e:	602b      	str	r3, [r5, #0]
 8004090:	2e00      	cmp	r6, #0
 8004092:	da03      	bge.n	800409c <_printf_i+0xc8>
 8004094:	232d      	movs	r3, #45	; 0x2d
 8004096:	4276      	negs	r6, r6
 8004098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800409c:	230a      	movs	r3, #10
 800409e:	485e      	ldr	r0, [pc, #376]	; (8004218 <_printf_i+0x244>)
 80040a0:	e019      	b.n	80040d6 <_printf_i+0x102>
 80040a2:	680e      	ldr	r6, [r1, #0]
 80040a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80040a8:	602b      	str	r3, [r5, #0]
 80040aa:	bf18      	it	ne
 80040ac:	b236      	sxthne	r6, r6
 80040ae:	e7ef      	b.n	8004090 <_printf_i+0xbc>
 80040b0:	682b      	ldr	r3, [r5, #0]
 80040b2:	6820      	ldr	r0, [r4, #0]
 80040b4:	1d19      	adds	r1, r3, #4
 80040b6:	6029      	str	r1, [r5, #0]
 80040b8:	0601      	lsls	r1, r0, #24
 80040ba:	d501      	bpl.n	80040c0 <_printf_i+0xec>
 80040bc:	681e      	ldr	r6, [r3, #0]
 80040be:	e002      	b.n	80040c6 <_printf_i+0xf2>
 80040c0:	0646      	lsls	r6, r0, #25
 80040c2:	d5fb      	bpl.n	80040bc <_printf_i+0xe8>
 80040c4:	881e      	ldrh	r6, [r3, #0]
 80040c6:	2f6f      	cmp	r7, #111	; 0x6f
 80040c8:	bf0c      	ite	eq
 80040ca:	2308      	moveq	r3, #8
 80040cc:	230a      	movne	r3, #10
 80040ce:	4852      	ldr	r0, [pc, #328]	; (8004218 <_printf_i+0x244>)
 80040d0:	2100      	movs	r1, #0
 80040d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040d6:	6865      	ldr	r5, [r4, #4]
 80040d8:	2d00      	cmp	r5, #0
 80040da:	bfa8      	it	ge
 80040dc:	6821      	ldrge	r1, [r4, #0]
 80040de:	60a5      	str	r5, [r4, #8]
 80040e0:	bfa4      	itt	ge
 80040e2:	f021 0104 	bicge.w	r1, r1, #4
 80040e6:	6021      	strge	r1, [r4, #0]
 80040e8:	b90e      	cbnz	r6, 80040ee <_printf_i+0x11a>
 80040ea:	2d00      	cmp	r5, #0
 80040ec:	d04d      	beq.n	800418a <_printf_i+0x1b6>
 80040ee:	4615      	mov	r5, r2
 80040f0:	fbb6 f1f3 	udiv	r1, r6, r3
 80040f4:	fb03 6711 	mls	r7, r3, r1, r6
 80040f8:	5dc7      	ldrb	r7, [r0, r7]
 80040fa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80040fe:	4637      	mov	r7, r6
 8004100:	42bb      	cmp	r3, r7
 8004102:	460e      	mov	r6, r1
 8004104:	d9f4      	bls.n	80040f0 <_printf_i+0x11c>
 8004106:	2b08      	cmp	r3, #8
 8004108:	d10b      	bne.n	8004122 <_printf_i+0x14e>
 800410a:	6823      	ldr	r3, [r4, #0]
 800410c:	07de      	lsls	r6, r3, #31
 800410e:	d508      	bpl.n	8004122 <_printf_i+0x14e>
 8004110:	6923      	ldr	r3, [r4, #16]
 8004112:	6861      	ldr	r1, [r4, #4]
 8004114:	4299      	cmp	r1, r3
 8004116:	bfde      	ittt	le
 8004118:	2330      	movle	r3, #48	; 0x30
 800411a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800411e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004122:	1b52      	subs	r2, r2, r5
 8004124:	6122      	str	r2, [r4, #16]
 8004126:	464b      	mov	r3, r9
 8004128:	4621      	mov	r1, r4
 800412a:	4640      	mov	r0, r8
 800412c:	f8cd a000 	str.w	sl, [sp]
 8004130:	aa03      	add	r2, sp, #12
 8004132:	f7ff fedf 	bl	8003ef4 <_printf_common>
 8004136:	3001      	adds	r0, #1
 8004138:	d14c      	bne.n	80041d4 <_printf_i+0x200>
 800413a:	f04f 30ff 	mov.w	r0, #4294967295
 800413e:	b004      	add	sp, #16
 8004140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004144:	4834      	ldr	r0, [pc, #208]	; (8004218 <_printf_i+0x244>)
 8004146:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800414a:	6829      	ldr	r1, [r5, #0]
 800414c:	6823      	ldr	r3, [r4, #0]
 800414e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004152:	6029      	str	r1, [r5, #0]
 8004154:	061d      	lsls	r5, r3, #24
 8004156:	d514      	bpl.n	8004182 <_printf_i+0x1ae>
 8004158:	07df      	lsls	r7, r3, #31
 800415a:	bf44      	itt	mi
 800415c:	f043 0320 	orrmi.w	r3, r3, #32
 8004160:	6023      	strmi	r3, [r4, #0]
 8004162:	b91e      	cbnz	r6, 800416c <_printf_i+0x198>
 8004164:	6823      	ldr	r3, [r4, #0]
 8004166:	f023 0320 	bic.w	r3, r3, #32
 800416a:	6023      	str	r3, [r4, #0]
 800416c:	2310      	movs	r3, #16
 800416e:	e7af      	b.n	80040d0 <_printf_i+0xfc>
 8004170:	6823      	ldr	r3, [r4, #0]
 8004172:	f043 0320 	orr.w	r3, r3, #32
 8004176:	6023      	str	r3, [r4, #0]
 8004178:	2378      	movs	r3, #120	; 0x78
 800417a:	4828      	ldr	r0, [pc, #160]	; (800421c <_printf_i+0x248>)
 800417c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004180:	e7e3      	b.n	800414a <_printf_i+0x176>
 8004182:	0659      	lsls	r1, r3, #25
 8004184:	bf48      	it	mi
 8004186:	b2b6      	uxthmi	r6, r6
 8004188:	e7e6      	b.n	8004158 <_printf_i+0x184>
 800418a:	4615      	mov	r5, r2
 800418c:	e7bb      	b.n	8004106 <_printf_i+0x132>
 800418e:	682b      	ldr	r3, [r5, #0]
 8004190:	6826      	ldr	r6, [r4, #0]
 8004192:	1d18      	adds	r0, r3, #4
 8004194:	6961      	ldr	r1, [r4, #20]
 8004196:	6028      	str	r0, [r5, #0]
 8004198:	0635      	lsls	r5, r6, #24
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	d501      	bpl.n	80041a2 <_printf_i+0x1ce>
 800419e:	6019      	str	r1, [r3, #0]
 80041a0:	e002      	b.n	80041a8 <_printf_i+0x1d4>
 80041a2:	0670      	lsls	r0, r6, #25
 80041a4:	d5fb      	bpl.n	800419e <_printf_i+0x1ca>
 80041a6:	8019      	strh	r1, [r3, #0]
 80041a8:	2300      	movs	r3, #0
 80041aa:	4615      	mov	r5, r2
 80041ac:	6123      	str	r3, [r4, #16]
 80041ae:	e7ba      	b.n	8004126 <_printf_i+0x152>
 80041b0:	682b      	ldr	r3, [r5, #0]
 80041b2:	2100      	movs	r1, #0
 80041b4:	1d1a      	adds	r2, r3, #4
 80041b6:	602a      	str	r2, [r5, #0]
 80041b8:	681d      	ldr	r5, [r3, #0]
 80041ba:	6862      	ldr	r2, [r4, #4]
 80041bc:	4628      	mov	r0, r5
 80041be:	f000 f82f 	bl	8004220 <memchr>
 80041c2:	b108      	cbz	r0, 80041c8 <_printf_i+0x1f4>
 80041c4:	1b40      	subs	r0, r0, r5
 80041c6:	6060      	str	r0, [r4, #4]
 80041c8:	6863      	ldr	r3, [r4, #4]
 80041ca:	6123      	str	r3, [r4, #16]
 80041cc:	2300      	movs	r3, #0
 80041ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041d2:	e7a8      	b.n	8004126 <_printf_i+0x152>
 80041d4:	462a      	mov	r2, r5
 80041d6:	4649      	mov	r1, r9
 80041d8:	4640      	mov	r0, r8
 80041da:	6923      	ldr	r3, [r4, #16]
 80041dc:	47d0      	blx	sl
 80041de:	3001      	adds	r0, #1
 80041e0:	d0ab      	beq.n	800413a <_printf_i+0x166>
 80041e2:	6823      	ldr	r3, [r4, #0]
 80041e4:	079b      	lsls	r3, r3, #30
 80041e6:	d413      	bmi.n	8004210 <_printf_i+0x23c>
 80041e8:	68e0      	ldr	r0, [r4, #12]
 80041ea:	9b03      	ldr	r3, [sp, #12]
 80041ec:	4298      	cmp	r0, r3
 80041ee:	bfb8      	it	lt
 80041f0:	4618      	movlt	r0, r3
 80041f2:	e7a4      	b.n	800413e <_printf_i+0x16a>
 80041f4:	2301      	movs	r3, #1
 80041f6:	4632      	mov	r2, r6
 80041f8:	4649      	mov	r1, r9
 80041fa:	4640      	mov	r0, r8
 80041fc:	47d0      	blx	sl
 80041fe:	3001      	adds	r0, #1
 8004200:	d09b      	beq.n	800413a <_printf_i+0x166>
 8004202:	3501      	adds	r5, #1
 8004204:	68e3      	ldr	r3, [r4, #12]
 8004206:	9903      	ldr	r1, [sp, #12]
 8004208:	1a5b      	subs	r3, r3, r1
 800420a:	42ab      	cmp	r3, r5
 800420c:	dcf2      	bgt.n	80041f4 <_printf_i+0x220>
 800420e:	e7eb      	b.n	80041e8 <_printf_i+0x214>
 8004210:	2500      	movs	r5, #0
 8004212:	f104 0619 	add.w	r6, r4, #25
 8004216:	e7f5      	b.n	8004204 <_printf_i+0x230>
 8004218:	08004567 	.word	0x08004567
 800421c:	08004578 	.word	0x08004578

08004220 <memchr>:
 8004220:	4603      	mov	r3, r0
 8004222:	b510      	push	{r4, lr}
 8004224:	b2c9      	uxtb	r1, r1
 8004226:	4402      	add	r2, r0
 8004228:	4293      	cmp	r3, r2
 800422a:	4618      	mov	r0, r3
 800422c:	d101      	bne.n	8004232 <memchr+0x12>
 800422e:	2000      	movs	r0, #0
 8004230:	e003      	b.n	800423a <memchr+0x1a>
 8004232:	7804      	ldrb	r4, [r0, #0]
 8004234:	3301      	adds	r3, #1
 8004236:	428c      	cmp	r4, r1
 8004238:	d1f6      	bne.n	8004228 <memchr+0x8>
 800423a:	bd10      	pop	{r4, pc}

0800423c <memcpy>:
 800423c:	440a      	add	r2, r1
 800423e:	4291      	cmp	r1, r2
 8004240:	f100 33ff 	add.w	r3, r0, #4294967295
 8004244:	d100      	bne.n	8004248 <memcpy+0xc>
 8004246:	4770      	bx	lr
 8004248:	b510      	push	{r4, lr}
 800424a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800424e:	4291      	cmp	r1, r2
 8004250:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004254:	d1f9      	bne.n	800424a <memcpy+0xe>
 8004256:	bd10      	pop	{r4, pc}

08004258 <memmove>:
 8004258:	4288      	cmp	r0, r1
 800425a:	b510      	push	{r4, lr}
 800425c:	eb01 0402 	add.w	r4, r1, r2
 8004260:	d902      	bls.n	8004268 <memmove+0x10>
 8004262:	4284      	cmp	r4, r0
 8004264:	4623      	mov	r3, r4
 8004266:	d807      	bhi.n	8004278 <memmove+0x20>
 8004268:	1e43      	subs	r3, r0, #1
 800426a:	42a1      	cmp	r1, r4
 800426c:	d008      	beq.n	8004280 <memmove+0x28>
 800426e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004272:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004276:	e7f8      	b.n	800426a <memmove+0x12>
 8004278:	4601      	mov	r1, r0
 800427a:	4402      	add	r2, r0
 800427c:	428a      	cmp	r2, r1
 800427e:	d100      	bne.n	8004282 <memmove+0x2a>
 8004280:	bd10      	pop	{r4, pc}
 8004282:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004286:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800428a:	e7f7      	b.n	800427c <memmove+0x24>

0800428c <_free_r>:
 800428c:	b538      	push	{r3, r4, r5, lr}
 800428e:	4605      	mov	r5, r0
 8004290:	2900      	cmp	r1, #0
 8004292:	d040      	beq.n	8004316 <_free_r+0x8a>
 8004294:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004298:	1f0c      	subs	r4, r1, #4
 800429a:	2b00      	cmp	r3, #0
 800429c:	bfb8      	it	lt
 800429e:	18e4      	addlt	r4, r4, r3
 80042a0:	f000 f910 	bl	80044c4 <__malloc_lock>
 80042a4:	4a1c      	ldr	r2, [pc, #112]	; (8004318 <_free_r+0x8c>)
 80042a6:	6813      	ldr	r3, [r2, #0]
 80042a8:	b933      	cbnz	r3, 80042b8 <_free_r+0x2c>
 80042aa:	6063      	str	r3, [r4, #4]
 80042ac:	6014      	str	r4, [r2, #0]
 80042ae:	4628      	mov	r0, r5
 80042b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042b4:	f000 b90c 	b.w	80044d0 <__malloc_unlock>
 80042b8:	42a3      	cmp	r3, r4
 80042ba:	d908      	bls.n	80042ce <_free_r+0x42>
 80042bc:	6820      	ldr	r0, [r4, #0]
 80042be:	1821      	adds	r1, r4, r0
 80042c0:	428b      	cmp	r3, r1
 80042c2:	bf01      	itttt	eq
 80042c4:	6819      	ldreq	r1, [r3, #0]
 80042c6:	685b      	ldreq	r3, [r3, #4]
 80042c8:	1809      	addeq	r1, r1, r0
 80042ca:	6021      	streq	r1, [r4, #0]
 80042cc:	e7ed      	b.n	80042aa <_free_r+0x1e>
 80042ce:	461a      	mov	r2, r3
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	b10b      	cbz	r3, 80042d8 <_free_r+0x4c>
 80042d4:	42a3      	cmp	r3, r4
 80042d6:	d9fa      	bls.n	80042ce <_free_r+0x42>
 80042d8:	6811      	ldr	r1, [r2, #0]
 80042da:	1850      	adds	r0, r2, r1
 80042dc:	42a0      	cmp	r0, r4
 80042de:	d10b      	bne.n	80042f8 <_free_r+0x6c>
 80042e0:	6820      	ldr	r0, [r4, #0]
 80042e2:	4401      	add	r1, r0
 80042e4:	1850      	adds	r0, r2, r1
 80042e6:	4283      	cmp	r3, r0
 80042e8:	6011      	str	r1, [r2, #0]
 80042ea:	d1e0      	bne.n	80042ae <_free_r+0x22>
 80042ec:	6818      	ldr	r0, [r3, #0]
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	4401      	add	r1, r0
 80042f2:	6011      	str	r1, [r2, #0]
 80042f4:	6053      	str	r3, [r2, #4]
 80042f6:	e7da      	b.n	80042ae <_free_r+0x22>
 80042f8:	d902      	bls.n	8004300 <_free_r+0x74>
 80042fa:	230c      	movs	r3, #12
 80042fc:	602b      	str	r3, [r5, #0]
 80042fe:	e7d6      	b.n	80042ae <_free_r+0x22>
 8004300:	6820      	ldr	r0, [r4, #0]
 8004302:	1821      	adds	r1, r4, r0
 8004304:	428b      	cmp	r3, r1
 8004306:	bf01      	itttt	eq
 8004308:	6819      	ldreq	r1, [r3, #0]
 800430a:	685b      	ldreq	r3, [r3, #4]
 800430c:	1809      	addeq	r1, r1, r0
 800430e:	6021      	streq	r1, [r4, #0]
 8004310:	6063      	str	r3, [r4, #4]
 8004312:	6054      	str	r4, [r2, #4]
 8004314:	e7cb      	b.n	80042ae <_free_r+0x22>
 8004316:	bd38      	pop	{r3, r4, r5, pc}
 8004318:	200001d8 	.word	0x200001d8

0800431c <sbrk_aligned>:
 800431c:	b570      	push	{r4, r5, r6, lr}
 800431e:	4e0e      	ldr	r6, [pc, #56]	; (8004358 <sbrk_aligned+0x3c>)
 8004320:	460c      	mov	r4, r1
 8004322:	6831      	ldr	r1, [r6, #0]
 8004324:	4605      	mov	r5, r0
 8004326:	b911      	cbnz	r1, 800432e <sbrk_aligned+0x12>
 8004328:	f000 f8bc 	bl	80044a4 <_sbrk_r>
 800432c:	6030      	str	r0, [r6, #0]
 800432e:	4621      	mov	r1, r4
 8004330:	4628      	mov	r0, r5
 8004332:	f000 f8b7 	bl	80044a4 <_sbrk_r>
 8004336:	1c43      	adds	r3, r0, #1
 8004338:	d00a      	beq.n	8004350 <sbrk_aligned+0x34>
 800433a:	1cc4      	adds	r4, r0, #3
 800433c:	f024 0403 	bic.w	r4, r4, #3
 8004340:	42a0      	cmp	r0, r4
 8004342:	d007      	beq.n	8004354 <sbrk_aligned+0x38>
 8004344:	1a21      	subs	r1, r4, r0
 8004346:	4628      	mov	r0, r5
 8004348:	f000 f8ac 	bl	80044a4 <_sbrk_r>
 800434c:	3001      	adds	r0, #1
 800434e:	d101      	bne.n	8004354 <sbrk_aligned+0x38>
 8004350:	f04f 34ff 	mov.w	r4, #4294967295
 8004354:	4620      	mov	r0, r4
 8004356:	bd70      	pop	{r4, r5, r6, pc}
 8004358:	200001dc 	.word	0x200001dc

0800435c <_malloc_r>:
 800435c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004360:	1ccd      	adds	r5, r1, #3
 8004362:	f025 0503 	bic.w	r5, r5, #3
 8004366:	3508      	adds	r5, #8
 8004368:	2d0c      	cmp	r5, #12
 800436a:	bf38      	it	cc
 800436c:	250c      	movcc	r5, #12
 800436e:	2d00      	cmp	r5, #0
 8004370:	4607      	mov	r7, r0
 8004372:	db01      	blt.n	8004378 <_malloc_r+0x1c>
 8004374:	42a9      	cmp	r1, r5
 8004376:	d905      	bls.n	8004384 <_malloc_r+0x28>
 8004378:	230c      	movs	r3, #12
 800437a:	2600      	movs	r6, #0
 800437c:	603b      	str	r3, [r7, #0]
 800437e:	4630      	mov	r0, r6
 8004380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004384:	4e2e      	ldr	r6, [pc, #184]	; (8004440 <_malloc_r+0xe4>)
 8004386:	f000 f89d 	bl	80044c4 <__malloc_lock>
 800438a:	6833      	ldr	r3, [r6, #0]
 800438c:	461c      	mov	r4, r3
 800438e:	bb34      	cbnz	r4, 80043de <_malloc_r+0x82>
 8004390:	4629      	mov	r1, r5
 8004392:	4638      	mov	r0, r7
 8004394:	f7ff ffc2 	bl	800431c <sbrk_aligned>
 8004398:	1c43      	adds	r3, r0, #1
 800439a:	4604      	mov	r4, r0
 800439c:	d14d      	bne.n	800443a <_malloc_r+0xde>
 800439e:	6834      	ldr	r4, [r6, #0]
 80043a0:	4626      	mov	r6, r4
 80043a2:	2e00      	cmp	r6, #0
 80043a4:	d140      	bne.n	8004428 <_malloc_r+0xcc>
 80043a6:	6823      	ldr	r3, [r4, #0]
 80043a8:	4631      	mov	r1, r6
 80043aa:	4638      	mov	r0, r7
 80043ac:	eb04 0803 	add.w	r8, r4, r3
 80043b0:	f000 f878 	bl	80044a4 <_sbrk_r>
 80043b4:	4580      	cmp	r8, r0
 80043b6:	d13a      	bne.n	800442e <_malloc_r+0xd2>
 80043b8:	6821      	ldr	r1, [r4, #0]
 80043ba:	3503      	adds	r5, #3
 80043bc:	1a6d      	subs	r5, r5, r1
 80043be:	f025 0503 	bic.w	r5, r5, #3
 80043c2:	3508      	adds	r5, #8
 80043c4:	2d0c      	cmp	r5, #12
 80043c6:	bf38      	it	cc
 80043c8:	250c      	movcc	r5, #12
 80043ca:	4638      	mov	r0, r7
 80043cc:	4629      	mov	r1, r5
 80043ce:	f7ff ffa5 	bl	800431c <sbrk_aligned>
 80043d2:	3001      	adds	r0, #1
 80043d4:	d02b      	beq.n	800442e <_malloc_r+0xd2>
 80043d6:	6823      	ldr	r3, [r4, #0]
 80043d8:	442b      	add	r3, r5
 80043da:	6023      	str	r3, [r4, #0]
 80043dc:	e00e      	b.n	80043fc <_malloc_r+0xa0>
 80043de:	6822      	ldr	r2, [r4, #0]
 80043e0:	1b52      	subs	r2, r2, r5
 80043e2:	d41e      	bmi.n	8004422 <_malloc_r+0xc6>
 80043e4:	2a0b      	cmp	r2, #11
 80043e6:	d916      	bls.n	8004416 <_malloc_r+0xba>
 80043e8:	1961      	adds	r1, r4, r5
 80043ea:	42a3      	cmp	r3, r4
 80043ec:	6025      	str	r5, [r4, #0]
 80043ee:	bf18      	it	ne
 80043f0:	6059      	strne	r1, [r3, #4]
 80043f2:	6863      	ldr	r3, [r4, #4]
 80043f4:	bf08      	it	eq
 80043f6:	6031      	streq	r1, [r6, #0]
 80043f8:	5162      	str	r2, [r4, r5]
 80043fa:	604b      	str	r3, [r1, #4]
 80043fc:	4638      	mov	r0, r7
 80043fe:	f104 060b 	add.w	r6, r4, #11
 8004402:	f000 f865 	bl	80044d0 <__malloc_unlock>
 8004406:	f026 0607 	bic.w	r6, r6, #7
 800440a:	1d23      	adds	r3, r4, #4
 800440c:	1af2      	subs	r2, r6, r3
 800440e:	d0b6      	beq.n	800437e <_malloc_r+0x22>
 8004410:	1b9b      	subs	r3, r3, r6
 8004412:	50a3      	str	r3, [r4, r2]
 8004414:	e7b3      	b.n	800437e <_malloc_r+0x22>
 8004416:	6862      	ldr	r2, [r4, #4]
 8004418:	42a3      	cmp	r3, r4
 800441a:	bf0c      	ite	eq
 800441c:	6032      	streq	r2, [r6, #0]
 800441e:	605a      	strne	r2, [r3, #4]
 8004420:	e7ec      	b.n	80043fc <_malloc_r+0xa0>
 8004422:	4623      	mov	r3, r4
 8004424:	6864      	ldr	r4, [r4, #4]
 8004426:	e7b2      	b.n	800438e <_malloc_r+0x32>
 8004428:	4634      	mov	r4, r6
 800442a:	6876      	ldr	r6, [r6, #4]
 800442c:	e7b9      	b.n	80043a2 <_malloc_r+0x46>
 800442e:	230c      	movs	r3, #12
 8004430:	4638      	mov	r0, r7
 8004432:	603b      	str	r3, [r7, #0]
 8004434:	f000 f84c 	bl	80044d0 <__malloc_unlock>
 8004438:	e7a1      	b.n	800437e <_malloc_r+0x22>
 800443a:	6025      	str	r5, [r4, #0]
 800443c:	e7de      	b.n	80043fc <_malloc_r+0xa0>
 800443e:	bf00      	nop
 8004440:	200001d8 	.word	0x200001d8

08004444 <_realloc_r>:
 8004444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004448:	4680      	mov	r8, r0
 800444a:	4614      	mov	r4, r2
 800444c:	460e      	mov	r6, r1
 800444e:	b921      	cbnz	r1, 800445a <_realloc_r+0x16>
 8004450:	4611      	mov	r1, r2
 8004452:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004456:	f7ff bf81 	b.w	800435c <_malloc_r>
 800445a:	b92a      	cbnz	r2, 8004468 <_realloc_r+0x24>
 800445c:	f7ff ff16 	bl	800428c <_free_r>
 8004460:	4625      	mov	r5, r4
 8004462:	4628      	mov	r0, r5
 8004464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004468:	f000 f838 	bl	80044dc <_malloc_usable_size_r>
 800446c:	4284      	cmp	r4, r0
 800446e:	4607      	mov	r7, r0
 8004470:	d802      	bhi.n	8004478 <_realloc_r+0x34>
 8004472:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004476:	d812      	bhi.n	800449e <_realloc_r+0x5a>
 8004478:	4621      	mov	r1, r4
 800447a:	4640      	mov	r0, r8
 800447c:	f7ff ff6e 	bl	800435c <_malloc_r>
 8004480:	4605      	mov	r5, r0
 8004482:	2800      	cmp	r0, #0
 8004484:	d0ed      	beq.n	8004462 <_realloc_r+0x1e>
 8004486:	42bc      	cmp	r4, r7
 8004488:	4622      	mov	r2, r4
 800448a:	4631      	mov	r1, r6
 800448c:	bf28      	it	cs
 800448e:	463a      	movcs	r2, r7
 8004490:	f7ff fed4 	bl	800423c <memcpy>
 8004494:	4631      	mov	r1, r6
 8004496:	4640      	mov	r0, r8
 8004498:	f7ff fef8 	bl	800428c <_free_r>
 800449c:	e7e1      	b.n	8004462 <_realloc_r+0x1e>
 800449e:	4635      	mov	r5, r6
 80044a0:	e7df      	b.n	8004462 <_realloc_r+0x1e>
	...

080044a4 <_sbrk_r>:
 80044a4:	b538      	push	{r3, r4, r5, lr}
 80044a6:	2300      	movs	r3, #0
 80044a8:	4d05      	ldr	r5, [pc, #20]	; (80044c0 <_sbrk_r+0x1c>)
 80044aa:	4604      	mov	r4, r0
 80044ac:	4608      	mov	r0, r1
 80044ae:	602b      	str	r3, [r5, #0]
 80044b0:	f7fc fba0 	bl	8000bf4 <_sbrk>
 80044b4:	1c43      	adds	r3, r0, #1
 80044b6:	d102      	bne.n	80044be <_sbrk_r+0x1a>
 80044b8:	682b      	ldr	r3, [r5, #0]
 80044ba:	b103      	cbz	r3, 80044be <_sbrk_r+0x1a>
 80044bc:	6023      	str	r3, [r4, #0]
 80044be:	bd38      	pop	{r3, r4, r5, pc}
 80044c0:	200001e0 	.word	0x200001e0

080044c4 <__malloc_lock>:
 80044c4:	4801      	ldr	r0, [pc, #4]	; (80044cc <__malloc_lock+0x8>)
 80044c6:	f000 b811 	b.w	80044ec <__retarget_lock_acquire_recursive>
 80044ca:	bf00      	nop
 80044cc:	200001e4 	.word	0x200001e4

080044d0 <__malloc_unlock>:
 80044d0:	4801      	ldr	r0, [pc, #4]	; (80044d8 <__malloc_unlock+0x8>)
 80044d2:	f000 b80c 	b.w	80044ee <__retarget_lock_release_recursive>
 80044d6:	bf00      	nop
 80044d8:	200001e4 	.word	0x200001e4

080044dc <_malloc_usable_size_r>:
 80044dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044e0:	1f18      	subs	r0, r3, #4
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	bfbc      	itt	lt
 80044e6:	580b      	ldrlt	r3, [r1, r0]
 80044e8:	18c0      	addlt	r0, r0, r3
 80044ea:	4770      	bx	lr

080044ec <__retarget_lock_acquire_recursive>:
 80044ec:	4770      	bx	lr

080044ee <__retarget_lock_release_recursive>:
 80044ee:	4770      	bx	lr

080044f0 <_init>:
 80044f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044f2:	bf00      	nop
 80044f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044f6:	bc08      	pop	{r3}
 80044f8:	469e      	mov	lr, r3
 80044fa:	4770      	bx	lr

080044fc <_fini>:
 80044fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044fe:	bf00      	nop
 8004500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004502:	bc08      	pop	{r3}
 8004504:	469e      	mov	lr, r3
 8004506:	4770      	bx	lr
