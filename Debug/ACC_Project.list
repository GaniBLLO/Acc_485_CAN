
ACC_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057c0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080058cc  080058cc  000158cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005950  08005950  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005950  08005950  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005950  08005950  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005950  08005950  00015950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005954  08005954  00015954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005958  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000074  080059cc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  080059cc  00020218  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe6f  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002474  00000000  00000000  0002ff0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  00032380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc0  00000000  00000000  00033110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001795e  00000000  00000000  00033dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107fb  00000000  00000000  0004b72e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000896dc  00000000  00000000  0005bf29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e5605  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c64  00000000  00000000  000e5658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	080058b4 	.word	0x080058b4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	080058b4 	.word	0x080058b4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <update_ACC_data>:

ACC_SETTING	ACC_set = ACC_SETTING_DEFAULT;
OUT_DATA	OUT 	= OUT_DATA_XYZ_DEFAULT;
extern RS_DATA_STRUCT	rs;

void update_ACC_data(I2C_HandleTypeDef *i2c){
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af04      	add	r7, sp, #16
 8000162:	6078      	str	r0, [r7, #4]

	uint8_t		command[1];

	HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_STATUS_REG, 1, &command[0], 1, 10);		//Обнвляем статус регистров
 8000164:	230a      	movs	r3, #10
 8000166:	9302      	str	r3, [sp, #8]
 8000168:	2301      	movs	r3, #1
 800016a:	9301      	str	r3, [sp, #4]
 800016c:	f107 030c 	add.w	r3, r7, #12
 8000170:	9300      	str	r3, [sp, #0]
 8000172:	2301      	movs	r3, #1
 8000174:	2227      	movs	r2, #39	; 0x27
 8000176:	2130      	movs	r1, #48	; 0x30
 8000178:	6878      	ldr	r0, [r7, #4]
 800017a:	f002 fc59 	bl	8002a30 <HAL_I2C_Mem_Read>
	ACC_set.STATUS_REG.all = command[0];
 800017e:	7b3a      	ldrb	r2, [r7, #12]
 8000180:	4b0c      	ldr	r3, [pc, #48]	; (80001b4 <update_ACC_data+0x58>)
 8000182:	70da      	strb	r2, [r3, #3]

	if(rs.RS_DataSended && ACC_set.STATUS_REG.bit.ZYXDA){
 8000184:	4b0c      	ldr	r3, [pc, #48]	; (80001b8 <update_ACC_data+0x5c>)
 8000186:	685b      	ldr	r3, [r3, #4]
 8000188:	2b00      	cmp	r3, #0
 800018a:	d00f      	beq.n	80001ac <update_ACC_data+0x50>
 800018c:	4b09      	ldr	r3, [pc, #36]	; (80001b4 <update_ACC_data+0x58>)
 800018e:	78db      	ldrb	r3, [r3, #3]
 8000190:	f003 0308 	and.w	r3, r3, #8
 8000194:	b2db      	uxtb	r3, r3
 8000196:	2b00      	cmp	r3, #0
 8000198:	d008      	beq.n	80001ac <update_ACC_data+0x50>
		read_x_axis(i2c);
 800019a:	6878      	ldr	r0, [r7, #4]
 800019c:	f000 f8d2 	bl	8000344 <read_x_axis>
		read_y_axis(i2c);
 80001a0:	6878      	ldr	r0, [r7, #4]
 80001a2:	f000 f90f 	bl	80003c4 <read_y_axis>
		read_z_axis(i2c);
 80001a6:	6878      	ldr	r0, [r7, #4]
 80001a8:	f000 f94c 	bl	8000444 <read_z_axis>
	}
}
 80001ac:	bf00      	nop
 80001ae:	3710      	adds	r7, #16
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	20000000 	.word	0x20000000
 80001b8:	20000098 	.word	0x20000098

080001bc <ACC_init>:

void ACC_init(I2C_HandleTypeDef *i2c){
 80001bc:	b580      	push	{r7, lr}
 80001be:	b082      	sub	sp, #8
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]

    ACC_init_addr(ACC_ADDR, i2c);
 80001c4:	6879      	ldr	r1, [r7, #4]
 80001c6:	2030      	movs	r0, #48	; 0x30
 80001c8:	f000 f80e 	bl	80001e8 <ACC_init_addr>
    ACC_setting(ACC_ADDR, i2c);
 80001cc:	6879      	ldr	r1, [r7, #4]
 80001ce:	2030      	movs	r0, #48	; 0x30
 80001d0:	f000 f854 	bl	800027c <ACC_setting>

    rs.RS_DataSended = 1;
 80001d4:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <ACC_init+0x28>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	605a      	str	r2, [r3, #4]
    //ACC_check_settings(ACC_ADDR, i2c);
}
 80001da:	bf00      	nop
 80001dc:	3708      	adds	r7, #8
 80001de:	46bd      	mov	sp, r7
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	20000098 	.word	0x20000098

080001e8 <ACC_init_addr>:

void ACC_init_addr (uint8_t address, I2C_HandleTypeDef *i2c){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b086      	sub	sp, #24
 80001ec:	af02      	add	r7, sp, #8
 80001ee:	4603      	mov	r3, r0
 80001f0:	6039      	str	r1, [r7, #0]
 80001f2:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef result;

    for(;;){
	result = HAL_I2C_IsDeviceReady(i2c, address, 1, 150);
 80001f4:	79fb      	ldrb	r3, [r7, #7]
 80001f6:	b299      	uxth	r1, r3
 80001f8:	2396      	movs	r3, #150	; 0x96
 80001fa:	2201      	movs	r2, #1
 80001fc:	6838      	ldr	r0, [r7, #0]
 80001fe:	f002 fe7f 	bl	8002f00 <HAL_I2C_IsDeviceReady>
 8000202:	4603      	mov	r3, r0
 8000204:	73fb      	strb	r3, [r7, #15]
	    if(result == HAL_OK)
 8000206:	7bfb      	ldrb	r3, [r7, #15]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d000      	beq.n	800020e <ACC_init_addr+0x26>
	result = HAL_I2C_IsDeviceReady(i2c, address, 1, 150);
 800020c:	e7f2      	b.n	80001f4 <ACC_init_addr+0xc>
	    	break;
 800020e:	bf00      	nop
	}

    uint8_t command_arr[1];
    uint8_t receive_arr[1];

    command_arr[0] = 0xF;
 8000210:	230f      	movs	r3, #15
 8000212:	733b      	strb	r3, [r7, #12]
    //WHO_AM_I
    HAL_I2C_Master_Transmit(i2c, address, command_arr, sizeof(command_arr), 10);
 8000214:	79fb      	ldrb	r3, [r7, #7]
 8000216:	b299      	uxth	r1, r3
 8000218:	f107 020c 	add.w	r2, r7, #12
 800021c:	230a      	movs	r3, #10
 800021e:	9300      	str	r3, [sp, #0]
 8000220:	2301      	movs	r3, #1
 8000222:	6838      	ldr	r0, [r7, #0]
 8000224:	f001 ffa0 	bl	8002168 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(i2c, address, receive_arr, sizeof(receive_arr), 10);
 8000228:	79fb      	ldrb	r3, [r7, #7]
 800022a:	b299      	uxth	r1, r3
 800022c:	f107 0208 	add.w	r2, r7, #8
 8000230:	230a      	movs	r3, #10
 8000232:	9300      	str	r3, [sp, #0]
 8000234:	2301      	movs	r3, #1
 8000236:	6838      	ldr	r0, [r7, #0]
 8000238:	f002 f894 	bl	8002364 <HAL_I2C_Master_Receive>

    GPIOC->BSRR |= GPIO_BSRR_BS13;
 800023c:	4b0e      	ldr	r3, [pc, #56]	; (8000278 <ACC_init_addr+0x90>)
 800023e:	691b      	ldr	r3, [r3, #16]
 8000240:	4a0d      	ldr	r2, [pc, #52]	; (8000278 <ACC_init_addr+0x90>)
 8000242:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000246:	6113      	str	r3, [r2, #16]
    HAL_Delay(1000);
 8000248:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800024c:	f000 fe52 	bl	8000ef4 <HAL_Delay>
    GPIOC->BSRR |= GPIO_BSRR_BR13;
 8000250:	4b09      	ldr	r3, [pc, #36]	; (8000278 <ACC_init_addr+0x90>)
 8000252:	691b      	ldr	r3, [r3, #16]
 8000254:	4a08      	ldr	r2, [pc, #32]	; (8000278 <ACC_init_addr+0x90>)
 8000256:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800025a:	6113      	str	r3, [r2, #16]
    HAL_Delay(1000);
 800025c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000260:	f000 fe48 	bl	8000ef4 <HAL_Delay>
    GPIOC->BSRR |= GPIO_BSRR_BS13;
 8000264:	4b04      	ldr	r3, [pc, #16]	; (8000278 <ACC_init_addr+0x90>)
 8000266:	691b      	ldr	r3, [r3, #16]
 8000268:	4a03      	ldr	r2, [pc, #12]	; (8000278 <ACC_init_addr+0x90>)
 800026a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800026e:	6113      	str	r3, [r2, #16]
}
 8000270:	bf00      	nop
 8000272:	3710      	adds	r7, #16
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	40011000 	.word	0x40011000

0800027c <ACC_setting>:

void ACC_setting(uint8_t address, I2C_HandleTypeDef *i2c){
 800027c:	b580      	push	{r7, lr}
 800027e:	b088      	sub	sp, #32
 8000280:	af04      	add	r7, sp, #16
 8000282:	4603      	mov	r3, r0
 8000284:	6039      	str	r1, [r7, #0]
 8000286:	71fb      	strb	r3, [r7, #7]

    uint8_t 			command_arr[3];

    HAL_I2C_Mem_Write(i2c, address, COMMAND_CTRL_REG1, 1, &ACC_set.CTRL_REG1.all, 1, 10);	//Отправка данных структур (настроек) в память.
 8000288:	79fb      	ldrb	r3, [r7, #7]
 800028a:	b299      	uxth	r1, r3
 800028c:	230a      	movs	r3, #10
 800028e:	9302      	str	r3, [sp, #8]
 8000290:	2301      	movs	r3, #1
 8000292:	9301      	str	r3, [sp, #4]
 8000294:	4b28      	ldr	r3, [pc, #160]	; (8000338 <ACC_setting+0xbc>)
 8000296:	9300      	str	r3, [sp, #0]
 8000298:	2301      	movs	r3, #1
 800029a:	2220      	movs	r2, #32
 800029c:	6838      	ldr	r0, [r7, #0]
 800029e:	f002 facd 	bl	800283c <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(i2c, address, COMMAND_CTRL_REG2, 1, &ACC_set.CTRL_REG2.all, 1, 10);
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	b299      	uxth	r1, r3
 80002a6:	230a      	movs	r3, #10
 80002a8:	9302      	str	r3, [sp, #8]
 80002aa:	2301      	movs	r3, #1
 80002ac:	9301      	str	r3, [sp, #4]
 80002ae:	4b23      	ldr	r3, [pc, #140]	; (800033c <ACC_setting+0xc0>)
 80002b0:	9300      	str	r3, [sp, #0]
 80002b2:	2301      	movs	r3, #1
 80002b4:	2221      	movs	r2, #33	; 0x21
 80002b6:	6838      	ldr	r0, [r7, #0]
 80002b8:	f002 fac0 	bl	800283c <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(i2c, address, COMMAND_CTRL_REG4, 1, &ACC_set.CTRL_REG4.all, 1, 10);
 80002bc:	79fb      	ldrb	r3, [r7, #7]
 80002be:	b299      	uxth	r1, r3
 80002c0:	230a      	movs	r3, #10
 80002c2:	9302      	str	r3, [sp, #8]
 80002c4:	2301      	movs	r3, #1
 80002c6:	9301      	str	r3, [sp, #4]
 80002c8:	4b1d      	ldr	r3, [pc, #116]	; (8000340 <ACC_setting+0xc4>)
 80002ca:	9300      	str	r3, [sp, #0]
 80002cc:	2301      	movs	r3, #1
 80002ce:	2223      	movs	r2, #35	; 0x23
 80002d0:	6838      	ldr	r0, [r7, #0]
 80002d2:	f002 fab3 	bl	800283c <HAL_I2C_Mem_Write>

    HAL_I2C_Mem_Read(i2c, address, COMMAND_CTRL_REG1, 1, &command_arr[0], 1, 50);			//Для проверки, что данные записались верно
 80002d6:	79fb      	ldrb	r3, [r7, #7]
 80002d8:	b299      	uxth	r1, r3
 80002da:	2332      	movs	r3, #50	; 0x32
 80002dc:	9302      	str	r3, [sp, #8]
 80002de:	2301      	movs	r3, #1
 80002e0:	9301      	str	r3, [sp, #4]
 80002e2:	f107 030c 	add.w	r3, r7, #12
 80002e6:	9300      	str	r3, [sp, #0]
 80002e8:	2301      	movs	r3, #1
 80002ea:	2220      	movs	r2, #32
 80002ec:	6838      	ldr	r0, [r7, #0]
 80002ee:	f002 fb9f 	bl	8002a30 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(i2c, address, COMMAND_CTRL_REG2, 1, &command_arr[1], 1, 50);
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	b299      	uxth	r1, r3
 80002f6:	2332      	movs	r3, #50	; 0x32
 80002f8:	9302      	str	r3, [sp, #8]
 80002fa:	2301      	movs	r3, #1
 80002fc:	9301      	str	r3, [sp, #4]
 80002fe:	f107 030c 	add.w	r3, r7, #12
 8000302:	3301      	adds	r3, #1
 8000304:	9300      	str	r3, [sp, #0]
 8000306:	2301      	movs	r3, #1
 8000308:	2221      	movs	r2, #33	; 0x21
 800030a:	6838      	ldr	r0, [r7, #0]
 800030c:	f002 fb90 	bl	8002a30 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(i2c, address, COMMAND_CTRL_REG4, 1, &command_arr[2], 1, 50);
 8000310:	79fb      	ldrb	r3, [r7, #7]
 8000312:	b299      	uxth	r1, r3
 8000314:	2332      	movs	r3, #50	; 0x32
 8000316:	9302      	str	r3, [sp, #8]
 8000318:	2301      	movs	r3, #1
 800031a:	9301      	str	r3, [sp, #4]
 800031c:	f107 030c 	add.w	r3, r7, #12
 8000320:	3302      	adds	r3, #2
 8000322:	9300      	str	r3, [sp, #0]
 8000324:	2301      	movs	r3, #1
 8000326:	2223      	movs	r2, #35	; 0x23
 8000328:	6838      	ldr	r0, [r7, #0]
 800032a:	f002 fb81 	bl	8002a30 <HAL_I2C_Mem_Read>
}
 800032e:	bf00      	nop
 8000330:	3710      	adds	r7, #16
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000000 	.word	0x20000000
 800033c:	20000001 	.word	0x20000001
 8000340:	20000002 	.word	0x20000002

08000344 <read_x_axis>:


void read_x_axis(I2C_HandleTypeDef *i2c){
 8000344:	b580      	push	{r7, lr}
 8000346:	b088      	sub	sp, #32
 8000348:	af04      	add	r7, sp, #16
 800034a:	6078      	str	r0, [r7, #4]

    uint8_t data_LO_RX[1], data_HI_RX[1];

    if(ACC_set.STATUS_REG.bit.XOR || ACC_set.STATUS_REG.bit.XDA){
 800034c:	4b1a      	ldr	r3, [pc, #104]	; (80003b8 <read_x_axis+0x74>)
 800034e:	78db      	ldrb	r3, [r3, #3]
 8000350:	f003 0310 	and.w	r3, r3, #16
 8000354:	b2db      	uxtb	r3, r3
 8000356:	2b00      	cmp	r3, #0
 8000358:	d106      	bne.n	8000368 <read_x_axis+0x24>
 800035a:	4b17      	ldr	r3, [pc, #92]	; (80003b8 <read_x_axis+0x74>)
 800035c:	78db      	ldrb	r3, [r3, #3]
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	b2db      	uxtb	r3, r3
 8000364:	2b00      	cmp	r3, #0
 8000366:	d022      	beq.n	80003ae <read_x_axis+0x6a>

	HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_X_HI, 1, &data_HI_RX[0], 1, 10);		//Считали данные с регистра и записали в структуру
 8000368:	230a      	movs	r3, #10
 800036a:	9302      	str	r3, [sp, #8]
 800036c:	2301      	movs	r3, #1
 800036e:	9301      	str	r3, [sp, #4]
 8000370:	f107 0308 	add.w	r3, r7, #8
 8000374:	9300      	str	r3, [sp, #0]
 8000376:	2301      	movs	r3, #1
 8000378:	2229      	movs	r2, #41	; 0x29
 800037a:	2130      	movs	r1, #48	; 0x30
 800037c:	6878      	ldr	r0, [r7, #4]
 800037e:	f002 fb57 	bl	8002a30 <HAL_I2C_Mem_Read>
	OUT.X.bit.HI = data_HI_RX[0] & 0xff;
 8000382:	7a3a      	ldrb	r2, [r7, #8]
 8000384:	4b0d      	ldr	r3, [pc, #52]	; (80003bc <read_x_axis+0x78>)
 8000386:	705a      	strb	r2, [r3, #1]


	HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_X_LO, 1, &data_LO_RX[0], 1, 10);
 8000388:	230a      	movs	r3, #10
 800038a:	9302      	str	r3, [sp, #8]
 800038c:	2301      	movs	r3, #1
 800038e:	9301      	str	r3, [sp, #4]
 8000390:	f107 030c 	add.w	r3, r7, #12
 8000394:	9300      	str	r3, [sp, #0]
 8000396:	2301      	movs	r3, #1
 8000398:	2228      	movs	r2, #40	; 0x28
 800039a:	2130      	movs	r1, #48	; 0x30
 800039c:	6878      	ldr	r0, [r7, #4]
 800039e:	f002 fb47 	bl	8002a30 <HAL_I2C_Mem_Read>
	OUT.X.bit.LO = data_LO_RX[0] & 0xff;
 80003a2:	7b3a      	ldrb	r2, [r7, #12]
 80003a4:	4b05      	ldr	r3, [pc, #20]	; (80003bc <read_x_axis+0x78>)
 80003a6:	701a      	strb	r2, [r3, #0]

	rs.RS_X_axis_data = 1;									//Данные готовы к отправке
 80003a8:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <read_x_axis+0x7c>)
 80003aa:	2201      	movs	r2, #1
 80003ac:	621a      	str	r2, [r3, #32]
    }
}
 80003ae:	bf00      	nop
 80003b0:	3710      	adds	r7, #16
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000000 	.word	0x20000000
 80003bc:	20000090 	.word	0x20000090
 80003c0:	20000098 	.word	0x20000098

080003c4 <read_y_axis>:


void read_y_axis(I2C_HandleTypeDef *i2c){
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b088      	sub	sp, #32
 80003c8:	af04      	add	r7, sp, #16
 80003ca:	6078      	str	r0, [r7, #4]

    uint8_t data_LO_RX[1], data_HI_RX[1];

    if(ACC_set.STATUS_REG.bit.YOR || ACC_set.STATUS_REG.bit.YDA){
 80003cc:	4b1a      	ldr	r3, [pc, #104]	; (8000438 <read_y_axis+0x74>)
 80003ce:	78db      	ldrb	r3, [r3, #3]
 80003d0:	f003 0320 	and.w	r3, r3, #32
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d106      	bne.n	80003e8 <read_y_axis+0x24>
 80003da:	4b17      	ldr	r3, [pc, #92]	; (8000438 <read_y_axis+0x74>)
 80003dc:	78db      	ldrb	r3, [r3, #3]
 80003de:	f003 0302 	and.w	r3, r3, #2
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d022      	beq.n	800042e <read_y_axis+0x6a>

	HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_Y_HI, 1, &data_HI_RX[0], 1, 10);
 80003e8:	230a      	movs	r3, #10
 80003ea:	9302      	str	r3, [sp, #8]
 80003ec:	2301      	movs	r3, #1
 80003ee:	9301      	str	r3, [sp, #4]
 80003f0:	f107 0308 	add.w	r3, r7, #8
 80003f4:	9300      	str	r3, [sp, #0]
 80003f6:	2301      	movs	r3, #1
 80003f8:	222b      	movs	r2, #43	; 0x2b
 80003fa:	2130      	movs	r1, #48	; 0x30
 80003fc:	6878      	ldr	r0, [r7, #4]
 80003fe:	f002 fb17 	bl	8002a30 <HAL_I2C_Mem_Read>
	OUT.Y.bit.HI = data_HI_RX[0] & 0xff;
 8000402:	7a3a      	ldrb	r2, [r7, #8]
 8000404:	4b0d      	ldr	r3, [pc, #52]	; (800043c <read_y_axis+0x78>)
 8000406:	70da      	strb	r2, [r3, #3]

	HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_Y_LO, 1, &data_LO_RX[0], 1, 10);
 8000408:	230a      	movs	r3, #10
 800040a:	9302      	str	r3, [sp, #8]
 800040c:	2301      	movs	r3, #1
 800040e:	9301      	str	r3, [sp, #4]
 8000410:	f107 030c 	add.w	r3, r7, #12
 8000414:	9300      	str	r3, [sp, #0]
 8000416:	2301      	movs	r3, #1
 8000418:	222a      	movs	r2, #42	; 0x2a
 800041a:	2130      	movs	r1, #48	; 0x30
 800041c:	6878      	ldr	r0, [r7, #4]
 800041e:	f002 fb07 	bl	8002a30 <HAL_I2C_Mem_Read>
	OUT.Y.bit.LO = data_LO_RX[0] & 0xff;
 8000422:	7b3a      	ldrb	r2, [r7, #12]
 8000424:	4b05      	ldr	r3, [pc, #20]	; (800043c <read_y_axis+0x78>)
 8000426:	709a      	strb	r2, [r3, #2]

	rs.RS_Y_axis_data = 1;
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <read_y_axis+0x7c>)
 800042a:	2201      	movs	r2, #1
 800042c:	625a      	str	r2, [r3, #36]	; 0x24
    }

}
 800042e:	bf00      	nop
 8000430:	3710      	adds	r7, #16
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	20000000 	.word	0x20000000
 800043c:	20000090 	.word	0x20000090
 8000440:	20000098 	.word	0x20000098

08000444 <read_z_axis>:


void read_z_axis(I2C_HandleTypeDef *i2c){
 8000444:	b580      	push	{r7, lr}
 8000446:	b088      	sub	sp, #32
 8000448:	af04      	add	r7, sp, #16
 800044a:	6078      	str	r0, [r7, #4]

    uint8_t data_LO_RX[1], data_HI_RX[1];
    if(ACC_set.STATUS_REG.bit.ZOR || ACC_set.STATUS_REG.bit.ZDA){
 800044c:	4b21      	ldr	r3, [pc, #132]	; (80004d4 <read_z_axis+0x90>)
 800044e:	78db      	ldrb	r3, [r3, #3]
 8000450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000454:	b2db      	uxtb	r3, r3
 8000456:	2b00      	cmp	r3, #0
 8000458:	d106      	bne.n	8000468 <read_z_axis+0x24>
 800045a:	4b1e      	ldr	r3, [pc, #120]	; (80004d4 <read_z_axis+0x90>)
 800045c:	78db      	ldrb	r3, [r3, #3]
 800045e:	f003 0304 	and.w	r3, r3, #4
 8000462:	b2db      	uxtb	r3, r3
 8000464:	2b00      	cmp	r3, #0
 8000466:	d022      	beq.n	80004ae <read_z_axis+0x6a>

	HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_Z_HI, 1, &data_HI_RX[0], 1, 10);
 8000468:	230a      	movs	r3, #10
 800046a:	9302      	str	r3, [sp, #8]
 800046c:	2301      	movs	r3, #1
 800046e:	9301      	str	r3, [sp, #4]
 8000470:	f107 0308 	add.w	r3, r7, #8
 8000474:	9300      	str	r3, [sp, #0]
 8000476:	2301      	movs	r3, #1
 8000478:	222d      	movs	r2, #45	; 0x2d
 800047a:	2130      	movs	r1, #48	; 0x30
 800047c:	6878      	ldr	r0, [r7, #4]
 800047e:	f002 fad7 	bl	8002a30 <HAL_I2C_Mem_Read>
	OUT.Z.bit.HI = data_HI_RX[0] & 0xff;
 8000482:	7a3a      	ldrb	r2, [r7, #8]
 8000484:	4b14      	ldr	r3, [pc, #80]	; (80004d8 <read_z_axis+0x94>)
 8000486:	715a      	strb	r2, [r3, #5]

	HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_Z_LO, 1, &data_LO_RX[0], 1, 10);
 8000488:	230a      	movs	r3, #10
 800048a:	9302      	str	r3, [sp, #8]
 800048c:	2301      	movs	r3, #1
 800048e:	9301      	str	r3, [sp, #4]
 8000490:	f107 030c 	add.w	r3, r7, #12
 8000494:	9300      	str	r3, [sp, #0]
 8000496:	2301      	movs	r3, #1
 8000498:	222c      	movs	r2, #44	; 0x2c
 800049a:	2130      	movs	r1, #48	; 0x30
 800049c:	6878      	ldr	r0, [r7, #4]
 800049e:	f002 fac7 	bl	8002a30 <HAL_I2C_Mem_Read>
	OUT.Z.bit.LO = data_LO_RX[0] & 0xff;
 80004a2:	7b3a      	ldrb	r2, [r7, #12]
 80004a4:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <read_z_axis+0x94>)
 80004a6:	711a      	strb	r2, [r3, #4]

	rs.RS_Z_axis_data = 1;
 80004a8:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <read_z_axis+0x98>)
 80004aa:	2201      	movs	r2, #1
 80004ac:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if(rs.RS_Z_axis_data && rs.RS_X_axis_data && rs.RS_Y_axis_data){
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <read_z_axis+0x98>)
 80004b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d00a      	beq.n	80004cc <read_z_axis+0x88>
 80004b6:	4b09      	ldr	r3, [pc, #36]	; (80004dc <read_z_axis+0x98>)
 80004b8:	6a1b      	ldr	r3, [r3, #32]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d006      	beq.n	80004cc <read_z_axis+0x88>
 80004be:	4b07      	ldr	r3, [pc, #28]	; (80004dc <read_z_axis+0x98>)
 80004c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d002      	beq.n	80004cc <read_z_axis+0x88>
    	rs.RS_DataReady = 1;
 80004c6:	4b05      	ldr	r3, [pc, #20]	; (80004dc <read_z_axis+0x98>)
 80004c8:	2201      	movs	r2, #1
 80004ca:	601a      	str	r2, [r3, #0]
    }
}
 80004cc:	bf00      	nop
 80004ce:	3710      	adds	r7, #16
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	20000000 	.word	0x20000000
 80004d8:	20000090 	.word	0x20000090
 80004dc:	20000098 	.word	0x20000098

080004e0 <RS_Send>:
#include "stdio.h"

RS_DATA_STRUCT	rs;
extern OUT_DATA	OUT;

void RS_Send(UART_HandleTypeDef *uart){
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b092      	sub	sp, #72	; 0x48
 80004e4:	af02      	add	r7, sp, #8
 80004e6:	6078      	str	r0, [r7, #4]

    char		buffer[50]; //44
    HAL_StatusTypeDef	result;

    if(rs.RS_DataReady){
 80004e8:	4b23      	ldr	r3, [pc, #140]	; (8000578 <RS_Send+0x98>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d03e      	beq.n	800056e <RS_Send+0x8e>
    sprintf(buffer, "X_axis: %d\tY_axis: %d\tZ_axis: %d\r\n", (int16_t)OUT.X.all, (int16_t)OUT.Y.all, (int16_t)OUT.Z.all);
 80004f0:	4b22      	ldr	r3, [pc, #136]	; (800057c <RS_Send+0x9c>)
 80004f2:	881b      	ldrh	r3, [r3, #0]
 80004f4:	b21b      	sxth	r3, r3
 80004f6:	461a      	mov	r2, r3
 80004f8:	4b20      	ldr	r3, [pc, #128]	; (800057c <RS_Send+0x9c>)
 80004fa:	885b      	ldrh	r3, [r3, #2]
 80004fc:	b21b      	sxth	r3, r3
 80004fe:	4619      	mov	r1, r3
 8000500:	4b1e      	ldr	r3, [pc, #120]	; (800057c <RS_Send+0x9c>)
 8000502:	889b      	ldrh	r3, [r3, #4]
 8000504:	b21b      	sxth	r3, r3
 8000506:	f107 000c 	add.w	r0, r7, #12
 800050a:	9300      	str	r3, [sp, #0]
 800050c:	460b      	mov	r3, r1
 800050e:	491c      	ldr	r1, [pc, #112]	; (8000580 <RS_Send+0xa0>)
 8000510:	f004 fd56 	bl	8004fc0 <siprintf>

    result = HAL_UART_Transmit_IT(uart, (uint8_t*) buffer, strlen(buffer));
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	4618      	mov	r0, r3
 800051a:	f7ff fe17 	bl	800014c <strlen>
 800051e:	4603      	mov	r3, r0
 8000520:	b29a      	uxth	r2, r3
 8000522:	f107 030c 	add.w	r3, r7, #12
 8000526:	4619      	mov	r1, r3
 8000528:	6878      	ldr	r0, [r7, #4]
 800052a:	f003 ffff 	bl	800452c <HAL_UART_Transmit_IT>
 800052e:	4603      	mov	r3, r0
 8000530:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if(result == HAL_OK){
 8000534:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000538:	2b00      	cmp	r3, #0
 800053a:	d115      	bne.n	8000568 <RS_Send+0x88>

		rs.RS_X_axis_data = 0;
 800053c:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <RS_Send+0x98>)
 800053e:	2200      	movs	r2, #0
 8000540:	621a      	str	r2, [r3, #32]
		rs.RS_Y_axis_data = 0;
 8000542:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <RS_Send+0x98>)
 8000544:	2200      	movs	r2, #0
 8000546:	625a      	str	r2, [r3, #36]	; 0x24
		rs.RS_Z_axis_data = 0;
 8000548:	4b0b      	ldr	r3, [pc, #44]	; (8000578 <RS_Send+0x98>)
 800054a:	2200      	movs	r2, #0
 800054c:	629a      	str	r2, [r3, #40]	; 0x28

		rs.RS_DataSended = 1;
 800054e:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <RS_Send+0x98>)
 8000550:	2201      	movs	r2, #1
 8000552:	605a      	str	r2, [r3, #4]
		rs.RS_DataReady = 0;
 8000554:	4b08      	ldr	r3, [pc, #32]	; (8000578 <RS_Send+0x98>)
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 800055a:	2201      	movs	r2, #1
 800055c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000560:	4808      	ldr	r0, [pc, #32]	; (8000584 <RS_Send+0xa4>)
 8000562:	f001 fca5 	bl	8001eb0 <HAL_GPIO_WritePin>
	//HAL_UART_Transmit(uart, (uint8_t*) "\033[0;0H", 6 , 5);
	//HAL_UART_Transmit(uart, (uint8_t*) "\033[2J", 4, 5);

    }

}
 8000566:	e002      	b.n	800056e <RS_Send+0x8e>
    	rs.RS_DataSended = 0;
 8000568:	4b03      	ldr	r3, [pc, #12]	; (8000578 <RS_Send+0x98>)
 800056a:	2200      	movs	r2, #0
 800056c:	605a      	str	r2, [r3, #4]
}
 800056e:	bf00      	nop
 8000570:	3740      	adds	r7, #64	; 0x40
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
 8000576:	bf00      	nop
 8000578:	20000098 	.word	0x20000098
 800057c:	20000090 	.word	0x20000090
 8000580:	080058cc 	.word	0x080058cc
 8000584:	40010800 	.word	0x40010800

08000588 <GPIO_init>:
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
    }
}

void GPIO_init(){
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0

    RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;				//Тактирование
 800058c:	4b0d      	ldr	r3, [pc, #52]	; (80005c4 <GPIO_init+0x3c>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	4a0c      	ldr	r2, [pc, #48]	; (80005c4 <GPIO_init+0x3c>)
 8000592:	f043 0310 	orr.w	r3, r3, #16
 8000596:	6193      	str	r3, [r2, #24]

    GPIOC->CRH &= ~GPIO_CRH_CNF13;				//Oбнуление регистра CNF0/1 = 00
 8000598:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <GPIO_init+0x40>)
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	4a0a      	ldr	r2, [pc, #40]	; (80005c8 <GPIO_init+0x40>)
 800059e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80005a2:	6053      	str	r3, [r2, #4]
    GPIOC->CRH |= GPIO_CRH_MODE13;				//MODE 11 => max 50MHz
 80005a4:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <GPIO_init+0x40>)
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	4a07      	ldr	r2, [pc, #28]	; (80005c8 <GPIO_init+0x40>)
 80005aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80005ae:	6053      	str	r3, [r2, #4]
    GPIOC->BSRR |= GPIO_BSRR_BR13;
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <GPIO_init+0x40>)
 80005b2:	691b      	ldr	r3, [r3, #16]
 80005b4:	4a04      	ldr	r2, [pc, #16]	; (80005c8 <GPIO_init+0x40>)
 80005b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80005ba:	6113      	str	r3, [r2, #16]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	bc80      	pop	{r7}
 80005c2:	4770      	bx	lr
 80005c4:	40021000 	.word	0x40021000
 80005c8:	40011000 	.word	0x40011000

080005cc <set_TX_Header>:


void set_TX_Header(CAN_TxHeaderTypeDef *TX){
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]

    TX->StdId 	= 0;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
    TX->ExtId 	= 0;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	2200      	movs	r2, #0
 80005de:	605a      	str	r2, [r3, #4]
    TX->IDE	= CAN_ID_STD;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
    TX->RTR 	= CAN_RTR_DATA;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2200      	movs	r2, #0
 80005ea:	60da      	str	r2, [r3, #12]
    TX->DLC 	= 6;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	2206      	movs	r2, #6
 80005f0:	611a      	str	r2, [r3, #16]
    TX->TransmitGlobalTime = 0;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2200      	movs	r2, #0
 80005f6:	751a      	strb	r2, [r3, #20]

}
 80005f8:	bf00      	nop
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bc80      	pop	{r7}
 8000600:	4770      	bx	lr
	...

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000608:	f000 fc12 	bl	8000e30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060c:	f000 f81c 	bl	8000648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000610:	f000 f978 	bl	8000904 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000614:	f000 f8e8 	bl	80007e8 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000618:	f000 f94a 	bl	80008b0 <MX_USART1_UART_Init>
  MX_CRC_Init();
 800061c:	f000 f8d0 	bl	80007c0 <MX_CRC_Init>
  MX_CAN_Init();
 8000620:	f000 f858 	bl	80006d4 <MX_CAN_Init>
  MX_SPI1_Init();
 8000624:	f000 f90e 	bl	8000844 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  GPIO_init();
 8000628:	f7ff ffae 	bl	8000588 <GPIO_init>
  ACC_init(&hi2c1);
 800062c:	4804      	ldr	r0, [pc, #16]	; (8000640 <main+0x3c>)
 800062e:	f7ff fdc5 	bl	80001bc <ACC_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    update_ACC_data(&hi2c1);
 8000632:	4803      	ldr	r0, [pc, #12]	; (8000640 <main+0x3c>)
 8000634:	f7ff fd92 	bl	800015c <update_ACC_data>
//    SPI_Send(&TxHeader1);
//    CAN_Recieve(&hcan);
    RS_Send(&huart1);
 8000638:	4802      	ldr	r0, [pc, #8]	; (8000644 <main+0x40>)
 800063a:	f7ff ff51 	bl	80004e0 <RS_Send>
    update_ACC_data(&hi2c1);
 800063e:	e7f8      	b.n	8000632 <main+0x2e>
 8000640:	2000010c 	.word	0x2000010c
 8000644:	200001b8 	.word	0x200001b8

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b090      	sub	sp, #64	; 0x40
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0318 	add.w	r3, r7, #24
 8000652:	2228      	movs	r2, #40	; 0x28
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f004 fcaa 	bl	8004fb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800066a:	2301      	movs	r3, #1
 800066c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800066e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000672:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000678:	2301      	movs	r3, #1
 800067a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067c:	2302      	movs	r3, #2
 800067e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000680:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000684:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000686:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800068a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068c:	f107 0318 	add.w	r3, r7, #24
 8000690:	4618      	mov	r0, r3
 8000692:	f003 fa67 	bl	8003b64 <HAL_RCC_OscConfig>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800069c:	f000 f97e 	bl	800099c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a0:	230f      	movs	r3, #15
 80006a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a4:	2302      	movs	r3, #2
 80006a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	2102      	movs	r1, #2
 80006ba:	4618      	mov	r0, r3
 80006bc:	f003 fcd4 	bl	8004068 <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0x82>
  {
    Error_Handler();
 80006c6:	f000 f969 	bl	800099c <Error_Handler>
  }
}
 80006ca:	bf00      	nop
 80006cc:	3740      	adds	r7, #64	; 0x40
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08a      	sub	sp, #40	; 0x28
 80006d8:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80006da:	4b36      	ldr	r3, [pc, #216]	; (80007b4 <MX_CAN_Init+0xe0>)
 80006dc:	4a36      	ldr	r2, [pc, #216]	; (80007b8 <MX_CAN_Init+0xe4>)
 80006de:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80006e0:	4b34      	ldr	r3, [pc, #208]	; (80007b4 <MX_CAN_Init+0xe0>)
 80006e2:	2204      	movs	r2, #4
 80006e4:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80006e6:	4b33      	ldr	r3, [pc, #204]	; (80007b4 <MX_CAN_Init+0xe0>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006ec:	4b31      	ldr	r3, [pc, #196]	; (80007b4 <MX_CAN_Init+0xe0>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 80006f2:	4b30      	ldr	r3, [pc, #192]	; (80007b4 <MX_CAN_Init+0xe0>)
 80006f4:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80006f8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80006fa:	4b2e      	ldr	r3, [pc, #184]	; (80007b4 <MX_CAN_Init+0xe0>)
 80006fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000700:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000702:	4b2c      	ldr	r3, [pc, #176]	; (80007b4 <MX_CAN_Init+0xe0>)
 8000704:	2200      	movs	r2, #0
 8000706:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8000708:	4b2a      	ldr	r3, [pc, #168]	; (80007b4 <MX_CAN_Init+0xe0>)
 800070a:	2201      	movs	r2, #1
 800070c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800070e:	4b29      	ldr	r3, [pc, #164]	; (80007b4 <MX_CAN_Init+0xe0>)
 8000710:	2200      	movs	r2, #0
 8000712:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000714:	4b27      	ldr	r3, [pc, #156]	; (80007b4 <MX_CAN_Init+0xe0>)
 8000716:	2201      	movs	r2, #1
 8000718:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800071a:	4b26      	ldr	r3, [pc, #152]	; (80007b4 <MX_CAN_Init+0xe0>)
 800071c:	2200      	movs	r2, #0
 800071e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 8000720:	4b24      	ldr	r3, [pc, #144]	; (80007b4 <MX_CAN_Init+0xe0>)
 8000722:	2201      	movs	r2, #1
 8000724:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000726:	4823      	ldr	r0, [pc, #140]	; (80007b4 <MX_CAN_Init+0xe0>)
 8000728:	f000 fc08 	bl	8000f3c <HAL_CAN_Init>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000732:	f000 f933 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  sFilterConfig.FilterBank = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800073e:	2301      	movs	r3, #1
 8000740:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000742:	2300      	movs	r3, #0
 8000744:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8000756:	2301      	movs	r3, #1
 8000758:	623b      	str	r3, [r7, #32]
  //sFilterConfig.SlaveStartFilterBank = 14;
  if(HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK){
 800075a:	463b      	mov	r3, r7
 800075c:	4619      	mov	r1, r3
 800075e:	4815      	ldr	r0, [pc, #84]	; (80007b4 <MX_CAN_Init+0xe0>)
 8000760:	f000 fce7 	bl	8001132 <HAL_CAN_ConfigFilter>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_CAN_Init+0x9a>
      Error_Handler();
 800076a:	f000 f917 	bl	800099c <Error_Handler>
  }
  if(HAL_CAN_Start(&hcan) != HAL_OK){
 800076e:	4811      	ldr	r0, [pc, #68]	; (80007b4 <MX_CAN_Init+0xe0>)
 8000770:	f000 fda8 	bl	80012c4 <HAL_CAN_Start>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_CAN_Init+0xaa>
      Error_Handler();
 800077a:	f000 f90f 	bl	800099c <Error_Handler>
   }
  if(HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 800077e:	2102      	movs	r1, #2
 8000780:	480c      	ldr	r0, [pc, #48]	; (80007b4 <MX_CAN_Init+0xe0>)
 8000782:	f000 fde3 	bl	800134c <HAL_CAN_ActivateNotification>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_CAN_Init+0xbc>
	  Error_Handler();
 800078c:	f000 f906 	bl	800099c <Error_Handler>
  }
  if(HAL_CAN_ActivateNotification(&hcan, CAN_IT_ERROR) != HAL_OK){
 8000790:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000794:	4807      	ldr	r0, [pc, #28]	; (80007b4 <MX_CAN_Init+0xe0>)
 8000796:	f000 fdd9 	bl	800134c <HAL_CAN_ActivateNotification>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_CAN_Init+0xd0>
	  Error_Handler();
 80007a0:	f000 f8fc 	bl	800099c <Error_Handler>
  }

  set_TX_Header(&TxHeader);
 80007a4:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_CAN_Init+0xe8>)
 80007a6:	f7ff ff11 	bl	80005cc <set_TX_Header>
  /* USER CODE END CAN_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	3728      	adds	r7, #40	; 0x28
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	200000dc 	.word	0x200000dc
 80007b8:	40006400 	.word	0x40006400
 80007bc:	200000c4 	.word	0x200000c4

080007c0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_CRC_Init+0x20>)
 80007c6:	4a07      	ldr	r2, [pc, #28]	; (80007e4 <MX_CRC_Init+0x24>)
 80007c8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <MX_CRC_Init+0x20>)
 80007cc:	f001 f91d 	bl	8001a0a <HAL_CRC_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80007d6:	f000 f8e1 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000104 	.word	0x20000104
 80007e4:	40023000 	.word	0x40023000

080007e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <MX_I2C1_Init+0x50>)
 80007ee:	4a13      	ldr	r2, [pc, #76]	; (800083c <MX_I2C1_Init+0x54>)
 80007f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_I2C1_Init+0x50>)
 80007f4:	4a12      	ldr	r2, [pc, #72]	; (8000840 <MX_I2C1_Init+0x58>)
 80007f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007f8:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <MX_I2C1_Init+0x50>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 36;
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_I2C1_Init+0x50>)
 8000800:	2224      	movs	r2, #36	; 0x24
 8000802:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000804:	4b0c      	ldr	r3, [pc, #48]	; (8000838 <MX_I2C1_Init+0x50>)
 8000806:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800080a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <MX_I2C1_Init+0x50>)
 800080e:	2200      	movs	r2, #0
 8000810:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <MX_I2C1_Init+0x50>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000818:	4b07      	ldr	r3, [pc, #28]	; (8000838 <MX_I2C1_Init+0x50>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <MX_I2C1_Init+0x50>)
 8000820:	2200      	movs	r2, #0
 8000822:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000824:	4804      	ldr	r0, [pc, #16]	; (8000838 <MX_I2C1_Init+0x50>)
 8000826:	f001 fb5b 	bl	8001ee0 <HAL_I2C_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000830:	f000 f8b4 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	2000010c 	.word	0x2000010c
 800083c:	40005400 	.word	0x40005400
 8000840:	000186a0 	.word	0x000186a0

08000844 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000848:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <MX_SPI1_Init+0x64>)
 800084a:	4a18      	ldr	r2, [pc, #96]	; (80008ac <MX_SPI1_Init+0x68>)
 800084c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800084e:	4b16      	ldr	r3, [pc, #88]	; (80008a8 <MX_SPI1_Init+0x64>)
 8000850:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000854:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_SPI1_Init+0x64>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_SPI1_Init+0x64>)
 800085e:	2200      	movs	r2, #0
 8000860:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_SPI1_Init+0x64>)
 8000864:	2200      	movs	r2, #0
 8000866:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_SPI1_Init+0x64>)
 800086a:	2200      	movs	r2, #0
 800086c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <MX_SPI1_Init+0x64>)
 8000870:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000874:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <MX_SPI1_Init+0x64>)
 8000878:	2208      	movs	r2, #8
 800087a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800087c:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <MX_SPI1_Init+0x64>)
 800087e:	2200      	movs	r2, #0
 8000880:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000882:	4b09      	ldr	r3, [pc, #36]	; (80008a8 <MX_SPI1_Init+0x64>)
 8000884:	2200      	movs	r2, #0
 8000886:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000888:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <MX_SPI1_Init+0x64>)
 800088a:	2200      	movs	r2, #0
 800088c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <MX_SPI1_Init+0x64>)
 8000890:	220a      	movs	r2, #10
 8000892:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000894:	4804      	ldr	r0, [pc, #16]	; (80008a8 <MX_SPI1_Init+0x64>)
 8000896:	f003 fd75 	bl	8004384 <HAL_SPI_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008a0:	f000 f87c 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000160 	.word	0x20000160
 80008ac:	40013000 	.word	0x40013000

080008b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008b6:	4a12      	ldr	r2, [pc, #72]	; (8000900 <MX_USART1_UART_Init+0x50>)
 80008b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008bc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008d6:	2208      	movs	r2, #8
 80008d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008dc:	f44f 7240 	mov.w	r2, #768	; 0x300
 80008e0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008e8:	4804      	ldr	r0, [pc, #16]	; (80008fc <MX_USART1_UART_Init+0x4c>)
 80008ea:	f003 fdcf 	bl	800448c <HAL_UART_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 80008f4:	f000 f852 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008f8:	bf00      	nop
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	200001b8 	.word	0x200001b8
 8000900:	40013800 	.word	0x40013800

08000904 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b088      	sub	sp, #32
 8000908:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090a:	f107 0310 	add.w	r3, r7, #16
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000918:	4b1e      	ldr	r3, [pc, #120]	; (8000994 <MX_GPIO_Init+0x90>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	4a1d      	ldr	r2, [pc, #116]	; (8000994 <MX_GPIO_Init+0x90>)
 800091e:	f043 0320 	orr.w	r3, r3, #32
 8000922:	6193      	str	r3, [r2, #24]
 8000924:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <MX_GPIO_Init+0x90>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	f003 0320 	and.w	r3, r3, #32
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000930:	4b18      	ldr	r3, [pc, #96]	; (8000994 <MX_GPIO_Init+0x90>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	4a17      	ldr	r2, [pc, #92]	; (8000994 <MX_GPIO_Init+0x90>)
 8000936:	f043 0304 	orr.w	r3, r3, #4
 800093a:	6193      	str	r3, [r2, #24]
 800093c:	4b15      	ldr	r3, [pc, #84]	; (8000994 <MX_GPIO_Init+0x90>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	f003 0304 	and.w	r3, r3, #4
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <MX_GPIO_Init+0x90>)
 800094a:	699b      	ldr	r3, [r3, #24]
 800094c:	4a11      	ldr	r2, [pc, #68]	; (8000994 <MX_GPIO_Init+0x90>)
 800094e:	f043 0308 	orr.w	r3, r3, #8
 8000952:	6193      	str	r3, [r2, #24]
 8000954:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <MX_GPIO_Init+0x90>)
 8000956:	699b      	ldr	r3, [r3, #24]
 8000958:	f003 0308 	and.w	r3, r3, #8
 800095c:	607b      	str	r3, [r7, #4]
 800095e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000960:	2201      	movs	r2, #1
 8000962:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000966:	480c      	ldr	r0, [pc, #48]	; (8000998 <MX_GPIO_Init+0x94>)
 8000968:	f001 faa2 	bl	8001eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 800096c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000970:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000972:	2301      	movs	r3, #1
 8000974:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2302      	movs	r3, #2
 800097c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800097e:	f107 0310 	add.w	r3, r7, #16
 8000982:	4619      	mov	r1, r3
 8000984:	4804      	ldr	r0, [pc, #16]	; (8000998 <MX_GPIO_Init+0x94>)
 8000986:	f001 f90f 	bl	8001ba8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800098a:	bf00      	nop
 800098c:	3720      	adds	r7, #32
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40021000 	.word	0x40021000
 8000998:	40010800 	.word	0x40010800

0800099c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a0:	b672      	cpsid	i
}
 80009a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <Error_Handler+0x8>
	...

080009a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <HAL_MspInit+0x5c>)
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	4a14      	ldr	r2, [pc, #80]	; (8000a04 <HAL_MspInit+0x5c>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6193      	str	r3, [r2, #24]
 80009ba:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <HAL_MspInit+0x5c>)
 80009bc:	699b      	ldr	r3, [r3, #24]
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c6:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <HAL_MspInit+0x5c>)
 80009c8:	69db      	ldr	r3, [r3, #28]
 80009ca:	4a0e      	ldr	r2, [pc, #56]	; (8000a04 <HAL_MspInit+0x5c>)
 80009cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d0:	61d3      	str	r3, [r2, #28]
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <HAL_MspInit+0x5c>)
 80009d4:	69db      	ldr	r3, [r3, #28]
 80009d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80009de:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <HAL_MspInit+0x60>)
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	4a04      	ldr	r2, [pc, #16]	; (8000a08 <HAL_MspInit+0x60>)
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fa:	bf00      	nop
 80009fc:	3714      	adds	r7, #20
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr
 8000a04:	40021000 	.word	0x40021000
 8000a08:	40010000 	.word	0x40010000

08000a0c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	; 0x28
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a2d      	ldr	r2, [pc, #180]	; (8000adc <HAL_CAN_MspInit+0xd0>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d153      	bne.n	8000ad4 <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a2c:	4b2c      	ldr	r3, [pc, #176]	; (8000ae0 <HAL_CAN_MspInit+0xd4>)
 8000a2e:	69db      	ldr	r3, [r3, #28]
 8000a30:	4a2b      	ldr	r2, [pc, #172]	; (8000ae0 <HAL_CAN_MspInit+0xd4>)
 8000a32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a36:	61d3      	str	r3, [r2, #28]
 8000a38:	4b29      	ldr	r3, [pc, #164]	; (8000ae0 <HAL_CAN_MspInit+0xd4>)
 8000a3a:	69db      	ldr	r3, [r3, #28]
 8000a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a44:	4b26      	ldr	r3, [pc, #152]	; (8000ae0 <HAL_CAN_MspInit+0xd4>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	4a25      	ldr	r2, [pc, #148]	; (8000ae0 <HAL_CAN_MspInit+0xd4>)
 8000a4a:	f043 0308 	orr.w	r3, r3, #8
 8000a4e:	6193      	str	r3, [r2, #24]
 8000a50:	4b23      	ldr	r3, [pc, #140]	; (8000ae0 <HAL_CAN_MspInit+0xd4>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	f003 0308 	and.w	r3, r3, #8
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	4619      	mov	r1, r3
 8000a70:	481c      	ldr	r0, [pc, #112]	; (8000ae4 <HAL_CAN_MspInit+0xd8>)
 8000a72:	f001 f899 	bl	8001ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a80:	2303      	movs	r3, #3
 8000a82:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4816      	ldr	r0, [pc, #88]	; (8000ae4 <HAL_CAN_MspInit+0xd8>)
 8000a8c:	f001 f88c 	bl	8001ba8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000a90:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <HAL_CAN_MspInit+0xdc>)
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
 8000a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a98:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8000a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8000aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aac:	627b      	str	r3, [r7, #36]	; 0x24
 8000aae:	4a0e      	ldr	r2, [pc, #56]	; (8000ae8 <HAL_CAN_MspInit+0xdc>)
 8000ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab2:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	2014      	movs	r0, #20
 8000aba:	f000 ff70 	bl	800199e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000abe:	2014      	movs	r0, #20
 8000ac0:	f000 ff89 	bl	80019d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	2016      	movs	r0, #22
 8000aca:	f000 ff68 	bl	800199e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000ace:	2016      	movs	r0, #22
 8000ad0:	f000 ff81 	bl	80019d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000ad4:	bf00      	nop
 8000ad6:	3728      	adds	r7, #40	; 0x28
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40006400 	.word	0x40006400
 8000ae0:	40021000 	.word	0x40021000
 8000ae4:	40010c00 	.word	0x40010c00
 8000ae8:	40010000 	.word	0x40010000

08000aec <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a09      	ldr	r2, [pc, #36]	; (8000b20 <HAL_CRC_MspInit+0x34>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d10b      	bne.n	8000b16 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <HAL_CRC_MspInit+0x38>)
 8000b00:	695b      	ldr	r3, [r3, #20]
 8000b02:	4a08      	ldr	r2, [pc, #32]	; (8000b24 <HAL_CRC_MspInit+0x38>)
 8000b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b08:	6153      	str	r3, [r2, #20]
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_CRC_MspInit+0x38>)
 8000b0c:	695b      	ldr	r3, [r3, #20]
 8000b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000b16:	bf00      	nop
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	40023000 	.word	0x40023000
 8000b24:	40021000 	.word	0x40021000

08000b28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0310 	add.w	r3, r7, #16
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a15      	ldr	r2, [pc, #84]	; (8000b98 <HAL_I2C_MspInit+0x70>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d123      	bne.n	8000b90 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <HAL_I2C_MspInit+0x74>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a13      	ldr	r2, [pc, #76]	; (8000b9c <HAL_I2C_MspInit+0x74>)
 8000b4e:	f043 0308 	orr.w	r3, r3, #8
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <HAL_I2C_MspInit+0x74>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f003 0308 	and.w	r3, r3, #8
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b60:	23c0      	movs	r3, #192	; 0xc0
 8000b62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b64:	2312      	movs	r3, #18
 8000b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6c:	f107 0310 	add.w	r3, r7, #16
 8000b70:	4619      	mov	r1, r3
 8000b72:	480b      	ldr	r0, [pc, #44]	; (8000ba0 <HAL_I2C_MspInit+0x78>)
 8000b74:	f001 f818 	bl	8001ba8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <HAL_I2C_MspInit+0x74>)
 8000b7a:	69db      	ldr	r3, [r3, #28]
 8000b7c:	4a07      	ldr	r2, [pc, #28]	; (8000b9c <HAL_I2C_MspInit+0x74>)
 8000b7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b82:	61d3      	str	r3, [r2, #28]
 8000b84:	4b05      	ldr	r3, [pc, #20]	; (8000b9c <HAL_I2C_MspInit+0x74>)
 8000b86:	69db      	ldr	r3, [r3, #28]
 8000b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b90:	bf00      	nop
 8000b92:	3720      	adds	r7, #32
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40005400 	.word	0x40005400
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	40010c00 	.word	0x40010c00

08000ba4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b088      	sub	sp, #32
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 0310 	add.w	r3, r7, #16
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a1b      	ldr	r2, [pc, #108]	; (8000c2c <HAL_SPI_MspInit+0x88>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d12f      	bne.n	8000c24 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bc4:	4b1a      	ldr	r3, [pc, #104]	; (8000c30 <HAL_SPI_MspInit+0x8c>)
 8000bc6:	699b      	ldr	r3, [r3, #24]
 8000bc8:	4a19      	ldr	r2, [pc, #100]	; (8000c30 <HAL_SPI_MspInit+0x8c>)
 8000bca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bce:	6193      	str	r3, [r2, #24]
 8000bd0:	4b17      	ldr	r3, [pc, #92]	; (8000c30 <HAL_SPI_MspInit+0x8c>)
 8000bd2:	699b      	ldr	r3, [r3, #24]
 8000bd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bdc:	4b14      	ldr	r3, [pc, #80]	; (8000c30 <HAL_SPI_MspInit+0x8c>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a13      	ldr	r2, [pc, #76]	; (8000c30 <HAL_SPI_MspInit+0x8c>)
 8000be2:	f043 0304 	orr.w	r3, r3, #4
 8000be6:	6193      	str	r3, [r2, #24]
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <HAL_SPI_MspInit+0x8c>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f003 0304 	and.w	r3, r3, #4
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000bf4:	23a0      	movs	r3, #160	; 0xa0
 8000bf6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c00:	f107 0310 	add.w	r3, r7, #16
 8000c04:	4619      	mov	r1, r3
 8000c06:	480b      	ldr	r0, [pc, #44]	; (8000c34 <HAL_SPI_MspInit+0x90>)
 8000c08:	f000 ffce 	bl	8001ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c0c:	2340      	movs	r3, #64	; 0x40
 8000c0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c10:	2300      	movs	r3, #0
 8000c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	f107 0310 	add.w	r3, r7, #16
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4805      	ldr	r0, [pc, #20]	; (8000c34 <HAL_SPI_MspInit+0x90>)
 8000c20:	f000 ffc2 	bl	8001ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c24:	bf00      	nop
 8000c26:	3720      	adds	r7, #32
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40013000 	.word	0x40013000
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40010800 	.word	0x40010800

08000c38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 0310 	add.w	r3, r7, #16
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a20      	ldr	r2, [pc, #128]	; (8000cd4 <HAL_UART_MspInit+0x9c>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d139      	bne.n	8000ccc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c58:	4b1f      	ldr	r3, [pc, #124]	; (8000cd8 <HAL_UART_MspInit+0xa0>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	4a1e      	ldr	r2, [pc, #120]	; (8000cd8 <HAL_UART_MspInit+0xa0>)
 8000c5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c62:	6193      	str	r3, [r2, #24]
 8000c64:	4b1c      	ldr	r3, [pc, #112]	; (8000cd8 <HAL_UART_MspInit+0xa0>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c70:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <HAL_UART_MspInit+0xa0>)
 8000c72:	699b      	ldr	r3, [r3, #24]
 8000c74:	4a18      	ldr	r2, [pc, #96]	; (8000cd8 <HAL_UART_MspInit+0xa0>)
 8000c76:	f043 0304 	orr.w	r3, r3, #4
 8000c7a:	6193      	str	r3, [r2, #24]
 8000c7c:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <HAL_UART_MspInit+0xa0>)
 8000c7e:	699b      	ldr	r3, [r3, #24]
 8000c80:	f003 0304 	and.w	r3, r3, #4
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	68bb      	ldr	r3, [r7, #8]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_12;
 8000c88:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8000c8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c96:	f107 0310 	add.w	r3, r7, #16
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	480f      	ldr	r0, [pc, #60]	; (8000cdc <HAL_UART_MspInit+0xa4>)
 8000c9e:	f000 ff83 	bl	8001ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000ca2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ca6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb0:	f107 0310 	add.w	r3, r7, #16
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4809      	ldr	r0, [pc, #36]	; (8000cdc <HAL_UART_MspInit+0xa4>)
 8000cb8:	f000 ff76 	bl	8001ba8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	2025      	movs	r0, #37	; 0x25
 8000cc2:	f000 fe6c 	bl	800199e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000cc6:	2025      	movs	r0, #37	; 0x25
 8000cc8:	f000 fe85 	bl	80019d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ccc:	bf00      	nop
 8000cce:	3720      	adds	r7, #32
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40013800 	.word	0x40013800
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	40010800 	.word	0x40010800

08000ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <NMI_Handler+0x4>

08000ce6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <HardFault_Handler+0x4>

08000cec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <MemManage_Handler+0x4>

08000cf2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <BusFault_Handler+0x4>

08000cf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <UsageFault_Handler+0x4>

08000cfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr

08000d0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr

08000d16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bc80      	pop	{r7}
 8000d20:	4770      	bx	lr

08000d22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d26:	f000 f8c9 	bl	8000ebc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
	...

08000d30 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000d34:	4802      	ldr	r0, [pc, #8]	; (8000d40 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000d36:	f000 fb2e 	bl	8001396 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	200000dc 	.word	0x200000dc

08000d44 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000d48:	4802      	ldr	r0, [pc, #8]	; (8000d54 <CAN1_SCE_IRQHandler+0x10>)
 8000d4a:	f000 fb24 	bl	8001396 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	200000dc 	.word	0x200000dc

08000d58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d5c:	4802      	ldr	r0, [pc, #8]	; (8000d68 <USART1_IRQHandler+0x10>)
 8000d5e:	f003 fc1b 	bl	8004598 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	200001b8 	.word	0x200001b8

08000d6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d74:	4a14      	ldr	r2, [pc, #80]	; (8000dc8 <_sbrk+0x5c>)
 8000d76:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <_sbrk+0x60>)
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d80:	4b13      	ldr	r3, [pc, #76]	; (8000dd0 <_sbrk+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d102      	bne.n	8000d8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d88:	4b11      	ldr	r3, [pc, #68]	; (8000dd0 <_sbrk+0x64>)
 8000d8a:	4a12      	ldr	r2, [pc, #72]	; (8000dd4 <_sbrk+0x68>)
 8000d8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <_sbrk+0x64>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d207      	bcs.n	8000dac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d9c:	f004 f8de 	bl	8004f5c <__errno>
 8000da0:	4603      	mov	r3, r0
 8000da2:	220c      	movs	r2, #12
 8000da4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000da6:	f04f 33ff 	mov.w	r3, #4294967295
 8000daa:	e009      	b.n	8000dc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dac:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <_sbrk+0x64>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000db2:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <_sbrk+0x64>)
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4413      	add	r3, r2
 8000dba:	4a05      	ldr	r2, [pc, #20]	; (8000dd0 <_sbrk+0x64>)
 8000dbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dbe:	68fb      	ldr	r3, [r7, #12]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	3718      	adds	r7, #24
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20005000 	.word	0x20005000
 8000dcc:	00000400 	.word	0x00000400
 8000dd0:	20000200 	.word	0x20000200
 8000dd4:	20000218 	.word	0x20000218

08000dd8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bc80      	pop	{r7}
 8000de2:	4770      	bx	lr

08000de4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000de4:	f7ff fff8 	bl	8000dd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000de8:	480b      	ldr	r0, [pc, #44]	; (8000e18 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000dea:	490c      	ldr	r1, [pc, #48]	; (8000e1c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000dec:	4a0c      	ldr	r2, [pc, #48]	; (8000e20 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df0:	e002      	b.n	8000df8 <LoopCopyDataInit>

08000df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df6:	3304      	adds	r3, #4

08000df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dfc:	d3f9      	bcc.n	8000df2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfe:	4a09      	ldr	r2, [pc, #36]	; (8000e24 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e00:	4c09      	ldr	r4, [pc, #36]	; (8000e28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e04:	e001      	b.n	8000e0a <LoopFillZerobss>

08000e06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e08:	3204      	adds	r2, #4

08000e0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e0c:	d3fb      	bcc.n	8000e06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e0e:	f004 f8ab 	bl	8004f68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e12:	f7ff fbf7 	bl	8000604 <main>
  bx lr
 8000e16:	4770      	bx	lr
  ldr r0, =_sdata
 8000e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e1c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e20:	08005958 	.word	0x08005958
  ldr r2, =_sbss
 8000e24:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e28:	20000218 	.word	0x20000218

08000e2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e2c:	e7fe      	b.n	8000e2c <ADC1_2_IRQHandler>
	...

08000e30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e34:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <HAL_Init+0x28>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a07      	ldr	r2, [pc, #28]	; (8000e58 <HAL_Init+0x28>)
 8000e3a:	f043 0310 	orr.w	r3, r3, #16
 8000e3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e40:	2003      	movs	r0, #3
 8000e42:	f000 fda1 	bl	8001988 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e46:	200f      	movs	r0, #15
 8000e48:	f000 f808 	bl	8000e5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e4c:	f7ff fdac 	bl	80009a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e50:	2300      	movs	r3, #0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40022000 	.word	0x40022000

08000e5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e64:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <HAL_InitTick+0x54>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <HAL_InitTick+0x58>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 fdb9 	bl	80019f2 <HAL_SYSTICK_Config>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e00e      	b.n	8000ea8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2b0f      	cmp	r3, #15
 8000e8e:	d80a      	bhi.n	8000ea6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e90:	2200      	movs	r2, #0
 8000e92:	6879      	ldr	r1, [r7, #4]
 8000e94:	f04f 30ff 	mov.w	r0, #4294967295
 8000e98:	f000 fd81 	bl	800199e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e9c:	4a06      	ldr	r2, [pc, #24]	; (8000eb8 <HAL_InitTick+0x5c>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	e000      	b.n	8000ea8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000004 	.word	0x20000004
 8000eb4:	2000000c 	.word	0x2000000c
 8000eb8:	20000008 	.word	0x20000008

08000ebc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <HAL_IncTick+0x1c>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4b05      	ldr	r3, [pc, #20]	; (8000edc <HAL_IncTick+0x20>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4413      	add	r3, r2
 8000ecc:	4a03      	ldr	r2, [pc, #12]	; (8000edc <HAL_IncTick+0x20>)
 8000ece:	6013      	str	r3, [r2, #0]
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr
 8000ed8:	2000000c 	.word	0x2000000c
 8000edc:	20000204 	.word	0x20000204

08000ee0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee4:	4b02      	ldr	r3, [pc, #8]	; (8000ef0 <HAL_GetTick+0x10>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr
 8000ef0:	20000204 	.word	0x20000204

08000ef4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000efc:	f7ff fff0 	bl	8000ee0 <HAL_GetTick>
 8000f00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f0c:	d005      	beq.n	8000f1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	; (8000f38 <HAL_Delay+0x44>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4413      	add	r3, r2
 8000f18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f1a:	bf00      	nop
 8000f1c:	f7ff ffe0 	bl	8000ee0 <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d8f7      	bhi.n	8000f1c <HAL_Delay+0x28>
  {
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	2000000c 	.word	0x2000000c

08000f3c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d101      	bne.n	8000f4e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e0ed      	b.n	800112a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d102      	bne.n	8000f60 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff fd56 	bl	8000a0c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f042 0201 	orr.w	r2, r2, #1
 8000f6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f70:	f7ff ffb6 	bl	8000ee0 <HAL_GetTick>
 8000f74:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f76:	e012      	b.n	8000f9e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000f78:	f7ff ffb2 	bl	8000ee0 <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	2b0a      	cmp	r3, #10
 8000f84:	d90b      	bls.n	8000f9e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2205      	movs	r2, #5
 8000f96:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e0c5      	b.n	800112a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d0e5      	beq.n	8000f78 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f022 0202 	bic.w	r2, r2, #2
 8000fba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fbc:	f7ff ff90 	bl	8000ee0 <HAL_GetTick>
 8000fc0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000fc2:	e012      	b.n	8000fea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fc4:	f7ff ff8c 	bl	8000ee0 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b0a      	cmp	r3, #10
 8000fd0:	d90b      	bls.n	8000fea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2205      	movs	r2, #5
 8000fe2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e09f      	b.n	800112a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1e5      	bne.n	8000fc4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	7e1b      	ldrb	r3, [r3, #24]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d108      	bne.n	8001012 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	e007      	b.n	8001022 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001020:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	7e5b      	ldrb	r3, [r3, #25]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d108      	bne.n	800103c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	e007      	b.n	800104c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800104a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	7e9b      	ldrb	r3, [r3, #26]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d108      	bne.n	8001066 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681a      	ldr	r2, [r3, #0]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f042 0220 	orr.w	r2, r2, #32
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	e007      	b.n	8001076 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f022 0220 	bic.w	r2, r2, #32
 8001074:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	7edb      	ldrb	r3, [r3, #27]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d108      	bne.n	8001090 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f022 0210 	bic.w	r2, r2, #16
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	e007      	b.n	80010a0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f042 0210 	orr.w	r2, r2, #16
 800109e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	7f1b      	ldrb	r3, [r3, #28]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d108      	bne.n	80010ba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f042 0208 	orr.w	r2, r2, #8
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	e007      	b.n	80010ca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 0208 	bic.w	r2, r2, #8
 80010c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	7f5b      	ldrb	r3, [r3, #29]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d108      	bne.n	80010e4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	681a      	ldr	r2, [r3, #0]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f042 0204 	orr.w	r2, r2, #4
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	e007      	b.n	80010f4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f022 0204 	bic.w	r2, r2, #4
 80010f2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	689a      	ldr	r2, [r3, #8]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	431a      	orrs	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	691b      	ldr	r3, [r3, #16]
 8001102:	431a      	orrs	r2, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	695b      	ldr	r3, [r3, #20]
 8001108:	ea42 0103 	orr.w	r1, r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	1e5a      	subs	r2, r3, #1
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	430a      	orrs	r2, r1
 8001118:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2201      	movs	r2, #1
 8001124:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001132:	b480      	push	{r7}
 8001134:	b087      	sub	sp, #28
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001148:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800114a:	7cfb      	ldrb	r3, [r7, #19]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d003      	beq.n	8001158 <HAL_CAN_ConfigFilter+0x26>
 8001150:	7cfb      	ldrb	r3, [r7, #19]
 8001152:	2b02      	cmp	r3, #2
 8001154:	f040 80aa 	bne.w	80012ac <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800115e:	f043 0201 	orr.w	r2, r3, #1
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	695b      	ldr	r3, [r3, #20]
 800116c:	f003 031f 	and.w	r3, r3, #31
 8001170:	2201      	movs	r2, #1
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	43db      	mvns	r3, r3
 8001182:	401a      	ands	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d123      	bne.n	80011da <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	43db      	mvns	r3, r3
 800119c:	401a      	ands	r2, r3
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011b0:	683a      	ldr	r2, [r7, #0]
 80011b2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80011b4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	3248      	adds	r2, #72	; 0x48
 80011ba:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011ce:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80011d0:	6979      	ldr	r1, [r7, #20]
 80011d2:	3348      	adds	r3, #72	; 0x48
 80011d4:	00db      	lsls	r3, r3, #3
 80011d6:	440b      	add	r3, r1
 80011d8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d122      	bne.n	8001228 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	431a      	orrs	r2, r3
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011fe:	683a      	ldr	r2, [r7, #0]
 8001200:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001202:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	3248      	adds	r2, #72	; 0x48
 8001208:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	68db      	ldr	r3, [r3, #12]
 8001216:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800121c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800121e:	6979      	ldr	r1, [r7, #20]
 8001220:	3348      	adds	r3, #72	; 0x48
 8001222:	00db      	lsls	r3, r3, #3
 8001224:	440b      	add	r3, r1
 8001226:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d109      	bne.n	8001244 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	43db      	mvns	r3, r3
 800123a:	401a      	ands	r2, r3
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001242:	e007      	b.n	8001254 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	431a      	orrs	r2, r3
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d109      	bne.n	8001270 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	43db      	mvns	r3, r3
 8001266:	401a      	ands	r2, r3
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800126e:	e007      	b.n	8001280 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	431a      	orrs	r2, r3
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	6a1b      	ldr	r3, [r3, #32]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d107      	bne.n	8001298 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	431a      	orrs	r2, r3
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800129e:	f023 0201 	bic.w	r2, r3, #1
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80012a8:	2300      	movs	r3, #0
 80012aa:	e006      	b.n	80012ba <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
  }
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	371c      	adds	r7, #28
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr

080012c4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d12e      	bne.n	8001336 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2202      	movs	r2, #2
 80012dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f022 0201 	bic.w	r2, r2, #1
 80012ee:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80012f0:	f7ff fdf6 	bl	8000ee0 <HAL_GetTick>
 80012f4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80012f6:	e012      	b.n	800131e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012f8:	f7ff fdf2 	bl	8000ee0 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b0a      	cmp	r3, #10
 8001304:	d90b      	bls.n	800131e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2205      	movs	r2, #5
 8001316:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e012      	b.n	8001344 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 0301 	and.w	r3, r3, #1
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1e5      	bne.n	80012f8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001332:	2300      	movs	r3, #0
 8001334:	e006      	b.n	8001344 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
  }
}
 8001344:	4618      	mov	r0, r3
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f893 3020 	ldrb.w	r3, [r3, #32]
 800135c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800135e:	7bfb      	ldrb	r3, [r7, #15]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d002      	beq.n	800136a <HAL_CAN_ActivateNotification+0x1e>
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	2b02      	cmp	r3, #2
 8001368:	d109      	bne.n	800137e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	6959      	ldr	r1, [r3, #20]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	430a      	orrs	r2, r1
 8001378:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800137a:	2300      	movs	r3, #0
 800137c:	e006      	b.n	800138c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001382:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
  }
}
 800138c:	4618      	mov	r0, r3
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr

08001396 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b08a      	sub	sp, #40	; 0x28
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800139e:	2300      	movs	r3, #0
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80013d2:	6a3b      	ldr	r3, [r7, #32]
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d07c      	beq.n	80014d6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d023      	beq.n	800142e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	2201      	movs	r2, #1
 80013ec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f000 f983 	bl	8001704 <HAL_CAN_TxMailbox0CompleteCallback>
 80013fe:	e016      	b.n	800142e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	f003 0304 	and.w	r3, r3, #4
 8001406:	2b00      	cmp	r3, #0
 8001408:	d004      	beq.n	8001414 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
 8001412:	e00c      	b.n	800142e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	2b00      	cmp	r3, #0
 800141c:	d004      	beq.n	8001428 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800141e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001420:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001424:	627b      	str	r3, [r7, #36]	; 0x24
 8001426:	e002      	b.n	800142e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f000 f986 	bl	800173a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001434:	2b00      	cmp	r3, #0
 8001436:	d024      	beq.n	8001482 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001440:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001448:	2b00      	cmp	r3, #0
 800144a:	d003      	beq.n	8001454 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f000 f962 	bl	8001716 <HAL_CAN_TxMailbox1CompleteCallback>
 8001452:	e016      	b.n	8001482 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800145a:	2b00      	cmp	r3, #0
 800145c:	d004      	beq.n	8001468 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800145e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001460:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
 8001466:	e00c      	b.n	8001482 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800146e:	2b00      	cmp	r3, #0
 8001470:	d004      	beq.n	800147c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001474:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
 800147a:	e002      	b.n	8001482 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f000 f965 	bl	800174c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d024      	beq.n	80014d6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001494:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d003      	beq.n	80014a8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f000 f941 	bl	8001728 <HAL_CAN_TxMailbox2CompleteCallback>
 80014a6:	e016      	b.n	80014d6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d004      	beq.n	80014bc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
 80014ba:	e00c      	b.n	80014d6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d004      	beq.n	80014d0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
 80014ce:	e002      	b.n	80014d6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80014d0:	6878      	ldr	r0, [r7, #4]
 80014d2:	f000 f944 	bl	800175e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80014d6:	6a3b      	ldr	r3, [r7, #32]
 80014d8:	f003 0308 	and.w	r3, r3, #8
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d00c      	beq.n	80014fa <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	f003 0310 	and.w	r3, r3, #16
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d007      	beq.n	80014fa <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2210      	movs	r2, #16
 80014f8:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80014fa:	6a3b      	ldr	r3, [r7, #32]
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	2b00      	cmp	r3, #0
 8001502:	d00b      	beq.n	800151c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	f003 0308 	and.w	r3, r3, #8
 800150a:	2b00      	cmp	r3, #0
 800150c:	d006      	beq.n	800151c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2208      	movs	r2, #8
 8001514:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f000 f933 	bl	8001782 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800151c:	6a3b      	ldr	r3, [r7, #32]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d009      	beq.n	800153a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	f003 0303 	and.w	r3, r3, #3
 8001530:	2b00      	cmp	r3, #0
 8001532:	d002      	beq.n	800153a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f000 f91b 	bl	8001770 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800153a:	6a3b      	ldr	r3, [r7, #32]
 800153c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001540:	2b00      	cmp	r3, #0
 8001542:	d00c      	beq.n	800155e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	f003 0310 	and.w	r3, r3, #16
 800154a:	2b00      	cmp	r3, #0
 800154c:	d007      	beq.n	800155e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800154e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001550:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001554:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2210      	movs	r2, #16
 800155c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800155e:	6a3b      	ldr	r3, [r7, #32]
 8001560:	f003 0320 	and.w	r3, r3, #32
 8001564:	2b00      	cmp	r3, #0
 8001566:	d00b      	beq.n	8001580 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	2b00      	cmp	r3, #0
 8001570:	d006      	beq.n	8001580 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2208      	movs	r2, #8
 8001578:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 f913 	bl	80017a6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001580:	6a3b      	ldr	r3, [r7, #32]
 8001582:	f003 0310 	and.w	r3, r3, #16
 8001586:	2b00      	cmp	r3, #0
 8001588:	d009      	beq.n	800159e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	f003 0303 	and.w	r3, r3, #3
 8001594:	2b00      	cmp	r3, #0
 8001596:	d002      	beq.n	800159e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f000 f8fb 	bl	8001794 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800159e:	6a3b      	ldr	r3, [r7, #32]
 80015a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d00b      	beq.n	80015c0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	f003 0310 	and.w	r3, r3, #16
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d006      	beq.n	80015c0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	2210      	movs	r2, #16
 80015b8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 f8fc 	bl	80017b8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80015c0:	6a3b      	ldr	r3, [r7, #32]
 80015c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d00b      	beq.n	80015e2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	f003 0308 	and.w	r3, r3, #8
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d006      	beq.n	80015e2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2208      	movs	r2, #8
 80015da:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f000 f8f4 	bl	80017ca <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80015e2:	6a3b      	ldr	r3, [r7, #32]
 80015e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d07b      	beq.n	80016e4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f003 0304 	and.w	r3, r3, #4
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d072      	beq.n	80016dc <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80015f6:	6a3b      	ldr	r3, [r7, #32]
 80015f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d008      	beq.n	8001612 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001612:	6a3b      	ldr	r3, [r7, #32]
 8001614:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001618:	2b00      	cmp	r3, #0
 800161a:	d008      	beq.n	800162e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001628:	f043 0302 	orr.w	r3, r3, #2
 800162c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800162e:	6a3b      	ldr	r3, [r7, #32]
 8001630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001634:	2b00      	cmp	r3, #0
 8001636:	d008      	beq.n	800164a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800163e:	2b00      	cmp	r3, #0
 8001640:	d003      	beq.n	800164a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	f043 0304 	orr.w	r3, r3, #4
 8001648:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800164a:	6a3b      	ldr	r3, [r7, #32]
 800164c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001650:	2b00      	cmp	r3, #0
 8001652:	d043      	beq.n	80016dc <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800165a:	2b00      	cmp	r3, #0
 800165c:	d03e      	beq.n	80016dc <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001664:	2b60      	cmp	r3, #96	; 0x60
 8001666:	d02b      	beq.n	80016c0 <HAL_CAN_IRQHandler+0x32a>
 8001668:	2b60      	cmp	r3, #96	; 0x60
 800166a:	d82e      	bhi.n	80016ca <HAL_CAN_IRQHandler+0x334>
 800166c:	2b50      	cmp	r3, #80	; 0x50
 800166e:	d022      	beq.n	80016b6 <HAL_CAN_IRQHandler+0x320>
 8001670:	2b50      	cmp	r3, #80	; 0x50
 8001672:	d82a      	bhi.n	80016ca <HAL_CAN_IRQHandler+0x334>
 8001674:	2b40      	cmp	r3, #64	; 0x40
 8001676:	d019      	beq.n	80016ac <HAL_CAN_IRQHandler+0x316>
 8001678:	2b40      	cmp	r3, #64	; 0x40
 800167a:	d826      	bhi.n	80016ca <HAL_CAN_IRQHandler+0x334>
 800167c:	2b30      	cmp	r3, #48	; 0x30
 800167e:	d010      	beq.n	80016a2 <HAL_CAN_IRQHandler+0x30c>
 8001680:	2b30      	cmp	r3, #48	; 0x30
 8001682:	d822      	bhi.n	80016ca <HAL_CAN_IRQHandler+0x334>
 8001684:	2b10      	cmp	r3, #16
 8001686:	d002      	beq.n	800168e <HAL_CAN_IRQHandler+0x2f8>
 8001688:	2b20      	cmp	r3, #32
 800168a:	d005      	beq.n	8001698 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800168c:	e01d      	b.n	80016ca <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	f043 0308 	orr.w	r3, r3, #8
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001696:	e019      	b.n	80016cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169a:	f043 0310 	orr.w	r3, r3, #16
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016a0:	e014      	b.n	80016cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	f043 0320 	orr.w	r3, r3, #32
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016aa:	e00f      	b.n	80016cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80016ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016b4:	e00a      	b.n	80016cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80016b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016bc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016be:	e005      	b.n	80016cc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80016c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80016c8:	e000      	b.n	80016cc <HAL_CAN_IRQHandler+0x336>
            break;
 80016ca:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	699a      	ldr	r2, [r3, #24]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80016da:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2204      	movs	r2, #4
 80016e2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d008      	beq.n	80016fc <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f000 f870 	bl	80017dc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80016fc:	bf00      	nop
 80016fe:	3728      	adds	r7, #40	; 0x28
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr

08001716 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr

08001728 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr

0800173a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr

0800174c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001754:	bf00      	nop
 8001756:	370c      	adds	r7, #12
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr

0800175e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800175e:	b480      	push	{r7}
 8001760:	b083      	sub	sp, #12
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr

08001770 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	bc80      	pop	{r7}
 8001780:	4770      	bx	lr

08001782 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800178a:	bf00      	nop
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr

08001794 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr

080017a6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr

080017b8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr

080017ca <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr

080017dc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc80      	pop	{r7}
 80017ec:	4770      	bx	lr
	...

080017f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f003 0307 	and.w	r3, r3, #7
 80017fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001800:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <__NVIC_SetPriorityGrouping+0x44>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800180c:	4013      	ands	r3, r2
 800180e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001818:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800181c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001820:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001822:	4a04      	ldr	r2, [pc, #16]	; (8001834 <__NVIC_SetPriorityGrouping+0x44>)
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	60d3      	str	r3, [r2, #12]
}
 8001828:	bf00      	nop
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800183c:	4b04      	ldr	r3, [pc, #16]	; (8001850 <__NVIC_GetPriorityGrouping+0x18>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	0a1b      	lsrs	r3, r3, #8
 8001842:	f003 0307 	and.w	r3, r3, #7
}
 8001846:	4618      	mov	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800185e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001862:	2b00      	cmp	r3, #0
 8001864:	db0b      	blt.n	800187e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	f003 021f 	and.w	r2, r3, #31
 800186c:	4906      	ldr	r1, [pc, #24]	; (8001888 <__NVIC_EnableIRQ+0x34>)
 800186e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001872:	095b      	lsrs	r3, r3, #5
 8001874:	2001      	movs	r0, #1
 8001876:	fa00 f202 	lsl.w	r2, r0, r2
 800187a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800187e:	bf00      	nop
 8001880:	370c      	adds	r7, #12
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr
 8001888:	e000e100 	.word	0xe000e100

0800188c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	6039      	str	r1, [r7, #0]
 8001896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189c:	2b00      	cmp	r3, #0
 800189e:	db0a      	blt.n	80018b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	490c      	ldr	r1, [pc, #48]	; (80018d8 <__NVIC_SetPriority+0x4c>)
 80018a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018aa:	0112      	lsls	r2, r2, #4
 80018ac:	b2d2      	uxtb	r2, r2
 80018ae:	440b      	add	r3, r1
 80018b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b4:	e00a      	b.n	80018cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	4908      	ldr	r1, [pc, #32]	; (80018dc <__NVIC_SetPriority+0x50>)
 80018bc:	79fb      	ldrb	r3, [r7, #7]
 80018be:	f003 030f 	and.w	r3, r3, #15
 80018c2:	3b04      	subs	r3, #4
 80018c4:	0112      	lsls	r2, r2, #4
 80018c6:	b2d2      	uxtb	r2, r2
 80018c8:	440b      	add	r3, r1
 80018ca:	761a      	strb	r2, [r3, #24]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bc80      	pop	{r7}
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	e000e100 	.word	0xe000e100
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b089      	sub	sp, #36	; 0x24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	f1c3 0307 	rsb	r3, r3, #7
 80018fa:	2b04      	cmp	r3, #4
 80018fc:	bf28      	it	cs
 80018fe:	2304      	movcs	r3, #4
 8001900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	3304      	adds	r3, #4
 8001906:	2b06      	cmp	r3, #6
 8001908:	d902      	bls.n	8001910 <NVIC_EncodePriority+0x30>
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	3b03      	subs	r3, #3
 800190e:	e000      	b.n	8001912 <NVIC_EncodePriority+0x32>
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001914:	f04f 32ff 	mov.w	r2, #4294967295
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	43da      	mvns	r2, r3
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	401a      	ands	r2, r3
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001928:	f04f 31ff 	mov.w	r1, #4294967295
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	fa01 f303 	lsl.w	r3, r1, r3
 8001932:	43d9      	mvns	r1, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001938:	4313      	orrs	r3, r2
         );
}
 800193a:	4618      	mov	r0, r3
 800193c:	3724      	adds	r7, #36	; 0x24
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr

08001944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3b01      	subs	r3, #1
 8001950:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001954:	d301      	bcc.n	800195a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001956:	2301      	movs	r3, #1
 8001958:	e00f      	b.n	800197a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800195a:	4a0a      	ldr	r2, [pc, #40]	; (8001984 <SysTick_Config+0x40>)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3b01      	subs	r3, #1
 8001960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001962:	210f      	movs	r1, #15
 8001964:	f04f 30ff 	mov.w	r0, #4294967295
 8001968:	f7ff ff90 	bl	800188c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800196c:	4b05      	ldr	r3, [pc, #20]	; (8001984 <SysTick_Config+0x40>)
 800196e:	2200      	movs	r2, #0
 8001970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001972:	4b04      	ldr	r3, [pc, #16]	; (8001984 <SysTick_Config+0x40>)
 8001974:	2207      	movs	r2, #7
 8001976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	e000e010 	.word	0xe000e010

08001988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff ff2d 	bl	80017f0 <__NVIC_SetPriorityGrouping>
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800199e:	b580      	push	{r7, lr}
 80019a0:	b086      	sub	sp, #24
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	4603      	mov	r3, r0
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	607a      	str	r2, [r7, #4]
 80019aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019b0:	f7ff ff42 	bl	8001838 <__NVIC_GetPriorityGrouping>
 80019b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	68b9      	ldr	r1, [r7, #8]
 80019ba:	6978      	ldr	r0, [r7, #20]
 80019bc:	f7ff ff90 	bl	80018e0 <NVIC_EncodePriority>
 80019c0:	4602      	mov	r2, r0
 80019c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019c6:	4611      	mov	r1, r2
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff ff5f 	bl	800188c <__NVIC_SetPriority>
}
 80019ce:	bf00      	nop
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b082      	sub	sp, #8
 80019da:	af00      	add	r7, sp, #0
 80019dc:	4603      	mov	r3, r0
 80019de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff ff35 	bl	8001854 <__NVIC_EnableIRQ>
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b082      	sub	sp, #8
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff ffa2 	bl	8001944 <SysTick_Config>
 8001a00:	4603      	mov	r3, r0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e00e      	b.n	8001a3a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	795b      	ldrb	r3, [r3, #5]
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d105      	bne.n	8001a32 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f7ff f85d 	bl	8000aec <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b085      	sub	sp, #20
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d008      	beq.n	8001a6c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2204      	movs	r2, #4
 8001a5e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e020      	b.n	8001aae <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f022 020e 	bic.w	r2, r2, #14
 8001a7a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 0201 	bic.w	r2, r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a94:	2101      	movs	r1, #1
 8001a96:	fa01 f202 	lsl.w	r2, r1, r2
 8001a9a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3714      	adds	r7, #20
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr

08001ab8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d005      	beq.n	8001adc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2204      	movs	r2, #4
 8001ad4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	73fb      	strb	r3, [r7, #15]
 8001ada:	e051      	b.n	8001b80 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 020e 	bic.w	r2, r2, #14
 8001aea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0201 	bic.w	r2, r2, #1
 8001afa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a22      	ldr	r2, [pc, #136]	; (8001b8c <HAL_DMA_Abort_IT+0xd4>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d029      	beq.n	8001b5a <HAL_DMA_Abort_IT+0xa2>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a21      	ldr	r2, [pc, #132]	; (8001b90 <HAL_DMA_Abort_IT+0xd8>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d022      	beq.n	8001b56 <HAL_DMA_Abort_IT+0x9e>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a1f      	ldr	r2, [pc, #124]	; (8001b94 <HAL_DMA_Abort_IT+0xdc>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d01a      	beq.n	8001b50 <HAL_DMA_Abort_IT+0x98>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a1e      	ldr	r2, [pc, #120]	; (8001b98 <HAL_DMA_Abort_IT+0xe0>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d012      	beq.n	8001b4a <HAL_DMA_Abort_IT+0x92>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a1c      	ldr	r2, [pc, #112]	; (8001b9c <HAL_DMA_Abort_IT+0xe4>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d00a      	beq.n	8001b44 <HAL_DMA_Abort_IT+0x8c>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a1b      	ldr	r2, [pc, #108]	; (8001ba0 <HAL_DMA_Abort_IT+0xe8>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d102      	bne.n	8001b3e <HAL_DMA_Abort_IT+0x86>
 8001b38:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b3c:	e00e      	b.n	8001b5c <HAL_DMA_Abort_IT+0xa4>
 8001b3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001b42:	e00b      	b.n	8001b5c <HAL_DMA_Abort_IT+0xa4>
 8001b44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b48:	e008      	b.n	8001b5c <HAL_DMA_Abort_IT+0xa4>
 8001b4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b4e:	e005      	b.n	8001b5c <HAL_DMA_Abort_IT+0xa4>
 8001b50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b54:	e002      	b.n	8001b5c <HAL_DMA_Abort_IT+0xa4>
 8001b56:	2310      	movs	r3, #16
 8001b58:	e000      	b.n	8001b5c <HAL_DMA_Abort_IT+0xa4>
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	4a11      	ldr	r2, [pc, #68]	; (8001ba4 <HAL_DMA_Abort_IT+0xec>)
 8001b5e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	4798      	blx	r3
    } 
  }
  return status;
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40020008 	.word	0x40020008
 8001b90:	4002001c 	.word	0x4002001c
 8001b94:	40020030 	.word	0x40020030
 8001b98:	40020044 	.word	0x40020044
 8001b9c:	40020058 	.word	0x40020058
 8001ba0:	4002006c 	.word	0x4002006c
 8001ba4:	40020000 	.word	0x40020000

08001ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b08b      	sub	sp, #44	; 0x2c
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bba:	e169      	b.n	8001e90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	69fa      	ldr	r2, [r7, #28]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	f040 8158 	bne.w	8001e8a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	4a9a      	ldr	r2, [pc, #616]	; (8001e48 <HAL_GPIO_Init+0x2a0>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d05e      	beq.n	8001ca2 <HAL_GPIO_Init+0xfa>
 8001be4:	4a98      	ldr	r2, [pc, #608]	; (8001e48 <HAL_GPIO_Init+0x2a0>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d875      	bhi.n	8001cd6 <HAL_GPIO_Init+0x12e>
 8001bea:	4a98      	ldr	r2, [pc, #608]	; (8001e4c <HAL_GPIO_Init+0x2a4>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d058      	beq.n	8001ca2 <HAL_GPIO_Init+0xfa>
 8001bf0:	4a96      	ldr	r2, [pc, #600]	; (8001e4c <HAL_GPIO_Init+0x2a4>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d86f      	bhi.n	8001cd6 <HAL_GPIO_Init+0x12e>
 8001bf6:	4a96      	ldr	r2, [pc, #600]	; (8001e50 <HAL_GPIO_Init+0x2a8>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d052      	beq.n	8001ca2 <HAL_GPIO_Init+0xfa>
 8001bfc:	4a94      	ldr	r2, [pc, #592]	; (8001e50 <HAL_GPIO_Init+0x2a8>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d869      	bhi.n	8001cd6 <HAL_GPIO_Init+0x12e>
 8001c02:	4a94      	ldr	r2, [pc, #592]	; (8001e54 <HAL_GPIO_Init+0x2ac>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d04c      	beq.n	8001ca2 <HAL_GPIO_Init+0xfa>
 8001c08:	4a92      	ldr	r2, [pc, #584]	; (8001e54 <HAL_GPIO_Init+0x2ac>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d863      	bhi.n	8001cd6 <HAL_GPIO_Init+0x12e>
 8001c0e:	4a92      	ldr	r2, [pc, #584]	; (8001e58 <HAL_GPIO_Init+0x2b0>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d046      	beq.n	8001ca2 <HAL_GPIO_Init+0xfa>
 8001c14:	4a90      	ldr	r2, [pc, #576]	; (8001e58 <HAL_GPIO_Init+0x2b0>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d85d      	bhi.n	8001cd6 <HAL_GPIO_Init+0x12e>
 8001c1a:	2b12      	cmp	r3, #18
 8001c1c:	d82a      	bhi.n	8001c74 <HAL_GPIO_Init+0xcc>
 8001c1e:	2b12      	cmp	r3, #18
 8001c20:	d859      	bhi.n	8001cd6 <HAL_GPIO_Init+0x12e>
 8001c22:	a201      	add	r2, pc, #4	; (adr r2, 8001c28 <HAL_GPIO_Init+0x80>)
 8001c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c28:	08001ca3 	.word	0x08001ca3
 8001c2c:	08001c7d 	.word	0x08001c7d
 8001c30:	08001c8f 	.word	0x08001c8f
 8001c34:	08001cd1 	.word	0x08001cd1
 8001c38:	08001cd7 	.word	0x08001cd7
 8001c3c:	08001cd7 	.word	0x08001cd7
 8001c40:	08001cd7 	.word	0x08001cd7
 8001c44:	08001cd7 	.word	0x08001cd7
 8001c48:	08001cd7 	.word	0x08001cd7
 8001c4c:	08001cd7 	.word	0x08001cd7
 8001c50:	08001cd7 	.word	0x08001cd7
 8001c54:	08001cd7 	.word	0x08001cd7
 8001c58:	08001cd7 	.word	0x08001cd7
 8001c5c:	08001cd7 	.word	0x08001cd7
 8001c60:	08001cd7 	.word	0x08001cd7
 8001c64:	08001cd7 	.word	0x08001cd7
 8001c68:	08001cd7 	.word	0x08001cd7
 8001c6c:	08001c85 	.word	0x08001c85
 8001c70:	08001c99 	.word	0x08001c99
 8001c74:	4a79      	ldr	r2, [pc, #484]	; (8001e5c <HAL_GPIO_Init+0x2b4>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d013      	beq.n	8001ca2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c7a:	e02c      	b.n	8001cd6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	623b      	str	r3, [r7, #32]
          break;
 8001c82:	e029      	b.n	8001cd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	3304      	adds	r3, #4
 8001c8a:	623b      	str	r3, [r7, #32]
          break;
 8001c8c:	e024      	b.n	8001cd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	3308      	adds	r3, #8
 8001c94:	623b      	str	r3, [r7, #32]
          break;
 8001c96:	e01f      	b.n	8001cd8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	330c      	adds	r3, #12
 8001c9e:	623b      	str	r3, [r7, #32]
          break;
 8001ca0:	e01a      	b.n	8001cd8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d102      	bne.n	8001cb0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001caa:	2304      	movs	r3, #4
 8001cac:	623b      	str	r3, [r7, #32]
          break;
 8001cae:	e013      	b.n	8001cd8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d105      	bne.n	8001cc4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cb8:	2308      	movs	r3, #8
 8001cba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	69fa      	ldr	r2, [r7, #28]
 8001cc0:	611a      	str	r2, [r3, #16]
          break;
 8001cc2:	e009      	b.n	8001cd8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cc4:	2308      	movs	r3, #8
 8001cc6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	69fa      	ldr	r2, [r7, #28]
 8001ccc:	615a      	str	r2, [r3, #20]
          break;
 8001cce:	e003      	b.n	8001cd8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	623b      	str	r3, [r7, #32]
          break;
 8001cd4:	e000      	b.n	8001cd8 <HAL_GPIO_Init+0x130>
          break;
 8001cd6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	2bff      	cmp	r3, #255	; 0xff
 8001cdc:	d801      	bhi.n	8001ce2 <HAL_GPIO_Init+0x13a>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	e001      	b.n	8001ce6 <HAL_GPIO_Init+0x13e>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	2bff      	cmp	r3, #255	; 0xff
 8001cec:	d802      	bhi.n	8001cf4 <HAL_GPIO_Init+0x14c>
 8001cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	e002      	b.n	8001cfa <HAL_GPIO_Init+0x152>
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	3b08      	subs	r3, #8
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	210f      	movs	r1, #15
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	fa01 f303 	lsl.w	r3, r1, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	401a      	ands	r2, r3
 8001d0c:	6a39      	ldr	r1, [r7, #32]
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	fa01 f303 	lsl.w	r3, r1, r3
 8001d14:	431a      	orrs	r2, r3
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 80b1 	beq.w	8001e8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d28:	4b4d      	ldr	r3, [pc, #308]	; (8001e60 <HAL_GPIO_Init+0x2b8>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	4a4c      	ldr	r2, [pc, #304]	; (8001e60 <HAL_GPIO_Init+0x2b8>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	6193      	str	r3, [r2, #24]
 8001d34:	4b4a      	ldr	r3, [pc, #296]	; (8001e60 <HAL_GPIO_Init+0x2b8>)
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d40:	4a48      	ldr	r2, [pc, #288]	; (8001e64 <HAL_GPIO_Init+0x2bc>)
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	089b      	lsrs	r3, r3, #2
 8001d46:	3302      	adds	r3, #2
 8001d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	220f      	movs	r2, #15
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	4013      	ands	r3, r2
 8001d62:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a40      	ldr	r2, [pc, #256]	; (8001e68 <HAL_GPIO_Init+0x2c0>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d013      	beq.n	8001d94 <HAL_GPIO_Init+0x1ec>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a3f      	ldr	r2, [pc, #252]	; (8001e6c <HAL_GPIO_Init+0x2c4>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d00d      	beq.n	8001d90 <HAL_GPIO_Init+0x1e8>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a3e      	ldr	r2, [pc, #248]	; (8001e70 <HAL_GPIO_Init+0x2c8>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d007      	beq.n	8001d8c <HAL_GPIO_Init+0x1e4>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a3d      	ldr	r2, [pc, #244]	; (8001e74 <HAL_GPIO_Init+0x2cc>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d101      	bne.n	8001d88 <HAL_GPIO_Init+0x1e0>
 8001d84:	2303      	movs	r3, #3
 8001d86:	e006      	b.n	8001d96 <HAL_GPIO_Init+0x1ee>
 8001d88:	2304      	movs	r3, #4
 8001d8a:	e004      	b.n	8001d96 <HAL_GPIO_Init+0x1ee>
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	e002      	b.n	8001d96 <HAL_GPIO_Init+0x1ee>
 8001d90:	2301      	movs	r3, #1
 8001d92:	e000      	b.n	8001d96 <HAL_GPIO_Init+0x1ee>
 8001d94:	2300      	movs	r3, #0
 8001d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d98:	f002 0203 	and.w	r2, r2, #3
 8001d9c:	0092      	lsls	r2, r2, #2
 8001d9e:	4093      	lsls	r3, r2
 8001da0:	68fa      	ldr	r2, [r7, #12]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001da6:	492f      	ldr	r1, [pc, #188]	; (8001e64 <HAL_GPIO_Init+0x2bc>)
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	089b      	lsrs	r3, r3, #2
 8001dac:	3302      	adds	r3, #2
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d006      	beq.n	8001dce <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dc0:	4b2d      	ldr	r3, [pc, #180]	; (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001dc2:	689a      	ldr	r2, [r3, #8]
 8001dc4:	492c      	ldr	r1, [pc, #176]	; (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	608b      	str	r3, [r1, #8]
 8001dcc:	e006      	b.n	8001ddc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dce:	4b2a      	ldr	r3, [pc, #168]	; (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	4928      	ldr	r1, [pc, #160]	; (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d006      	beq.n	8001df6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001de8:	4b23      	ldr	r3, [pc, #140]	; (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001dea:	68da      	ldr	r2, [r3, #12]
 8001dec:	4922      	ldr	r1, [pc, #136]	; (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	60cb      	str	r3, [r1, #12]
 8001df4:	e006      	b.n	8001e04 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001df6:	4b20      	ldr	r3, [pc, #128]	; (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001df8:	68da      	ldr	r2, [r3, #12]
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	491e      	ldr	r1, [pc, #120]	; (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001e00:	4013      	ands	r3, r2
 8001e02:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d006      	beq.n	8001e1e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e10:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	4918      	ldr	r1, [pc, #96]	; (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	604b      	str	r3, [r1, #4]
 8001e1c:	e006      	b.n	8001e2c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e1e:	4b16      	ldr	r3, [pc, #88]	; (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001e20:	685a      	ldr	r2, [r3, #4]
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	43db      	mvns	r3, r3
 8001e26:	4914      	ldr	r1, [pc, #80]	; (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001e28:	4013      	ands	r3, r2
 8001e2a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d021      	beq.n	8001e7c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e38:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001e3a:	681a      	ldr	r2, [r3, #0]
 8001e3c:	490e      	ldr	r1, [pc, #56]	; (8001e78 <HAL_GPIO_Init+0x2d0>)
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	600b      	str	r3, [r1, #0]
 8001e44:	e021      	b.n	8001e8a <HAL_GPIO_Init+0x2e2>
 8001e46:	bf00      	nop
 8001e48:	10320000 	.word	0x10320000
 8001e4c:	10310000 	.word	0x10310000
 8001e50:	10220000 	.word	0x10220000
 8001e54:	10210000 	.word	0x10210000
 8001e58:	10120000 	.word	0x10120000
 8001e5c:	10110000 	.word	0x10110000
 8001e60:	40021000 	.word	0x40021000
 8001e64:	40010000 	.word	0x40010000
 8001e68:	40010800 	.word	0x40010800
 8001e6c:	40010c00 	.word	0x40010c00
 8001e70:	40011000 	.word	0x40011000
 8001e74:	40011400 	.word	0x40011400
 8001e78:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e7c:	4b0b      	ldr	r3, [pc, #44]	; (8001eac <HAL_GPIO_Init+0x304>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	43db      	mvns	r3, r3
 8001e84:	4909      	ldr	r1, [pc, #36]	; (8001eac <HAL_GPIO_Init+0x304>)
 8001e86:	4013      	ands	r3, r2
 8001e88:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	fa22 f303 	lsr.w	r3, r2, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f47f ae8e 	bne.w	8001bbc <HAL_GPIO_Init+0x14>
  }
}
 8001ea0:	bf00      	nop
 8001ea2:	bf00      	nop
 8001ea4:	372c      	adds	r7, #44	; 0x2c
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bc80      	pop	{r7}
 8001eaa:	4770      	bx	lr
 8001eac:	40010400 	.word	0x40010400

08001eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	807b      	strh	r3, [r7, #2]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ec0:	787b      	ldrb	r3, [r7, #1]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ec6:	887a      	ldrh	r2, [r7, #2]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ecc:	e003      	b.n	8001ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ece:	887b      	ldrh	r3, [r7, #2]
 8001ed0:	041a      	lsls	r2, r3, #16
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	611a      	str	r2, [r3, #16]
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bc80      	pop	{r7}
 8001ede:	4770      	bx	lr

08001ee0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e12b      	b.n	800214a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d106      	bne.n	8001f0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7fe fe0e 	bl	8000b28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2224      	movs	r2, #36	; 0x24
 8001f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0201 	bic.w	r2, r2, #1
 8001f22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f44:	f002 f9d8 	bl	80042f8 <HAL_RCC_GetPCLK1Freq>
 8001f48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	4a81      	ldr	r2, [pc, #516]	; (8002154 <HAL_I2C_Init+0x274>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d807      	bhi.n	8001f64 <HAL_I2C_Init+0x84>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	4a80      	ldr	r2, [pc, #512]	; (8002158 <HAL_I2C_Init+0x278>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	bf94      	ite	ls
 8001f5c:	2301      	movls	r3, #1
 8001f5e:	2300      	movhi	r3, #0
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	e006      	b.n	8001f72 <HAL_I2C_Init+0x92>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	4a7d      	ldr	r2, [pc, #500]	; (800215c <HAL_I2C_Init+0x27c>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	bf94      	ite	ls
 8001f6c:	2301      	movls	r3, #1
 8001f6e:	2300      	movhi	r3, #0
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e0e7      	b.n	800214a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	4a78      	ldr	r2, [pc, #480]	; (8002160 <HAL_I2C_Init+0x280>)
 8001f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f82:	0c9b      	lsrs	r3, r3, #18
 8001f84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	68ba      	ldr	r2, [r7, #8]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	4a6a      	ldr	r2, [pc, #424]	; (8002154 <HAL_I2C_Init+0x274>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d802      	bhi.n	8001fb4 <HAL_I2C_Init+0xd4>
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	e009      	b.n	8001fc8 <HAL_I2C_Init+0xe8>
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001fba:	fb02 f303 	mul.w	r3, r2, r3
 8001fbe:	4a69      	ldr	r2, [pc, #420]	; (8002164 <HAL_I2C_Init+0x284>)
 8001fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc4:	099b      	lsrs	r3, r3, #6
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6812      	ldr	r2, [r2, #0]
 8001fcc:	430b      	orrs	r3, r1
 8001fce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001fda:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	495c      	ldr	r1, [pc, #368]	; (8002154 <HAL_I2C_Init+0x274>)
 8001fe4:	428b      	cmp	r3, r1
 8001fe6:	d819      	bhi.n	800201c <HAL_I2C_Init+0x13c>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	1e59      	subs	r1, r3, #1
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ff6:	1c59      	adds	r1, r3, #1
 8001ff8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ffc:	400b      	ands	r3, r1
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00a      	beq.n	8002018 <HAL_I2C_Init+0x138>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	1e59      	subs	r1, r3, #1
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002010:	3301      	adds	r3, #1
 8002012:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002016:	e051      	b.n	80020bc <HAL_I2C_Init+0x1dc>
 8002018:	2304      	movs	r3, #4
 800201a:	e04f      	b.n	80020bc <HAL_I2C_Init+0x1dc>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d111      	bne.n	8002048 <HAL_I2C_Init+0x168>
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	1e58      	subs	r0, r3, #1
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6859      	ldr	r1, [r3, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	440b      	add	r3, r1
 8002032:	fbb0 f3f3 	udiv	r3, r0, r3
 8002036:	3301      	adds	r3, #1
 8002038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800203c:	2b00      	cmp	r3, #0
 800203e:	bf0c      	ite	eq
 8002040:	2301      	moveq	r3, #1
 8002042:	2300      	movne	r3, #0
 8002044:	b2db      	uxtb	r3, r3
 8002046:	e012      	b.n	800206e <HAL_I2C_Init+0x18e>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	1e58      	subs	r0, r3, #1
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6859      	ldr	r1, [r3, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	0099      	lsls	r1, r3, #2
 8002058:	440b      	add	r3, r1
 800205a:	fbb0 f3f3 	udiv	r3, r0, r3
 800205e:	3301      	adds	r3, #1
 8002060:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002064:	2b00      	cmp	r3, #0
 8002066:	bf0c      	ite	eq
 8002068:	2301      	moveq	r3, #1
 800206a:	2300      	movne	r3, #0
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <HAL_I2C_Init+0x196>
 8002072:	2301      	movs	r3, #1
 8002074:	e022      	b.n	80020bc <HAL_I2C_Init+0x1dc>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10e      	bne.n	800209c <HAL_I2C_Init+0x1bc>
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	1e58      	subs	r0, r3, #1
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6859      	ldr	r1, [r3, #4]
 8002086:	460b      	mov	r3, r1
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	440b      	add	r3, r1
 800208c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002090:	3301      	adds	r3, #1
 8002092:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800209a:	e00f      	b.n	80020bc <HAL_I2C_Init+0x1dc>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	1e58      	subs	r0, r3, #1
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6859      	ldr	r1, [r3, #4]
 80020a4:	460b      	mov	r3, r1
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	0099      	lsls	r1, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80020b2:	3301      	adds	r3, #1
 80020b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	6809      	ldr	r1, [r1, #0]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69da      	ldr	r2, [r3, #28]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	431a      	orrs	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	430a      	orrs	r2, r1
 80020de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80020ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	6911      	ldr	r1, [r2, #16]
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	68d2      	ldr	r2, [r2, #12]
 80020f6:	4311      	orrs	r1, r2
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	6812      	ldr	r2, [r2, #0]
 80020fc:	430b      	orrs	r3, r1
 80020fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	695a      	ldr	r2, [r3, #20]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	431a      	orrs	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f042 0201 	orr.w	r2, r2, #1
 800212a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2220      	movs	r2, #32
 8002136:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	000186a0 	.word	0x000186a0
 8002158:	001e847f 	.word	0x001e847f
 800215c:	003d08ff 	.word	0x003d08ff
 8002160:	431bde83 	.word	0x431bde83
 8002164:	10624dd3 	.word	0x10624dd3

08002168 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b088      	sub	sp, #32
 800216c:	af02      	add	r7, sp, #8
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	607a      	str	r2, [r7, #4]
 8002172:	461a      	mov	r2, r3
 8002174:	460b      	mov	r3, r1
 8002176:	817b      	strh	r3, [r7, #10]
 8002178:	4613      	mov	r3, r2
 800217a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800217c:	f7fe feb0 	bl	8000ee0 <HAL_GetTick>
 8002180:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b20      	cmp	r3, #32
 800218c:	f040 80e0 	bne.w	8002350 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	2319      	movs	r3, #25
 8002196:	2201      	movs	r2, #1
 8002198:	4970      	ldr	r1, [pc, #448]	; (800235c <HAL_I2C_Master_Transmit+0x1f4>)
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f001 faac 	bl	80036f8 <I2C_WaitOnFlagUntilTimeout>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80021a6:	2302      	movs	r3, #2
 80021a8:	e0d3      	b.n	8002352 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d101      	bne.n	80021b8 <HAL_I2C_Master_Transmit+0x50>
 80021b4:	2302      	movs	r3, #2
 80021b6:	e0cc      	b.n	8002352 <HAL_I2C_Master_Transmit+0x1ea>
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d007      	beq.n	80021de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f042 0201 	orr.w	r2, r2, #1
 80021dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2221      	movs	r2, #33	; 0x21
 80021f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2210      	movs	r2, #16
 80021fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	893a      	ldrh	r2, [r7, #8]
 800220e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002214:	b29a      	uxth	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	4a50      	ldr	r2, [pc, #320]	; (8002360 <HAL_I2C_Master_Transmit+0x1f8>)
 800221e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002220:	8979      	ldrh	r1, [r7, #10]
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	6a3a      	ldr	r2, [r7, #32]
 8002226:	68f8      	ldr	r0, [r7, #12]
 8002228:	f000 ff98 	bl	800315c <I2C_MasterRequestWrite>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e08d      	b.n	8002352 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002236:	2300      	movs	r3, #0
 8002238:	613b      	str	r3, [r7, #16]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	613b      	str	r3, [r7, #16]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	613b      	str	r3, [r7, #16]
 800224a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800224c:	e066      	b.n	800231c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800224e:	697a      	ldr	r2, [r7, #20]
 8002250:	6a39      	ldr	r1, [r7, #32]
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f001 fb6a 	bl	800392c <I2C_WaitOnTXEFlagUntilTimeout>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00d      	beq.n	800227a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002262:	2b04      	cmp	r3, #4
 8002264:	d107      	bne.n	8002276 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002274:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e06b      	b.n	8002352 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227e:	781a      	ldrb	r2, [r3, #0]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228a:	1c5a      	adds	r2, r3, #1
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002294:	b29b      	uxth	r3, r3
 8002296:	3b01      	subs	r3, #1
 8002298:	b29a      	uxth	r2, r3
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a2:	3b01      	subs	r3, #1
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b04      	cmp	r3, #4
 80022b6:	d11b      	bne.n	80022f0 <HAL_I2C_Master_Transmit+0x188>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d017      	beq.n	80022f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c4:	781a      	ldrb	r2, [r3, #0]
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d0:	1c5a      	adds	r2, r3, #1
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022da:	b29b      	uxth	r3, r3
 80022dc:	3b01      	subs	r3, #1
 80022de:	b29a      	uxth	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e8:	3b01      	subs	r3, #1
 80022ea:	b29a      	uxth	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	6a39      	ldr	r1, [r7, #32]
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f001 fb61 	bl	80039bc <I2C_WaitOnBTFFlagUntilTimeout>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00d      	beq.n	800231c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	2b04      	cmp	r3, #4
 8002306:	d107      	bne.n	8002318 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002316:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e01a      	b.n	8002352 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002320:	2b00      	cmp	r3, #0
 8002322:	d194      	bne.n	800224e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002332:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2220      	movs	r2, #32
 8002338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800234c:	2300      	movs	r3, #0
 800234e:	e000      	b.n	8002352 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002350:	2302      	movs	r3, #2
  }
}
 8002352:	4618      	mov	r0, r3
 8002354:	3718      	adds	r7, #24
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	00100002 	.word	0x00100002
 8002360:	ffff0000 	.word	0xffff0000

08002364 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08c      	sub	sp, #48	; 0x30
 8002368:	af02      	add	r7, sp, #8
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	607a      	str	r2, [r7, #4]
 800236e:	461a      	mov	r2, r3
 8002370:	460b      	mov	r3, r1
 8002372:	817b      	strh	r3, [r7, #10]
 8002374:	4613      	mov	r3, r2
 8002376:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002378:	2300      	movs	r3, #0
 800237a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800237c:	f7fe fdb0 	bl	8000ee0 <HAL_GetTick>
 8002380:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b20      	cmp	r3, #32
 800238c:	f040 824b 	bne.w	8002826 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	2319      	movs	r3, #25
 8002396:	2201      	movs	r2, #1
 8002398:	497f      	ldr	r1, [pc, #508]	; (8002598 <HAL_I2C_Master_Receive+0x234>)
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f001 f9ac 	bl	80036f8 <I2C_WaitOnFlagUntilTimeout>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80023a6:	2302      	movs	r3, #2
 80023a8:	e23e      	b.n	8002828 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d101      	bne.n	80023b8 <HAL_I2C_Master_Receive+0x54>
 80023b4:	2302      	movs	r3, #2
 80023b6:	e237      	b.n	8002828 <HAL_I2C_Master_Receive+0x4c4>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0301 	and.w	r3, r3, #1
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d007      	beq.n	80023de <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f042 0201 	orr.w	r2, r2, #1
 80023dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2222      	movs	r2, #34	; 0x22
 80023f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2210      	movs	r2, #16
 80023fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	893a      	ldrh	r2, [r7, #8]
 800240e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002414:	b29a      	uxth	r2, r3
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	4a5f      	ldr	r2, [pc, #380]	; (800259c <HAL_I2C_Master_Receive+0x238>)
 800241e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002420:	8979      	ldrh	r1, [r7, #10]
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 ff1a 	bl	8003260 <I2C_MasterRequestRead>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e1f8      	b.n	8002828 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243a:	2b00      	cmp	r3, #0
 800243c:	d113      	bne.n	8002466 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800243e:	2300      	movs	r3, #0
 8002440:	61fb      	str	r3, [r7, #28]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	61fb      	str	r3, [r7, #28]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	61fb      	str	r3, [r7, #28]
 8002452:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	e1cc      	b.n	8002800 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246a:	2b01      	cmp	r3, #1
 800246c:	d11e      	bne.n	80024ac <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800247c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800247e:	b672      	cpsid	i
}
 8002480:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002482:	2300      	movs	r3, #0
 8002484:	61bb      	str	r3, [r7, #24]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	61bb      	str	r3, [r7, #24]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	61bb      	str	r3, [r7, #24]
 8002496:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80024a8:	b662      	cpsie	i
}
 80024aa:	e035      	b.n	8002518 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d11e      	bne.n	80024f2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80024c4:	b672      	cpsid	i
}
 80024c6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024c8:	2300      	movs	r3, #0
 80024ca:	617b      	str	r3, [r7, #20]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	617b      	str	r3, [r7, #20]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	699b      	ldr	r3, [r3, #24]
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80024ee:	b662      	cpsie	i
}
 80024f0:	e012      	b.n	8002518 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002500:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002502:	2300      	movs	r3, #0
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	613b      	str	r3, [r7, #16]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002518:	e172      	b.n	8002800 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800251e:	2b03      	cmp	r3, #3
 8002520:	f200 811f 	bhi.w	8002762 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002528:	2b01      	cmp	r3, #1
 800252a:	d123      	bne.n	8002574 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800252c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f001 fa8b 	bl	8003a4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e173      	b.n	8002828 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	691a      	ldr	r2, [r3, #16]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002552:	1c5a      	adds	r2, r3, #1
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800255c:	3b01      	subs	r3, #1
 800255e:	b29a      	uxth	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002568:	b29b      	uxth	r3, r3
 800256a:	3b01      	subs	r3, #1
 800256c:	b29a      	uxth	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002572:	e145      	b.n	8002800 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002578:	2b02      	cmp	r3, #2
 800257a:	d152      	bne.n	8002622 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002582:	2200      	movs	r2, #0
 8002584:	4906      	ldr	r1, [pc, #24]	; (80025a0 <HAL_I2C_Master_Receive+0x23c>)
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f001 f8b6 	bl	80036f8 <I2C_WaitOnFlagUntilTimeout>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d008      	beq.n	80025a4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e148      	b.n	8002828 <HAL_I2C_Master_Receive+0x4c4>
 8002596:	bf00      	nop
 8002598:	00100002 	.word	0x00100002
 800259c:	ffff0000 	.word	0xffff0000
 80025a0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80025a4:	b672      	cpsid	i
}
 80025a6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	691a      	ldr	r2, [r3, #16]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	1c5a      	adds	r2, r3, #1
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d4:	3b01      	subs	r3, #1
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	3b01      	subs	r3, #1
 80025e4:	b29a      	uxth	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80025ea:	b662      	cpsie	i
}
 80025ec:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	691a      	ldr	r2, [r3, #16]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	1c5a      	adds	r2, r3, #1
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260a:	3b01      	subs	r3, #1
 800260c:	b29a      	uxth	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002616:	b29b      	uxth	r3, r3
 8002618:	3b01      	subs	r3, #1
 800261a:	b29a      	uxth	r2, r3
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002620:	e0ee      	b.n	8002800 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002628:	2200      	movs	r2, #0
 800262a:	4981      	ldr	r1, [pc, #516]	; (8002830 <HAL_I2C_Master_Receive+0x4cc>)
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f001 f863 	bl	80036f8 <I2C_WaitOnFlagUntilTimeout>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e0f5      	b.n	8002828 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800264a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800264c:	b672      	cpsid	i
}
 800264e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	691a      	ldr	r2, [r3, #16]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	1c5a      	adds	r2, r3, #1
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800266c:	3b01      	subs	r3, #1
 800266e:	b29a      	uxth	r2, r3
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002678:	b29b      	uxth	r3, r3
 800267a:	3b01      	subs	r3, #1
 800267c:	b29a      	uxth	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002682:	4b6c      	ldr	r3, [pc, #432]	; (8002834 <HAL_I2C_Master_Receive+0x4d0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	08db      	lsrs	r3, r3, #3
 8002688:	4a6b      	ldr	r2, [pc, #428]	; (8002838 <HAL_I2C_Master_Receive+0x4d4>)
 800268a:	fba2 2303 	umull	r2, r3, r2, r3
 800268e:	0a1a      	lsrs	r2, r3, #8
 8002690:	4613      	mov	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	00da      	lsls	r2, r3, #3
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	3b01      	subs	r3, #1
 80026a0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d118      	bne.n	80026da <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2220      	movs	r2, #32
 80026b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	f043 0220 	orr.w	r2, r3, #32
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80026ca:	b662      	cpsie	i
}
 80026cc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e0a6      	b.n	8002828 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	d1d9      	bne.n	800269c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	691a      	ldr	r2, [r3, #16]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	b2d2      	uxtb	r2, r2
 8002704:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	1c5a      	adds	r2, r3, #1
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002714:	3b01      	subs	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002720:	b29b      	uxth	r3, r3
 8002722:	3b01      	subs	r3, #1
 8002724:	b29a      	uxth	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800272a:	b662      	cpsie	i
}
 800272c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	691a      	ldr	r2, [r3, #16]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	1c5a      	adds	r2, r3, #1
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800274a:	3b01      	subs	r3, #1
 800274c:	b29a      	uxth	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002756:	b29b      	uxth	r3, r3
 8002758:	3b01      	subs	r3, #1
 800275a:	b29a      	uxth	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002760:	e04e      	b.n	8002800 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002764:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f001 f970 	bl	8003a4c <I2C_WaitOnRXNEFlagUntilTimeout>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e058      	b.n	8002828 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	691a      	ldr	r2, [r3, #16]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002788:	1c5a      	adds	r2, r3, #1
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002792:	3b01      	subs	r3, #1
 8002794:	b29a      	uxth	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800279e:	b29b      	uxth	r3, r3
 80027a0:	3b01      	subs	r3, #1
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	f003 0304 	and.w	r3, r3, #4
 80027b2:	2b04      	cmp	r3, #4
 80027b4:	d124      	bne.n	8002800 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ba:	2b03      	cmp	r3, #3
 80027bc:	d107      	bne.n	80027ce <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027cc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	691a      	ldr	r2, [r3, #16]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ea:	3b01      	subs	r3, #1
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	3b01      	subs	r3, #1
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002804:	2b00      	cmp	r3, #0
 8002806:	f47f ae88 	bne.w	800251a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2220      	movs	r2, #32
 800280e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002822:	2300      	movs	r3, #0
 8002824:	e000      	b.n	8002828 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002826:	2302      	movs	r3, #2
  }
}
 8002828:	4618      	mov	r0, r3
 800282a:	3728      	adds	r7, #40	; 0x28
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	00010004 	.word	0x00010004
 8002834:	20000004 	.word	0x20000004
 8002838:	14f8b589 	.word	0x14f8b589

0800283c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b088      	sub	sp, #32
 8002840:	af02      	add	r7, sp, #8
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	4608      	mov	r0, r1
 8002846:	4611      	mov	r1, r2
 8002848:	461a      	mov	r2, r3
 800284a:	4603      	mov	r3, r0
 800284c:	817b      	strh	r3, [r7, #10]
 800284e:	460b      	mov	r3, r1
 8002850:	813b      	strh	r3, [r7, #8]
 8002852:	4613      	mov	r3, r2
 8002854:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002856:	f7fe fb43 	bl	8000ee0 <HAL_GetTick>
 800285a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002862:	b2db      	uxtb	r3, r3
 8002864:	2b20      	cmp	r3, #32
 8002866:	f040 80d9 	bne.w	8002a1c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	9300      	str	r3, [sp, #0]
 800286e:	2319      	movs	r3, #25
 8002870:	2201      	movs	r2, #1
 8002872:	496d      	ldr	r1, [pc, #436]	; (8002a28 <HAL_I2C_Mem_Write+0x1ec>)
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f000 ff3f 	bl	80036f8 <I2C_WaitOnFlagUntilTimeout>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002880:	2302      	movs	r3, #2
 8002882:	e0cc      	b.n	8002a1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800288a:	2b01      	cmp	r3, #1
 800288c:	d101      	bne.n	8002892 <HAL_I2C_Mem_Write+0x56>
 800288e:	2302      	movs	r3, #2
 8002890:	e0c5      	b.n	8002a1e <HAL_I2C_Mem_Write+0x1e2>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d007      	beq.n	80028b8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f042 0201 	orr.w	r2, r2, #1
 80028b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2221      	movs	r2, #33	; 0x21
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2240      	movs	r2, #64	; 0x40
 80028d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6a3a      	ldr	r2, [r7, #32]
 80028e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80028e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ee:	b29a      	uxth	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4a4d      	ldr	r2, [pc, #308]	; (8002a2c <HAL_I2C_Mem_Write+0x1f0>)
 80028f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028fa:	88f8      	ldrh	r0, [r7, #6]
 80028fc:	893a      	ldrh	r2, [r7, #8]
 80028fe:	8979      	ldrh	r1, [r7, #10]
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	9301      	str	r3, [sp, #4]
 8002904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	4603      	mov	r3, r0
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 fd76 	bl	80033fc <I2C_RequestMemoryWrite>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d052      	beq.n	80029bc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e081      	b.n	8002a1e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f001 f804 	bl	800392c <I2C_WaitOnTXEFlagUntilTimeout>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00d      	beq.n	8002946 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	2b04      	cmp	r3, #4
 8002930:	d107      	bne.n	8002942 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002940:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e06b      	b.n	8002a1e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294a:	781a      	ldrb	r2, [r3, #0]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	1c5a      	adds	r2, r3, #1
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002960:	3b01      	subs	r3, #1
 8002962:	b29a      	uxth	r2, r3
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296c:	b29b      	uxth	r3, r3
 800296e:	3b01      	subs	r3, #1
 8002970:	b29a      	uxth	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b04      	cmp	r3, #4
 8002982:	d11b      	bne.n	80029bc <HAL_I2C_Mem_Write+0x180>
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002988:	2b00      	cmp	r3, #0
 800298a:	d017      	beq.n	80029bc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	781a      	ldrb	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	1c5a      	adds	r2, r3, #1
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a6:	3b01      	subs	r3, #1
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	3b01      	subs	r3, #1
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1aa      	bne.n	800291a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f000 fff7 	bl	80039bc <I2C_WaitOnBTFFlagUntilTimeout>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d00d      	beq.n	80029f0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d8:	2b04      	cmp	r3, #4
 80029da:	d107      	bne.n	80029ec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e016      	b.n	8002a1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2220      	movs	r2, #32
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	e000      	b.n	8002a1e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002a1c:	2302      	movs	r3, #2
  }
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	00100002 	.word	0x00100002
 8002a2c:	ffff0000 	.word	0xffff0000

08002a30 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b08c      	sub	sp, #48	; 0x30
 8002a34:	af02      	add	r7, sp, #8
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	4608      	mov	r0, r1
 8002a3a:	4611      	mov	r1, r2
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	4603      	mov	r3, r0
 8002a40:	817b      	strh	r3, [r7, #10]
 8002a42:	460b      	mov	r3, r1
 8002a44:	813b      	strh	r3, [r7, #8]
 8002a46:	4613      	mov	r3, r2
 8002a48:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a4e:	f7fe fa47 	bl	8000ee0 <HAL_GetTick>
 8002a52:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b20      	cmp	r3, #32
 8002a5e:	f040 8244 	bne.w	8002eea <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	2319      	movs	r3, #25
 8002a68:	2201      	movs	r2, #1
 8002a6a:	4982      	ldr	r1, [pc, #520]	; (8002c74 <HAL_I2C_Mem_Read+0x244>)
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f000 fe43 	bl	80036f8 <I2C_WaitOnFlagUntilTimeout>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	e237      	b.n	8002eec <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d101      	bne.n	8002a8a <HAL_I2C_Mem_Read+0x5a>
 8002a86:	2302      	movs	r3, #2
 8002a88:	e230      	b.n	8002eec <HAL_I2C_Mem_Read+0x4bc>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d007      	beq.n	8002ab0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f042 0201 	orr.w	r2, r2, #1
 8002aae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002abe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2222      	movs	r2, #34	; 0x22
 8002ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2240      	movs	r2, #64	; 0x40
 8002acc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ada:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002ae0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4a62      	ldr	r2, [pc, #392]	; (8002c78 <HAL_I2C_Mem_Read+0x248>)
 8002af0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002af2:	88f8      	ldrh	r0, [r7, #6]
 8002af4:	893a      	ldrh	r2, [r7, #8]
 8002af6:	8979      	ldrh	r1, [r7, #10]
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	9301      	str	r3, [sp, #4]
 8002afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	4603      	mov	r3, r0
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 fd10 	bl	8003528 <I2C_RequestMemoryRead>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e1ec      	b.n	8002eec <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d113      	bne.n	8002b42 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61fb      	str	r3, [r7, #28]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	695b      	ldr	r3, [r3, #20]
 8002b24:	61fb      	str	r3, [r7, #28]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	61fb      	str	r3, [r7, #28]
 8002b2e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	e1c0      	b.n	8002ec4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d11e      	bne.n	8002b88 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b58:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b5a:	b672      	cpsid	i
}
 8002b5c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61bb      	str	r3, [r7, #24]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	61bb      	str	r3, [r7, #24]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	61bb      	str	r3, [r7, #24]
 8002b72:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b82:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002b84:	b662      	cpsie	i
}
 8002b86:	e035      	b.n	8002bf4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d11e      	bne.n	8002bce <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b9e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ba0:	b672      	cpsid	i
}
 8002ba2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	617b      	str	r3, [r7, #20]
 8002bb8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bc8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002bca:	b662      	cpsie	i
}
 8002bcc:	e012      	b.n	8002bf4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bdc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bde:	2300      	movs	r3, #0
 8002be0:	613b      	str	r3, [r7, #16]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	695b      	ldr	r3, [r3, #20]
 8002be8:	613b      	str	r3, [r7, #16]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	613b      	str	r3, [r7, #16]
 8002bf2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002bf4:	e166      	b.n	8002ec4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bfa:	2b03      	cmp	r3, #3
 8002bfc:	f200 811f 	bhi.w	8002e3e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d123      	bne.n	8002c50 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 ff1d 	bl	8003a4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e167      	b.n	8002eec <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	691a      	ldr	r2, [r3, #16]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	1c5a      	adds	r2, r3, #1
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	b29a      	uxth	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	3b01      	subs	r3, #1
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c4e:	e139      	b.n	8002ec4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d152      	bne.n	8002cfe <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5e:	2200      	movs	r2, #0
 8002c60:	4906      	ldr	r1, [pc, #24]	; (8002c7c <HAL_I2C_Mem_Read+0x24c>)
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 fd48 	bl	80036f8 <I2C_WaitOnFlagUntilTimeout>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d008      	beq.n	8002c80 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e13c      	b.n	8002eec <HAL_I2C_Mem_Read+0x4bc>
 8002c72:	bf00      	nop
 8002c74:	00100002 	.word	0x00100002
 8002c78:	ffff0000 	.word	0xffff0000
 8002c7c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002c80:	b672      	cpsid	i
}
 8002c82:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	691a      	ldr	r2, [r3, #16]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	1c5a      	adds	r2, r3, #1
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cbc:	b29b      	uxth	r3, r3
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002cc6:	b662      	cpsie	i
}
 8002cc8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	691a      	ldr	r2, [r3, #16]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	1c5a      	adds	r2, r3, #1
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b29a      	uxth	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cfc:	e0e2      	b.n	8002ec4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d04:	2200      	movs	r2, #0
 8002d06:	497b      	ldr	r1, [pc, #492]	; (8002ef4 <HAL_I2C_Mem_Read+0x4c4>)
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 fcf5 	bl	80036f8 <I2C_WaitOnFlagUntilTimeout>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0e9      	b.n	8002eec <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d26:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d28:	b672      	cpsid	i
}
 8002d2a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	691a      	ldr	r2, [r3, #16]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d36:	b2d2      	uxtb	r2, r2
 8002d38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	3b01      	subs	r3, #1
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002d5e:	4b66      	ldr	r3, [pc, #408]	; (8002ef8 <HAL_I2C_Mem_Read+0x4c8>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	08db      	lsrs	r3, r3, #3
 8002d64:	4a65      	ldr	r2, [pc, #404]	; (8002efc <HAL_I2C_Mem_Read+0x4cc>)
 8002d66:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6a:	0a1a      	lsrs	r2, r3, #8
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	00da      	lsls	r2, r3, #3
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002d7e:	6a3b      	ldr	r3, [r7, #32]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d118      	bne.n	8002db6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f043 0220 	orr.w	r2, r3, #32
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002da6:	b662      	cpsie	i
}
 8002da8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e09a      	b.n	8002eec <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	695b      	ldr	r3, [r3, #20]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d1d9      	bne.n	8002d78 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691a      	ldr	r2, [r3, #16]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df0:	3b01      	subs	r3, #1
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002e06:	b662      	cpsie	i
}
 8002e08:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	b2d2      	uxtb	r2, r2
 8002e16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	1c5a      	adds	r2, r3, #1
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e26:	3b01      	subs	r3, #1
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	3b01      	subs	r3, #1
 8002e36:	b29a      	uxth	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e3c:	e042      	b.n	8002ec4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 fe02 	bl	8003a4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e04c      	b.n	8002eec <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	691a      	ldr	r2, [r3, #16]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	b2d2      	uxtb	r2, r2
 8002e5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	1c5a      	adds	r2, r3, #1
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	f003 0304 	and.w	r3, r3, #4
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d118      	bne.n	8002ec4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	b2d2      	uxtb	r2, r2
 8002e9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	1c5a      	adds	r2, r3, #1
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f47f ae94 	bne.w	8002bf6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	e000      	b.n	8002eec <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002eea:	2302      	movs	r3, #2
  }
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3728      	adds	r7, #40	; 0x28
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	00010004 	.word	0x00010004
 8002ef8:	20000004 	.word	0x20000004
 8002efc:	14f8b589 	.word	0x14f8b589

08002f00 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b08a      	sub	sp, #40	; 0x28
 8002f04:	af02      	add	r7, sp, #8
 8002f06:	60f8      	str	r0, [r7, #12]
 8002f08:	607a      	str	r2, [r7, #4]
 8002f0a:	603b      	str	r3, [r7, #0]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002f10:	f7fd ffe6 	bl	8000ee0 <HAL_GetTick>
 8002f14:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b20      	cmp	r3, #32
 8002f24:	f040 8111 	bne.w	800314a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	2319      	movs	r3, #25
 8002f2e:	2201      	movs	r2, #1
 8002f30:	4988      	ldr	r1, [pc, #544]	; (8003154 <HAL_I2C_IsDeviceReady+0x254>)
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 fbe0 	bl	80036f8 <I2C_WaitOnFlagUntilTimeout>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002f3e:	2302      	movs	r3, #2
 8002f40:	e104      	b.n	800314c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <HAL_I2C_IsDeviceReady+0x50>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e0fd      	b.n	800314c <HAL_I2C_IsDeviceReady+0x24c>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d007      	beq.n	8002f76 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0201 	orr.w	r2, r2, #1
 8002f74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f84:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2224      	movs	r2, #36	; 0x24
 8002f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	4a70      	ldr	r2, [pc, #448]	; (8003158 <HAL_I2C_IsDeviceReady+0x258>)
 8002f98:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fa8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f000 fb9e 	bl	80036f8 <I2C_WaitOnFlagUntilTimeout>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00d      	beq.n	8002fde <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fd0:	d103      	bne.n	8002fda <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fd8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e0b6      	b.n	800314c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fde:	897b      	ldrh	r3, [r7, #10]
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fec:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002fee:	f7fd ff77 	bl	8000ee0 <HAL_GetTick>
 8002ff2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	bf0c      	ite	eq
 8003002:	2301      	moveq	r3, #1
 8003004:	2300      	movne	r3, #0
 8003006:	b2db      	uxtb	r3, r3
 8003008:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003018:	bf0c      	ite	eq
 800301a:	2301      	moveq	r3, #1
 800301c:	2300      	movne	r3, #0
 800301e:	b2db      	uxtb	r3, r3
 8003020:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003022:	e025      	b.n	8003070 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003024:	f7fd ff5c 	bl	8000ee0 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	429a      	cmp	r2, r3
 8003032:	d302      	bcc.n	800303a <HAL_I2C_IsDeviceReady+0x13a>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d103      	bne.n	8003042 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	22a0      	movs	r2, #160	; 0xa0
 800303e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	695b      	ldr	r3, [r3, #20]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b02      	cmp	r3, #2
 800304e:	bf0c      	ite	eq
 8003050:	2301      	moveq	r3, #1
 8003052:	2300      	movne	r3, #0
 8003054:	b2db      	uxtb	r3, r3
 8003056:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003066:	bf0c      	ite	eq
 8003068:	2301      	moveq	r3, #1
 800306a:	2300      	movne	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2ba0      	cmp	r3, #160	; 0xa0
 800307a:	d005      	beq.n	8003088 <HAL_I2C_IsDeviceReady+0x188>
 800307c:	7dfb      	ldrb	r3, [r7, #23]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d102      	bne.n	8003088 <HAL_I2C_IsDeviceReady+0x188>
 8003082:	7dbb      	ldrb	r3, [r7, #22]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0cd      	beq.n	8003024 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2220      	movs	r2, #32
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695b      	ldr	r3, [r3, #20]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b02      	cmp	r3, #2
 800309c:	d129      	bne.n	80030f2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ac:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ae:	2300      	movs	r3, #0
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	613b      	str	r3, [r7, #16]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	613b      	str	r3, [r7, #16]
 80030c2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030c4:	69fb      	ldr	r3, [r7, #28]
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	2319      	movs	r3, #25
 80030ca:	2201      	movs	r2, #1
 80030cc:	4921      	ldr	r1, [pc, #132]	; (8003154 <HAL_I2C_IsDeviceReady+0x254>)
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 fb12 	bl	80036f8 <I2C_WaitOnFlagUntilTimeout>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e036      	b.n	800314c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2220      	movs	r2, #32
 80030e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80030ee:	2300      	movs	r3, #0
 80030f0:	e02c      	b.n	800314c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003100:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800310a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	2319      	movs	r3, #25
 8003112:	2201      	movs	r2, #1
 8003114:	490f      	ldr	r1, [pc, #60]	; (8003154 <HAL_I2C_IsDeviceReady+0x254>)
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 faee 	bl	80036f8 <I2C_WaitOnFlagUntilTimeout>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e012      	b.n	800314c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	3301      	adds	r3, #1
 800312a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	429a      	cmp	r2, r3
 8003132:	f4ff af32 	bcc.w	8002f9a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2220      	movs	r2, #32
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e000      	b.n	800314c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800314a:	2302      	movs	r3, #2
  }
}
 800314c:	4618      	mov	r0, r3
 800314e:	3720      	adds	r7, #32
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	00100002 	.word	0x00100002
 8003158:	ffff0000 	.word	0xffff0000

0800315c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b088      	sub	sp, #32
 8003160:	af02      	add	r7, sp, #8
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	607a      	str	r2, [r7, #4]
 8003166:	603b      	str	r3, [r7, #0]
 8003168:	460b      	mov	r3, r1
 800316a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	2b08      	cmp	r3, #8
 8003176:	d006      	beq.n	8003186 <I2C_MasterRequestWrite+0x2a>
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d003      	beq.n	8003186 <I2C_MasterRequestWrite+0x2a>
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003184:	d108      	bne.n	8003198 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003194:	601a      	str	r2, [r3, #0]
 8003196:	e00b      	b.n	80031b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319c:	2b12      	cmp	r3, #18
 800319e:	d107      	bne.n	80031b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	9300      	str	r3, [sp, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031bc:	68f8      	ldr	r0, [r7, #12]
 80031be:	f000 fa9b 	bl	80036f8 <I2C_WaitOnFlagUntilTimeout>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00d      	beq.n	80031e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031d6:	d103      	bne.n	80031e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031de:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031e0:	2303      	movs	r3, #3
 80031e2:	e035      	b.n	8003250 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80031ec:	d108      	bne.n	8003200 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031ee:	897b      	ldrh	r3, [r7, #10]
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	461a      	mov	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031fc:	611a      	str	r2, [r3, #16]
 80031fe:	e01b      	b.n	8003238 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003200:	897b      	ldrh	r3, [r7, #10]
 8003202:	11db      	asrs	r3, r3, #7
 8003204:	b2db      	uxtb	r3, r3
 8003206:	f003 0306 	and.w	r3, r3, #6
 800320a:	b2db      	uxtb	r3, r3
 800320c:	f063 030f 	orn	r3, r3, #15
 8003210:	b2da      	uxtb	r2, r3
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	490e      	ldr	r1, [pc, #56]	; (8003258 <I2C_MasterRequestWrite+0xfc>)
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	f000 fae4 	bl	80037ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e010      	b.n	8003250 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800322e:	897b      	ldrh	r3, [r7, #10]
 8003230:	b2da      	uxtb	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	4907      	ldr	r1, [pc, #28]	; (800325c <I2C_MasterRequestWrite+0x100>)
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f000 fad4 	bl	80037ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e000      	b.n	8003250 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3718      	adds	r7, #24
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	00010008 	.word	0x00010008
 800325c:	00010002 	.word	0x00010002

08003260 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b088      	sub	sp, #32
 8003264:	af02      	add	r7, sp, #8
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	607a      	str	r2, [r7, #4]
 800326a:	603b      	str	r3, [r7, #0]
 800326c:	460b      	mov	r3, r1
 800326e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003274:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003284:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	2b08      	cmp	r3, #8
 800328a:	d006      	beq.n	800329a <I2C_MasterRequestRead+0x3a>
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d003      	beq.n	800329a <I2C_MasterRequestRead+0x3a>
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003298:	d108      	bne.n	80032ac <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032a8:	601a      	str	r2, [r3, #0]
 80032aa:	e00b      	b.n	80032c4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b0:	2b11      	cmp	r3, #17
 80032b2:	d107      	bne.n	80032c4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 fa11 	bl	80036f8 <I2C_WaitOnFlagUntilTimeout>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00d      	beq.n	80032f8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ea:	d103      	bne.n	80032f4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e079      	b.n	80033ec <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003300:	d108      	bne.n	8003314 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003302:	897b      	ldrh	r3, [r7, #10]
 8003304:	b2db      	uxtb	r3, r3
 8003306:	f043 0301 	orr.w	r3, r3, #1
 800330a:	b2da      	uxtb	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	611a      	str	r2, [r3, #16]
 8003312:	e05f      	b.n	80033d4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003314:	897b      	ldrh	r3, [r7, #10]
 8003316:	11db      	asrs	r3, r3, #7
 8003318:	b2db      	uxtb	r3, r3
 800331a:	f003 0306 	and.w	r3, r3, #6
 800331e:	b2db      	uxtb	r3, r3
 8003320:	f063 030f 	orn	r3, r3, #15
 8003324:	b2da      	uxtb	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	4930      	ldr	r1, [pc, #192]	; (80033f4 <I2C_MasterRequestRead+0x194>)
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 fa5a 	bl	80037ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e054      	b.n	80033ec <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003342:	897b      	ldrh	r3, [r7, #10]
 8003344:	b2da      	uxtb	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	4929      	ldr	r1, [pc, #164]	; (80033f8 <I2C_MasterRequestRead+0x198>)
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 fa4a 	bl	80037ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e044      	b.n	80033ec <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003362:	2300      	movs	r3, #0
 8003364:	613b      	str	r3, [r7, #16]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	695b      	ldr	r3, [r3, #20]
 800336c:	613b      	str	r3, [r7, #16]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	613b      	str	r3, [r7, #16]
 8003376:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003386:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f000 f9af 	bl	80036f8 <I2C_WaitOnFlagUntilTimeout>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d00d      	beq.n	80033bc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033ae:	d103      	bne.n	80033b8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033b6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e017      	b.n	80033ec <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80033bc:	897b      	ldrh	r3, [r7, #10]
 80033be:	11db      	asrs	r3, r3, #7
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	f003 0306 	and.w	r3, r3, #6
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	f063 030e 	orn	r3, r3, #14
 80033cc:	b2da      	uxtb	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	4907      	ldr	r1, [pc, #28]	; (80033f8 <I2C_MasterRequestRead+0x198>)
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 fa06 	bl	80037ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d001      	beq.n	80033ea <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e000      	b.n	80033ec <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3718      	adds	r7, #24
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	00010008 	.word	0x00010008
 80033f8:	00010002 	.word	0x00010002

080033fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b088      	sub	sp, #32
 8003400:	af02      	add	r7, sp, #8
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	4608      	mov	r0, r1
 8003406:	4611      	mov	r1, r2
 8003408:	461a      	mov	r2, r3
 800340a:	4603      	mov	r3, r0
 800340c:	817b      	strh	r3, [r7, #10]
 800340e:	460b      	mov	r3, r1
 8003410:	813b      	strh	r3, [r7, #8]
 8003412:	4613      	mov	r3, r2
 8003414:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003424:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	6a3b      	ldr	r3, [r7, #32]
 800342c:	2200      	movs	r2, #0
 800342e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003432:	68f8      	ldr	r0, [r7, #12]
 8003434:	f000 f960 	bl	80036f8 <I2C_WaitOnFlagUntilTimeout>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d00d      	beq.n	800345a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003448:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800344c:	d103      	bne.n	8003456 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003454:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	e05f      	b.n	800351a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800345a:	897b      	ldrh	r3, [r7, #10]
 800345c:	b2db      	uxtb	r3, r3
 800345e:	461a      	mov	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003468:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	6a3a      	ldr	r2, [r7, #32]
 800346e:	492d      	ldr	r1, [pc, #180]	; (8003524 <I2C_RequestMemoryWrite+0x128>)
 8003470:	68f8      	ldr	r0, [r7, #12]
 8003472:	f000 f9bb 	bl	80037ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800347c:	2301      	movs	r3, #1
 800347e:	e04c      	b.n	800351a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003480:	2300      	movs	r3, #0
 8003482:	617b      	str	r3, [r7, #20]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	617b      	str	r3, [r7, #20]
 8003494:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003496:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003498:	6a39      	ldr	r1, [r7, #32]
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f000 fa46 	bl	800392c <I2C_WaitOnTXEFlagUntilTimeout>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00d      	beq.n	80034c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	d107      	bne.n	80034be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e02b      	b.n	800351a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034c2:	88fb      	ldrh	r3, [r7, #6]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d105      	bne.n	80034d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034c8:	893b      	ldrh	r3, [r7, #8]
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	611a      	str	r2, [r3, #16]
 80034d2:	e021      	b.n	8003518 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034d4:	893b      	ldrh	r3, [r7, #8]
 80034d6:	0a1b      	lsrs	r3, r3, #8
 80034d8:	b29b      	uxth	r3, r3
 80034da:	b2da      	uxtb	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e4:	6a39      	ldr	r1, [r7, #32]
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 fa20 	bl	800392c <I2C_WaitOnTXEFlagUntilTimeout>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00d      	beq.n	800350e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f6:	2b04      	cmp	r3, #4
 80034f8:	d107      	bne.n	800350a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003508:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e005      	b.n	800351a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800350e:	893b      	ldrh	r3, [r7, #8]
 8003510:	b2da      	uxtb	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3718      	adds	r7, #24
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	00010002 	.word	0x00010002

08003528 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b088      	sub	sp, #32
 800352c:	af02      	add	r7, sp, #8
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	4608      	mov	r0, r1
 8003532:	4611      	mov	r1, r2
 8003534:	461a      	mov	r2, r3
 8003536:	4603      	mov	r3, r0
 8003538:	817b      	strh	r3, [r7, #10]
 800353a:	460b      	mov	r3, r1
 800353c:	813b      	strh	r3, [r7, #8]
 800353e:	4613      	mov	r3, r2
 8003540:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003550:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003560:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	2200      	movs	r2, #0
 800356a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 f8c2 	bl	80036f8 <I2C_WaitOnFlagUntilTimeout>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00d      	beq.n	8003596 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003588:	d103      	bne.n	8003592 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003590:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e0aa      	b.n	80036ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003596:	897b      	ldrh	r3, [r7, #10]
 8003598:	b2db      	uxtb	r3, r3
 800359a:	461a      	mov	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80035a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	6a3a      	ldr	r2, [r7, #32]
 80035aa:	4952      	ldr	r1, [pc, #328]	; (80036f4 <I2C_RequestMemoryRead+0x1cc>)
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f000 f91d 	bl	80037ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e097      	b.n	80036ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035bc:	2300      	movs	r3, #0
 80035be:	617b      	str	r3, [r7, #20]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	695b      	ldr	r3, [r3, #20]
 80035c6:	617b      	str	r3, [r7, #20]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d4:	6a39      	ldr	r1, [r7, #32]
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 f9a8 	bl	800392c <I2C_WaitOnTXEFlagUntilTimeout>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00d      	beq.n	80035fe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e6:	2b04      	cmp	r3, #4
 80035e8:	d107      	bne.n	80035fa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e076      	b.n	80036ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035fe:	88fb      	ldrh	r3, [r7, #6]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d105      	bne.n	8003610 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003604:	893b      	ldrh	r3, [r7, #8]
 8003606:	b2da      	uxtb	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	611a      	str	r2, [r3, #16]
 800360e:	e021      	b.n	8003654 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003610:	893b      	ldrh	r3, [r7, #8]
 8003612:	0a1b      	lsrs	r3, r3, #8
 8003614:	b29b      	uxth	r3, r3
 8003616:	b2da      	uxtb	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800361e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003620:	6a39      	ldr	r1, [r7, #32]
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f000 f982 	bl	800392c <I2C_WaitOnTXEFlagUntilTimeout>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00d      	beq.n	800364a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	2b04      	cmp	r3, #4
 8003634:	d107      	bne.n	8003646 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003644:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e050      	b.n	80036ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800364a:	893b      	ldrh	r3, [r7, #8]
 800364c:	b2da      	uxtb	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003656:	6a39      	ldr	r1, [r7, #32]
 8003658:	68f8      	ldr	r0, [r7, #12]
 800365a:	f000 f967 	bl	800392c <I2C_WaitOnTXEFlagUntilTimeout>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00d      	beq.n	8003680 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003668:	2b04      	cmp	r3, #4
 800366a:	d107      	bne.n	800367c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800367a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e035      	b.n	80036ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800368e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	6a3b      	ldr	r3, [r7, #32]
 8003696:	2200      	movs	r2, #0
 8003698:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 f82b 	bl	80036f8 <I2C_WaitOnFlagUntilTimeout>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00d      	beq.n	80036c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036b6:	d103      	bne.n	80036c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e013      	b.n	80036ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80036c4:	897b      	ldrh	r3, [r7, #10]
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	f043 0301 	orr.w	r3, r3, #1
 80036cc:	b2da      	uxtb	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	6a3a      	ldr	r2, [r7, #32]
 80036d8:	4906      	ldr	r1, [pc, #24]	; (80036f4 <I2C_RequestMemoryRead+0x1cc>)
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 f886 	bl	80037ec <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e000      	b.n	80036ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3718      	adds	r7, #24
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	00010002 	.word	0x00010002

080036f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	603b      	str	r3, [r7, #0]
 8003704:	4613      	mov	r3, r2
 8003706:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003708:	e048      	b.n	800379c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003710:	d044      	beq.n	800379c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003712:	f7fd fbe5 	bl	8000ee0 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	683a      	ldr	r2, [r7, #0]
 800371e:	429a      	cmp	r2, r3
 8003720:	d302      	bcc.n	8003728 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d139      	bne.n	800379c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	0c1b      	lsrs	r3, r3, #16
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b01      	cmp	r3, #1
 8003730:	d10d      	bne.n	800374e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	43da      	mvns	r2, r3
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	4013      	ands	r3, r2
 800373e:	b29b      	uxth	r3, r3
 8003740:	2b00      	cmp	r3, #0
 8003742:	bf0c      	ite	eq
 8003744:	2301      	moveq	r3, #1
 8003746:	2300      	movne	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	461a      	mov	r2, r3
 800374c:	e00c      	b.n	8003768 <I2C_WaitOnFlagUntilTimeout+0x70>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	43da      	mvns	r2, r3
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	4013      	ands	r3, r2
 800375a:	b29b      	uxth	r3, r3
 800375c:	2b00      	cmp	r3, #0
 800375e:	bf0c      	ite	eq
 8003760:	2301      	moveq	r3, #1
 8003762:	2300      	movne	r3, #0
 8003764:	b2db      	uxtb	r3, r3
 8003766:	461a      	mov	r2, r3
 8003768:	79fb      	ldrb	r3, [r7, #7]
 800376a:	429a      	cmp	r2, r3
 800376c:	d116      	bne.n	800379c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003788:	f043 0220 	orr.w	r2, r3, #32
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e023      	b.n	80037e4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	0c1b      	lsrs	r3, r3, #16
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d10d      	bne.n	80037c2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	43da      	mvns	r2, r3
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	4013      	ands	r3, r2
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	bf0c      	ite	eq
 80037b8:	2301      	moveq	r3, #1
 80037ba:	2300      	movne	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	461a      	mov	r2, r3
 80037c0:	e00c      	b.n	80037dc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	43da      	mvns	r2, r3
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	4013      	ands	r3, r2
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	bf0c      	ite	eq
 80037d4:	2301      	moveq	r3, #1
 80037d6:	2300      	movne	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	461a      	mov	r2, r3
 80037dc:	79fb      	ldrb	r3, [r7, #7]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d093      	beq.n	800370a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
 80037f8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037fa:	e071      	b.n	80038e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800380a:	d123      	bne.n	8003854 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800381a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003824:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2220      	movs	r2, #32
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003840:	f043 0204 	orr.w	r2, r3, #4
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	e067      	b.n	8003924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385a:	d041      	beq.n	80038e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800385c:	f7fd fb40 	bl	8000ee0 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	429a      	cmp	r2, r3
 800386a:	d302      	bcc.n	8003872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d136      	bne.n	80038e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	0c1b      	lsrs	r3, r3, #16
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b01      	cmp	r3, #1
 800387a:	d10c      	bne.n	8003896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	43da      	mvns	r2, r3
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	4013      	ands	r3, r2
 8003888:	b29b      	uxth	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	bf14      	ite	ne
 800388e:	2301      	movne	r3, #1
 8003890:	2300      	moveq	r3, #0
 8003892:	b2db      	uxtb	r3, r3
 8003894:	e00b      	b.n	80038ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	43da      	mvns	r2, r3
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	4013      	ands	r3, r2
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	bf14      	ite	ne
 80038a8:	2301      	movne	r3, #1
 80038aa:	2300      	moveq	r3, #0
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d016      	beq.n	80038e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2220      	movs	r2, #32
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	f043 0220 	orr.w	r2, r3, #32
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e021      	b.n	8003924 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	0c1b      	lsrs	r3, r3, #16
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d10c      	bne.n	8003904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	43da      	mvns	r2, r3
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	4013      	ands	r3, r2
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	bf14      	ite	ne
 80038fc:	2301      	movne	r3, #1
 80038fe:	2300      	moveq	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	e00b      	b.n	800391c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	43da      	mvns	r2, r3
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	4013      	ands	r3, r2
 8003910:	b29b      	uxth	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	bf14      	ite	ne
 8003916:	2301      	movne	r3, #1
 8003918:	2300      	moveq	r3, #0
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	f47f af6d 	bne.w	80037fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003922:	2300      	movs	r3, #0
}
 8003924:	4618      	mov	r0, r3
 8003926:	3710      	adds	r7, #16
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}

0800392c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	60b9      	str	r1, [r7, #8]
 8003936:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003938:	e034      	b.n	80039a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f000 f8e3 	bl	8003b06 <I2C_IsAcknowledgeFailed>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e034      	b.n	80039b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003950:	d028      	beq.n	80039a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003952:	f7fd fac5 	bl	8000ee0 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	68ba      	ldr	r2, [r7, #8]
 800395e:	429a      	cmp	r2, r3
 8003960:	d302      	bcc.n	8003968 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d11d      	bne.n	80039a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003972:	2b80      	cmp	r3, #128	; 0x80
 8003974:	d016      	beq.n	80039a4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2220      	movs	r2, #32
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	f043 0220 	orr.w	r2, r3, #32
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e007      	b.n	80039b4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ae:	2b80      	cmp	r3, #128	; 0x80
 80039b0:	d1c3      	bne.n	800393a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039c8:	e034      	b.n	8003a34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f000 f89b 	bl	8003b06 <I2C_IsAcknowledgeFailed>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e034      	b.n	8003a44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039e0:	d028      	beq.n	8003a34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039e2:	f7fd fa7d 	bl	8000ee0 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d302      	bcc.n	80039f8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d11d      	bne.n	8003a34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	f003 0304 	and.w	r3, r3, #4
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d016      	beq.n	8003a34 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a20:	f043 0220 	orr.w	r2, r3, #32
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e007      	b.n	8003a44 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	f003 0304 	and.w	r3, r3, #4
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d1c3      	bne.n	80039ca <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a58:	e049      	b.n	8003aee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	f003 0310 	and.w	r3, r3, #16
 8003a64:	2b10      	cmp	r3, #16
 8003a66:	d119      	bne.n	8003a9c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f06f 0210 	mvn.w	r2, #16
 8003a70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e030      	b.n	8003afe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a9c:	f7fd fa20 	bl	8000ee0 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d302      	bcc.n	8003ab2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d11d      	bne.n	8003aee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003abc:	2b40      	cmp	r3, #64	; 0x40
 8003abe:	d016      	beq.n	8003aee <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ada:	f043 0220 	orr.w	r2, r3, #32
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e007      	b.n	8003afe <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af8:	2b40      	cmp	r3, #64	; 0x40
 8003afa:	d1ae      	bne.n	8003a5a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}

08003b06 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b1c:	d11b      	bne.n	8003b56 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b26:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2220      	movs	r2, #32
 8003b32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b42:	f043 0204 	orr.w	r2, r3, #4
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e000      	b.n	8003b58 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bc80      	pop	{r7}
 8003b60:	4770      	bx	lr
	...

08003b64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e272      	b.n	800405c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	f000 8087 	beq.w	8003c92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b84:	4b92      	ldr	r3, [pc, #584]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f003 030c 	and.w	r3, r3, #12
 8003b8c:	2b04      	cmp	r3, #4
 8003b8e:	d00c      	beq.n	8003baa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003b90:	4b8f      	ldr	r3, [pc, #572]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f003 030c 	and.w	r3, r3, #12
 8003b98:	2b08      	cmp	r3, #8
 8003b9a:	d112      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x5e>
 8003b9c:	4b8c      	ldr	r3, [pc, #560]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba8:	d10b      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003baa:	4b89      	ldr	r3, [pc, #548]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d06c      	beq.n	8003c90 <HAL_RCC_OscConfig+0x12c>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d168      	bne.n	8003c90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e24c      	b.n	800405c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bca:	d106      	bne.n	8003bda <HAL_RCC_OscConfig+0x76>
 8003bcc:	4b80      	ldr	r3, [pc, #512]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a7f      	ldr	r2, [pc, #508]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003bd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd6:	6013      	str	r3, [r2, #0]
 8003bd8:	e02e      	b.n	8003c38 <HAL_RCC_OscConfig+0xd4>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10c      	bne.n	8003bfc <HAL_RCC_OscConfig+0x98>
 8003be2:	4b7b      	ldr	r3, [pc, #492]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a7a      	ldr	r2, [pc, #488]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003be8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	4b78      	ldr	r3, [pc, #480]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a77      	ldr	r2, [pc, #476]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003bf4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bf8:	6013      	str	r3, [r2, #0]
 8003bfa:	e01d      	b.n	8003c38 <HAL_RCC_OscConfig+0xd4>
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c04:	d10c      	bne.n	8003c20 <HAL_RCC_OscConfig+0xbc>
 8003c06:	4b72      	ldr	r3, [pc, #456]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a71      	ldr	r2, [pc, #452]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c10:	6013      	str	r3, [r2, #0]
 8003c12:	4b6f      	ldr	r3, [pc, #444]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a6e      	ldr	r2, [pc, #440]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c1c:	6013      	str	r3, [r2, #0]
 8003c1e:	e00b      	b.n	8003c38 <HAL_RCC_OscConfig+0xd4>
 8003c20:	4b6b      	ldr	r3, [pc, #428]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a6a      	ldr	r2, [pc, #424]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c2a:	6013      	str	r3, [r2, #0]
 8003c2c:	4b68      	ldr	r3, [pc, #416]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a67      	ldr	r2, [pc, #412]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d013      	beq.n	8003c68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c40:	f7fd f94e 	bl	8000ee0 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c48:	f7fd f94a 	bl	8000ee0 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b64      	cmp	r3, #100	; 0x64
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e200      	b.n	800405c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c5a:	4b5d      	ldr	r3, [pc, #372]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0f0      	beq.n	8003c48 <HAL_RCC_OscConfig+0xe4>
 8003c66:	e014      	b.n	8003c92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c68:	f7fd f93a 	bl	8000ee0 <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c70:	f7fd f936 	bl	8000ee0 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b64      	cmp	r3, #100	; 0x64
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e1ec      	b.n	800405c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c82:	4b53      	ldr	r3, [pc, #332]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f0      	bne.n	8003c70 <HAL_RCC_OscConfig+0x10c>
 8003c8e:	e000      	b.n	8003c92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d063      	beq.n	8003d66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c9e:	4b4c      	ldr	r3, [pc, #304]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f003 030c 	and.w	r3, r3, #12
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00b      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003caa:	4b49      	ldr	r3, [pc, #292]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f003 030c 	and.w	r3, r3, #12
 8003cb2:	2b08      	cmp	r3, #8
 8003cb4:	d11c      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x18c>
 8003cb6:	4b46      	ldr	r3, [pc, #280]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d116      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cc2:	4b43      	ldr	r3, [pc, #268]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d005      	beq.n	8003cda <HAL_RCC_OscConfig+0x176>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d001      	beq.n	8003cda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e1c0      	b.n	800405c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cda:	4b3d      	ldr	r3, [pc, #244]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	4939      	ldr	r1, [pc, #228]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cee:	e03a      	b.n	8003d66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d020      	beq.n	8003d3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cf8:	4b36      	ldr	r3, [pc, #216]	; (8003dd4 <HAL_RCC_OscConfig+0x270>)
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cfe:	f7fd f8ef 	bl	8000ee0 <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d06:	f7fd f8eb 	bl	8000ee0 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b02      	cmp	r3, #2
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e1a1      	b.n	800405c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d18:	4b2d      	ldr	r3, [pc, #180]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0f0      	beq.n	8003d06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d24:	4b2a      	ldr	r3, [pc, #168]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	4927      	ldr	r1, [pc, #156]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	600b      	str	r3, [r1, #0]
 8003d38:	e015      	b.n	8003d66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d3a:	4b26      	ldr	r3, [pc, #152]	; (8003dd4 <HAL_RCC_OscConfig+0x270>)
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d40:	f7fd f8ce 	bl	8000ee0 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d48:	f7fd f8ca 	bl	8000ee0 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e180      	b.n	800405c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d5a:	4b1d      	ldr	r3, [pc, #116]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1f0      	bne.n	8003d48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0308 	and.w	r3, r3, #8
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d03a      	beq.n	8003de8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d019      	beq.n	8003dae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d7a:	4b17      	ldr	r3, [pc, #92]	; (8003dd8 <HAL_RCC_OscConfig+0x274>)
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d80:	f7fd f8ae 	bl	8000ee0 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d88:	f7fd f8aa 	bl	8000ee0 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e160      	b.n	800405c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d9a:	4b0d      	ldr	r3, [pc, #52]	; (8003dd0 <HAL_RCC_OscConfig+0x26c>)
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0f0      	beq.n	8003d88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003da6:	2001      	movs	r0, #1
 8003da8:	f000 face 	bl	8004348 <RCC_Delay>
 8003dac:	e01c      	b.n	8003de8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dae:	4b0a      	ldr	r3, [pc, #40]	; (8003dd8 <HAL_RCC_OscConfig+0x274>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003db4:	f7fd f894 	bl	8000ee0 <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dba:	e00f      	b.n	8003ddc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dbc:	f7fd f890 	bl	8000ee0 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d908      	bls.n	8003ddc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e146      	b.n	800405c <HAL_RCC_OscConfig+0x4f8>
 8003dce:	bf00      	nop
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	42420000 	.word	0x42420000
 8003dd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ddc:	4b92      	ldr	r3, [pc, #584]	; (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1e9      	bne.n	8003dbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 80a6 	beq.w	8003f42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003df6:	2300      	movs	r3, #0
 8003df8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dfa:	4b8b      	ldr	r3, [pc, #556]	; (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10d      	bne.n	8003e22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e06:	4b88      	ldr	r3, [pc, #544]	; (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	4a87      	ldr	r2, [pc, #540]	; (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003e0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e10:	61d3      	str	r3, [r2, #28]
 8003e12:	4b85      	ldr	r3, [pc, #532]	; (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e1a:	60bb      	str	r3, [r7, #8]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e22:	4b82      	ldr	r3, [pc, #520]	; (800402c <HAL_RCC_OscConfig+0x4c8>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d118      	bne.n	8003e60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e2e:	4b7f      	ldr	r3, [pc, #508]	; (800402c <HAL_RCC_OscConfig+0x4c8>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a7e      	ldr	r2, [pc, #504]	; (800402c <HAL_RCC_OscConfig+0x4c8>)
 8003e34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e3a:	f7fd f851 	bl	8000ee0 <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e42:	f7fd f84d 	bl	8000ee0 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b64      	cmp	r3, #100	; 0x64
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e103      	b.n	800405c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e54:	4b75      	ldr	r3, [pc, #468]	; (800402c <HAL_RCC_OscConfig+0x4c8>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0f0      	beq.n	8003e42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d106      	bne.n	8003e76 <HAL_RCC_OscConfig+0x312>
 8003e68:	4b6f      	ldr	r3, [pc, #444]	; (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	4a6e      	ldr	r2, [pc, #440]	; (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003e6e:	f043 0301 	orr.w	r3, r3, #1
 8003e72:	6213      	str	r3, [r2, #32]
 8003e74:	e02d      	b.n	8003ed2 <HAL_RCC_OscConfig+0x36e>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10c      	bne.n	8003e98 <HAL_RCC_OscConfig+0x334>
 8003e7e:	4b6a      	ldr	r3, [pc, #424]	; (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003e80:	6a1b      	ldr	r3, [r3, #32]
 8003e82:	4a69      	ldr	r2, [pc, #420]	; (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003e84:	f023 0301 	bic.w	r3, r3, #1
 8003e88:	6213      	str	r3, [r2, #32]
 8003e8a:	4b67      	ldr	r3, [pc, #412]	; (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	4a66      	ldr	r2, [pc, #408]	; (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003e90:	f023 0304 	bic.w	r3, r3, #4
 8003e94:	6213      	str	r3, [r2, #32]
 8003e96:	e01c      	b.n	8003ed2 <HAL_RCC_OscConfig+0x36e>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	2b05      	cmp	r3, #5
 8003e9e:	d10c      	bne.n	8003eba <HAL_RCC_OscConfig+0x356>
 8003ea0:	4b61      	ldr	r3, [pc, #388]	; (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003ea2:	6a1b      	ldr	r3, [r3, #32]
 8003ea4:	4a60      	ldr	r2, [pc, #384]	; (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003ea6:	f043 0304 	orr.w	r3, r3, #4
 8003eaa:	6213      	str	r3, [r2, #32]
 8003eac:	4b5e      	ldr	r3, [pc, #376]	; (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	4a5d      	ldr	r2, [pc, #372]	; (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003eb2:	f043 0301 	orr.w	r3, r3, #1
 8003eb6:	6213      	str	r3, [r2, #32]
 8003eb8:	e00b      	b.n	8003ed2 <HAL_RCC_OscConfig+0x36e>
 8003eba:	4b5b      	ldr	r3, [pc, #364]	; (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	4a5a      	ldr	r2, [pc, #360]	; (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003ec0:	f023 0301 	bic.w	r3, r3, #1
 8003ec4:	6213      	str	r3, [r2, #32]
 8003ec6:	4b58      	ldr	r3, [pc, #352]	; (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003ec8:	6a1b      	ldr	r3, [r3, #32]
 8003eca:	4a57      	ldr	r2, [pc, #348]	; (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003ecc:	f023 0304 	bic.w	r3, r3, #4
 8003ed0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68db      	ldr	r3, [r3, #12]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d015      	beq.n	8003f06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eda:	f7fd f801 	bl	8000ee0 <HAL_GetTick>
 8003ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ee0:	e00a      	b.n	8003ef8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ee2:	f7fc fffd 	bl	8000ee0 <HAL_GetTick>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e0b1      	b.n	800405c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef8:	4b4b      	ldr	r3, [pc, #300]	; (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003efa:	6a1b      	ldr	r3, [r3, #32]
 8003efc:	f003 0302 	and.w	r3, r3, #2
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0ee      	beq.n	8003ee2 <HAL_RCC_OscConfig+0x37e>
 8003f04:	e014      	b.n	8003f30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f06:	f7fc ffeb 	bl	8000ee0 <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f0c:	e00a      	b.n	8003f24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f0e:	f7fc ffe7 	bl	8000ee0 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d901      	bls.n	8003f24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003f20:	2303      	movs	r3, #3
 8003f22:	e09b      	b.n	800405c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f24:	4b40      	ldr	r3, [pc, #256]	; (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1ee      	bne.n	8003f0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003f30:	7dfb      	ldrb	r3, [r7, #23]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d105      	bne.n	8003f42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f36:	4b3c      	ldr	r3, [pc, #240]	; (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	4a3b      	ldr	r2, [pc, #236]	; (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003f3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	69db      	ldr	r3, [r3, #28]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 8087 	beq.w	800405a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f4c:	4b36      	ldr	r3, [pc, #216]	; (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f003 030c 	and.w	r3, r3, #12
 8003f54:	2b08      	cmp	r3, #8
 8003f56:	d061      	beq.n	800401c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d146      	bne.n	8003fee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f60:	4b33      	ldr	r3, [pc, #204]	; (8004030 <HAL_RCC_OscConfig+0x4cc>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f66:	f7fc ffbb 	bl	8000ee0 <HAL_GetTick>
 8003f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f6c:	e008      	b.n	8003f80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f6e:	f7fc ffb7 	bl	8000ee0 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d901      	bls.n	8003f80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e06d      	b.n	800405c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f80:	4b29      	ldr	r3, [pc, #164]	; (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1f0      	bne.n	8003f6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f94:	d108      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003f96:	4b24      	ldr	r3, [pc, #144]	; (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	4921      	ldr	r1, [pc, #132]	; (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003fa8:	4b1f      	ldr	r3, [pc, #124]	; (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a19      	ldr	r1, [r3, #32]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	430b      	orrs	r3, r1
 8003fba:	491b      	ldr	r1, [pc, #108]	; (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fc0:	4b1b      	ldr	r3, [pc, #108]	; (8004030 <HAL_RCC_OscConfig+0x4cc>)
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc6:	f7fc ff8b 	bl	8000ee0 <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fcc:	e008      	b.n	8003fe0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fce:	f7fc ff87 	bl	8000ee0 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d901      	bls.n	8003fe0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e03d      	b.n	800405c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fe0:	4b11      	ldr	r3, [pc, #68]	; (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d0f0      	beq.n	8003fce <HAL_RCC_OscConfig+0x46a>
 8003fec:	e035      	b.n	800405a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fee:	4b10      	ldr	r3, [pc, #64]	; (8004030 <HAL_RCC_OscConfig+0x4cc>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff4:	f7fc ff74 	bl	8000ee0 <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ffa:	e008      	b.n	800400e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ffc:	f7fc ff70 	bl	8000ee0 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e026      	b.n	800405c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800400e:	4b06      	ldr	r3, [pc, #24]	; (8004028 <HAL_RCC_OscConfig+0x4c4>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d1f0      	bne.n	8003ffc <HAL_RCC_OscConfig+0x498>
 800401a:	e01e      	b.n	800405a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	69db      	ldr	r3, [r3, #28]
 8004020:	2b01      	cmp	r3, #1
 8004022:	d107      	bne.n	8004034 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e019      	b.n	800405c <HAL_RCC_OscConfig+0x4f8>
 8004028:	40021000 	.word	0x40021000
 800402c:	40007000 	.word	0x40007000
 8004030:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004034:	4b0b      	ldr	r3, [pc, #44]	; (8004064 <HAL_RCC_OscConfig+0x500>)
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	429a      	cmp	r2, r3
 8004046:	d106      	bne.n	8004056 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004052:	429a      	cmp	r2, r3
 8004054:	d001      	beq.n	800405a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e000      	b.n	800405c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	40021000 	.word	0x40021000

08004068 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d101      	bne.n	800407c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e0d0      	b.n	800421e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800407c:	4b6a      	ldr	r3, [pc, #424]	; (8004228 <HAL_RCC_ClockConfig+0x1c0>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0307 	and.w	r3, r3, #7
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	429a      	cmp	r2, r3
 8004088:	d910      	bls.n	80040ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800408a:	4b67      	ldr	r3, [pc, #412]	; (8004228 <HAL_RCC_ClockConfig+0x1c0>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f023 0207 	bic.w	r2, r3, #7
 8004092:	4965      	ldr	r1, [pc, #404]	; (8004228 <HAL_RCC_ClockConfig+0x1c0>)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	4313      	orrs	r3, r2
 8004098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800409a:	4b63      	ldr	r3, [pc, #396]	; (8004228 <HAL_RCC_ClockConfig+0x1c0>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0307 	and.w	r3, r3, #7
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d001      	beq.n	80040ac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e0b8      	b.n	800421e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d020      	beq.n	80040fa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d005      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040c4:	4b59      	ldr	r3, [pc, #356]	; (800422c <HAL_RCC_ClockConfig+0x1c4>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	4a58      	ldr	r2, [pc, #352]	; (800422c <HAL_RCC_ClockConfig+0x1c4>)
 80040ca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80040ce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0308 	and.w	r3, r3, #8
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d005      	beq.n	80040e8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040dc:	4b53      	ldr	r3, [pc, #332]	; (800422c <HAL_RCC_ClockConfig+0x1c4>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	4a52      	ldr	r2, [pc, #328]	; (800422c <HAL_RCC_ClockConfig+0x1c4>)
 80040e2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80040e6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040e8:	4b50      	ldr	r3, [pc, #320]	; (800422c <HAL_RCC_ClockConfig+0x1c4>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	494d      	ldr	r1, [pc, #308]	; (800422c <HAL_RCC_ClockConfig+0x1c4>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d040      	beq.n	8004188 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d107      	bne.n	800411e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800410e:	4b47      	ldr	r3, [pc, #284]	; (800422c <HAL_RCC_ClockConfig+0x1c4>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d115      	bne.n	8004146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e07f      	b.n	800421e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	2b02      	cmp	r3, #2
 8004124:	d107      	bne.n	8004136 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004126:	4b41      	ldr	r3, [pc, #260]	; (800422c <HAL_RCC_ClockConfig+0x1c4>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d109      	bne.n	8004146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e073      	b.n	800421e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004136:	4b3d      	ldr	r3, [pc, #244]	; (800422c <HAL_RCC_ClockConfig+0x1c4>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e06b      	b.n	800421e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004146:	4b39      	ldr	r3, [pc, #228]	; (800422c <HAL_RCC_ClockConfig+0x1c4>)
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f023 0203 	bic.w	r2, r3, #3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	4936      	ldr	r1, [pc, #216]	; (800422c <HAL_RCC_ClockConfig+0x1c4>)
 8004154:	4313      	orrs	r3, r2
 8004156:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004158:	f7fc fec2 	bl	8000ee0 <HAL_GetTick>
 800415c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415e:	e00a      	b.n	8004176 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004160:	f7fc febe 	bl	8000ee0 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	f241 3288 	movw	r2, #5000	; 0x1388
 800416e:	4293      	cmp	r3, r2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e053      	b.n	800421e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004176:	4b2d      	ldr	r3, [pc, #180]	; (800422c <HAL_RCC_ClockConfig+0x1c4>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f003 020c 	and.w	r2, r3, #12
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	429a      	cmp	r2, r3
 8004186:	d1eb      	bne.n	8004160 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004188:	4b27      	ldr	r3, [pc, #156]	; (8004228 <HAL_RCC_ClockConfig+0x1c0>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0307 	and.w	r3, r3, #7
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	429a      	cmp	r2, r3
 8004194:	d210      	bcs.n	80041b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004196:	4b24      	ldr	r3, [pc, #144]	; (8004228 <HAL_RCC_ClockConfig+0x1c0>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f023 0207 	bic.w	r2, r3, #7
 800419e:	4922      	ldr	r1, [pc, #136]	; (8004228 <HAL_RCC_ClockConfig+0x1c0>)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a6:	4b20      	ldr	r3, [pc, #128]	; (8004228 <HAL_RCC_ClockConfig+0x1c0>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0307 	and.w	r3, r3, #7
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d001      	beq.n	80041b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e032      	b.n	800421e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d008      	beq.n	80041d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041c4:	4b19      	ldr	r3, [pc, #100]	; (800422c <HAL_RCC_ClockConfig+0x1c4>)
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	4916      	ldr	r1, [pc, #88]	; (800422c <HAL_RCC_ClockConfig+0x1c4>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0308 	and.w	r3, r3, #8
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d009      	beq.n	80041f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041e2:	4b12      	ldr	r3, [pc, #72]	; (800422c <HAL_RCC_ClockConfig+0x1c4>)
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	490e      	ldr	r1, [pc, #56]	; (800422c <HAL_RCC_ClockConfig+0x1c4>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041f6:	f000 f821 	bl	800423c <HAL_RCC_GetSysClockFreq>
 80041fa:	4602      	mov	r2, r0
 80041fc:	4b0b      	ldr	r3, [pc, #44]	; (800422c <HAL_RCC_ClockConfig+0x1c4>)
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	091b      	lsrs	r3, r3, #4
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	490a      	ldr	r1, [pc, #40]	; (8004230 <HAL_RCC_ClockConfig+0x1c8>)
 8004208:	5ccb      	ldrb	r3, [r1, r3]
 800420a:	fa22 f303 	lsr.w	r3, r2, r3
 800420e:	4a09      	ldr	r2, [pc, #36]	; (8004234 <HAL_RCC_ClockConfig+0x1cc>)
 8004210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004212:	4b09      	ldr	r3, [pc, #36]	; (8004238 <HAL_RCC_ClockConfig+0x1d0>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4618      	mov	r0, r3
 8004218:	f7fc fe20 	bl	8000e5c <HAL_InitTick>

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	40022000 	.word	0x40022000
 800422c:	40021000 	.word	0x40021000
 8004230:	080058f0 	.word	0x080058f0
 8004234:	20000004 	.word	0x20000004
 8004238:	20000008 	.word	0x20000008

0800423c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004242:	2300      	movs	r3, #0
 8004244:	60fb      	str	r3, [r7, #12]
 8004246:	2300      	movs	r3, #0
 8004248:	60bb      	str	r3, [r7, #8]
 800424a:	2300      	movs	r3, #0
 800424c:	617b      	str	r3, [r7, #20]
 800424e:	2300      	movs	r3, #0
 8004250:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004252:	2300      	movs	r3, #0
 8004254:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004256:	4b1e      	ldr	r3, [pc, #120]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f003 030c 	and.w	r3, r3, #12
 8004262:	2b04      	cmp	r3, #4
 8004264:	d002      	beq.n	800426c <HAL_RCC_GetSysClockFreq+0x30>
 8004266:	2b08      	cmp	r3, #8
 8004268:	d003      	beq.n	8004272 <HAL_RCC_GetSysClockFreq+0x36>
 800426a:	e027      	b.n	80042bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800426c:	4b19      	ldr	r3, [pc, #100]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800426e:	613b      	str	r3, [r7, #16]
      break;
 8004270:	e027      	b.n	80042c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	0c9b      	lsrs	r3, r3, #18
 8004276:	f003 030f 	and.w	r3, r3, #15
 800427a:	4a17      	ldr	r2, [pc, #92]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800427c:	5cd3      	ldrb	r3, [r2, r3]
 800427e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d010      	beq.n	80042ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800428a:	4b11      	ldr	r3, [pc, #68]	; (80042d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	0c5b      	lsrs	r3, r3, #17
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	4a11      	ldr	r2, [pc, #68]	; (80042dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004296:	5cd3      	ldrb	r3, [r2, r3]
 8004298:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a0d      	ldr	r2, [pc, #52]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800429e:	fb03 f202 	mul.w	r2, r3, r2
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80042a8:	617b      	str	r3, [r7, #20]
 80042aa:	e004      	b.n	80042b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a0c      	ldr	r2, [pc, #48]	; (80042e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80042b0:	fb02 f303 	mul.w	r3, r2, r3
 80042b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	613b      	str	r3, [r7, #16]
      break;
 80042ba:	e002      	b.n	80042c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80042bc:	4b05      	ldr	r3, [pc, #20]	; (80042d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80042be:	613b      	str	r3, [r7, #16]
      break;
 80042c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042c2:	693b      	ldr	r3, [r7, #16]
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	371c      	adds	r7, #28
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bc80      	pop	{r7}
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	40021000 	.word	0x40021000
 80042d4:	007a1200 	.word	0x007a1200
 80042d8:	08005908 	.word	0x08005908
 80042dc:	08005918 	.word	0x08005918
 80042e0:	003d0900 	.word	0x003d0900

080042e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042e8:	4b02      	ldr	r3, [pc, #8]	; (80042f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80042ea:	681b      	ldr	r3, [r3, #0]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bc80      	pop	{r7}
 80042f2:	4770      	bx	lr
 80042f4:	20000004 	.word	0x20000004

080042f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80042fc:	f7ff fff2 	bl	80042e4 <HAL_RCC_GetHCLKFreq>
 8004300:	4602      	mov	r2, r0
 8004302:	4b05      	ldr	r3, [pc, #20]	; (8004318 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	0a1b      	lsrs	r3, r3, #8
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	4903      	ldr	r1, [pc, #12]	; (800431c <HAL_RCC_GetPCLK1Freq+0x24>)
 800430e:	5ccb      	ldrb	r3, [r1, r3]
 8004310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004314:	4618      	mov	r0, r3
 8004316:	bd80      	pop	{r7, pc}
 8004318:	40021000 	.word	0x40021000
 800431c:	08005900 	.word	0x08005900

08004320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004324:	f7ff ffde 	bl	80042e4 <HAL_RCC_GetHCLKFreq>
 8004328:	4602      	mov	r2, r0
 800432a:	4b05      	ldr	r3, [pc, #20]	; (8004340 <HAL_RCC_GetPCLK2Freq+0x20>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	0adb      	lsrs	r3, r3, #11
 8004330:	f003 0307 	and.w	r3, r3, #7
 8004334:	4903      	ldr	r1, [pc, #12]	; (8004344 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004336:	5ccb      	ldrb	r3, [r1, r3]
 8004338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800433c:	4618      	mov	r0, r3
 800433e:	bd80      	pop	{r7, pc}
 8004340:	40021000 	.word	0x40021000
 8004344:	08005900 	.word	0x08005900

08004348 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004350:	4b0a      	ldr	r3, [pc, #40]	; (800437c <RCC_Delay+0x34>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a0a      	ldr	r2, [pc, #40]	; (8004380 <RCC_Delay+0x38>)
 8004356:	fba2 2303 	umull	r2, r3, r2, r3
 800435a:	0a5b      	lsrs	r3, r3, #9
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	fb02 f303 	mul.w	r3, r2, r3
 8004362:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004364:	bf00      	nop
  }
  while (Delay --);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	1e5a      	subs	r2, r3, #1
 800436a:	60fa      	str	r2, [r7, #12]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1f9      	bne.n	8004364 <RCC_Delay+0x1c>
}
 8004370:	bf00      	nop
 8004372:	bf00      	nop
 8004374:	3714      	adds	r7, #20
 8004376:	46bd      	mov	sp, r7
 8004378:	bc80      	pop	{r7}
 800437a:	4770      	bx	lr
 800437c:	20000004 	.word	0x20000004
 8004380:	10624dd3 	.word	0x10624dd3

08004384 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b082      	sub	sp, #8
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e076      	b.n	8004484 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	2b00      	cmp	r3, #0
 800439c:	d108      	bne.n	80043b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043a6:	d009      	beq.n	80043bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	61da      	str	r2, [r3, #28]
 80043ae:	e005      	b.n	80043bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d106      	bne.n	80043dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7fc fbe4 	bl	8000ba4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2202      	movs	r2, #2
 80043e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	689b      	ldr	r3, [r3, #8]
 8004400:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004404:	431a      	orrs	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	68db      	ldr	r3, [r3, #12]
 800440a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	431a      	orrs	r2, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800442c:	431a      	orrs	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004436:	431a      	orrs	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004440:	ea42 0103 	orr.w	r1, r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004448:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	699b      	ldr	r3, [r3, #24]
 8004458:	0c1a      	lsrs	r2, r3, #16
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f002 0204 	and.w	r2, r2, #4
 8004462:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	69da      	ldr	r2, [r3, #28]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004472:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b082      	sub	sp, #8
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d101      	bne.n	800449e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e042      	b.n	8004524 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d106      	bne.n	80044b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7fc fbc0 	bl	8000c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2224      	movs	r2, #36	; 0x24
 80044bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 fcb5 	bl	8004e40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	691a      	ldr	r2, [r3, #16]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	695a      	ldr	r2, [r3, #20]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68da      	ldr	r2, [r3, #12]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004504:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2220      	movs	r2, #32
 8004510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2220      	movs	r2, #32
 8004518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	4613      	mov	r3, r2
 8004538:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b20      	cmp	r3, #32
 8004544:	d121      	bne.n	800458a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d002      	beq.n	8004552 <HAL_UART_Transmit_IT+0x26>
 800454c:	88fb      	ldrh	r3, [r7, #6]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e01a      	b.n	800458c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	68ba      	ldr	r2, [r7, #8]
 800455a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	88fa      	ldrh	r2, [r7, #6]
 8004560:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	88fa      	ldrh	r2, [r7, #6]
 8004566:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2221      	movs	r2, #33	; 0x21
 8004572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68da      	ldr	r2, [r3, #12]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004584:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	e000      	b.n	800458c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800458a:	2302      	movs	r3, #2
  }
}
 800458c:	4618      	mov	r0, r3
 800458e:	3714      	adds	r7, #20
 8004590:	46bd      	mov	sp, r7
 8004592:	bc80      	pop	{r7}
 8004594:	4770      	bx	lr
	...

08004598 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b0ba      	sub	sp, #232	; 0xe8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80045be:	2300      	movs	r3, #0
 80045c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80045c4:	2300      	movs	r3, #0
 80045c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80045ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ce:	f003 030f 	and.w	r3, r3, #15
 80045d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80045d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10f      	bne.n	80045fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045e2:	f003 0320 	and.w	r3, r3, #32
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d009      	beq.n	80045fe <HAL_UART_IRQHandler+0x66>
 80045ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045ee:	f003 0320 	and.w	r3, r3, #32
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d003      	beq.n	80045fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 fb63 	bl	8004cc2 <UART_Receive_IT>
      return;
 80045fc:	e25b      	b.n	8004ab6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80045fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004602:	2b00      	cmp	r3, #0
 8004604:	f000 80de 	beq.w	80047c4 <HAL_UART_IRQHandler+0x22c>
 8004608:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b00      	cmp	r3, #0
 8004612:	d106      	bne.n	8004622 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004618:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 80d1 	beq.w	80047c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00b      	beq.n	8004646 <HAL_UART_IRQHandler+0xae>
 800462e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004636:	2b00      	cmp	r3, #0
 8004638:	d005      	beq.n	8004646 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800463e:	f043 0201 	orr.w	r2, r3, #1
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800464a:	f003 0304 	and.w	r3, r3, #4
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00b      	beq.n	800466a <HAL_UART_IRQHandler+0xd2>
 8004652:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	d005      	beq.n	800466a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004662:	f043 0202 	orr.w	r2, r3, #2
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800466a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800466e:	f003 0302 	and.w	r3, r3, #2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00b      	beq.n	800468e <HAL_UART_IRQHandler+0xf6>
 8004676:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	2b00      	cmp	r3, #0
 8004680:	d005      	beq.n	800468e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004686:	f043 0204 	orr.w	r2, r3, #4
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800468e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004692:	f003 0308 	and.w	r3, r3, #8
 8004696:	2b00      	cmp	r3, #0
 8004698:	d011      	beq.n	80046be <HAL_UART_IRQHandler+0x126>
 800469a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800469e:	f003 0320 	and.w	r3, r3, #32
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d105      	bne.n	80046b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80046a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d005      	beq.n	80046be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b6:	f043 0208 	orr.w	r2, r3, #8
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 81f2 	beq.w	8004aac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046cc:	f003 0320 	and.w	r3, r3, #32
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d008      	beq.n	80046e6 <HAL_UART_IRQHandler+0x14e>
 80046d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046d8:	f003 0320 	and.w	r3, r3, #32
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d002      	beq.n	80046e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 faee 	bl	8004cc2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	bf14      	ite	ne
 80046f4:	2301      	movne	r3, #1
 80046f6:	2300      	moveq	r3, #0
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004702:	f003 0308 	and.w	r3, r3, #8
 8004706:	2b00      	cmp	r3, #0
 8004708:	d103      	bne.n	8004712 <HAL_UART_IRQHandler+0x17a>
 800470a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800470e:	2b00      	cmp	r3, #0
 8004710:	d04f      	beq.n	80047b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f000 f9f8 	bl	8004b08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004722:	2b00      	cmp	r3, #0
 8004724:	d041      	beq.n	80047aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	3314      	adds	r3, #20
 800472c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004730:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004734:	e853 3f00 	ldrex	r3, [r3]
 8004738:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800473c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004740:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004744:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	3314      	adds	r3, #20
 800474e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004752:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004756:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800475e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004762:	e841 2300 	strex	r3, r2, [r1]
 8004766:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800476a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1d9      	bne.n	8004726 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004776:	2b00      	cmp	r3, #0
 8004778:	d013      	beq.n	80047a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800477e:	4a7e      	ldr	r2, [pc, #504]	; (8004978 <HAL_UART_IRQHandler+0x3e0>)
 8004780:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004786:	4618      	mov	r0, r3
 8004788:	f7fd f996 	bl	8001ab8 <HAL_DMA_Abort_IT>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d016      	beq.n	80047c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800479c:	4610      	mov	r0, r2
 800479e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a0:	e00e      	b.n	80047c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 f99c 	bl	8004ae0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a8:	e00a      	b.n	80047c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 f998 	bl	8004ae0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b0:	e006      	b.n	80047c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f994 	bl	8004ae0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80047be:	e175      	b.n	8004aac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047c0:	bf00      	nop
    return;
 80047c2:	e173      	b.n	8004aac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	f040 814f 	bne.w	8004a6c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80047ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047d2:	f003 0310 	and.w	r3, r3, #16
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f000 8148 	beq.w	8004a6c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80047dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047e0:	f003 0310 	and.w	r3, r3, #16
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 8141 	beq.w	8004a6c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047ea:	2300      	movs	r3, #0
 80047ec:	60bb      	str	r3, [r7, #8]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	60bb      	str	r3, [r7, #8]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	60bb      	str	r3, [r7, #8]
 80047fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480a:	2b00      	cmp	r3, #0
 800480c:	f000 80b6 	beq.w	800497c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800481c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 8145 	beq.w	8004ab0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800482a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800482e:	429a      	cmp	r2, r3
 8004830:	f080 813e 	bcs.w	8004ab0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800483a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	2b20      	cmp	r3, #32
 8004844:	f000 8088 	beq.w	8004958 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	330c      	adds	r3, #12
 800484e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004852:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004856:	e853 3f00 	ldrex	r3, [r3]
 800485a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800485e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004862:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004866:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	330c      	adds	r3, #12
 8004870:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004874:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004878:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004880:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004884:	e841 2300 	strex	r3, r2, [r1]
 8004888:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800488c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1d9      	bne.n	8004848 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	3314      	adds	r3, #20
 800489a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800489e:	e853 3f00 	ldrex	r3, [r3]
 80048a2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80048a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048a6:	f023 0301 	bic.w	r3, r3, #1
 80048aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	3314      	adds	r3, #20
 80048b4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80048b8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80048bc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048be:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80048c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80048c4:	e841 2300 	strex	r3, r2, [r1]
 80048c8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80048ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1e1      	bne.n	8004894 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	3314      	adds	r3, #20
 80048d6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048da:	e853 3f00 	ldrex	r3, [r3]
 80048de:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80048e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	3314      	adds	r3, #20
 80048f0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80048f4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80048f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80048fa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80048fc:	e841 2300 	strex	r3, r2, [r1]
 8004900:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004902:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1e3      	bne.n	80048d0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2220      	movs	r2, #32
 800490c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	330c      	adds	r3, #12
 800491c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004920:	e853 3f00 	ldrex	r3, [r3]
 8004924:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004926:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004928:	f023 0310 	bic.w	r3, r3, #16
 800492c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	330c      	adds	r3, #12
 8004936:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800493a:	65ba      	str	r2, [r7, #88]	; 0x58
 800493c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004940:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004942:	e841 2300 	strex	r3, r2, [r1]
 8004946:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004948:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1e3      	bne.n	8004916 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004952:	4618      	mov	r0, r3
 8004954:	f7fd f875 	bl	8001a42 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2202      	movs	r2, #2
 800495c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004966:	b29b      	uxth	r3, r3
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	b29b      	uxth	r3, r3
 800496c:	4619      	mov	r1, r3
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f000 f8bf 	bl	8004af2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004974:	e09c      	b.n	8004ab0 <HAL_UART_IRQHandler+0x518>
 8004976:	bf00      	nop
 8004978:	08004bcd 	.word	0x08004bcd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004984:	b29b      	uxth	r3, r3
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004990:	b29b      	uxth	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	f000 808e 	beq.w	8004ab4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004998:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 8089 	beq.w	8004ab4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	330c      	adds	r3, #12
 80049a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ac:	e853 3f00 	ldrex	r3, [r3]
 80049b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	330c      	adds	r3, #12
 80049c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80049c6:	647a      	str	r2, [r7, #68]	; 0x44
 80049c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049ce:	e841 2300 	strex	r3, r2, [r1]
 80049d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d1e3      	bne.n	80049a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	3314      	adds	r3, #20
 80049e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	e853 3f00 	ldrex	r3, [r3]
 80049e8:	623b      	str	r3, [r7, #32]
   return(result);
 80049ea:	6a3b      	ldr	r3, [r7, #32]
 80049ec:	f023 0301 	bic.w	r3, r3, #1
 80049f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	3314      	adds	r3, #20
 80049fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80049fe:	633a      	str	r2, [r7, #48]	; 0x30
 8004a00:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a06:	e841 2300 	strex	r3, r2, [r1]
 8004a0a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1e3      	bne.n	80049da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2220      	movs	r2, #32
 8004a16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	330c      	adds	r3, #12
 8004a26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	e853 3f00 	ldrex	r3, [r3]
 8004a2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f023 0310 	bic.w	r3, r3, #16
 8004a36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	330c      	adds	r3, #12
 8004a40:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004a44:	61fa      	str	r2, [r7, #28]
 8004a46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a48:	69b9      	ldr	r1, [r7, #24]
 8004a4a:	69fa      	ldr	r2, [r7, #28]
 8004a4c:	e841 2300 	strex	r3, r2, [r1]
 8004a50:	617b      	str	r3, [r7, #20]
   return(result);
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1e3      	bne.n	8004a20 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2202      	movs	r2, #2
 8004a5c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a5e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a62:	4619      	mov	r1, r3
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f844 	bl	8004af2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a6a:	e023      	b.n	8004ab4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d009      	beq.n	8004a8c <HAL_UART_IRQHandler+0x4f4>
 8004a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d003      	beq.n	8004a8c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f8b5 	bl	8004bf4 <UART_Transmit_IT>
    return;
 8004a8a:	e014      	b.n	8004ab6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00e      	beq.n	8004ab6 <HAL_UART_IRQHandler+0x51e>
 8004a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d008      	beq.n	8004ab6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 f8f4 	bl	8004c92 <UART_EndTransmit_IT>
    return;
 8004aaa:	e004      	b.n	8004ab6 <HAL_UART_IRQHandler+0x51e>
    return;
 8004aac:	bf00      	nop
 8004aae:	e002      	b.n	8004ab6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004ab0:	bf00      	nop
 8004ab2:	e000      	b.n	8004ab6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004ab4:	bf00      	nop
  }
}
 8004ab6:	37e8      	adds	r7, #232	; 0xe8
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bc80      	pop	{r7}
 8004acc:	4770      	bx	lr

08004ace <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b083      	sub	sp, #12
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004ad6:	bf00      	nop
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bc80      	pop	{r7}
 8004ade:	4770      	bx	lr

08004ae0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bc80      	pop	{r7}
 8004af0:	4770      	bx	lr

08004af2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b083      	sub	sp, #12
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
 8004afa:	460b      	mov	r3, r1
 8004afc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004afe:	bf00      	nop
 8004b00:	370c      	adds	r7, #12
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bc80      	pop	{r7}
 8004b06:	4770      	bx	lr

08004b08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b095      	sub	sp, #84	; 0x54
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	330c      	adds	r3, #12
 8004b16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b1a:	e853 3f00 	ldrex	r3, [r3]
 8004b1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	330c      	adds	r3, #12
 8004b2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b30:	643a      	str	r2, [r7, #64]	; 0x40
 8004b32:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b38:	e841 2300 	strex	r3, r2, [r1]
 8004b3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1e5      	bne.n	8004b10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	3314      	adds	r3, #20
 8004b4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	e853 3f00 	ldrex	r3, [r3]
 8004b52:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	f023 0301 	bic.w	r3, r3, #1
 8004b5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	3314      	adds	r3, #20
 8004b62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b6c:	e841 2300 	strex	r3, r2, [r1]
 8004b70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1e5      	bne.n	8004b44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d119      	bne.n	8004bb4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	330c      	adds	r3, #12
 8004b86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	e853 3f00 	ldrex	r3, [r3]
 8004b8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	f023 0310 	bic.w	r3, r3, #16
 8004b96:	647b      	str	r3, [r7, #68]	; 0x44
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	330c      	adds	r3, #12
 8004b9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ba0:	61ba      	str	r2, [r7, #24]
 8004ba2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba4:	6979      	ldr	r1, [r7, #20]
 8004ba6:	69ba      	ldr	r2, [r7, #24]
 8004ba8:	e841 2300 	strex	r3, r2, [r1]
 8004bac:	613b      	str	r3, [r7, #16]
   return(result);
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1e5      	bne.n	8004b80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004bc2:	bf00      	nop
 8004bc4:	3754      	adds	r7, #84	; 0x54
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bc80      	pop	{r7}
 8004bca:	4770      	bx	lr

08004bcc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b084      	sub	sp, #16
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004be6:	68f8      	ldr	r0, [r7, #12]
 8004be8:	f7ff ff7a 	bl	8004ae0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bec:	bf00      	nop
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	2b21      	cmp	r3, #33	; 0x21
 8004c06:	d13e      	bne.n	8004c86 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c10:	d114      	bne.n	8004c3c <UART_Transmit_IT+0x48>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d110      	bne.n	8004c3c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	881b      	ldrh	r3, [r3, #0]
 8004c24:	461a      	mov	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c2e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a1b      	ldr	r3, [r3, #32]
 8004c34:	1c9a      	adds	r2, r3, #2
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	621a      	str	r2, [r3, #32]
 8004c3a:	e008      	b.n	8004c4e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	1c59      	adds	r1, r3, #1
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6211      	str	r1, [r2, #32]
 8004c46:	781a      	ldrb	r2, [r3, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	3b01      	subs	r3, #1
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	4619      	mov	r1, r3
 8004c5c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10f      	bne.n	8004c82 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68da      	ldr	r2, [r3, #12]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c70:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68da      	ldr	r2, [r3, #12]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c80:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c82:	2300      	movs	r3, #0
 8004c84:	e000      	b.n	8004c88 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004c86:	2302      	movs	r3, #2
  }
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3714      	adds	r7, #20
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bc80      	pop	{r7}
 8004c90:	4770      	bx	lr

08004c92 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b082      	sub	sp, #8
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68da      	ldr	r2, [r3, #12]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ca8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2220      	movs	r2, #32
 8004cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7ff ff02 	bl	8004abc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b08c      	sub	sp, #48	; 0x30
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b22      	cmp	r3, #34	; 0x22
 8004cd4:	f040 80ae 	bne.w	8004e34 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce0:	d117      	bne.n	8004d12 <UART_Receive_IT+0x50>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d113      	bne.n	8004d12 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004cea:	2300      	movs	r3, #0
 8004cec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d00:	b29a      	uxth	r2, r3
 8004d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d04:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0a:	1c9a      	adds	r2, r3, #2
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	629a      	str	r2, [r3, #40]	; 0x28
 8004d10:	e026      	b.n	8004d60 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d16:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d24:	d007      	beq.n	8004d36 <UART_Receive_IT+0x74>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10a      	bne.n	8004d44 <UART_Receive_IT+0x82>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d106      	bne.n	8004d44 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	b2da      	uxtb	r2, r3
 8004d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d40:	701a      	strb	r2, [r3, #0]
 8004d42:	e008      	b.n	8004d56 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d50:	b2da      	uxtb	r2, r3
 8004d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d54:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5a:	1c5a      	adds	r2, r3, #1
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	3b01      	subs	r3, #1
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d15d      	bne.n	8004e30 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68da      	ldr	r2, [r3, #12]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f022 0220 	bic.w	r2, r2, #32
 8004d82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68da      	ldr	r2, [r3, #12]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	695a      	ldr	r2, [r3, #20]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 0201 	bic.w	r2, r2, #1
 8004da2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2220      	movs	r2, #32
 8004da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d135      	bne.n	8004e26 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	330c      	adds	r3, #12
 8004dc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	e853 3f00 	ldrex	r3, [r3]
 8004dce:	613b      	str	r3, [r7, #16]
   return(result);
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	f023 0310 	bic.w	r3, r3, #16
 8004dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	330c      	adds	r3, #12
 8004dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004de0:	623a      	str	r2, [r7, #32]
 8004de2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de4:	69f9      	ldr	r1, [r7, #28]
 8004de6:	6a3a      	ldr	r2, [r7, #32]
 8004de8:	e841 2300 	strex	r3, r2, [r1]
 8004dec:	61bb      	str	r3, [r7, #24]
   return(result);
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1e5      	bne.n	8004dc0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0310 	and.w	r3, r3, #16
 8004dfe:	2b10      	cmp	r3, #16
 8004e00:	d10a      	bne.n	8004e18 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e02:	2300      	movs	r3, #0
 8004e04:	60fb      	str	r3, [r7, #12]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	60fb      	str	r3, [r7, #12]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	60fb      	str	r3, [r7, #12]
 8004e16:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7ff fe67 	bl	8004af2 <HAL_UARTEx_RxEventCallback>
 8004e24:	e002      	b.n	8004e2c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7ff fe51 	bl	8004ace <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	e002      	b.n	8004e36 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004e30:	2300      	movs	r3, #0
 8004e32:	e000      	b.n	8004e36 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004e34:	2302      	movs	r3, #2
  }
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3730      	adds	r7, #48	; 0x30
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
	...

08004e40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68da      	ldr	r2, [r3, #12]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	689a      	ldr	r2, [r3, #8]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	691b      	ldr	r3, [r3, #16]
 8004e66:	431a      	orrs	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004e7a:	f023 030c 	bic.w	r3, r3, #12
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	6812      	ldr	r2, [r2, #0]
 8004e82:	68b9      	ldr	r1, [r7, #8]
 8004e84:	430b      	orrs	r3, r1
 8004e86:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	699a      	ldr	r2, [r3, #24]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a2c      	ldr	r2, [pc, #176]	; (8004f54 <UART_SetConfig+0x114>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d103      	bne.n	8004eb0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ea8:	f7ff fa3a 	bl	8004320 <HAL_RCC_GetPCLK2Freq>
 8004eac:	60f8      	str	r0, [r7, #12]
 8004eae:	e002      	b.n	8004eb6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004eb0:	f7ff fa22 	bl	80042f8 <HAL_RCC_GetPCLK1Freq>
 8004eb4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4413      	add	r3, r2
 8004ebe:	009a      	lsls	r2, r3, #2
 8004ec0:	441a      	add	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ecc:	4a22      	ldr	r2, [pc, #136]	; (8004f58 <UART_SetConfig+0x118>)
 8004ece:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed2:	095b      	lsrs	r3, r3, #5
 8004ed4:	0119      	lsls	r1, r3, #4
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	009a      	lsls	r2, r3, #2
 8004ee0:	441a      	add	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004eec:	4b1a      	ldr	r3, [pc, #104]	; (8004f58 <UART_SetConfig+0x118>)
 8004eee:	fba3 0302 	umull	r0, r3, r3, r2
 8004ef2:	095b      	lsrs	r3, r3, #5
 8004ef4:	2064      	movs	r0, #100	; 0x64
 8004ef6:	fb00 f303 	mul.w	r3, r0, r3
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	011b      	lsls	r3, r3, #4
 8004efe:	3332      	adds	r3, #50	; 0x32
 8004f00:	4a15      	ldr	r2, [pc, #84]	; (8004f58 <UART_SetConfig+0x118>)
 8004f02:	fba2 2303 	umull	r2, r3, r2, r3
 8004f06:	095b      	lsrs	r3, r3, #5
 8004f08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f0c:	4419      	add	r1, r3
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	4613      	mov	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4413      	add	r3, r2
 8004f16:	009a      	lsls	r2, r3, #2
 8004f18:	441a      	add	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f24:	4b0c      	ldr	r3, [pc, #48]	; (8004f58 <UART_SetConfig+0x118>)
 8004f26:	fba3 0302 	umull	r0, r3, r3, r2
 8004f2a:	095b      	lsrs	r3, r3, #5
 8004f2c:	2064      	movs	r0, #100	; 0x64
 8004f2e:	fb00 f303 	mul.w	r3, r0, r3
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	011b      	lsls	r3, r3, #4
 8004f36:	3332      	adds	r3, #50	; 0x32
 8004f38:	4a07      	ldr	r2, [pc, #28]	; (8004f58 <UART_SetConfig+0x118>)
 8004f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3e:	095b      	lsrs	r3, r3, #5
 8004f40:	f003 020f 	and.w	r2, r3, #15
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	440a      	add	r2, r1
 8004f4a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004f4c:	bf00      	nop
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}
 8004f54:	40013800 	.word	0x40013800
 8004f58:	51eb851f 	.word	0x51eb851f

08004f5c <__errno>:
 8004f5c:	4b01      	ldr	r3, [pc, #4]	; (8004f64 <__errno+0x8>)
 8004f5e:	6818      	ldr	r0, [r3, #0]
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	20000010 	.word	0x20000010

08004f68 <__libc_init_array>:
 8004f68:	b570      	push	{r4, r5, r6, lr}
 8004f6a:	2600      	movs	r6, #0
 8004f6c:	4d0c      	ldr	r5, [pc, #48]	; (8004fa0 <__libc_init_array+0x38>)
 8004f6e:	4c0d      	ldr	r4, [pc, #52]	; (8004fa4 <__libc_init_array+0x3c>)
 8004f70:	1b64      	subs	r4, r4, r5
 8004f72:	10a4      	asrs	r4, r4, #2
 8004f74:	42a6      	cmp	r6, r4
 8004f76:	d109      	bne.n	8004f8c <__libc_init_array+0x24>
 8004f78:	f000 fc9c 	bl	80058b4 <_init>
 8004f7c:	2600      	movs	r6, #0
 8004f7e:	4d0a      	ldr	r5, [pc, #40]	; (8004fa8 <__libc_init_array+0x40>)
 8004f80:	4c0a      	ldr	r4, [pc, #40]	; (8004fac <__libc_init_array+0x44>)
 8004f82:	1b64      	subs	r4, r4, r5
 8004f84:	10a4      	asrs	r4, r4, #2
 8004f86:	42a6      	cmp	r6, r4
 8004f88:	d105      	bne.n	8004f96 <__libc_init_array+0x2e>
 8004f8a:	bd70      	pop	{r4, r5, r6, pc}
 8004f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f90:	4798      	blx	r3
 8004f92:	3601      	adds	r6, #1
 8004f94:	e7ee      	b.n	8004f74 <__libc_init_array+0xc>
 8004f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f9a:	4798      	blx	r3
 8004f9c:	3601      	adds	r6, #1
 8004f9e:	e7f2      	b.n	8004f86 <__libc_init_array+0x1e>
 8004fa0:	08005950 	.word	0x08005950
 8004fa4:	08005950 	.word	0x08005950
 8004fa8:	08005950 	.word	0x08005950
 8004fac:	08005954 	.word	0x08005954

08004fb0 <memset>:
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	4402      	add	r2, r0
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d100      	bne.n	8004fba <memset+0xa>
 8004fb8:	4770      	bx	lr
 8004fba:	f803 1b01 	strb.w	r1, [r3], #1
 8004fbe:	e7f9      	b.n	8004fb4 <memset+0x4>

08004fc0 <siprintf>:
 8004fc0:	b40e      	push	{r1, r2, r3}
 8004fc2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004fc6:	b500      	push	{lr}
 8004fc8:	b09c      	sub	sp, #112	; 0x70
 8004fca:	ab1d      	add	r3, sp, #116	; 0x74
 8004fcc:	9002      	str	r0, [sp, #8]
 8004fce:	9006      	str	r0, [sp, #24]
 8004fd0:	9107      	str	r1, [sp, #28]
 8004fd2:	9104      	str	r1, [sp, #16]
 8004fd4:	4808      	ldr	r0, [pc, #32]	; (8004ff8 <siprintf+0x38>)
 8004fd6:	4909      	ldr	r1, [pc, #36]	; (8004ffc <siprintf+0x3c>)
 8004fd8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fdc:	9105      	str	r1, [sp, #20]
 8004fde:	6800      	ldr	r0, [r0, #0]
 8004fe0:	a902      	add	r1, sp, #8
 8004fe2:	9301      	str	r3, [sp, #4]
 8004fe4:	f000 f868 	bl	80050b8 <_svfiprintf_r>
 8004fe8:	2200      	movs	r2, #0
 8004fea:	9b02      	ldr	r3, [sp, #8]
 8004fec:	701a      	strb	r2, [r3, #0]
 8004fee:	b01c      	add	sp, #112	; 0x70
 8004ff0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ff4:	b003      	add	sp, #12
 8004ff6:	4770      	bx	lr
 8004ff8:	20000010 	.word	0x20000010
 8004ffc:	ffff0208 	.word	0xffff0208

08005000 <__ssputs_r>:
 8005000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005004:	688e      	ldr	r6, [r1, #8]
 8005006:	4682      	mov	sl, r0
 8005008:	429e      	cmp	r6, r3
 800500a:	460c      	mov	r4, r1
 800500c:	4690      	mov	r8, r2
 800500e:	461f      	mov	r7, r3
 8005010:	d838      	bhi.n	8005084 <__ssputs_r+0x84>
 8005012:	898a      	ldrh	r2, [r1, #12]
 8005014:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005018:	d032      	beq.n	8005080 <__ssputs_r+0x80>
 800501a:	6825      	ldr	r5, [r4, #0]
 800501c:	6909      	ldr	r1, [r1, #16]
 800501e:	3301      	adds	r3, #1
 8005020:	eba5 0901 	sub.w	r9, r5, r1
 8005024:	6965      	ldr	r5, [r4, #20]
 8005026:	444b      	add	r3, r9
 8005028:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800502c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005030:	106d      	asrs	r5, r5, #1
 8005032:	429d      	cmp	r5, r3
 8005034:	bf38      	it	cc
 8005036:	461d      	movcc	r5, r3
 8005038:	0553      	lsls	r3, r2, #21
 800503a:	d531      	bpl.n	80050a0 <__ssputs_r+0xa0>
 800503c:	4629      	mov	r1, r5
 800503e:	f000 fb6f 	bl	8005720 <_malloc_r>
 8005042:	4606      	mov	r6, r0
 8005044:	b950      	cbnz	r0, 800505c <__ssputs_r+0x5c>
 8005046:	230c      	movs	r3, #12
 8005048:	f04f 30ff 	mov.w	r0, #4294967295
 800504c:	f8ca 3000 	str.w	r3, [sl]
 8005050:	89a3      	ldrh	r3, [r4, #12]
 8005052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005056:	81a3      	strh	r3, [r4, #12]
 8005058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800505c:	464a      	mov	r2, r9
 800505e:	6921      	ldr	r1, [r4, #16]
 8005060:	f000 face 	bl	8005600 <memcpy>
 8005064:	89a3      	ldrh	r3, [r4, #12]
 8005066:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800506a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800506e:	81a3      	strh	r3, [r4, #12]
 8005070:	6126      	str	r6, [r4, #16]
 8005072:	444e      	add	r6, r9
 8005074:	6026      	str	r6, [r4, #0]
 8005076:	463e      	mov	r6, r7
 8005078:	6165      	str	r5, [r4, #20]
 800507a:	eba5 0509 	sub.w	r5, r5, r9
 800507e:	60a5      	str	r5, [r4, #8]
 8005080:	42be      	cmp	r6, r7
 8005082:	d900      	bls.n	8005086 <__ssputs_r+0x86>
 8005084:	463e      	mov	r6, r7
 8005086:	4632      	mov	r2, r6
 8005088:	4641      	mov	r1, r8
 800508a:	6820      	ldr	r0, [r4, #0]
 800508c:	f000 fac6 	bl	800561c <memmove>
 8005090:	68a3      	ldr	r3, [r4, #8]
 8005092:	2000      	movs	r0, #0
 8005094:	1b9b      	subs	r3, r3, r6
 8005096:	60a3      	str	r3, [r4, #8]
 8005098:	6823      	ldr	r3, [r4, #0]
 800509a:	4433      	add	r3, r6
 800509c:	6023      	str	r3, [r4, #0]
 800509e:	e7db      	b.n	8005058 <__ssputs_r+0x58>
 80050a0:	462a      	mov	r2, r5
 80050a2:	f000 fbb1 	bl	8005808 <_realloc_r>
 80050a6:	4606      	mov	r6, r0
 80050a8:	2800      	cmp	r0, #0
 80050aa:	d1e1      	bne.n	8005070 <__ssputs_r+0x70>
 80050ac:	4650      	mov	r0, sl
 80050ae:	6921      	ldr	r1, [r4, #16]
 80050b0:	f000 face 	bl	8005650 <_free_r>
 80050b4:	e7c7      	b.n	8005046 <__ssputs_r+0x46>
	...

080050b8 <_svfiprintf_r>:
 80050b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050bc:	4698      	mov	r8, r3
 80050be:	898b      	ldrh	r3, [r1, #12]
 80050c0:	4607      	mov	r7, r0
 80050c2:	061b      	lsls	r3, r3, #24
 80050c4:	460d      	mov	r5, r1
 80050c6:	4614      	mov	r4, r2
 80050c8:	b09d      	sub	sp, #116	; 0x74
 80050ca:	d50e      	bpl.n	80050ea <_svfiprintf_r+0x32>
 80050cc:	690b      	ldr	r3, [r1, #16]
 80050ce:	b963      	cbnz	r3, 80050ea <_svfiprintf_r+0x32>
 80050d0:	2140      	movs	r1, #64	; 0x40
 80050d2:	f000 fb25 	bl	8005720 <_malloc_r>
 80050d6:	6028      	str	r0, [r5, #0]
 80050d8:	6128      	str	r0, [r5, #16]
 80050da:	b920      	cbnz	r0, 80050e6 <_svfiprintf_r+0x2e>
 80050dc:	230c      	movs	r3, #12
 80050de:	603b      	str	r3, [r7, #0]
 80050e0:	f04f 30ff 	mov.w	r0, #4294967295
 80050e4:	e0d1      	b.n	800528a <_svfiprintf_r+0x1d2>
 80050e6:	2340      	movs	r3, #64	; 0x40
 80050e8:	616b      	str	r3, [r5, #20]
 80050ea:	2300      	movs	r3, #0
 80050ec:	9309      	str	r3, [sp, #36]	; 0x24
 80050ee:	2320      	movs	r3, #32
 80050f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80050f4:	2330      	movs	r3, #48	; 0x30
 80050f6:	f04f 0901 	mov.w	r9, #1
 80050fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80050fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80052a4 <_svfiprintf_r+0x1ec>
 8005102:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005106:	4623      	mov	r3, r4
 8005108:	469a      	mov	sl, r3
 800510a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800510e:	b10a      	cbz	r2, 8005114 <_svfiprintf_r+0x5c>
 8005110:	2a25      	cmp	r2, #37	; 0x25
 8005112:	d1f9      	bne.n	8005108 <_svfiprintf_r+0x50>
 8005114:	ebba 0b04 	subs.w	fp, sl, r4
 8005118:	d00b      	beq.n	8005132 <_svfiprintf_r+0x7a>
 800511a:	465b      	mov	r3, fp
 800511c:	4622      	mov	r2, r4
 800511e:	4629      	mov	r1, r5
 8005120:	4638      	mov	r0, r7
 8005122:	f7ff ff6d 	bl	8005000 <__ssputs_r>
 8005126:	3001      	adds	r0, #1
 8005128:	f000 80aa 	beq.w	8005280 <_svfiprintf_r+0x1c8>
 800512c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800512e:	445a      	add	r2, fp
 8005130:	9209      	str	r2, [sp, #36]	; 0x24
 8005132:	f89a 3000 	ldrb.w	r3, [sl]
 8005136:	2b00      	cmp	r3, #0
 8005138:	f000 80a2 	beq.w	8005280 <_svfiprintf_r+0x1c8>
 800513c:	2300      	movs	r3, #0
 800513e:	f04f 32ff 	mov.w	r2, #4294967295
 8005142:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005146:	f10a 0a01 	add.w	sl, sl, #1
 800514a:	9304      	str	r3, [sp, #16]
 800514c:	9307      	str	r3, [sp, #28]
 800514e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005152:	931a      	str	r3, [sp, #104]	; 0x68
 8005154:	4654      	mov	r4, sl
 8005156:	2205      	movs	r2, #5
 8005158:	f814 1b01 	ldrb.w	r1, [r4], #1
 800515c:	4851      	ldr	r0, [pc, #324]	; (80052a4 <_svfiprintf_r+0x1ec>)
 800515e:	f000 fa41 	bl	80055e4 <memchr>
 8005162:	9a04      	ldr	r2, [sp, #16]
 8005164:	b9d8      	cbnz	r0, 800519e <_svfiprintf_r+0xe6>
 8005166:	06d0      	lsls	r0, r2, #27
 8005168:	bf44      	itt	mi
 800516a:	2320      	movmi	r3, #32
 800516c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005170:	0711      	lsls	r1, r2, #28
 8005172:	bf44      	itt	mi
 8005174:	232b      	movmi	r3, #43	; 0x2b
 8005176:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800517a:	f89a 3000 	ldrb.w	r3, [sl]
 800517e:	2b2a      	cmp	r3, #42	; 0x2a
 8005180:	d015      	beq.n	80051ae <_svfiprintf_r+0xf6>
 8005182:	4654      	mov	r4, sl
 8005184:	2000      	movs	r0, #0
 8005186:	f04f 0c0a 	mov.w	ip, #10
 800518a:	9a07      	ldr	r2, [sp, #28]
 800518c:	4621      	mov	r1, r4
 800518e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005192:	3b30      	subs	r3, #48	; 0x30
 8005194:	2b09      	cmp	r3, #9
 8005196:	d94e      	bls.n	8005236 <_svfiprintf_r+0x17e>
 8005198:	b1b0      	cbz	r0, 80051c8 <_svfiprintf_r+0x110>
 800519a:	9207      	str	r2, [sp, #28]
 800519c:	e014      	b.n	80051c8 <_svfiprintf_r+0x110>
 800519e:	eba0 0308 	sub.w	r3, r0, r8
 80051a2:	fa09 f303 	lsl.w	r3, r9, r3
 80051a6:	4313      	orrs	r3, r2
 80051a8:	46a2      	mov	sl, r4
 80051aa:	9304      	str	r3, [sp, #16]
 80051ac:	e7d2      	b.n	8005154 <_svfiprintf_r+0x9c>
 80051ae:	9b03      	ldr	r3, [sp, #12]
 80051b0:	1d19      	adds	r1, r3, #4
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	9103      	str	r1, [sp, #12]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	bfbb      	ittet	lt
 80051ba:	425b      	neglt	r3, r3
 80051bc:	f042 0202 	orrlt.w	r2, r2, #2
 80051c0:	9307      	strge	r3, [sp, #28]
 80051c2:	9307      	strlt	r3, [sp, #28]
 80051c4:	bfb8      	it	lt
 80051c6:	9204      	strlt	r2, [sp, #16]
 80051c8:	7823      	ldrb	r3, [r4, #0]
 80051ca:	2b2e      	cmp	r3, #46	; 0x2e
 80051cc:	d10c      	bne.n	80051e8 <_svfiprintf_r+0x130>
 80051ce:	7863      	ldrb	r3, [r4, #1]
 80051d0:	2b2a      	cmp	r3, #42	; 0x2a
 80051d2:	d135      	bne.n	8005240 <_svfiprintf_r+0x188>
 80051d4:	9b03      	ldr	r3, [sp, #12]
 80051d6:	3402      	adds	r4, #2
 80051d8:	1d1a      	adds	r2, r3, #4
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	9203      	str	r2, [sp, #12]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	bfb8      	it	lt
 80051e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80051e6:	9305      	str	r3, [sp, #20]
 80051e8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80052a8 <_svfiprintf_r+0x1f0>
 80051ec:	2203      	movs	r2, #3
 80051ee:	4650      	mov	r0, sl
 80051f0:	7821      	ldrb	r1, [r4, #0]
 80051f2:	f000 f9f7 	bl	80055e4 <memchr>
 80051f6:	b140      	cbz	r0, 800520a <_svfiprintf_r+0x152>
 80051f8:	2340      	movs	r3, #64	; 0x40
 80051fa:	eba0 000a 	sub.w	r0, r0, sl
 80051fe:	fa03 f000 	lsl.w	r0, r3, r0
 8005202:	9b04      	ldr	r3, [sp, #16]
 8005204:	3401      	adds	r4, #1
 8005206:	4303      	orrs	r3, r0
 8005208:	9304      	str	r3, [sp, #16]
 800520a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800520e:	2206      	movs	r2, #6
 8005210:	4826      	ldr	r0, [pc, #152]	; (80052ac <_svfiprintf_r+0x1f4>)
 8005212:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005216:	f000 f9e5 	bl	80055e4 <memchr>
 800521a:	2800      	cmp	r0, #0
 800521c:	d038      	beq.n	8005290 <_svfiprintf_r+0x1d8>
 800521e:	4b24      	ldr	r3, [pc, #144]	; (80052b0 <_svfiprintf_r+0x1f8>)
 8005220:	bb1b      	cbnz	r3, 800526a <_svfiprintf_r+0x1b2>
 8005222:	9b03      	ldr	r3, [sp, #12]
 8005224:	3307      	adds	r3, #7
 8005226:	f023 0307 	bic.w	r3, r3, #7
 800522a:	3308      	adds	r3, #8
 800522c:	9303      	str	r3, [sp, #12]
 800522e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005230:	4433      	add	r3, r6
 8005232:	9309      	str	r3, [sp, #36]	; 0x24
 8005234:	e767      	b.n	8005106 <_svfiprintf_r+0x4e>
 8005236:	460c      	mov	r4, r1
 8005238:	2001      	movs	r0, #1
 800523a:	fb0c 3202 	mla	r2, ip, r2, r3
 800523e:	e7a5      	b.n	800518c <_svfiprintf_r+0xd4>
 8005240:	2300      	movs	r3, #0
 8005242:	f04f 0c0a 	mov.w	ip, #10
 8005246:	4619      	mov	r1, r3
 8005248:	3401      	adds	r4, #1
 800524a:	9305      	str	r3, [sp, #20]
 800524c:	4620      	mov	r0, r4
 800524e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005252:	3a30      	subs	r2, #48	; 0x30
 8005254:	2a09      	cmp	r2, #9
 8005256:	d903      	bls.n	8005260 <_svfiprintf_r+0x1a8>
 8005258:	2b00      	cmp	r3, #0
 800525a:	d0c5      	beq.n	80051e8 <_svfiprintf_r+0x130>
 800525c:	9105      	str	r1, [sp, #20]
 800525e:	e7c3      	b.n	80051e8 <_svfiprintf_r+0x130>
 8005260:	4604      	mov	r4, r0
 8005262:	2301      	movs	r3, #1
 8005264:	fb0c 2101 	mla	r1, ip, r1, r2
 8005268:	e7f0      	b.n	800524c <_svfiprintf_r+0x194>
 800526a:	ab03      	add	r3, sp, #12
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	462a      	mov	r2, r5
 8005270:	4638      	mov	r0, r7
 8005272:	4b10      	ldr	r3, [pc, #64]	; (80052b4 <_svfiprintf_r+0x1fc>)
 8005274:	a904      	add	r1, sp, #16
 8005276:	f3af 8000 	nop.w
 800527a:	1c42      	adds	r2, r0, #1
 800527c:	4606      	mov	r6, r0
 800527e:	d1d6      	bne.n	800522e <_svfiprintf_r+0x176>
 8005280:	89ab      	ldrh	r3, [r5, #12]
 8005282:	065b      	lsls	r3, r3, #25
 8005284:	f53f af2c 	bmi.w	80050e0 <_svfiprintf_r+0x28>
 8005288:	9809      	ldr	r0, [sp, #36]	; 0x24
 800528a:	b01d      	add	sp, #116	; 0x74
 800528c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005290:	ab03      	add	r3, sp, #12
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	462a      	mov	r2, r5
 8005296:	4638      	mov	r0, r7
 8005298:	4b06      	ldr	r3, [pc, #24]	; (80052b4 <_svfiprintf_r+0x1fc>)
 800529a:	a904      	add	r1, sp, #16
 800529c:	f000 f87c 	bl	8005398 <_printf_i>
 80052a0:	e7eb      	b.n	800527a <_svfiprintf_r+0x1c2>
 80052a2:	bf00      	nop
 80052a4:	0800591a 	.word	0x0800591a
 80052a8:	08005920 	.word	0x08005920
 80052ac:	08005924 	.word	0x08005924
 80052b0:	00000000 	.word	0x00000000
 80052b4:	08005001 	.word	0x08005001

080052b8 <_printf_common>:
 80052b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052bc:	4616      	mov	r6, r2
 80052be:	4699      	mov	r9, r3
 80052c0:	688a      	ldr	r2, [r1, #8]
 80052c2:	690b      	ldr	r3, [r1, #16]
 80052c4:	4607      	mov	r7, r0
 80052c6:	4293      	cmp	r3, r2
 80052c8:	bfb8      	it	lt
 80052ca:	4613      	movlt	r3, r2
 80052cc:	6033      	str	r3, [r6, #0]
 80052ce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052d2:	460c      	mov	r4, r1
 80052d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052d8:	b10a      	cbz	r2, 80052de <_printf_common+0x26>
 80052da:	3301      	adds	r3, #1
 80052dc:	6033      	str	r3, [r6, #0]
 80052de:	6823      	ldr	r3, [r4, #0]
 80052e0:	0699      	lsls	r1, r3, #26
 80052e2:	bf42      	ittt	mi
 80052e4:	6833      	ldrmi	r3, [r6, #0]
 80052e6:	3302      	addmi	r3, #2
 80052e8:	6033      	strmi	r3, [r6, #0]
 80052ea:	6825      	ldr	r5, [r4, #0]
 80052ec:	f015 0506 	ands.w	r5, r5, #6
 80052f0:	d106      	bne.n	8005300 <_printf_common+0x48>
 80052f2:	f104 0a19 	add.w	sl, r4, #25
 80052f6:	68e3      	ldr	r3, [r4, #12]
 80052f8:	6832      	ldr	r2, [r6, #0]
 80052fa:	1a9b      	subs	r3, r3, r2
 80052fc:	42ab      	cmp	r3, r5
 80052fe:	dc28      	bgt.n	8005352 <_printf_common+0x9a>
 8005300:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005304:	1e13      	subs	r3, r2, #0
 8005306:	6822      	ldr	r2, [r4, #0]
 8005308:	bf18      	it	ne
 800530a:	2301      	movne	r3, #1
 800530c:	0692      	lsls	r2, r2, #26
 800530e:	d42d      	bmi.n	800536c <_printf_common+0xb4>
 8005310:	4649      	mov	r1, r9
 8005312:	4638      	mov	r0, r7
 8005314:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005318:	47c0      	blx	r8
 800531a:	3001      	adds	r0, #1
 800531c:	d020      	beq.n	8005360 <_printf_common+0xa8>
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	68e5      	ldr	r5, [r4, #12]
 8005322:	f003 0306 	and.w	r3, r3, #6
 8005326:	2b04      	cmp	r3, #4
 8005328:	bf18      	it	ne
 800532a:	2500      	movne	r5, #0
 800532c:	6832      	ldr	r2, [r6, #0]
 800532e:	f04f 0600 	mov.w	r6, #0
 8005332:	68a3      	ldr	r3, [r4, #8]
 8005334:	bf08      	it	eq
 8005336:	1aad      	subeq	r5, r5, r2
 8005338:	6922      	ldr	r2, [r4, #16]
 800533a:	bf08      	it	eq
 800533c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005340:	4293      	cmp	r3, r2
 8005342:	bfc4      	itt	gt
 8005344:	1a9b      	subgt	r3, r3, r2
 8005346:	18ed      	addgt	r5, r5, r3
 8005348:	341a      	adds	r4, #26
 800534a:	42b5      	cmp	r5, r6
 800534c:	d11a      	bne.n	8005384 <_printf_common+0xcc>
 800534e:	2000      	movs	r0, #0
 8005350:	e008      	b.n	8005364 <_printf_common+0xac>
 8005352:	2301      	movs	r3, #1
 8005354:	4652      	mov	r2, sl
 8005356:	4649      	mov	r1, r9
 8005358:	4638      	mov	r0, r7
 800535a:	47c0      	blx	r8
 800535c:	3001      	adds	r0, #1
 800535e:	d103      	bne.n	8005368 <_printf_common+0xb0>
 8005360:	f04f 30ff 	mov.w	r0, #4294967295
 8005364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005368:	3501      	adds	r5, #1
 800536a:	e7c4      	b.n	80052f6 <_printf_common+0x3e>
 800536c:	2030      	movs	r0, #48	; 0x30
 800536e:	18e1      	adds	r1, r4, r3
 8005370:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005374:	1c5a      	adds	r2, r3, #1
 8005376:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800537a:	4422      	add	r2, r4
 800537c:	3302      	adds	r3, #2
 800537e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005382:	e7c5      	b.n	8005310 <_printf_common+0x58>
 8005384:	2301      	movs	r3, #1
 8005386:	4622      	mov	r2, r4
 8005388:	4649      	mov	r1, r9
 800538a:	4638      	mov	r0, r7
 800538c:	47c0      	blx	r8
 800538e:	3001      	adds	r0, #1
 8005390:	d0e6      	beq.n	8005360 <_printf_common+0xa8>
 8005392:	3601      	adds	r6, #1
 8005394:	e7d9      	b.n	800534a <_printf_common+0x92>
	...

08005398 <_printf_i>:
 8005398:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800539c:	7e0f      	ldrb	r7, [r1, #24]
 800539e:	4691      	mov	r9, r2
 80053a0:	2f78      	cmp	r7, #120	; 0x78
 80053a2:	4680      	mov	r8, r0
 80053a4:	460c      	mov	r4, r1
 80053a6:	469a      	mov	sl, r3
 80053a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80053ae:	d807      	bhi.n	80053c0 <_printf_i+0x28>
 80053b0:	2f62      	cmp	r7, #98	; 0x62
 80053b2:	d80a      	bhi.n	80053ca <_printf_i+0x32>
 80053b4:	2f00      	cmp	r7, #0
 80053b6:	f000 80d9 	beq.w	800556c <_printf_i+0x1d4>
 80053ba:	2f58      	cmp	r7, #88	; 0x58
 80053bc:	f000 80a4 	beq.w	8005508 <_printf_i+0x170>
 80053c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053c8:	e03a      	b.n	8005440 <_printf_i+0xa8>
 80053ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053ce:	2b15      	cmp	r3, #21
 80053d0:	d8f6      	bhi.n	80053c0 <_printf_i+0x28>
 80053d2:	a101      	add	r1, pc, #4	; (adr r1, 80053d8 <_printf_i+0x40>)
 80053d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053d8:	08005431 	.word	0x08005431
 80053dc:	08005445 	.word	0x08005445
 80053e0:	080053c1 	.word	0x080053c1
 80053e4:	080053c1 	.word	0x080053c1
 80053e8:	080053c1 	.word	0x080053c1
 80053ec:	080053c1 	.word	0x080053c1
 80053f0:	08005445 	.word	0x08005445
 80053f4:	080053c1 	.word	0x080053c1
 80053f8:	080053c1 	.word	0x080053c1
 80053fc:	080053c1 	.word	0x080053c1
 8005400:	080053c1 	.word	0x080053c1
 8005404:	08005553 	.word	0x08005553
 8005408:	08005475 	.word	0x08005475
 800540c:	08005535 	.word	0x08005535
 8005410:	080053c1 	.word	0x080053c1
 8005414:	080053c1 	.word	0x080053c1
 8005418:	08005575 	.word	0x08005575
 800541c:	080053c1 	.word	0x080053c1
 8005420:	08005475 	.word	0x08005475
 8005424:	080053c1 	.word	0x080053c1
 8005428:	080053c1 	.word	0x080053c1
 800542c:	0800553d 	.word	0x0800553d
 8005430:	682b      	ldr	r3, [r5, #0]
 8005432:	1d1a      	adds	r2, r3, #4
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	602a      	str	r2, [r5, #0]
 8005438:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800543c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005440:	2301      	movs	r3, #1
 8005442:	e0a4      	b.n	800558e <_printf_i+0x1f6>
 8005444:	6820      	ldr	r0, [r4, #0]
 8005446:	6829      	ldr	r1, [r5, #0]
 8005448:	0606      	lsls	r6, r0, #24
 800544a:	f101 0304 	add.w	r3, r1, #4
 800544e:	d50a      	bpl.n	8005466 <_printf_i+0xce>
 8005450:	680e      	ldr	r6, [r1, #0]
 8005452:	602b      	str	r3, [r5, #0]
 8005454:	2e00      	cmp	r6, #0
 8005456:	da03      	bge.n	8005460 <_printf_i+0xc8>
 8005458:	232d      	movs	r3, #45	; 0x2d
 800545a:	4276      	negs	r6, r6
 800545c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005460:	230a      	movs	r3, #10
 8005462:	485e      	ldr	r0, [pc, #376]	; (80055dc <_printf_i+0x244>)
 8005464:	e019      	b.n	800549a <_printf_i+0x102>
 8005466:	680e      	ldr	r6, [r1, #0]
 8005468:	f010 0f40 	tst.w	r0, #64	; 0x40
 800546c:	602b      	str	r3, [r5, #0]
 800546e:	bf18      	it	ne
 8005470:	b236      	sxthne	r6, r6
 8005472:	e7ef      	b.n	8005454 <_printf_i+0xbc>
 8005474:	682b      	ldr	r3, [r5, #0]
 8005476:	6820      	ldr	r0, [r4, #0]
 8005478:	1d19      	adds	r1, r3, #4
 800547a:	6029      	str	r1, [r5, #0]
 800547c:	0601      	lsls	r1, r0, #24
 800547e:	d501      	bpl.n	8005484 <_printf_i+0xec>
 8005480:	681e      	ldr	r6, [r3, #0]
 8005482:	e002      	b.n	800548a <_printf_i+0xf2>
 8005484:	0646      	lsls	r6, r0, #25
 8005486:	d5fb      	bpl.n	8005480 <_printf_i+0xe8>
 8005488:	881e      	ldrh	r6, [r3, #0]
 800548a:	2f6f      	cmp	r7, #111	; 0x6f
 800548c:	bf0c      	ite	eq
 800548e:	2308      	moveq	r3, #8
 8005490:	230a      	movne	r3, #10
 8005492:	4852      	ldr	r0, [pc, #328]	; (80055dc <_printf_i+0x244>)
 8005494:	2100      	movs	r1, #0
 8005496:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800549a:	6865      	ldr	r5, [r4, #4]
 800549c:	2d00      	cmp	r5, #0
 800549e:	bfa8      	it	ge
 80054a0:	6821      	ldrge	r1, [r4, #0]
 80054a2:	60a5      	str	r5, [r4, #8]
 80054a4:	bfa4      	itt	ge
 80054a6:	f021 0104 	bicge.w	r1, r1, #4
 80054aa:	6021      	strge	r1, [r4, #0]
 80054ac:	b90e      	cbnz	r6, 80054b2 <_printf_i+0x11a>
 80054ae:	2d00      	cmp	r5, #0
 80054b0:	d04d      	beq.n	800554e <_printf_i+0x1b6>
 80054b2:	4615      	mov	r5, r2
 80054b4:	fbb6 f1f3 	udiv	r1, r6, r3
 80054b8:	fb03 6711 	mls	r7, r3, r1, r6
 80054bc:	5dc7      	ldrb	r7, [r0, r7]
 80054be:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80054c2:	4637      	mov	r7, r6
 80054c4:	42bb      	cmp	r3, r7
 80054c6:	460e      	mov	r6, r1
 80054c8:	d9f4      	bls.n	80054b4 <_printf_i+0x11c>
 80054ca:	2b08      	cmp	r3, #8
 80054cc:	d10b      	bne.n	80054e6 <_printf_i+0x14e>
 80054ce:	6823      	ldr	r3, [r4, #0]
 80054d0:	07de      	lsls	r6, r3, #31
 80054d2:	d508      	bpl.n	80054e6 <_printf_i+0x14e>
 80054d4:	6923      	ldr	r3, [r4, #16]
 80054d6:	6861      	ldr	r1, [r4, #4]
 80054d8:	4299      	cmp	r1, r3
 80054da:	bfde      	ittt	le
 80054dc:	2330      	movle	r3, #48	; 0x30
 80054de:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80054e6:	1b52      	subs	r2, r2, r5
 80054e8:	6122      	str	r2, [r4, #16]
 80054ea:	464b      	mov	r3, r9
 80054ec:	4621      	mov	r1, r4
 80054ee:	4640      	mov	r0, r8
 80054f0:	f8cd a000 	str.w	sl, [sp]
 80054f4:	aa03      	add	r2, sp, #12
 80054f6:	f7ff fedf 	bl	80052b8 <_printf_common>
 80054fa:	3001      	adds	r0, #1
 80054fc:	d14c      	bne.n	8005598 <_printf_i+0x200>
 80054fe:	f04f 30ff 	mov.w	r0, #4294967295
 8005502:	b004      	add	sp, #16
 8005504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005508:	4834      	ldr	r0, [pc, #208]	; (80055dc <_printf_i+0x244>)
 800550a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800550e:	6829      	ldr	r1, [r5, #0]
 8005510:	6823      	ldr	r3, [r4, #0]
 8005512:	f851 6b04 	ldr.w	r6, [r1], #4
 8005516:	6029      	str	r1, [r5, #0]
 8005518:	061d      	lsls	r5, r3, #24
 800551a:	d514      	bpl.n	8005546 <_printf_i+0x1ae>
 800551c:	07df      	lsls	r7, r3, #31
 800551e:	bf44      	itt	mi
 8005520:	f043 0320 	orrmi.w	r3, r3, #32
 8005524:	6023      	strmi	r3, [r4, #0]
 8005526:	b91e      	cbnz	r6, 8005530 <_printf_i+0x198>
 8005528:	6823      	ldr	r3, [r4, #0]
 800552a:	f023 0320 	bic.w	r3, r3, #32
 800552e:	6023      	str	r3, [r4, #0]
 8005530:	2310      	movs	r3, #16
 8005532:	e7af      	b.n	8005494 <_printf_i+0xfc>
 8005534:	6823      	ldr	r3, [r4, #0]
 8005536:	f043 0320 	orr.w	r3, r3, #32
 800553a:	6023      	str	r3, [r4, #0]
 800553c:	2378      	movs	r3, #120	; 0x78
 800553e:	4828      	ldr	r0, [pc, #160]	; (80055e0 <_printf_i+0x248>)
 8005540:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005544:	e7e3      	b.n	800550e <_printf_i+0x176>
 8005546:	0659      	lsls	r1, r3, #25
 8005548:	bf48      	it	mi
 800554a:	b2b6      	uxthmi	r6, r6
 800554c:	e7e6      	b.n	800551c <_printf_i+0x184>
 800554e:	4615      	mov	r5, r2
 8005550:	e7bb      	b.n	80054ca <_printf_i+0x132>
 8005552:	682b      	ldr	r3, [r5, #0]
 8005554:	6826      	ldr	r6, [r4, #0]
 8005556:	1d18      	adds	r0, r3, #4
 8005558:	6961      	ldr	r1, [r4, #20]
 800555a:	6028      	str	r0, [r5, #0]
 800555c:	0635      	lsls	r5, r6, #24
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	d501      	bpl.n	8005566 <_printf_i+0x1ce>
 8005562:	6019      	str	r1, [r3, #0]
 8005564:	e002      	b.n	800556c <_printf_i+0x1d4>
 8005566:	0670      	lsls	r0, r6, #25
 8005568:	d5fb      	bpl.n	8005562 <_printf_i+0x1ca>
 800556a:	8019      	strh	r1, [r3, #0]
 800556c:	2300      	movs	r3, #0
 800556e:	4615      	mov	r5, r2
 8005570:	6123      	str	r3, [r4, #16]
 8005572:	e7ba      	b.n	80054ea <_printf_i+0x152>
 8005574:	682b      	ldr	r3, [r5, #0]
 8005576:	2100      	movs	r1, #0
 8005578:	1d1a      	adds	r2, r3, #4
 800557a:	602a      	str	r2, [r5, #0]
 800557c:	681d      	ldr	r5, [r3, #0]
 800557e:	6862      	ldr	r2, [r4, #4]
 8005580:	4628      	mov	r0, r5
 8005582:	f000 f82f 	bl	80055e4 <memchr>
 8005586:	b108      	cbz	r0, 800558c <_printf_i+0x1f4>
 8005588:	1b40      	subs	r0, r0, r5
 800558a:	6060      	str	r0, [r4, #4]
 800558c:	6863      	ldr	r3, [r4, #4]
 800558e:	6123      	str	r3, [r4, #16]
 8005590:	2300      	movs	r3, #0
 8005592:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005596:	e7a8      	b.n	80054ea <_printf_i+0x152>
 8005598:	462a      	mov	r2, r5
 800559a:	4649      	mov	r1, r9
 800559c:	4640      	mov	r0, r8
 800559e:	6923      	ldr	r3, [r4, #16]
 80055a0:	47d0      	blx	sl
 80055a2:	3001      	adds	r0, #1
 80055a4:	d0ab      	beq.n	80054fe <_printf_i+0x166>
 80055a6:	6823      	ldr	r3, [r4, #0]
 80055a8:	079b      	lsls	r3, r3, #30
 80055aa:	d413      	bmi.n	80055d4 <_printf_i+0x23c>
 80055ac:	68e0      	ldr	r0, [r4, #12]
 80055ae:	9b03      	ldr	r3, [sp, #12]
 80055b0:	4298      	cmp	r0, r3
 80055b2:	bfb8      	it	lt
 80055b4:	4618      	movlt	r0, r3
 80055b6:	e7a4      	b.n	8005502 <_printf_i+0x16a>
 80055b8:	2301      	movs	r3, #1
 80055ba:	4632      	mov	r2, r6
 80055bc:	4649      	mov	r1, r9
 80055be:	4640      	mov	r0, r8
 80055c0:	47d0      	blx	sl
 80055c2:	3001      	adds	r0, #1
 80055c4:	d09b      	beq.n	80054fe <_printf_i+0x166>
 80055c6:	3501      	adds	r5, #1
 80055c8:	68e3      	ldr	r3, [r4, #12]
 80055ca:	9903      	ldr	r1, [sp, #12]
 80055cc:	1a5b      	subs	r3, r3, r1
 80055ce:	42ab      	cmp	r3, r5
 80055d0:	dcf2      	bgt.n	80055b8 <_printf_i+0x220>
 80055d2:	e7eb      	b.n	80055ac <_printf_i+0x214>
 80055d4:	2500      	movs	r5, #0
 80055d6:	f104 0619 	add.w	r6, r4, #25
 80055da:	e7f5      	b.n	80055c8 <_printf_i+0x230>
 80055dc:	0800592b 	.word	0x0800592b
 80055e0:	0800593c 	.word	0x0800593c

080055e4 <memchr>:
 80055e4:	4603      	mov	r3, r0
 80055e6:	b510      	push	{r4, lr}
 80055e8:	b2c9      	uxtb	r1, r1
 80055ea:	4402      	add	r2, r0
 80055ec:	4293      	cmp	r3, r2
 80055ee:	4618      	mov	r0, r3
 80055f0:	d101      	bne.n	80055f6 <memchr+0x12>
 80055f2:	2000      	movs	r0, #0
 80055f4:	e003      	b.n	80055fe <memchr+0x1a>
 80055f6:	7804      	ldrb	r4, [r0, #0]
 80055f8:	3301      	adds	r3, #1
 80055fa:	428c      	cmp	r4, r1
 80055fc:	d1f6      	bne.n	80055ec <memchr+0x8>
 80055fe:	bd10      	pop	{r4, pc}

08005600 <memcpy>:
 8005600:	440a      	add	r2, r1
 8005602:	4291      	cmp	r1, r2
 8005604:	f100 33ff 	add.w	r3, r0, #4294967295
 8005608:	d100      	bne.n	800560c <memcpy+0xc>
 800560a:	4770      	bx	lr
 800560c:	b510      	push	{r4, lr}
 800560e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005612:	4291      	cmp	r1, r2
 8005614:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005618:	d1f9      	bne.n	800560e <memcpy+0xe>
 800561a:	bd10      	pop	{r4, pc}

0800561c <memmove>:
 800561c:	4288      	cmp	r0, r1
 800561e:	b510      	push	{r4, lr}
 8005620:	eb01 0402 	add.w	r4, r1, r2
 8005624:	d902      	bls.n	800562c <memmove+0x10>
 8005626:	4284      	cmp	r4, r0
 8005628:	4623      	mov	r3, r4
 800562a:	d807      	bhi.n	800563c <memmove+0x20>
 800562c:	1e43      	subs	r3, r0, #1
 800562e:	42a1      	cmp	r1, r4
 8005630:	d008      	beq.n	8005644 <memmove+0x28>
 8005632:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005636:	f803 2f01 	strb.w	r2, [r3, #1]!
 800563a:	e7f8      	b.n	800562e <memmove+0x12>
 800563c:	4601      	mov	r1, r0
 800563e:	4402      	add	r2, r0
 8005640:	428a      	cmp	r2, r1
 8005642:	d100      	bne.n	8005646 <memmove+0x2a>
 8005644:	bd10      	pop	{r4, pc}
 8005646:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800564a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800564e:	e7f7      	b.n	8005640 <memmove+0x24>

08005650 <_free_r>:
 8005650:	b538      	push	{r3, r4, r5, lr}
 8005652:	4605      	mov	r5, r0
 8005654:	2900      	cmp	r1, #0
 8005656:	d040      	beq.n	80056da <_free_r+0x8a>
 8005658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800565c:	1f0c      	subs	r4, r1, #4
 800565e:	2b00      	cmp	r3, #0
 8005660:	bfb8      	it	lt
 8005662:	18e4      	addlt	r4, r4, r3
 8005664:	f000 f910 	bl	8005888 <__malloc_lock>
 8005668:	4a1c      	ldr	r2, [pc, #112]	; (80056dc <_free_r+0x8c>)
 800566a:	6813      	ldr	r3, [r2, #0]
 800566c:	b933      	cbnz	r3, 800567c <_free_r+0x2c>
 800566e:	6063      	str	r3, [r4, #4]
 8005670:	6014      	str	r4, [r2, #0]
 8005672:	4628      	mov	r0, r5
 8005674:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005678:	f000 b90c 	b.w	8005894 <__malloc_unlock>
 800567c:	42a3      	cmp	r3, r4
 800567e:	d908      	bls.n	8005692 <_free_r+0x42>
 8005680:	6820      	ldr	r0, [r4, #0]
 8005682:	1821      	adds	r1, r4, r0
 8005684:	428b      	cmp	r3, r1
 8005686:	bf01      	itttt	eq
 8005688:	6819      	ldreq	r1, [r3, #0]
 800568a:	685b      	ldreq	r3, [r3, #4]
 800568c:	1809      	addeq	r1, r1, r0
 800568e:	6021      	streq	r1, [r4, #0]
 8005690:	e7ed      	b.n	800566e <_free_r+0x1e>
 8005692:	461a      	mov	r2, r3
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	b10b      	cbz	r3, 800569c <_free_r+0x4c>
 8005698:	42a3      	cmp	r3, r4
 800569a:	d9fa      	bls.n	8005692 <_free_r+0x42>
 800569c:	6811      	ldr	r1, [r2, #0]
 800569e:	1850      	adds	r0, r2, r1
 80056a0:	42a0      	cmp	r0, r4
 80056a2:	d10b      	bne.n	80056bc <_free_r+0x6c>
 80056a4:	6820      	ldr	r0, [r4, #0]
 80056a6:	4401      	add	r1, r0
 80056a8:	1850      	adds	r0, r2, r1
 80056aa:	4283      	cmp	r3, r0
 80056ac:	6011      	str	r1, [r2, #0]
 80056ae:	d1e0      	bne.n	8005672 <_free_r+0x22>
 80056b0:	6818      	ldr	r0, [r3, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	4401      	add	r1, r0
 80056b6:	6011      	str	r1, [r2, #0]
 80056b8:	6053      	str	r3, [r2, #4]
 80056ba:	e7da      	b.n	8005672 <_free_r+0x22>
 80056bc:	d902      	bls.n	80056c4 <_free_r+0x74>
 80056be:	230c      	movs	r3, #12
 80056c0:	602b      	str	r3, [r5, #0]
 80056c2:	e7d6      	b.n	8005672 <_free_r+0x22>
 80056c4:	6820      	ldr	r0, [r4, #0]
 80056c6:	1821      	adds	r1, r4, r0
 80056c8:	428b      	cmp	r3, r1
 80056ca:	bf01      	itttt	eq
 80056cc:	6819      	ldreq	r1, [r3, #0]
 80056ce:	685b      	ldreq	r3, [r3, #4]
 80056d0:	1809      	addeq	r1, r1, r0
 80056d2:	6021      	streq	r1, [r4, #0]
 80056d4:	6063      	str	r3, [r4, #4]
 80056d6:	6054      	str	r4, [r2, #4]
 80056d8:	e7cb      	b.n	8005672 <_free_r+0x22>
 80056da:	bd38      	pop	{r3, r4, r5, pc}
 80056dc:	20000208 	.word	0x20000208

080056e0 <sbrk_aligned>:
 80056e0:	b570      	push	{r4, r5, r6, lr}
 80056e2:	4e0e      	ldr	r6, [pc, #56]	; (800571c <sbrk_aligned+0x3c>)
 80056e4:	460c      	mov	r4, r1
 80056e6:	6831      	ldr	r1, [r6, #0]
 80056e8:	4605      	mov	r5, r0
 80056ea:	b911      	cbnz	r1, 80056f2 <sbrk_aligned+0x12>
 80056ec:	f000 f8bc 	bl	8005868 <_sbrk_r>
 80056f0:	6030      	str	r0, [r6, #0]
 80056f2:	4621      	mov	r1, r4
 80056f4:	4628      	mov	r0, r5
 80056f6:	f000 f8b7 	bl	8005868 <_sbrk_r>
 80056fa:	1c43      	adds	r3, r0, #1
 80056fc:	d00a      	beq.n	8005714 <sbrk_aligned+0x34>
 80056fe:	1cc4      	adds	r4, r0, #3
 8005700:	f024 0403 	bic.w	r4, r4, #3
 8005704:	42a0      	cmp	r0, r4
 8005706:	d007      	beq.n	8005718 <sbrk_aligned+0x38>
 8005708:	1a21      	subs	r1, r4, r0
 800570a:	4628      	mov	r0, r5
 800570c:	f000 f8ac 	bl	8005868 <_sbrk_r>
 8005710:	3001      	adds	r0, #1
 8005712:	d101      	bne.n	8005718 <sbrk_aligned+0x38>
 8005714:	f04f 34ff 	mov.w	r4, #4294967295
 8005718:	4620      	mov	r0, r4
 800571a:	bd70      	pop	{r4, r5, r6, pc}
 800571c:	2000020c 	.word	0x2000020c

08005720 <_malloc_r>:
 8005720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005724:	1ccd      	adds	r5, r1, #3
 8005726:	f025 0503 	bic.w	r5, r5, #3
 800572a:	3508      	adds	r5, #8
 800572c:	2d0c      	cmp	r5, #12
 800572e:	bf38      	it	cc
 8005730:	250c      	movcc	r5, #12
 8005732:	2d00      	cmp	r5, #0
 8005734:	4607      	mov	r7, r0
 8005736:	db01      	blt.n	800573c <_malloc_r+0x1c>
 8005738:	42a9      	cmp	r1, r5
 800573a:	d905      	bls.n	8005748 <_malloc_r+0x28>
 800573c:	230c      	movs	r3, #12
 800573e:	2600      	movs	r6, #0
 8005740:	603b      	str	r3, [r7, #0]
 8005742:	4630      	mov	r0, r6
 8005744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005748:	4e2e      	ldr	r6, [pc, #184]	; (8005804 <_malloc_r+0xe4>)
 800574a:	f000 f89d 	bl	8005888 <__malloc_lock>
 800574e:	6833      	ldr	r3, [r6, #0]
 8005750:	461c      	mov	r4, r3
 8005752:	bb34      	cbnz	r4, 80057a2 <_malloc_r+0x82>
 8005754:	4629      	mov	r1, r5
 8005756:	4638      	mov	r0, r7
 8005758:	f7ff ffc2 	bl	80056e0 <sbrk_aligned>
 800575c:	1c43      	adds	r3, r0, #1
 800575e:	4604      	mov	r4, r0
 8005760:	d14d      	bne.n	80057fe <_malloc_r+0xde>
 8005762:	6834      	ldr	r4, [r6, #0]
 8005764:	4626      	mov	r6, r4
 8005766:	2e00      	cmp	r6, #0
 8005768:	d140      	bne.n	80057ec <_malloc_r+0xcc>
 800576a:	6823      	ldr	r3, [r4, #0]
 800576c:	4631      	mov	r1, r6
 800576e:	4638      	mov	r0, r7
 8005770:	eb04 0803 	add.w	r8, r4, r3
 8005774:	f000 f878 	bl	8005868 <_sbrk_r>
 8005778:	4580      	cmp	r8, r0
 800577a:	d13a      	bne.n	80057f2 <_malloc_r+0xd2>
 800577c:	6821      	ldr	r1, [r4, #0]
 800577e:	3503      	adds	r5, #3
 8005780:	1a6d      	subs	r5, r5, r1
 8005782:	f025 0503 	bic.w	r5, r5, #3
 8005786:	3508      	adds	r5, #8
 8005788:	2d0c      	cmp	r5, #12
 800578a:	bf38      	it	cc
 800578c:	250c      	movcc	r5, #12
 800578e:	4638      	mov	r0, r7
 8005790:	4629      	mov	r1, r5
 8005792:	f7ff ffa5 	bl	80056e0 <sbrk_aligned>
 8005796:	3001      	adds	r0, #1
 8005798:	d02b      	beq.n	80057f2 <_malloc_r+0xd2>
 800579a:	6823      	ldr	r3, [r4, #0]
 800579c:	442b      	add	r3, r5
 800579e:	6023      	str	r3, [r4, #0]
 80057a0:	e00e      	b.n	80057c0 <_malloc_r+0xa0>
 80057a2:	6822      	ldr	r2, [r4, #0]
 80057a4:	1b52      	subs	r2, r2, r5
 80057a6:	d41e      	bmi.n	80057e6 <_malloc_r+0xc6>
 80057a8:	2a0b      	cmp	r2, #11
 80057aa:	d916      	bls.n	80057da <_malloc_r+0xba>
 80057ac:	1961      	adds	r1, r4, r5
 80057ae:	42a3      	cmp	r3, r4
 80057b0:	6025      	str	r5, [r4, #0]
 80057b2:	bf18      	it	ne
 80057b4:	6059      	strne	r1, [r3, #4]
 80057b6:	6863      	ldr	r3, [r4, #4]
 80057b8:	bf08      	it	eq
 80057ba:	6031      	streq	r1, [r6, #0]
 80057bc:	5162      	str	r2, [r4, r5]
 80057be:	604b      	str	r3, [r1, #4]
 80057c0:	4638      	mov	r0, r7
 80057c2:	f104 060b 	add.w	r6, r4, #11
 80057c6:	f000 f865 	bl	8005894 <__malloc_unlock>
 80057ca:	f026 0607 	bic.w	r6, r6, #7
 80057ce:	1d23      	adds	r3, r4, #4
 80057d0:	1af2      	subs	r2, r6, r3
 80057d2:	d0b6      	beq.n	8005742 <_malloc_r+0x22>
 80057d4:	1b9b      	subs	r3, r3, r6
 80057d6:	50a3      	str	r3, [r4, r2]
 80057d8:	e7b3      	b.n	8005742 <_malloc_r+0x22>
 80057da:	6862      	ldr	r2, [r4, #4]
 80057dc:	42a3      	cmp	r3, r4
 80057de:	bf0c      	ite	eq
 80057e0:	6032      	streq	r2, [r6, #0]
 80057e2:	605a      	strne	r2, [r3, #4]
 80057e4:	e7ec      	b.n	80057c0 <_malloc_r+0xa0>
 80057e6:	4623      	mov	r3, r4
 80057e8:	6864      	ldr	r4, [r4, #4]
 80057ea:	e7b2      	b.n	8005752 <_malloc_r+0x32>
 80057ec:	4634      	mov	r4, r6
 80057ee:	6876      	ldr	r6, [r6, #4]
 80057f0:	e7b9      	b.n	8005766 <_malloc_r+0x46>
 80057f2:	230c      	movs	r3, #12
 80057f4:	4638      	mov	r0, r7
 80057f6:	603b      	str	r3, [r7, #0]
 80057f8:	f000 f84c 	bl	8005894 <__malloc_unlock>
 80057fc:	e7a1      	b.n	8005742 <_malloc_r+0x22>
 80057fe:	6025      	str	r5, [r4, #0]
 8005800:	e7de      	b.n	80057c0 <_malloc_r+0xa0>
 8005802:	bf00      	nop
 8005804:	20000208 	.word	0x20000208

08005808 <_realloc_r>:
 8005808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800580c:	4680      	mov	r8, r0
 800580e:	4614      	mov	r4, r2
 8005810:	460e      	mov	r6, r1
 8005812:	b921      	cbnz	r1, 800581e <_realloc_r+0x16>
 8005814:	4611      	mov	r1, r2
 8005816:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800581a:	f7ff bf81 	b.w	8005720 <_malloc_r>
 800581e:	b92a      	cbnz	r2, 800582c <_realloc_r+0x24>
 8005820:	f7ff ff16 	bl	8005650 <_free_r>
 8005824:	4625      	mov	r5, r4
 8005826:	4628      	mov	r0, r5
 8005828:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800582c:	f000 f838 	bl	80058a0 <_malloc_usable_size_r>
 8005830:	4284      	cmp	r4, r0
 8005832:	4607      	mov	r7, r0
 8005834:	d802      	bhi.n	800583c <_realloc_r+0x34>
 8005836:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800583a:	d812      	bhi.n	8005862 <_realloc_r+0x5a>
 800583c:	4621      	mov	r1, r4
 800583e:	4640      	mov	r0, r8
 8005840:	f7ff ff6e 	bl	8005720 <_malloc_r>
 8005844:	4605      	mov	r5, r0
 8005846:	2800      	cmp	r0, #0
 8005848:	d0ed      	beq.n	8005826 <_realloc_r+0x1e>
 800584a:	42bc      	cmp	r4, r7
 800584c:	4622      	mov	r2, r4
 800584e:	4631      	mov	r1, r6
 8005850:	bf28      	it	cs
 8005852:	463a      	movcs	r2, r7
 8005854:	f7ff fed4 	bl	8005600 <memcpy>
 8005858:	4631      	mov	r1, r6
 800585a:	4640      	mov	r0, r8
 800585c:	f7ff fef8 	bl	8005650 <_free_r>
 8005860:	e7e1      	b.n	8005826 <_realloc_r+0x1e>
 8005862:	4635      	mov	r5, r6
 8005864:	e7df      	b.n	8005826 <_realloc_r+0x1e>
	...

08005868 <_sbrk_r>:
 8005868:	b538      	push	{r3, r4, r5, lr}
 800586a:	2300      	movs	r3, #0
 800586c:	4d05      	ldr	r5, [pc, #20]	; (8005884 <_sbrk_r+0x1c>)
 800586e:	4604      	mov	r4, r0
 8005870:	4608      	mov	r0, r1
 8005872:	602b      	str	r3, [r5, #0]
 8005874:	f7fb fa7a 	bl	8000d6c <_sbrk>
 8005878:	1c43      	adds	r3, r0, #1
 800587a:	d102      	bne.n	8005882 <_sbrk_r+0x1a>
 800587c:	682b      	ldr	r3, [r5, #0]
 800587e:	b103      	cbz	r3, 8005882 <_sbrk_r+0x1a>
 8005880:	6023      	str	r3, [r4, #0]
 8005882:	bd38      	pop	{r3, r4, r5, pc}
 8005884:	20000210 	.word	0x20000210

08005888 <__malloc_lock>:
 8005888:	4801      	ldr	r0, [pc, #4]	; (8005890 <__malloc_lock+0x8>)
 800588a:	f000 b811 	b.w	80058b0 <__retarget_lock_acquire_recursive>
 800588e:	bf00      	nop
 8005890:	20000214 	.word	0x20000214

08005894 <__malloc_unlock>:
 8005894:	4801      	ldr	r0, [pc, #4]	; (800589c <__malloc_unlock+0x8>)
 8005896:	f000 b80c 	b.w	80058b2 <__retarget_lock_release_recursive>
 800589a:	bf00      	nop
 800589c:	20000214 	.word	0x20000214

080058a0 <_malloc_usable_size_r>:
 80058a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058a4:	1f18      	subs	r0, r3, #4
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	bfbc      	itt	lt
 80058aa:	580b      	ldrlt	r3, [r1, r0]
 80058ac:	18c0      	addlt	r0, r0, r3
 80058ae:	4770      	bx	lr

080058b0 <__retarget_lock_acquire_recursive>:
 80058b0:	4770      	bx	lr

080058b2 <__retarget_lock_release_recursive>:
 80058b2:	4770      	bx	lr

080058b4 <_init>:
 80058b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058b6:	bf00      	nop
 80058b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058ba:	bc08      	pop	{r3}
 80058bc:	469e      	mov	lr, r3
 80058be:	4770      	bx	lr

080058c0 <_fini>:
 80058c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058c2:	bf00      	nop
 80058c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058c6:	bc08      	pop	{r3}
 80058c8:	469e      	mov	lr, r3
 80058ca:	4770      	bx	lr
