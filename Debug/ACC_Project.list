
ACC_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004034  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08004140  08004140  00014140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041c4  080041c4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080041c4  080041c4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041c4  080041c4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041c4  080041c4  000141c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041c8  080041c8  000141c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080041cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000074  08004240  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08004240  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001016a  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002653  00000000  00000000  00030207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  00032860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d78  00000000  00000000  000336b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001884d  00000000  00000000  00034430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000115ca  00000000  00000000  0004cc7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a056  00000000  00000000  0005e247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e829d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f94  00000000  00000000  000e82f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08004128 	.word	0x08004128

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08004128 	.word	0x08004128

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <update_ACC_data>:

ACC_SETTING	ACC_set = ACC_SETTING_DEFAULT;
OUT_DATA	OUT 	= OUT_DATA_XYZ_DEFAULT;
extern RS_DATA_STRUCT	rs;

void update_ACC_data(I2C_HandleTypeDef *i2c){
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af04      	add	r7, sp, #16
 8000162:	6078      	str	r0, [r7, #4]

	uint8_t		command[1];

	HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_STATUS_REG, 1, &command[0], 1, 10);		//Обнвляем статус регистров
 8000164:	230a      	movs	r3, #10
 8000166:	9302      	str	r3, [sp, #8]
 8000168:	2301      	movs	r3, #1
 800016a:	9301      	str	r3, [sp, #4]
 800016c:	f107 030c 	add.w	r3, r7, #12
 8000170:	9300      	str	r3, [sp, #0]
 8000172:	2301      	movs	r3, #1
 8000174:	2227      	movs	r2, #39	; 0x27
 8000176:	2130      	movs	r1, #48	; 0x30
 8000178:	6878      	ldr	r0, [r7, #4]
 800017a:	f001 fc89 	bl	8001a90 <HAL_I2C_Mem_Read>
	ACC_set.STATUS_REG.all = command[0];
 800017e:	7b3a      	ldrb	r2, [r7, #12]
 8000180:	4b0c      	ldr	r3, [pc, #48]	; (80001b4 <update_ACC_data+0x58>)
 8000182:	70da      	strb	r2, [r3, #3]

	if(rs.RS_DataSended && ACC_set.STATUS_REG.bit.ZYXDA){
 8000184:	4b0c      	ldr	r3, [pc, #48]	; (80001b8 <update_ACC_data+0x5c>)
 8000186:	685b      	ldr	r3, [r3, #4]
 8000188:	2b00      	cmp	r3, #0
 800018a:	d00f      	beq.n	80001ac <update_ACC_data+0x50>
 800018c:	4b09      	ldr	r3, [pc, #36]	; (80001b4 <update_ACC_data+0x58>)
 800018e:	78db      	ldrb	r3, [r3, #3]
 8000190:	f003 0308 	and.w	r3, r3, #8
 8000194:	b2db      	uxtb	r3, r3
 8000196:	2b00      	cmp	r3, #0
 8000198:	d008      	beq.n	80001ac <update_ACC_data+0x50>
		read_x_axis(i2c);
 800019a:	6878      	ldr	r0, [r7, #4]
 800019c:	f000 f80e 	bl	80001bc <read_x_axis>
		read_y_axis(i2c);
 80001a0:	6878      	ldr	r0, [r7, #4]
 80001a2:	f000 f84b 	bl	800023c <read_y_axis>
		read_z_axis(i2c);
 80001a6:	6878      	ldr	r0, [r7, #4]
 80001a8:	f000 f888 	bl	80002bc <read_z_axis>
	}
}
 80001ac:	bf00      	nop
 80001ae:	3710      	adds	r7, #16
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	20000000 	.word	0x20000000
 80001b8:	20000098 	.word	0x20000098

080001bc <read_x_axis>:
    HAL_I2C_Mem_Read(i2c, address, COMMAND_CTRL_REG2, 1, &command_arr[1], 1, 50);
    HAL_I2C_Mem_Read(i2c, address, COMMAND_CTRL_REG4, 1, &command_arr[2], 1, 50);
}


void read_x_axis(I2C_HandleTypeDef *i2c){
 80001bc:	b580      	push	{r7, lr}
 80001be:	b088      	sub	sp, #32
 80001c0:	af04      	add	r7, sp, #16
 80001c2:	6078      	str	r0, [r7, #4]

    uint8_t data_LO_RX[1], data_HI_RX[1];

    if(ACC_set.STATUS_REG.bit.XOR || ACC_set.STATUS_REG.bit.XDA){
 80001c4:	4b1a      	ldr	r3, [pc, #104]	; (8000230 <read_x_axis+0x74>)
 80001c6:	78db      	ldrb	r3, [r3, #3]
 80001c8:	f003 0310 	and.w	r3, r3, #16
 80001cc:	b2db      	uxtb	r3, r3
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d106      	bne.n	80001e0 <read_x_axis+0x24>
 80001d2:	4b17      	ldr	r3, [pc, #92]	; (8000230 <read_x_axis+0x74>)
 80001d4:	78db      	ldrb	r3, [r3, #3]
 80001d6:	f003 0301 	and.w	r3, r3, #1
 80001da:	b2db      	uxtb	r3, r3
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d022      	beq.n	8000226 <read_x_axis+0x6a>

		HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_X_HI, 1, &data_HI_RX[0], 1, 10);		//Считали данные с регистра и записали в структуру
 80001e0:	230a      	movs	r3, #10
 80001e2:	9302      	str	r3, [sp, #8]
 80001e4:	2301      	movs	r3, #1
 80001e6:	9301      	str	r3, [sp, #4]
 80001e8:	f107 0308 	add.w	r3, r7, #8
 80001ec:	9300      	str	r3, [sp, #0]
 80001ee:	2301      	movs	r3, #1
 80001f0:	2229      	movs	r2, #41	; 0x29
 80001f2:	2130      	movs	r1, #48	; 0x30
 80001f4:	6878      	ldr	r0, [r7, #4]
 80001f6:	f001 fc4b 	bl	8001a90 <HAL_I2C_Mem_Read>
		OUT.X.bit.HI = data_HI_RX[0] & 0xff;
 80001fa:	7a3a      	ldrb	r2, [r7, #8]
 80001fc:	4b0d      	ldr	r3, [pc, #52]	; (8000234 <read_x_axis+0x78>)
 80001fe:	705a      	strb	r2, [r3, #1]

		HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_X_LO, 1, &data_LO_RX[0], 1, 10);
 8000200:	230a      	movs	r3, #10
 8000202:	9302      	str	r3, [sp, #8]
 8000204:	2301      	movs	r3, #1
 8000206:	9301      	str	r3, [sp, #4]
 8000208:	f107 030c 	add.w	r3, r7, #12
 800020c:	9300      	str	r3, [sp, #0]
 800020e:	2301      	movs	r3, #1
 8000210:	2228      	movs	r2, #40	; 0x28
 8000212:	2130      	movs	r1, #48	; 0x30
 8000214:	6878      	ldr	r0, [r7, #4]
 8000216:	f001 fc3b 	bl	8001a90 <HAL_I2C_Mem_Read>
		OUT.X.bit.LO = data_LO_RX[0] & 0xff;
 800021a:	7b3a      	ldrb	r2, [r7, #12]
 800021c:	4b05      	ldr	r3, [pc, #20]	; (8000234 <read_x_axis+0x78>)
 800021e:	701a      	strb	r2, [r3, #0]

		rs.RS_X_axis_data = 1;															//Данные готовы к отправке
 8000220:	4b05      	ldr	r3, [pc, #20]	; (8000238 <read_x_axis+0x7c>)
 8000222:	2201      	movs	r2, #1
 8000224:	609a      	str	r2, [r3, #8]
	}
}
 8000226:	bf00      	nop
 8000228:	3710      	adds	r7, #16
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	20000000 	.word	0x20000000
 8000234:	20000090 	.word	0x20000090
 8000238:	20000098 	.word	0x20000098

0800023c <read_y_axis>:


void read_y_axis(I2C_HandleTypeDef *i2c){
 800023c:	b580      	push	{r7, lr}
 800023e:	b088      	sub	sp, #32
 8000240:	af04      	add	r7, sp, #16
 8000242:	6078      	str	r0, [r7, #4]

    uint8_t data_LO_RX[1], data_HI_RX[1];

    if(ACC_set.STATUS_REG.bit.YOR || ACC_set.STATUS_REG.bit.YDA){
 8000244:	4b1a      	ldr	r3, [pc, #104]	; (80002b0 <read_y_axis+0x74>)
 8000246:	78db      	ldrb	r3, [r3, #3]
 8000248:	f003 0320 	and.w	r3, r3, #32
 800024c:	b2db      	uxtb	r3, r3
 800024e:	2b00      	cmp	r3, #0
 8000250:	d106      	bne.n	8000260 <read_y_axis+0x24>
 8000252:	4b17      	ldr	r3, [pc, #92]	; (80002b0 <read_y_axis+0x74>)
 8000254:	78db      	ldrb	r3, [r3, #3]
 8000256:	f003 0302 	and.w	r3, r3, #2
 800025a:	b2db      	uxtb	r3, r3
 800025c:	2b00      	cmp	r3, #0
 800025e:	d022      	beq.n	80002a6 <read_y_axis+0x6a>

		HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_Y_HI, 1, &data_HI_RX[0], 1, 10);
 8000260:	230a      	movs	r3, #10
 8000262:	9302      	str	r3, [sp, #8]
 8000264:	2301      	movs	r3, #1
 8000266:	9301      	str	r3, [sp, #4]
 8000268:	f107 0308 	add.w	r3, r7, #8
 800026c:	9300      	str	r3, [sp, #0]
 800026e:	2301      	movs	r3, #1
 8000270:	222b      	movs	r2, #43	; 0x2b
 8000272:	2130      	movs	r1, #48	; 0x30
 8000274:	6878      	ldr	r0, [r7, #4]
 8000276:	f001 fc0b 	bl	8001a90 <HAL_I2C_Mem_Read>
		OUT.Y.bit.HI = data_HI_RX[0] & 0xff;
 800027a:	7a3a      	ldrb	r2, [r7, #8]
 800027c:	4b0d      	ldr	r3, [pc, #52]	; (80002b4 <read_y_axis+0x78>)
 800027e:	70da      	strb	r2, [r3, #3]

		HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_Y_LO, 1, &data_LO_RX[0], 1, 10);
 8000280:	230a      	movs	r3, #10
 8000282:	9302      	str	r3, [sp, #8]
 8000284:	2301      	movs	r3, #1
 8000286:	9301      	str	r3, [sp, #4]
 8000288:	f107 030c 	add.w	r3, r7, #12
 800028c:	9300      	str	r3, [sp, #0]
 800028e:	2301      	movs	r3, #1
 8000290:	222a      	movs	r2, #42	; 0x2a
 8000292:	2130      	movs	r1, #48	; 0x30
 8000294:	6878      	ldr	r0, [r7, #4]
 8000296:	f001 fbfb 	bl	8001a90 <HAL_I2C_Mem_Read>
		OUT.Y.bit.LO = data_LO_RX[0] & 0xff;
 800029a:	7b3a      	ldrb	r2, [r7, #12]
 800029c:	4b05      	ldr	r3, [pc, #20]	; (80002b4 <read_y_axis+0x78>)
 800029e:	709a      	strb	r2, [r3, #2]

	    rs.RS_Y_axis_data = 1;
 80002a0:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <read_y_axis+0x7c>)
 80002a2:	2201      	movs	r2, #1
 80002a4:	60da      	str	r2, [r3, #12]
    }

}
 80002a6:	bf00      	nop
 80002a8:	3710      	adds	r7, #16
 80002aa:	46bd      	mov	sp, r7
 80002ac:	bd80      	pop	{r7, pc}
 80002ae:	bf00      	nop
 80002b0:	20000000 	.word	0x20000000
 80002b4:	20000090 	.word	0x20000090
 80002b8:	20000098 	.word	0x20000098

080002bc <read_z_axis>:


void read_z_axis(I2C_HandleTypeDef *i2c){
 80002bc:	b580      	push	{r7, lr}
 80002be:	b088      	sub	sp, #32
 80002c0:	af04      	add	r7, sp, #16
 80002c2:	6078      	str	r0, [r7, #4]

    uint8_t data_LO_RX[1], data_HI_RX[1];
    if(ACC_set.STATUS_REG.bit.ZOR || ACC_set.STATUS_REG.bit.ZDA){
 80002c4:	4b21      	ldr	r3, [pc, #132]	; (800034c <read_z_axis+0x90>)
 80002c6:	78db      	ldrb	r3, [r3, #3]
 80002c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d106      	bne.n	80002e0 <read_z_axis+0x24>
 80002d2:	4b1e      	ldr	r3, [pc, #120]	; (800034c <read_z_axis+0x90>)
 80002d4:	78db      	ldrb	r3, [r3, #3]
 80002d6:	f003 0304 	and.w	r3, r3, #4
 80002da:	b2db      	uxtb	r3, r3
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d022      	beq.n	8000326 <read_z_axis+0x6a>

		HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_Z_HI, 1, &data_HI_RX[0], 1, 10);
 80002e0:	230a      	movs	r3, #10
 80002e2:	9302      	str	r3, [sp, #8]
 80002e4:	2301      	movs	r3, #1
 80002e6:	9301      	str	r3, [sp, #4]
 80002e8:	f107 0308 	add.w	r3, r7, #8
 80002ec:	9300      	str	r3, [sp, #0]
 80002ee:	2301      	movs	r3, #1
 80002f0:	222d      	movs	r2, #45	; 0x2d
 80002f2:	2130      	movs	r1, #48	; 0x30
 80002f4:	6878      	ldr	r0, [r7, #4]
 80002f6:	f001 fbcb 	bl	8001a90 <HAL_I2C_Mem_Read>
		OUT.Z.bit.HI = data_HI_RX[0] & 0xff;
 80002fa:	7a3a      	ldrb	r2, [r7, #8]
 80002fc:	4b14      	ldr	r3, [pc, #80]	; (8000350 <read_z_axis+0x94>)
 80002fe:	715a      	strb	r2, [r3, #5]

		HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_Z_LO, 1, &data_LO_RX[0], 1, 10);
 8000300:	230a      	movs	r3, #10
 8000302:	9302      	str	r3, [sp, #8]
 8000304:	2301      	movs	r3, #1
 8000306:	9301      	str	r3, [sp, #4]
 8000308:	f107 030c 	add.w	r3, r7, #12
 800030c:	9300      	str	r3, [sp, #0]
 800030e:	2301      	movs	r3, #1
 8000310:	222c      	movs	r2, #44	; 0x2c
 8000312:	2130      	movs	r1, #48	; 0x30
 8000314:	6878      	ldr	r0, [r7, #4]
 8000316:	f001 fbbb 	bl	8001a90 <HAL_I2C_Mem_Read>
		OUT.Z.bit.LO = data_LO_RX[0] & 0xff;
 800031a:	7b3a      	ldrb	r2, [r7, #12]
 800031c:	4b0c      	ldr	r3, [pc, #48]	; (8000350 <read_z_axis+0x94>)
 800031e:	711a      	strb	r2, [r3, #4]

		rs.RS_Z_axis_data = 1;
 8000320:	4b0c      	ldr	r3, [pc, #48]	; (8000354 <read_z_axis+0x98>)
 8000322:	2201      	movs	r2, #1
 8000324:	611a      	str	r2, [r3, #16]
    }

    if(rs.RS_Z_axis_data && rs.RS_X_axis_data && rs.RS_Y_axis_data)
 8000326:	4b0b      	ldr	r3, [pc, #44]	; (8000354 <read_z_axis+0x98>)
 8000328:	691b      	ldr	r3, [r3, #16]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d00a      	beq.n	8000344 <read_z_axis+0x88>
 800032e:	4b09      	ldr	r3, [pc, #36]	; (8000354 <read_z_axis+0x98>)
 8000330:	689b      	ldr	r3, [r3, #8]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d006      	beq.n	8000344 <read_z_axis+0x88>
 8000336:	4b07      	ldr	r3, [pc, #28]	; (8000354 <read_z_axis+0x98>)
 8000338:	68db      	ldr	r3, [r3, #12]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d002      	beq.n	8000344 <read_z_axis+0x88>
    	rs.RS_DataReady = 1;
 800033e:	4b05      	ldr	r3, [pc, #20]	; (8000354 <read_z_axis+0x98>)
 8000340:	2201      	movs	r2, #1
 8000342:	601a      	str	r2, [r3, #0]

}
 8000344:	bf00      	nop
 8000346:	3710      	adds	r7, #16
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	20000000 	.word	0x20000000
 8000350:	20000090 	.word	0x20000090
 8000354:	20000098 	.word	0x20000098

08000358 <MCP2515_Initialize>:
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);


/* MCP2515 초기화 */
bool MCP2515_Initialize(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();
 800035e:	2201      	movs	r2, #1
 8000360:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000364:	480b      	ldr	r0, [pc, #44]	; (8000394 <MCP2515_Initialize+0x3c>)
 8000366:	f001 fa37 	bl	80017d8 <HAL_GPIO_WritePin>

  uint8_t loop = 10;
 800036a:	230a      	movs	r3, #10
 800036c:	71fb      	strb	r3, [r7, #7]

  do {
    /* SPI Ready 확인 */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 800036e:	480a      	ldr	r0, [pc, #40]	; (8000398 <MCP2515_Initialize+0x40>)
 8000370:	f002 ffa0 	bl	80032b4 <HAL_SPI_GetState>
 8000374:	4603      	mov	r3, r0
 8000376:	2b01      	cmp	r3, #1
 8000378:	d101      	bne.n	800037e <MCP2515_Initialize+0x26>
      return true;
 800037a:	2301      	movs	r3, #1
 800037c:	e006      	b.n	800038c <MCP2515_Initialize+0x34>

    loop--;
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	3b01      	subs	r3, #1
 8000382:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000384:	79fb      	ldrb	r3, [r7, #7]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d1f1      	bne.n	800036e <MCP2515_Initialize+0x16>

  return false;
 800038a:	2300      	movs	r3, #0
}
 800038c:	4618      	mov	r0, r3
 800038e:	3708      	adds	r7, #8
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	40010800 	.word	0x40010800
 8000398:	200001b8 	.word	0x200001b8

0800039c <RS_Send>:
#include "stdio.h"

RS_DATA_STRUCT	rs;
extern OUT_DATA	OUT;

void RS_Send(UART_HandleTypeDef *uart){
 800039c:	b580      	push	{r7, lr}
 800039e:	b092      	sub	sp, #72	; 0x48
 80003a0:	af02      	add	r7, sp, #8
 80003a2:	6078      	str	r0, [r7, #4]

    char			buffer[50]; //44
    HAL_StatusTypeDef	result;

    if(rs.RS_DataReady){
 80003a4:	4b20      	ldr	r3, [pc, #128]	; (8000428 <RS_Send+0x8c>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	d038      	beq.n	800041e <RS_Send+0x82>

		sprintf(buffer, "X_axis: %d\tY_axis: %d\tZ_axis: %d\r\n", (int16_t)OUT.X.all, (int16_t)OUT.Y.all, (int16_t)OUT.Z.all);
 80003ac:	4b1f      	ldr	r3, [pc, #124]	; (800042c <RS_Send+0x90>)
 80003ae:	881b      	ldrh	r3, [r3, #0]
 80003b0:	b21b      	sxth	r3, r3
 80003b2:	461a      	mov	r2, r3
 80003b4:	4b1d      	ldr	r3, [pc, #116]	; (800042c <RS_Send+0x90>)
 80003b6:	885b      	ldrh	r3, [r3, #2]
 80003b8:	b21b      	sxth	r3, r3
 80003ba:	4619      	mov	r1, r3
 80003bc:	4b1b      	ldr	r3, [pc, #108]	; (800042c <RS_Send+0x90>)
 80003be:	889b      	ldrh	r3, [r3, #4]
 80003c0:	b21b      	sxth	r3, r3
 80003c2:	f107 000c 	add.w	r0, r7, #12
 80003c6:	9300      	str	r3, [sp, #0]
 80003c8:	460b      	mov	r3, r1
 80003ca:	4919      	ldr	r1, [pc, #100]	; (8000430 <RS_Send+0x94>)
 80003cc:	f003 fa32 	bl	8003834 <siprintf>

		result = HAL_UART_Transmit(uart, (uint8_t*) buffer, strlen(buffer), 10);
 80003d0:	f107 030c 	add.w	r3, r7, #12
 80003d4:	4618      	mov	r0, r3
 80003d6:	f7ff feb9 	bl	800014c <strlen>
 80003da:	4603      	mov	r3, r0
 80003dc:	b29a      	uxth	r2, r3
 80003de:	f107 010c 	add.w	r1, r7, #12
 80003e2:	230a      	movs	r3, #10
 80003e4:	6878      	ldr	r0, [r7, #4]
 80003e6:	f003 f873 	bl	80034d0 <HAL_UART_Transmit>
 80003ea:	4603      	mov	r3, r0
 80003ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if(result == HAL_OK){
 80003f0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d10f      	bne.n	8000418 <RS_Send+0x7c>

			rs.RS_X_axis_data = 0;
 80003f8:	4b0b      	ldr	r3, [pc, #44]	; (8000428 <RS_Send+0x8c>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	609a      	str	r2, [r3, #8]
			rs.RS_Y_axis_data = 0;
 80003fe:	4b0a      	ldr	r3, [pc, #40]	; (8000428 <RS_Send+0x8c>)
 8000400:	2200      	movs	r2, #0
 8000402:	60da      	str	r2, [r3, #12]
			rs.RS_Z_axis_data = 0;
 8000404:	4b08      	ldr	r3, [pc, #32]	; (8000428 <RS_Send+0x8c>)
 8000406:	2200      	movs	r2, #0
 8000408:	611a      	str	r2, [r3, #16]

			rs.RS_DataSended = 1;
 800040a:	4b07      	ldr	r3, [pc, #28]	; (8000428 <RS_Send+0x8c>)
 800040c:	2201      	movs	r2, #1
 800040e:	605a      	str	r2, [r3, #4]
		    rs.RS_DataReady = 0;
 8000410:	4b05      	ldr	r3, [pc, #20]	; (8000428 <RS_Send+0x8c>)
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
	//HAL_UART_Transmit(uart, (uint8_t*) "\033[0;0H", 6 , 5);
	//HAL_UART_Transmit(uart, (uint8_t*) "\033[2J", 4, 5);

    }

}
 8000416:	e002      	b.n	800041e <RS_Send+0x82>
			rs.RS_DataSended = 0;
 8000418:	4b03      	ldr	r3, [pc, #12]	; (8000428 <RS_Send+0x8c>)
 800041a:	2200      	movs	r2, #0
 800041c:	605a      	str	r2, [r3, #4]
}
 800041e:	bf00      	nop
 8000420:	3740      	adds	r7, #64	; 0x40
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	20000098 	.word	0x20000098
 800042c:	20000090 	.word	0x20000090
 8000430:	08004140 	.word	0x08004140

08000434 <GPIO_init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void GPIO_init(){
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0

    RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;				//Тактирование
 8000438:	4b0d      	ldr	r3, [pc, #52]	; (8000470 <GPIO_init+0x3c>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	4a0c      	ldr	r2, [pc, #48]	; (8000470 <GPIO_init+0x3c>)
 800043e:	f043 0310 	orr.w	r3, r3, #16
 8000442:	6193      	str	r3, [r2, #24]

    GPIOC->CRH &= ~GPIO_CRH_CNF13;				//Oбнуление регистра CNF0/1 = 00
 8000444:	4b0b      	ldr	r3, [pc, #44]	; (8000474 <GPIO_init+0x40>)
 8000446:	685b      	ldr	r3, [r3, #4]
 8000448:	4a0a      	ldr	r2, [pc, #40]	; (8000474 <GPIO_init+0x40>)
 800044a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800044e:	6053      	str	r3, [r2, #4]
    GPIOC->CRH |= GPIO_CRH_MODE13;				//MODE 11 => max 50MHz
 8000450:	4b08      	ldr	r3, [pc, #32]	; (8000474 <GPIO_init+0x40>)
 8000452:	685b      	ldr	r3, [r3, #4]
 8000454:	4a07      	ldr	r2, [pc, #28]	; (8000474 <GPIO_init+0x40>)
 8000456:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800045a:	6053      	str	r3, [r2, #4]
    GPIOC->BSRR |= GPIO_BSRR_BR13;
 800045c:	4b05      	ldr	r3, [pc, #20]	; (8000474 <GPIO_init+0x40>)
 800045e:	691b      	ldr	r3, [r3, #16]
 8000460:	4a04      	ldr	r2, [pc, #16]	; (8000474 <GPIO_init+0x40>)
 8000462:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000466:	6113      	str	r3, [r2, #16]
}
 8000468:	bf00      	nop
 800046a:	46bd      	mov	sp, r7
 800046c:	bc80      	pop	{r7}
 800046e:	4770      	bx	lr
 8000470:	40021000 	.word	0x40021000
 8000474:	40011000 	.word	0x40011000

08000478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800047e:	f000 fc3f 	bl	8000d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000482:	f000 f843 	bl	800050c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000486:	f000 f987 	bl	8000798 <MX_GPIO_Init>
  MX_DMA_Init();
 800048a:	f000 f95f 	bl	800074c <MX_DMA_Init>
  MX_I2C1_Init();
 800048e:	f000 f8cd 	bl	800062c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000492:	f000 f931 	bl	80006f8 <MX_USART1_UART_Init>
  MX_CRC_Init();
 8000496:	f000 f8b5 	bl	8000604 <MX_CRC_Init>
  MX_CAN_Init();
 800049a:	f000 f87d 	bl	8000598 <MX_CAN_Init>
  MX_SPI1_Init();
 800049e:	f000 f8f3 	bl	8000688 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  GPIO_init();
 80004a2:	f7ff ffc7 	bl	8000434 <GPIO_init>
//  ACC_init(&hi2c1);

  if(MCP2515_Initialize() == true){
 80004a6:	f7ff ff57 	bl	8000358 <MCP2515_Initialize>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d01d      	beq.n	80004ec <main+0x74>
  //MCP2515_SetConfigMode();

  uint8_t	TX[2],RX[2];
  HAL_SPI_StateTypeDef res = 0;
 80004b0:	2300      	movs	r3, #0
 80004b2:	71fb      	strb	r3, [r7, #7]

  TX[0] = write & ACC_ADDR;
 80004b4:	2310      	movs	r3, #16
 80004b6:	713b      	strb	r3, [r7, #4]
  TX[2] |= 0xF;
 80004b8:	79bb      	ldrb	r3, [r7, #6]
 80004ba:	f043 030f 	orr.w	r3, r3, #15
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	71bb      	strb	r3, [r7, #6]

  res = HAL_SPI_TransmitReceive(&hspi1, TX, RX, 1, 50);
 80004c2:	463a      	mov	r2, r7
 80004c4:	1d39      	adds	r1, r7, #4
 80004c6:	2332      	movs	r3, #50	; 0x32
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	2301      	movs	r3, #1
 80004cc:	480b      	ldr	r0, [pc, #44]	; (80004fc <main+0x84>)
 80004ce:	f002 fcb9 	bl	8002e44 <HAL_SPI_TransmitReceive>
 80004d2:	4603      	mov	r3, r0
 80004d4:	71fb      	strb	r3, [r7, #7]
  if(res == HAL_SPI_STATE_RESET)
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d100      	bne.n	80004de <main+0x66>
      while(1);
 80004dc:	e7fe      	b.n	80004dc <main+0x64>
  else
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, SET);
 80004de:	2201      	movs	r2, #1
 80004e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004e4:	4806      	ldr	r0, [pc, #24]	; (8000500 <main+0x88>)
 80004e6:	f001 f977 	bl	80017d8 <HAL_GPIO_WritePin>
  while(1);
 80004ea:	e7fe      	b.n	80004ea <main+0x72>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  update_ACC_data(&hi2c1);
 80004ec:	4805      	ldr	r0, [pc, #20]	; (8000504 <main+0x8c>)
 80004ee:	f7ff fe35 	bl	800015c <update_ACC_data>
	  RS_Send(&huart1);
 80004f2:	4805      	ldr	r0, [pc, #20]	; (8000508 <main+0x90>)
 80004f4:	f7ff ff52 	bl	800039c <RS_Send>
	  update_ACC_data(&hi2c1);
 80004f8:	e7f8      	b.n	80004ec <main+0x74>
 80004fa:	bf00      	nop
 80004fc:	200001b8 	.word	0x200001b8
 8000500:	40010800 	.word	0x40010800
 8000504:	200000dc 	.word	0x200000dc
 8000508:	20000210 	.word	0x20000210

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b090      	sub	sp, #64	; 0x40
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	f107 0318 	add.w	r3, r7, #24
 8000516:	2228      	movs	r2, #40	; 0x28
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f003 f982 	bl	8003824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800052e:	2301      	movs	r3, #1
 8000530:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000532:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000536:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000538:	2300      	movs	r3, #0
 800053a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800053c:	2301      	movs	r3, #1
 800053e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000540:	2302      	movs	r3, #2
 8000542:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000544:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000548:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800054a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800054e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000550:	f107 0318 	add.w	r3, r7, #24
 8000554:	4618      	mov	r0, r3
 8000556:	f001 ffd9 	bl	800250c <HAL_RCC_OscConfig>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000560:	f000 f966 	bl	8000830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000564:	230f      	movs	r3, #15
 8000566:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000568:	2302      	movs	r3, #2
 800056a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056c:	2300      	movs	r3, #0
 800056e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000570:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000574:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	2102      	movs	r1, #2
 800057e:	4618      	mov	r0, r3
 8000580:	f002 fa46 	bl	8002a10 <HAL_RCC_ClockConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800058a:	f000 f951 	bl	8000830 <Error_Handler>
  }
}
 800058e:	bf00      	nop
 8000590:	3740      	adds	r7, #64	; 0x40
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
	...

08000598 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800059c:	4b17      	ldr	r3, [pc, #92]	; (80005fc <MX_CAN_Init+0x64>)
 800059e:	4a18      	ldr	r2, [pc, #96]	; (8000600 <MX_CAN_Init+0x68>)
 80005a0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 80005a2:	4b16      	ldr	r3, [pc, #88]	; (80005fc <MX_CAN_Init+0x64>)
 80005a4:	2204      	movs	r2, #4
 80005a6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80005a8:	4b14      	ldr	r3, [pc, #80]	; (80005fc <MX_CAN_Init+0x64>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005ae:	4b13      	ldr	r3, [pc, #76]	; (80005fc <MX_CAN_Init+0x64>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 80005b4:	4b11      	ldr	r3, [pc, #68]	; (80005fc <MX_CAN_Init+0x64>)
 80005b6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80005ba:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 80005bc:	4b0f      	ldr	r3, [pc, #60]	; (80005fc <MX_CAN_Init+0x64>)
 80005be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80005c2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80005c4:	4b0d      	ldr	r3, [pc, #52]	; (80005fc <MX_CAN_Init+0x64>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 80005ca:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <MX_CAN_Init+0x64>)
 80005cc:	2201      	movs	r2, #1
 80005ce:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80005d0:	4b0a      	ldr	r3, [pc, #40]	; (80005fc <MX_CAN_Init+0x64>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 80005d6:	4b09      	ldr	r3, [pc, #36]	; (80005fc <MX_CAN_Init+0x64>)
 80005d8:	2201      	movs	r2, #1
 80005da:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80005dc:	4b07      	ldr	r3, [pc, #28]	; (80005fc <MX_CAN_Init+0x64>)
 80005de:	2200      	movs	r2, #0
 80005e0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 80005e2:	4b06      	ldr	r3, [pc, #24]	; (80005fc <MX_CAN_Init+0x64>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80005e8:	4804      	ldr	r0, [pc, #16]	; (80005fc <MX_CAN_Init+0x64>)
 80005ea:	f000 fbeb 	bl	8000dc4 <HAL_CAN_Init>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 80005f4:	f000 f91c 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80005f8:	bf00      	nop
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	200000ac 	.word	0x200000ac
 8000600:	40006400 	.word	0x40006400

08000604 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <MX_CRC_Init+0x20>)
 800060a:	4a07      	ldr	r2, [pc, #28]	; (8000628 <MX_CRC_Init+0x24>)
 800060c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800060e:	4805      	ldr	r0, [pc, #20]	; (8000624 <MX_CRC_Init+0x20>)
 8000610:	f000 fde1 	bl	80011d6 <HAL_CRC_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800061a:	f000 f909 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200000d4 	.word	0x200000d4
 8000628:	40023000 	.word	0x40023000

0800062c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <MX_I2C1_Init+0x50>)
 8000632:	4a13      	ldr	r2, [pc, #76]	; (8000680 <MX_I2C1_Init+0x54>)
 8000634:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_I2C1_Init+0x50>)
 8000638:	4a12      	ldr	r2, [pc, #72]	; (8000684 <MX_I2C1_Init+0x58>)
 800063a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800063c:	4b0f      	ldr	r3, [pc, #60]	; (800067c <MX_I2C1_Init+0x50>)
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000642:	4b0e      	ldr	r3, [pc, #56]	; (800067c <MX_I2C1_Init+0x50>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000648:	4b0c      	ldr	r3, [pc, #48]	; (800067c <MX_I2C1_Init+0x50>)
 800064a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800064e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000650:	4b0a      	ldr	r3, [pc, #40]	; (800067c <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <MX_I2C1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <MX_I2C1_Init+0x50>)
 800065e:	2200      	movs	r2, #0
 8000660:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <MX_I2C1_Init+0x50>)
 8000664:	2200      	movs	r2, #0
 8000666:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000668:	4804      	ldr	r0, [pc, #16]	; (800067c <MX_I2C1_Init+0x50>)
 800066a:	f001 f8cd 	bl	8001808 <HAL_I2C_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000674:	f000 f8dc 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	bd80      	pop	{r7, pc}
 800067c:	200000dc 	.word	0x200000dc
 8000680:	40005400 	.word	0x40005400
 8000684:	000186a0 	.word	0x000186a0

08000688 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800068c:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <MX_SPI1_Init+0x68>)
 800068e:	4a19      	ldr	r2, [pc, #100]	; (80006f4 <MX_SPI1_Init+0x6c>)
 8000690:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <MX_SPI1_Init+0x68>)
 8000694:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000698:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <MX_SPI1_Init+0x68>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006a0:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <MX_SPI1_Init+0x68>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006a6:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <MX_SPI1_Init+0x68>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006ac:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <MX_SPI1_Init+0x68>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_SPI1_Init+0x68>)
 80006b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80006ba:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <MX_SPI1_Init+0x68>)
 80006bc:	2208      	movs	r2, #8
 80006be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006c0:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <MX_SPI1_Init+0x68>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006c6:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <MX_SPI1_Init+0x68>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <MX_SPI1_Init+0x68>)
 80006ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_SPI1_Init+0x68>)
 80006d6:	220a      	movs	r2, #10
 80006d8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_SPI1_Init+0x68>)
 80006dc:	f002 fb26 	bl	8002d2c <HAL_SPI_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80006e6:	f000 f8a3 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200001b8 	.word	0x200001b8
 80006f4:	40013000 	.word	0x40013000

080006f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006fc:	4b11      	ldr	r3, [pc, #68]	; (8000744 <MX_USART1_UART_Init+0x4c>)
 80006fe:	4a12      	ldr	r2, [pc, #72]	; (8000748 <MX_USART1_UART_Init+0x50>)
 8000700:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000702:	4b10      	ldr	r3, [pc, #64]	; (8000744 <MX_USART1_UART_Init+0x4c>)
 8000704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000708:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800070a:	4b0e      	ldr	r3, [pc, #56]	; (8000744 <MX_USART1_UART_Init+0x4c>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <MX_USART1_UART_Init+0x4c>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <MX_USART1_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b09      	ldr	r3, [pc, #36]	; (8000744 <MX_USART1_UART_Init+0x4c>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b08      	ldr	r3, [pc, #32]	; (8000744 <MX_USART1_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	4b06      	ldr	r3, [pc, #24]	; (8000744 <MX_USART1_UART_Init+0x4c>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_USART1_UART_Init+0x4c>)
 8000730:	f002 fe7e 	bl	8003430 <HAL_UART_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800073a:	f000 f879 	bl	8000830 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000210 	.word	0x20000210
 8000748:	40013800 	.word	0x40013800

0800074c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000752:	4b10      	ldr	r3, [pc, #64]	; (8000794 <MX_DMA_Init+0x48>)
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	4a0f      	ldr	r2, [pc, #60]	; (8000794 <MX_DMA_Init+0x48>)
 8000758:	f043 0301 	orr.w	r3, r3, #1
 800075c:	6153      	str	r3, [r2, #20]
 800075e:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <MX_DMA_Init+0x48>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	f003 0301 	and.w	r3, r3, #1
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800076a:	2200      	movs	r2, #0
 800076c:	2100      	movs	r1, #0
 800076e:	2010      	movs	r0, #16
 8000770:	f000 fcfb 	bl	800116a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000774:	2010      	movs	r0, #16
 8000776:	f000 fd14 	bl	80011a2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2100      	movs	r1, #0
 800077e:	2011      	movs	r0, #17
 8000780:	f000 fcf3 	bl	800116a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000784:	2011      	movs	r0, #17
 8000786:	f000 fd0c 	bl	80011a2 <HAL_NVIC_EnableIRQ>

}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40021000 	.word	0x40021000

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 0310 	add.w	r3, r7, #16
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ac:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <MX_GPIO_Init+0x90>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	4a1d      	ldr	r2, [pc, #116]	; (8000828 <MX_GPIO_Init+0x90>)
 80007b2:	f043 0320 	orr.w	r3, r3, #32
 80007b6:	6193      	str	r3, [r2, #24]
 80007b8:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <MX_GPIO_Init+0x90>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	f003 0320 	and.w	r3, r3, #32
 80007c0:	60fb      	str	r3, [r7, #12]
 80007c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c4:	4b18      	ldr	r3, [pc, #96]	; (8000828 <MX_GPIO_Init+0x90>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	4a17      	ldr	r2, [pc, #92]	; (8000828 <MX_GPIO_Init+0x90>)
 80007ca:	f043 0304 	orr.w	r3, r3, #4
 80007ce:	6193      	str	r3, [r2, #24]
 80007d0:	4b15      	ldr	r3, [pc, #84]	; (8000828 <MX_GPIO_Init+0x90>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	f003 0304 	and.w	r3, r3, #4
 80007d8:	60bb      	str	r3, [r7, #8]
 80007da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_GPIO_Init+0x90>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	4a11      	ldr	r2, [pc, #68]	; (8000828 <MX_GPIO_Init+0x90>)
 80007e2:	f043 0308 	orr.w	r3, r3, #8
 80007e6:	6193      	str	r3, [r2, #24]
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_GPIO_Init+0x90>)
 80007ea:	699b      	ldr	r3, [r3, #24]
 80007ec:	f003 0308 	and.w	r3, r3, #8
 80007f0:	607b      	str	r3, [r7, #4]
 80007f2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80007f4:	2200      	movs	r2, #0
 80007f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007fa:	480c      	ldr	r0, [pc, #48]	; (800082c <MX_GPIO_Init+0x94>)
 80007fc:	f000 ffec 	bl	80017d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000800:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000804:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080e:	2302      	movs	r3, #2
 8000810:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000812:	f107 0310 	add.w	r3, r7, #16
 8000816:	4619      	mov	r1, r3
 8000818:	4804      	ldr	r0, [pc, #16]	; (800082c <MX_GPIO_Init+0x94>)
 800081a:	f000 fe59 	bl	80014d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800081e:	bf00      	nop
 8000820:	3720      	adds	r7, #32
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40021000 	.word	0x40021000
 800082c:	40010800 	.word	0x40010800

08000830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000834:	b672      	cpsid	i
}
 8000836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000838:	e7fe      	b.n	8000838 <Error_Handler+0x8>
	...

0800083c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000842:	4b15      	ldr	r3, [pc, #84]	; (8000898 <HAL_MspInit+0x5c>)
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	4a14      	ldr	r2, [pc, #80]	; (8000898 <HAL_MspInit+0x5c>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6193      	str	r3, [r2, #24]
 800084e:	4b12      	ldr	r3, [pc, #72]	; (8000898 <HAL_MspInit+0x5c>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085a:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <HAL_MspInit+0x5c>)
 800085c:	69db      	ldr	r3, [r3, #28]
 800085e:	4a0e      	ldr	r2, [pc, #56]	; (8000898 <HAL_MspInit+0x5c>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000864:	61d3      	str	r3, [r2, #28]
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <HAL_MspInit+0x5c>)
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000872:	4b0a      	ldr	r3, [pc, #40]	; (800089c <HAL_MspInit+0x60>)
 8000874:	685b      	ldr	r3, [r3, #4]
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	4a04      	ldr	r2, [pc, #16]	; (800089c <HAL_MspInit+0x60>)
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088e:	bf00      	nop
 8000890:	3714      	adds	r7, #20
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr
 8000898:	40021000 	.word	0x40021000
 800089c:	40010000 	.word	0x40010000

080008a0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b088      	sub	sp, #32
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	4a1c      	ldr	r2, [pc, #112]	; (800092c <HAL_CAN_MspInit+0x8c>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d131      	bne.n	8000924 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80008c0:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <HAL_CAN_MspInit+0x90>)
 80008c2:	69db      	ldr	r3, [r3, #28]
 80008c4:	4a1a      	ldr	r2, [pc, #104]	; (8000930 <HAL_CAN_MspInit+0x90>)
 80008c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008ca:	61d3      	str	r3, [r2, #28]
 80008cc:	4b18      	ldr	r3, [pc, #96]	; (8000930 <HAL_CAN_MspInit+0x90>)
 80008ce:	69db      	ldr	r3, [r3, #28]
 80008d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d8:	4b15      	ldr	r3, [pc, #84]	; (8000930 <HAL_CAN_MspInit+0x90>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	4a14      	ldr	r2, [pc, #80]	; (8000930 <HAL_CAN_MspInit+0x90>)
 80008de:	f043 0304 	orr.w	r3, r3, #4
 80008e2:	6193      	str	r3, [r2, #24]
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <HAL_CAN_MspInit+0x90>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	f003 0304 	and.w	r3, r3, #4
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80008f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fe:	f107 0310 	add.w	r3, r7, #16
 8000902:	4619      	mov	r1, r3
 8000904:	480b      	ldr	r0, [pc, #44]	; (8000934 <HAL_CAN_MspInit+0x94>)
 8000906:	f000 fde3 	bl	80014d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800090a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	2302      	movs	r3, #2
 8000912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000914:	2303      	movs	r3, #3
 8000916:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000918:	f107 0310 	add.w	r3, r7, #16
 800091c:	4619      	mov	r1, r3
 800091e:	4805      	ldr	r0, [pc, #20]	; (8000934 <HAL_CAN_MspInit+0x94>)
 8000920:	f000 fdd6 	bl	80014d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000924:	bf00      	nop
 8000926:	3720      	adds	r7, #32
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40006400 	.word	0x40006400
 8000930:	40021000 	.word	0x40021000
 8000934:	40010800 	.word	0x40010800

08000938 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000938:	b480      	push	{r7}
 800093a:	b085      	sub	sp, #20
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a09      	ldr	r2, [pc, #36]	; (800096c <HAL_CRC_MspInit+0x34>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d10b      	bne.n	8000962 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <HAL_CRC_MspInit+0x38>)
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	4a08      	ldr	r2, [pc, #32]	; (8000970 <HAL_CRC_MspInit+0x38>)
 8000950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000954:	6153      	str	r3, [r2, #20]
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <HAL_CRC_MspInit+0x38>)
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000962:	bf00      	nop
 8000964:	3714      	adds	r7, #20
 8000966:	46bd      	mov	sp, r7
 8000968:	bc80      	pop	{r7}
 800096a:	4770      	bx	lr
 800096c:	40023000 	.word	0x40023000
 8000970:	40021000 	.word	0x40021000

08000974 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b088      	sub	sp, #32
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 0310 	add.w	r3, r7, #16
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a3b      	ldr	r2, [pc, #236]	; (8000a7c <HAL_I2C_MspInit+0x108>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d16f      	bne.n	8000a74 <HAL_I2C_MspInit+0x100>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000994:	4b3a      	ldr	r3, [pc, #232]	; (8000a80 <HAL_I2C_MspInit+0x10c>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	4a39      	ldr	r2, [pc, #228]	; (8000a80 <HAL_I2C_MspInit+0x10c>)
 800099a:	f043 0308 	orr.w	r3, r3, #8
 800099e:	6193      	str	r3, [r2, #24]
 80009a0:	4b37      	ldr	r3, [pc, #220]	; (8000a80 <HAL_I2C_MspInit+0x10c>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	f003 0308 	and.w	r3, r3, #8
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009ac:	23c0      	movs	r3, #192	; 0xc0
 80009ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009b0:	2312      	movs	r3, #18
 80009b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009b4:	2303      	movs	r3, #3
 80009b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b8:	f107 0310 	add.w	r3, r7, #16
 80009bc:	4619      	mov	r1, r3
 80009be:	4831      	ldr	r0, [pc, #196]	; (8000a84 <HAL_I2C_MspInit+0x110>)
 80009c0:	f000 fd86 	bl	80014d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009c4:	4b2e      	ldr	r3, [pc, #184]	; (8000a80 <HAL_I2C_MspInit+0x10c>)
 80009c6:	69db      	ldr	r3, [r3, #28]
 80009c8:	4a2d      	ldr	r2, [pc, #180]	; (8000a80 <HAL_I2C_MspInit+0x10c>)
 80009ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009ce:	61d3      	str	r3, [r2, #28]
 80009d0:	4b2b      	ldr	r3, [pc, #172]	; (8000a80 <HAL_I2C_MspInit+0x10c>)
 80009d2:	69db      	ldr	r3, [r3, #28]
 80009d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80009dc:	4b2a      	ldr	r3, [pc, #168]	; (8000a88 <HAL_I2C_MspInit+0x114>)
 80009de:	4a2b      	ldr	r2, [pc, #172]	; (8000a8c <HAL_I2C_MspInit+0x118>)
 80009e0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009e2:	4b29      	ldr	r3, [pc, #164]	; (8000a88 <HAL_I2C_MspInit+0x114>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009e8:	4b27      	ldr	r3, [pc, #156]	; (8000a88 <HAL_I2C_MspInit+0x114>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009ee:	4b26      	ldr	r3, [pc, #152]	; (8000a88 <HAL_I2C_MspInit+0x114>)
 80009f0:	2280      	movs	r2, #128	; 0x80
 80009f2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009f4:	4b24      	ldr	r3, [pc, #144]	; (8000a88 <HAL_I2C_MspInit+0x114>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009fa:	4b23      	ldr	r3, [pc, #140]	; (8000a88 <HAL_I2C_MspInit+0x114>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000a00:	4b21      	ldr	r3, [pc, #132]	; (8000a88 <HAL_I2C_MspInit+0x114>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a06:	4b20      	ldr	r3, [pc, #128]	; (8000a88 <HAL_I2C_MspInit+0x114>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000a0c:	481e      	ldr	r0, [pc, #120]	; (8000a88 <HAL_I2C_MspInit+0x114>)
 8000a0e:	f000 fbff 	bl	8001210 <HAL_DMA_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 8000a18:	f7ff ff0a 	bl	8000830 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a1a      	ldr	r2, [pc, #104]	; (8000a88 <HAL_I2C_MspInit+0x114>)
 8000a20:	639a      	str	r2, [r3, #56]	; 0x38
 8000a22:	4a19      	ldr	r2, [pc, #100]	; (8000a88 <HAL_I2C_MspInit+0x114>)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000a28:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <HAL_I2C_MspInit+0x11c>)
 8000a2a:	4a1a      	ldr	r2, [pc, #104]	; (8000a94 <HAL_I2C_MspInit+0x120>)
 8000a2c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a2e:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <HAL_I2C_MspInit+0x11c>)
 8000a30:	2210      	movs	r2, #16
 8000a32:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a34:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <HAL_I2C_MspInit+0x11c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a3a:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <HAL_I2C_MspInit+0x11c>)
 8000a3c:	2280      	movs	r2, #128	; 0x80
 8000a3e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a40:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <HAL_I2C_MspInit+0x11c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a46:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <HAL_I2C_MspInit+0x11c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000a4c:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <HAL_I2C_MspInit+0x11c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a52:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <HAL_I2C_MspInit+0x11c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000a58:	480d      	ldr	r0, [pc, #52]	; (8000a90 <HAL_I2C_MspInit+0x11c>)
 8000a5a:	f000 fbd9 	bl	8001210 <HAL_DMA_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <HAL_I2C_MspInit+0xf4>
    {
      Error_Handler();
 8000a64:	f7ff fee4 	bl	8000830 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	4a09      	ldr	r2, [pc, #36]	; (8000a90 <HAL_I2C_MspInit+0x11c>)
 8000a6c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a6e:	4a08      	ldr	r2, [pc, #32]	; (8000a90 <HAL_I2C_MspInit+0x11c>)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a74:	bf00      	nop
 8000a76:	3720      	adds	r7, #32
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	40005400 	.word	0x40005400
 8000a80:	40021000 	.word	0x40021000
 8000a84:	40010c00 	.word	0x40010c00
 8000a88:	20000130 	.word	0x20000130
 8000a8c:	40020080 	.word	0x40020080
 8000a90:	20000174 	.word	0x20000174
 8000a94:	4002006c 	.word	0x4002006c

08000a98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b088      	sub	sp, #32
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 0310 	add.w	r3, r7, #16
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4a1b      	ldr	r2, [pc, #108]	; (8000b20 <HAL_SPI_MspInit+0x88>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d12f      	bne.n	8000b18 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ab8:	4b1a      	ldr	r3, [pc, #104]	; (8000b24 <HAL_SPI_MspInit+0x8c>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	4a19      	ldr	r2, [pc, #100]	; (8000b24 <HAL_SPI_MspInit+0x8c>)
 8000abe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ac2:	6193      	str	r3, [r2, #24]
 8000ac4:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <HAL_SPI_MspInit+0x8c>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad0:	4b14      	ldr	r3, [pc, #80]	; (8000b24 <HAL_SPI_MspInit+0x8c>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	4a13      	ldr	r2, [pc, #76]	; (8000b24 <HAL_SPI_MspInit+0x8c>)
 8000ad6:	f043 0304 	orr.w	r3, r3, #4
 8000ada:	6193      	str	r3, [r2, #24]
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <HAL_SPI_MspInit+0x8c>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	f003 0304 	and.w	r3, r3, #4
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000ae8:	23a0      	movs	r3, #160	; 0xa0
 8000aea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aec:	2302      	movs	r3, #2
 8000aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000af0:	2303      	movs	r3, #3
 8000af2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af4:	f107 0310 	add.w	r3, r7, #16
 8000af8:	4619      	mov	r1, r3
 8000afa:	480b      	ldr	r0, [pc, #44]	; (8000b28 <HAL_SPI_MspInit+0x90>)
 8000afc:	f000 fce8 	bl	80014d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000b00:	2340      	movs	r3, #64	; 0x40
 8000b02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b04:	2300      	movs	r3, #0
 8000b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0c:	f107 0310 	add.w	r3, r7, #16
 8000b10:	4619      	mov	r1, r3
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <HAL_SPI_MspInit+0x90>)
 8000b14:	f000 fcdc 	bl	80014d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b18:	bf00      	nop
 8000b1a:	3720      	adds	r7, #32
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40013000 	.word	0x40013000
 8000b24:	40021000 	.word	0x40021000
 8000b28:	40010800 	.word	0x40010800

08000b2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b088      	sub	sp, #32
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 0310 	add.w	r3, r7, #16
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a1c      	ldr	r2, [pc, #112]	; (8000bb8 <HAL_UART_MspInit+0x8c>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d131      	bne.n	8000bb0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b4c:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <HAL_UART_MspInit+0x90>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	4a1a      	ldr	r2, [pc, #104]	; (8000bbc <HAL_UART_MspInit+0x90>)
 8000b52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b56:	6193      	str	r3, [r2, #24]
 8000b58:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <HAL_UART_MspInit+0x90>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b64:	4b15      	ldr	r3, [pc, #84]	; (8000bbc <HAL_UART_MspInit+0x90>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	4a14      	ldr	r2, [pc, #80]	; (8000bbc <HAL_UART_MspInit+0x90>)
 8000b6a:	f043 0304 	orr.w	r3, r3, #4
 8000b6e:	6193      	str	r3, [r2, #24]
 8000b70:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <HAL_UART_MspInit+0x90>)
 8000b72:	699b      	ldr	r3, [r3, #24]
 8000b74:	f003 0304 	and.w	r3, r3, #4
 8000b78:	60bb      	str	r3, [r7, #8]
 8000b7a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b80:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b86:	2303      	movs	r3, #3
 8000b88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b8a:	f107 0310 	add.w	r3, r7, #16
 8000b8e:	4619      	mov	r1, r3
 8000b90:	480b      	ldr	r0, [pc, #44]	; (8000bc0 <HAL_UART_MspInit+0x94>)
 8000b92:	f000 fc9d 	bl	80014d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba4:	f107 0310 	add.w	r3, r7, #16
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <HAL_UART_MspInit+0x94>)
 8000bac:	f000 fc90 	bl	80014d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000bb0:	bf00      	nop
 8000bb2:	3720      	adds	r7, #32
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	40013800 	.word	0x40013800
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	40010800 	.word	0x40010800

08000bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <NMI_Handler+0x4>

08000bca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <HardFault_Handler+0x4>

08000bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <MemManage_Handler+0x4>

08000bd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <BusFault_Handler+0x4>

08000bdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <UsageFault_Handler+0x4>

08000be2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc80      	pop	{r7}
 8000bec:	4770      	bx	lr

08000bee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr

08000bfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr

08000c06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c0a:	f000 f8bf 	bl	8000d8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000c18:	4802      	ldr	r0, [pc, #8]	; (8000c24 <DMA1_Channel6_IRQHandler+0x10>)
 8000c1a:	f000 fb53 	bl	80012c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000174 	.word	0x20000174

08000c28 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000c2c:	4802      	ldr	r0, [pc, #8]	; (8000c38 <DMA1_Channel7_IRQHandler+0x10>)
 8000c2e:	f000 fb49 	bl	80012c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000130 	.word	0x20000130

08000c3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c44:	4a14      	ldr	r2, [pc, #80]	; (8000c98 <_sbrk+0x5c>)
 8000c46:	4b15      	ldr	r3, [pc, #84]	; (8000c9c <_sbrk+0x60>)
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c50:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <_sbrk+0x64>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d102      	bne.n	8000c5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <_sbrk+0x64>)
 8000c5a:	4a12      	ldr	r2, [pc, #72]	; (8000ca4 <_sbrk+0x68>)
 8000c5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <_sbrk+0x64>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4413      	add	r3, r2
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d207      	bcs.n	8000c7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c6c:	f002 fdb0 	bl	80037d0 <__errno>
 8000c70:	4603      	mov	r3, r0
 8000c72:	220c      	movs	r2, #12
 8000c74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c76:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7a:	e009      	b.n	8000c90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <_sbrk+0x64>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c82:	4b07      	ldr	r3, [pc, #28]	; (8000ca0 <_sbrk+0x64>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4413      	add	r3, r2
 8000c8a:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <_sbrk+0x64>)
 8000c8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c8e:	68fb      	ldr	r3, [r7, #12]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3718      	adds	r7, #24
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20005000 	.word	0x20005000
 8000c9c:	00000400 	.word	0x00000400
 8000ca0:	20000258 	.word	0x20000258
 8000ca4:	20000270 	.word	0x20000270

08000ca8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bc80      	pop	{r7}
 8000cb2:	4770      	bx	lr

08000cb4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cb4:	f7ff fff8 	bl	8000ca8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb8:	480b      	ldr	r0, [pc, #44]	; (8000ce8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000cba:	490c      	ldr	r1, [pc, #48]	; (8000cec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000cbc:	4a0c      	ldr	r2, [pc, #48]	; (8000cf0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc0:	e002      	b.n	8000cc8 <LoopCopyDataInit>

08000cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc6:	3304      	adds	r3, #4

08000cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ccc:	d3f9      	bcc.n	8000cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cce:	4a09      	ldr	r2, [pc, #36]	; (8000cf4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000cd0:	4c09      	ldr	r4, [pc, #36]	; (8000cf8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd4:	e001      	b.n	8000cda <LoopFillZerobss>

08000cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd8:	3204      	adds	r2, #4

08000cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cdc:	d3fb      	bcc.n	8000cd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cde:	f002 fd7d 	bl	80037dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ce2:	f7ff fbc9 	bl	8000478 <main>
  bx lr
 8000ce6:	4770      	bx	lr
  ldr r0, =_sdata
 8000ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cec:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000cf0:	080041cc 	.word	0x080041cc
  ldr r2, =_sbss
 8000cf4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000cf8:	20000270 	.word	0x20000270

08000cfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cfc:	e7fe      	b.n	8000cfc <ADC1_2_IRQHandler>
	...

08000d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <HAL_Init+0x28>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a07      	ldr	r2, [pc, #28]	; (8000d28 <HAL_Init+0x28>)
 8000d0a:	f043 0310 	orr.w	r3, r3, #16
 8000d0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d10:	2003      	movs	r0, #3
 8000d12:	f000 fa1f 	bl	8001154 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d16:	200f      	movs	r0, #15
 8000d18:	f000 f808 	bl	8000d2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d1c:	f7ff fd8e 	bl	800083c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40022000 	.word	0x40022000

08000d2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_InitTick+0x54>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4b12      	ldr	r3, [pc, #72]	; (8000d84 <HAL_InitTick+0x58>)
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 fa37 	bl	80011be <HAL_SYSTICK_Config>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	e00e      	b.n	8000d78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2b0f      	cmp	r3, #15
 8000d5e:	d80a      	bhi.n	8000d76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d60:	2200      	movs	r2, #0
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	f04f 30ff 	mov.w	r0, #4294967295
 8000d68:	f000 f9ff 	bl	800116a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d6c:	4a06      	ldr	r2, [pc, #24]	; (8000d88 <HAL_InitTick+0x5c>)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d72:	2300      	movs	r3, #0
 8000d74:	e000      	b.n	8000d78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3708      	adds	r7, #8
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000004 	.word	0x20000004
 8000d84:	2000000c 	.word	0x2000000c
 8000d88:	20000008 	.word	0x20000008

08000d8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d90:	4b05      	ldr	r3, [pc, #20]	; (8000da8 <HAL_IncTick+0x1c>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	461a      	mov	r2, r3
 8000d96:	4b05      	ldr	r3, [pc, #20]	; (8000dac <HAL_IncTick+0x20>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4413      	add	r3, r2
 8000d9c:	4a03      	ldr	r2, [pc, #12]	; (8000dac <HAL_IncTick+0x20>)
 8000d9e:	6013      	str	r3, [r2, #0]
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr
 8000da8:	2000000c 	.word	0x2000000c
 8000dac:	2000025c 	.word	0x2000025c

08000db0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return uwTick;
 8000db4:	4b02      	ldr	r3, [pc, #8]	; (8000dc0 <HAL_GetTick+0x10>)
 8000db6:	681b      	ldr	r3, [r3, #0]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr
 8000dc0:	2000025c 	.word	0x2000025c

08000dc4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d101      	bne.n	8000dd6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e0ed      	b.n	8000fb2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d102      	bne.n	8000de8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff fd5c 	bl	80008a0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f042 0201 	orr.w	r2, r2, #1
 8000df6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000df8:	f7ff ffda 	bl	8000db0 <HAL_GetTick>
 8000dfc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000dfe:	e012      	b.n	8000e26 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e00:	f7ff ffd6 	bl	8000db0 <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	2b0a      	cmp	r3, #10
 8000e0c:	d90b      	bls.n	8000e26 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e12:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2205      	movs	r2, #5
 8000e1e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e0c5      	b.n	8000fb2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d0e5      	beq.n	8000e00 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f022 0202 	bic.w	r2, r2, #2
 8000e42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e44:	f7ff ffb4 	bl	8000db0 <HAL_GetTick>
 8000e48:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e4a:	e012      	b.n	8000e72 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e4c:	f7ff ffb0 	bl	8000db0 <HAL_GetTick>
 8000e50:	4602      	mov	r2, r0
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	2b0a      	cmp	r3, #10
 8000e58:	d90b      	bls.n	8000e72 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	2205      	movs	r2, #5
 8000e6a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e09f      	b.n	8000fb2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 0302 	and.w	r3, r3, #2
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d1e5      	bne.n	8000e4c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	7e1b      	ldrb	r3, [r3, #24]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d108      	bne.n	8000e9a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	e007      	b.n	8000eaa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000ea8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	7e5b      	ldrb	r3, [r3, #25]
 8000eae:	2b01      	cmp	r3, #1
 8000eb0:	d108      	bne.n	8000ec4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	e007      	b.n	8000ed4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000ed2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	7e9b      	ldrb	r3, [r3, #26]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d108      	bne.n	8000eee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f042 0220 	orr.w	r2, r2, #32
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	e007      	b.n	8000efe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f022 0220 	bic.w	r2, r2, #32
 8000efc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	7edb      	ldrb	r3, [r3, #27]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d108      	bne.n	8000f18 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f022 0210 	bic.w	r2, r2, #16
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	e007      	b.n	8000f28 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	681a      	ldr	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f042 0210 	orr.w	r2, r2, #16
 8000f26:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	7f1b      	ldrb	r3, [r3, #28]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d108      	bne.n	8000f42 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	681a      	ldr	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f042 0208 	orr.w	r2, r2, #8
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	e007      	b.n	8000f52 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f022 0208 	bic.w	r2, r2, #8
 8000f50:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	7f5b      	ldrb	r3, [r3, #29]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d108      	bne.n	8000f6c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f042 0204 	orr.w	r2, r2, #4
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	e007      	b.n	8000f7c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f022 0204 	bic.w	r2, r2, #4
 8000f7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	689a      	ldr	r2, [r3, #8]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	431a      	orrs	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	691b      	ldr	r3, [r3, #16]
 8000f8a:	431a      	orrs	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	695b      	ldr	r3, [r3, #20]
 8000f90:	ea42 0103 	orr.w	r1, r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	1e5a      	subs	r2, r3, #1
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2201      	movs	r2, #1
 8000fac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fee:	4a04      	ldr	r2, [pc, #16]	; (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	60d3      	str	r3, [r2, #12]
}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <__NVIC_GetPriorityGrouping+0x18>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	f003 0307 	and.w	r3, r3, #7
}
 8001012:	4618      	mov	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	2b00      	cmp	r3, #0
 8001030:	db0b      	blt.n	800104a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	f003 021f 	and.w	r2, r3, #31
 8001038:	4906      	ldr	r1, [pc, #24]	; (8001054 <__NVIC_EnableIRQ+0x34>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	095b      	lsrs	r3, r3, #5
 8001040:	2001      	movs	r0, #1
 8001042:	fa00 f202 	lsl.w	r2, r0, r2
 8001046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr
 8001054:	e000e100 	.word	0xe000e100

08001058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	6039      	str	r1, [r7, #0]
 8001062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001068:	2b00      	cmp	r3, #0
 800106a:	db0a      	blt.n	8001082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	b2da      	uxtb	r2, r3
 8001070:	490c      	ldr	r1, [pc, #48]	; (80010a4 <__NVIC_SetPriority+0x4c>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	0112      	lsls	r2, r2, #4
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	440b      	add	r3, r1
 800107c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001080:	e00a      	b.n	8001098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4908      	ldr	r1, [pc, #32]	; (80010a8 <__NVIC_SetPriority+0x50>)
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	f003 030f 	and.w	r3, r3, #15
 800108e:	3b04      	subs	r3, #4
 8001090:	0112      	lsls	r2, r2, #4
 8001092:	b2d2      	uxtb	r2, r2
 8001094:	440b      	add	r3, r1
 8001096:	761a      	strb	r2, [r3, #24]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	bc80      	pop	{r7}
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000e100 	.word	0xe000e100
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	; 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f1c3 0307 	rsb	r3, r3, #7
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	bf28      	it	cs
 80010ca:	2304      	movcs	r3, #4
 80010cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3304      	adds	r3, #4
 80010d2:	2b06      	cmp	r3, #6
 80010d4:	d902      	bls.n	80010dc <NVIC_EncodePriority+0x30>
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3b03      	subs	r3, #3
 80010da:	e000      	b.n	80010de <NVIC_EncodePriority+0x32>
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	f04f 32ff 	mov.w	r2, #4294967295
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43da      	mvns	r2, r3
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	401a      	ands	r2, r3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f4:	f04f 31ff 	mov.w	r1, #4294967295
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	43d9      	mvns	r1, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	4313      	orrs	r3, r2
         );
}
 8001106:	4618      	mov	r0, r3
 8001108:	3724      	adds	r7, #36	; 0x24
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr

08001110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001120:	d301      	bcc.n	8001126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001122:	2301      	movs	r3, #1
 8001124:	e00f      	b.n	8001146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001126:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <SysTick_Config+0x40>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112e:	210f      	movs	r1, #15
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	f7ff ff90 	bl	8001058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <SysTick_Config+0x40>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <SysTick_Config+0x40>)
 8001140:	2207      	movs	r2, #7
 8001142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	e000e010 	.word	0xe000e010

08001154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ff2d 	bl	8000fbc <__NVIC_SetPriorityGrouping>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800116a:	b580      	push	{r7, lr}
 800116c:	b086      	sub	sp, #24
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	60b9      	str	r1, [r7, #8]
 8001174:	607a      	str	r2, [r7, #4]
 8001176:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800117c:	f7ff ff42 	bl	8001004 <__NVIC_GetPriorityGrouping>
 8001180:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	68b9      	ldr	r1, [r7, #8]
 8001186:	6978      	ldr	r0, [r7, #20]
 8001188:	f7ff ff90 	bl	80010ac <NVIC_EncodePriority>
 800118c:	4602      	mov	r2, r0
 800118e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001192:	4611      	mov	r1, r2
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff5f 	bl	8001058 <__NVIC_SetPriority>
}
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff35 	bl	8001020 <__NVIC_EnableIRQ>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ffa2 	bl	8001110 <SysTick_Config>
 80011cc:	4603      	mov	r3, r0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d101      	bne.n	80011e8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e00e      	b.n	8001206 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	795b      	ldrb	r3, [r3, #5]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d105      	bne.n	80011fe <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff fb9d 	bl	8000938 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2201      	movs	r2, #1
 8001202:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d101      	bne.n	8001226 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e043      	b.n	80012ae <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	461a      	mov	r2, r3
 800122c:	4b22      	ldr	r3, [pc, #136]	; (80012b8 <HAL_DMA_Init+0xa8>)
 800122e:	4413      	add	r3, r2
 8001230:	4a22      	ldr	r2, [pc, #136]	; (80012bc <HAL_DMA_Init+0xac>)
 8001232:	fba2 2303 	umull	r2, r3, r2, r3
 8001236:	091b      	lsrs	r3, r3, #4
 8001238:	009a      	lsls	r2, r3, #2
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a1f      	ldr	r2, [pc, #124]	; (80012c0 <HAL_DMA_Init+0xb0>)
 8001242:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2202      	movs	r2, #2
 8001248:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800125a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800125e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001268:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001274:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001280:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001288:	68fa      	ldr	r2, [r7, #12]
 800128a:	4313      	orrs	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2201      	movs	r2, #1
 80012a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3714      	adds	r7, #20
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr
 80012b8:	bffdfff8 	.word	0xbffdfff8
 80012bc:	cccccccd 	.word	0xcccccccd
 80012c0:	40020000 	.word	0x40020000

080012c4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e0:	2204      	movs	r2, #4
 80012e2:	409a      	lsls	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4013      	ands	r3, r2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d04f      	beq.n	800138c <HAL_DMA_IRQHandler+0xc8>
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	f003 0304 	and.w	r3, r3, #4
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d04a      	beq.n	800138c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0320 	and.w	r3, r3, #32
 8001300:	2b00      	cmp	r3, #0
 8001302:	d107      	bne.n	8001314 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f022 0204 	bic.w	r2, r2, #4
 8001312:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a66      	ldr	r2, [pc, #408]	; (80014b4 <HAL_DMA_IRQHandler+0x1f0>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d029      	beq.n	8001372 <HAL_DMA_IRQHandler+0xae>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a65      	ldr	r2, [pc, #404]	; (80014b8 <HAL_DMA_IRQHandler+0x1f4>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d022      	beq.n	800136e <HAL_DMA_IRQHandler+0xaa>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a63      	ldr	r2, [pc, #396]	; (80014bc <HAL_DMA_IRQHandler+0x1f8>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d01a      	beq.n	8001368 <HAL_DMA_IRQHandler+0xa4>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a62      	ldr	r2, [pc, #392]	; (80014c0 <HAL_DMA_IRQHandler+0x1fc>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d012      	beq.n	8001362 <HAL_DMA_IRQHandler+0x9e>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a60      	ldr	r2, [pc, #384]	; (80014c4 <HAL_DMA_IRQHandler+0x200>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d00a      	beq.n	800135c <HAL_DMA_IRQHandler+0x98>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a5f      	ldr	r2, [pc, #380]	; (80014c8 <HAL_DMA_IRQHandler+0x204>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d102      	bne.n	8001356 <HAL_DMA_IRQHandler+0x92>
 8001350:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001354:	e00e      	b.n	8001374 <HAL_DMA_IRQHandler+0xb0>
 8001356:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800135a:	e00b      	b.n	8001374 <HAL_DMA_IRQHandler+0xb0>
 800135c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001360:	e008      	b.n	8001374 <HAL_DMA_IRQHandler+0xb0>
 8001362:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001366:	e005      	b.n	8001374 <HAL_DMA_IRQHandler+0xb0>
 8001368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800136c:	e002      	b.n	8001374 <HAL_DMA_IRQHandler+0xb0>
 800136e:	2340      	movs	r3, #64	; 0x40
 8001370:	e000      	b.n	8001374 <HAL_DMA_IRQHandler+0xb0>
 8001372:	2304      	movs	r3, #4
 8001374:	4a55      	ldr	r2, [pc, #340]	; (80014cc <HAL_DMA_IRQHandler+0x208>)
 8001376:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137c:	2b00      	cmp	r3, #0
 800137e:	f000 8094 	beq.w	80014aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800138a:	e08e      	b.n	80014aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001390:	2202      	movs	r2, #2
 8001392:	409a      	lsls	r2, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4013      	ands	r3, r2
 8001398:	2b00      	cmp	r3, #0
 800139a:	d056      	beq.n	800144a <HAL_DMA_IRQHandler+0x186>
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d051      	beq.n	800144a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0320 	and.w	r3, r3, #32
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d10b      	bne.n	80013cc <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681a      	ldr	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f022 020a 	bic.w	r2, r2, #10
 80013c2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2201      	movs	r2, #1
 80013c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a38      	ldr	r2, [pc, #224]	; (80014b4 <HAL_DMA_IRQHandler+0x1f0>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d029      	beq.n	800142a <HAL_DMA_IRQHandler+0x166>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a37      	ldr	r2, [pc, #220]	; (80014b8 <HAL_DMA_IRQHandler+0x1f4>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d022      	beq.n	8001426 <HAL_DMA_IRQHandler+0x162>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a35      	ldr	r2, [pc, #212]	; (80014bc <HAL_DMA_IRQHandler+0x1f8>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d01a      	beq.n	8001420 <HAL_DMA_IRQHandler+0x15c>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a34      	ldr	r2, [pc, #208]	; (80014c0 <HAL_DMA_IRQHandler+0x1fc>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d012      	beq.n	800141a <HAL_DMA_IRQHandler+0x156>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a32      	ldr	r2, [pc, #200]	; (80014c4 <HAL_DMA_IRQHandler+0x200>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d00a      	beq.n	8001414 <HAL_DMA_IRQHandler+0x150>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a31      	ldr	r2, [pc, #196]	; (80014c8 <HAL_DMA_IRQHandler+0x204>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d102      	bne.n	800140e <HAL_DMA_IRQHandler+0x14a>
 8001408:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800140c:	e00e      	b.n	800142c <HAL_DMA_IRQHandler+0x168>
 800140e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001412:	e00b      	b.n	800142c <HAL_DMA_IRQHandler+0x168>
 8001414:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001418:	e008      	b.n	800142c <HAL_DMA_IRQHandler+0x168>
 800141a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800141e:	e005      	b.n	800142c <HAL_DMA_IRQHandler+0x168>
 8001420:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001424:	e002      	b.n	800142c <HAL_DMA_IRQHandler+0x168>
 8001426:	2320      	movs	r3, #32
 8001428:	e000      	b.n	800142c <HAL_DMA_IRQHandler+0x168>
 800142a:	2302      	movs	r3, #2
 800142c:	4a27      	ldr	r2, [pc, #156]	; (80014cc <HAL_DMA_IRQHandler+0x208>)
 800142e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143c:	2b00      	cmp	r3, #0
 800143e:	d034      	beq.n	80014aa <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001448:	e02f      	b.n	80014aa <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	2208      	movs	r2, #8
 8001450:	409a      	lsls	r2, r3
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	4013      	ands	r3, r2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d028      	beq.n	80014ac <HAL_DMA_IRQHandler+0x1e8>
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	f003 0308 	and.w	r3, r3, #8
 8001460:	2b00      	cmp	r3, #0
 8001462:	d023      	beq.n	80014ac <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f022 020e 	bic.w	r2, r2, #14
 8001472:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800147c:	2101      	movs	r1, #1
 800147e:	fa01 f202 	lsl.w	r2, r1, r2
 8001482:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2201      	movs	r2, #1
 800148e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d004      	beq.n	80014ac <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	4798      	blx	r3
    }
  }
  return;
 80014aa:	bf00      	nop
 80014ac:	bf00      	nop
}
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	40020008 	.word	0x40020008
 80014b8:	4002001c 	.word	0x4002001c
 80014bc:	40020030 	.word	0x40020030
 80014c0:	40020044 	.word	0x40020044
 80014c4:	40020058 	.word	0x40020058
 80014c8:	4002006c 	.word	0x4002006c
 80014cc:	40020000 	.word	0x40020000

080014d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b08b      	sub	sp, #44	; 0x2c
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014da:	2300      	movs	r3, #0
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014de:	2300      	movs	r3, #0
 80014e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e2:	e169      	b.n	80017b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014e4:	2201      	movs	r2, #1
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	69fa      	ldr	r2, [r7, #28]
 80014f4:	4013      	ands	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014f8:	69ba      	ldr	r2, [r7, #24]
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	f040 8158 	bne.w	80017b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	4a9a      	ldr	r2, [pc, #616]	; (8001770 <HAL_GPIO_Init+0x2a0>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d05e      	beq.n	80015ca <HAL_GPIO_Init+0xfa>
 800150c:	4a98      	ldr	r2, [pc, #608]	; (8001770 <HAL_GPIO_Init+0x2a0>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d875      	bhi.n	80015fe <HAL_GPIO_Init+0x12e>
 8001512:	4a98      	ldr	r2, [pc, #608]	; (8001774 <HAL_GPIO_Init+0x2a4>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d058      	beq.n	80015ca <HAL_GPIO_Init+0xfa>
 8001518:	4a96      	ldr	r2, [pc, #600]	; (8001774 <HAL_GPIO_Init+0x2a4>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d86f      	bhi.n	80015fe <HAL_GPIO_Init+0x12e>
 800151e:	4a96      	ldr	r2, [pc, #600]	; (8001778 <HAL_GPIO_Init+0x2a8>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d052      	beq.n	80015ca <HAL_GPIO_Init+0xfa>
 8001524:	4a94      	ldr	r2, [pc, #592]	; (8001778 <HAL_GPIO_Init+0x2a8>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d869      	bhi.n	80015fe <HAL_GPIO_Init+0x12e>
 800152a:	4a94      	ldr	r2, [pc, #592]	; (800177c <HAL_GPIO_Init+0x2ac>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d04c      	beq.n	80015ca <HAL_GPIO_Init+0xfa>
 8001530:	4a92      	ldr	r2, [pc, #584]	; (800177c <HAL_GPIO_Init+0x2ac>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d863      	bhi.n	80015fe <HAL_GPIO_Init+0x12e>
 8001536:	4a92      	ldr	r2, [pc, #584]	; (8001780 <HAL_GPIO_Init+0x2b0>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d046      	beq.n	80015ca <HAL_GPIO_Init+0xfa>
 800153c:	4a90      	ldr	r2, [pc, #576]	; (8001780 <HAL_GPIO_Init+0x2b0>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d85d      	bhi.n	80015fe <HAL_GPIO_Init+0x12e>
 8001542:	2b12      	cmp	r3, #18
 8001544:	d82a      	bhi.n	800159c <HAL_GPIO_Init+0xcc>
 8001546:	2b12      	cmp	r3, #18
 8001548:	d859      	bhi.n	80015fe <HAL_GPIO_Init+0x12e>
 800154a:	a201      	add	r2, pc, #4	; (adr r2, 8001550 <HAL_GPIO_Init+0x80>)
 800154c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001550:	080015cb 	.word	0x080015cb
 8001554:	080015a5 	.word	0x080015a5
 8001558:	080015b7 	.word	0x080015b7
 800155c:	080015f9 	.word	0x080015f9
 8001560:	080015ff 	.word	0x080015ff
 8001564:	080015ff 	.word	0x080015ff
 8001568:	080015ff 	.word	0x080015ff
 800156c:	080015ff 	.word	0x080015ff
 8001570:	080015ff 	.word	0x080015ff
 8001574:	080015ff 	.word	0x080015ff
 8001578:	080015ff 	.word	0x080015ff
 800157c:	080015ff 	.word	0x080015ff
 8001580:	080015ff 	.word	0x080015ff
 8001584:	080015ff 	.word	0x080015ff
 8001588:	080015ff 	.word	0x080015ff
 800158c:	080015ff 	.word	0x080015ff
 8001590:	080015ff 	.word	0x080015ff
 8001594:	080015ad 	.word	0x080015ad
 8001598:	080015c1 	.word	0x080015c1
 800159c:	4a79      	ldr	r2, [pc, #484]	; (8001784 <HAL_GPIO_Init+0x2b4>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d013      	beq.n	80015ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015a2:	e02c      	b.n	80015fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	623b      	str	r3, [r7, #32]
          break;
 80015aa:	e029      	b.n	8001600 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	3304      	adds	r3, #4
 80015b2:	623b      	str	r3, [r7, #32]
          break;
 80015b4:	e024      	b.n	8001600 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	3308      	adds	r3, #8
 80015bc:	623b      	str	r3, [r7, #32]
          break;
 80015be:	e01f      	b.n	8001600 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	330c      	adds	r3, #12
 80015c6:	623b      	str	r3, [r7, #32]
          break;
 80015c8:	e01a      	b.n	8001600 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d102      	bne.n	80015d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015d2:	2304      	movs	r3, #4
 80015d4:	623b      	str	r3, [r7, #32]
          break;
 80015d6:	e013      	b.n	8001600 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d105      	bne.n	80015ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015e0:	2308      	movs	r3, #8
 80015e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	69fa      	ldr	r2, [r7, #28]
 80015e8:	611a      	str	r2, [r3, #16]
          break;
 80015ea:	e009      	b.n	8001600 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015ec:	2308      	movs	r3, #8
 80015ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69fa      	ldr	r2, [r7, #28]
 80015f4:	615a      	str	r2, [r3, #20]
          break;
 80015f6:	e003      	b.n	8001600 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80015f8:	2300      	movs	r3, #0
 80015fa:	623b      	str	r3, [r7, #32]
          break;
 80015fc:	e000      	b.n	8001600 <HAL_GPIO_Init+0x130>
          break;
 80015fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	2bff      	cmp	r3, #255	; 0xff
 8001604:	d801      	bhi.n	800160a <HAL_GPIO_Init+0x13a>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	e001      	b.n	800160e <HAL_GPIO_Init+0x13e>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	3304      	adds	r3, #4
 800160e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	2bff      	cmp	r3, #255	; 0xff
 8001614:	d802      	bhi.n	800161c <HAL_GPIO_Init+0x14c>
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	009b      	lsls	r3, r3, #2
 800161a:	e002      	b.n	8001622 <HAL_GPIO_Init+0x152>
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	3b08      	subs	r3, #8
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	210f      	movs	r1, #15
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	fa01 f303 	lsl.w	r3, r1, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	401a      	ands	r2, r3
 8001634:	6a39      	ldr	r1, [r7, #32]
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	fa01 f303 	lsl.w	r3, r1, r3
 800163c:	431a      	orrs	r2, r3
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 80b1 	beq.w	80017b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001650:	4b4d      	ldr	r3, [pc, #308]	; (8001788 <HAL_GPIO_Init+0x2b8>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	4a4c      	ldr	r2, [pc, #304]	; (8001788 <HAL_GPIO_Init+0x2b8>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	6193      	str	r3, [r2, #24]
 800165c:	4b4a      	ldr	r3, [pc, #296]	; (8001788 <HAL_GPIO_Init+0x2b8>)
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001668:	4a48      	ldr	r2, [pc, #288]	; (800178c <HAL_GPIO_Init+0x2bc>)
 800166a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166c:	089b      	lsrs	r3, r3, #2
 800166e:	3302      	adds	r3, #2
 8001670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001674:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	220f      	movs	r2, #15
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	43db      	mvns	r3, r3
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	4013      	ands	r3, r2
 800168a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a40      	ldr	r2, [pc, #256]	; (8001790 <HAL_GPIO_Init+0x2c0>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d013      	beq.n	80016bc <HAL_GPIO_Init+0x1ec>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a3f      	ldr	r2, [pc, #252]	; (8001794 <HAL_GPIO_Init+0x2c4>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d00d      	beq.n	80016b8 <HAL_GPIO_Init+0x1e8>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a3e      	ldr	r2, [pc, #248]	; (8001798 <HAL_GPIO_Init+0x2c8>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d007      	beq.n	80016b4 <HAL_GPIO_Init+0x1e4>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a3d      	ldr	r2, [pc, #244]	; (800179c <HAL_GPIO_Init+0x2cc>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d101      	bne.n	80016b0 <HAL_GPIO_Init+0x1e0>
 80016ac:	2303      	movs	r3, #3
 80016ae:	e006      	b.n	80016be <HAL_GPIO_Init+0x1ee>
 80016b0:	2304      	movs	r3, #4
 80016b2:	e004      	b.n	80016be <HAL_GPIO_Init+0x1ee>
 80016b4:	2302      	movs	r3, #2
 80016b6:	e002      	b.n	80016be <HAL_GPIO_Init+0x1ee>
 80016b8:	2301      	movs	r3, #1
 80016ba:	e000      	b.n	80016be <HAL_GPIO_Init+0x1ee>
 80016bc:	2300      	movs	r3, #0
 80016be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016c0:	f002 0203 	and.w	r2, r2, #3
 80016c4:	0092      	lsls	r2, r2, #2
 80016c6:	4093      	lsls	r3, r2
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016ce:	492f      	ldr	r1, [pc, #188]	; (800178c <HAL_GPIO_Init+0x2bc>)
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	089b      	lsrs	r3, r3, #2
 80016d4:	3302      	adds	r3, #2
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d006      	beq.n	80016f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016e8:	4b2d      	ldr	r3, [pc, #180]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	492c      	ldr	r1, [pc, #176]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	608b      	str	r3, [r1, #8]
 80016f4:	e006      	b.n	8001704 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016f6:	4b2a      	ldr	r3, [pc, #168]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	69bb      	ldr	r3, [r7, #24]
 80016fc:	43db      	mvns	r3, r3
 80016fe:	4928      	ldr	r1, [pc, #160]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 8001700:	4013      	ands	r3, r2
 8001702:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d006      	beq.n	800171e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001710:	4b23      	ldr	r3, [pc, #140]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 8001712:	68da      	ldr	r2, [r3, #12]
 8001714:	4922      	ldr	r1, [pc, #136]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	4313      	orrs	r3, r2
 800171a:	60cb      	str	r3, [r1, #12]
 800171c:	e006      	b.n	800172c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800171e:	4b20      	ldr	r3, [pc, #128]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 8001720:	68da      	ldr	r2, [r3, #12]
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	43db      	mvns	r3, r3
 8001726:	491e      	ldr	r1, [pc, #120]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 8001728:	4013      	ands	r3, r2
 800172a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001734:	2b00      	cmp	r3, #0
 8001736:	d006      	beq.n	8001746 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001738:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	4918      	ldr	r1, [pc, #96]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	4313      	orrs	r3, r2
 8001742:	604b      	str	r3, [r1, #4]
 8001744:	e006      	b.n	8001754 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001746:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 8001748:	685a      	ldr	r2, [r3, #4]
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	43db      	mvns	r3, r3
 800174e:	4914      	ldr	r1, [pc, #80]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 8001750:	4013      	ands	r3, r2
 8001752:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d021      	beq.n	80017a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001760:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	490e      	ldr	r1, [pc, #56]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	4313      	orrs	r3, r2
 800176a:	600b      	str	r3, [r1, #0]
 800176c:	e021      	b.n	80017b2 <HAL_GPIO_Init+0x2e2>
 800176e:	bf00      	nop
 8001770:	10320000 	.word	0x10320000
 8001774:	10310000 	.word	0x10310000
 8001778:	10220000 	.word	0x10220000
 800177c:	10210000 	.word	0x10210000
 8001780:	10120000 	.word	0x10120000
 8001784:	10110000 	.word	0x10110000
 8001788:	40021000 	.word	0x40021000
 800178c:	40010000 	.word	0x40010000
 8001790:	40010800 	.word	0x40010800
 8001794:	40010c00 	.word	0x40010c00
 8001798:	40011000 	.word	0x40011000
 800179c:	40011400 	.word	0x40011400
 80017a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017a4:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <HAL_GPIO_Init+0x304>)
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	43db      	mvns	r3, r3
 80017ac:	4909      	ldr	r1, [pc, #36]	; (80017d4 <HAL_GPIO_Init+0x304>)
 80017ae:	4013      	ands	r3, r2
 80017b0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	3301      	adds	r3, #1
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017be:	fa22 f303 	lsr.w	r3, r2, r3
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f47f ae8e 	bne.w	80014e4 <HAL_GPIO_Init+0x14>
  }
}
 80017c8:	bf00      	nop
 80017ca:	bf00      	nop
 80017cc:	372c      	adds	r7, #44	; 0x2c
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr
 80017d4:	40010400 	.word	0x40010400

080017d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	807b      	strh	r3, [r7, #2]
 80017e4:	4613      	mov	r3, r2
 80017e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017e8:	787b      	ldrb	r3, [r7, #1]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ee:	887a      	ldrh	r2, [r7, #2]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017f4:	e003      	b.n	80017fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017f6:	887b      	ldrh	r3, [r7, #2]
 80017f8:	041a      	lsls	r2, r3, #16
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	611a      	str	r2, [r3, #16]
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr

08001808 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e12b      	b.n	8001a72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	d106      	bne.n	8001834 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800182e:	6878      	ldr	r0, [r7, #4]
 8001830:	f7ff f8a0 	bl	8000974 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2224      	movs	r2, #36	; 0x24
 8001838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f022 0201 	bic.w	r2, r2, #1
 800184a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800185a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800186a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800186c:	f001 fa18 	bl	8002ca0 <HAL_RCC_GetPCLK1Freq>
 8001870:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	4a81      	ldr	r2, [pc, #516]	; (8001a7c <HAL_I2C_Init+0x274>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d807      	bhi.n	800188c <HAL_I2C_Init+0x84>
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4a80      	ldr	r2, [pc, #512]	; (8001a80 <HAL_I2C_Init+0x278>)
 8001880:	4293      	cmp	r3, r2
 8001882:	bf94      	ite	ls
 8001884:	2301      	movls	r3, #1
 8001886:	2300      	movhi	r3, #0
 8001888:	b2db      	uxtb	r3, r3
 800188a:	e006      	b.n	800189a <HAL_I2C_Init+0x92>
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4a7d      	ldr	r2, [pc, #500]	; (8001a84 <HAL_I2C_Init+0x27c>)
 8001890:	4293      	cmp	r3, r2
 8001892:	bf94      	ite	ls
 8001894:	2301      	movls	r3, #1
 8001896:	2300      	movhi	r3, #0
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e0e7      	b.n	8001a72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	4a78      	ldr	r2, [pc, #480]	; (8001a88 <HAL_I2C_Init+0x280>)
 80018a6:	fba2 2303 	umull	r2, r3, r2, r3
 80018aa:	0c9b      	lsrs	r3, r3, #18
 80018ac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68ba      	ldr	r2, [r7, #8]
 80018be:	430a      	orrs	r2, r1
 80018c0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	4a6a      	ldr	r2, [pc, #424]	; (8001a7c <HAL_I2C_Init+0x274>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d802      	bhi.n	80018dc <HAL_I2C_Init+0xd4>
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	3301      	adds	r3, #1
 80018da:	e009      	b.n	80018f0 <HAL_I2C_Init+0xe8>
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018e2:	fb02 f303 	mul.w	r3, r2, r3
 80018e6:	4a69      	ldr	r2, [pc, #420]	; (8001a8c <HAL_I2C_Init+0x284>)
 80018e8:	fba2 2303 	umull	r2, r3, r2, r3
 80018ec:	099b      	lsrs	r3, r3, #6
 80018ee:	3301      	adds	r3, #1
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	6812      	ldr	r2, [r2, #0]
 80018f4:	430b      	orrs	r3, r1
 80018f6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	69db      	ldr	r3, [r3, #28]
 80018fe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001902:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	495c      	ldr	r1, [pc, #368]	; (8001a7c <HAL_I2C_Init+0x274>)
 800190c:	428b      	cmp	r3, r1
 800190e:	d819      	bhi.n	8001944 <HAL_I2C_Init+0x13c>
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	1e59      	subs	r1, r3, #1
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	fbb1 f3f3 	udiv	r3, r1, r3
 800191e:	1c59      	adds	r1, r3, #1
 8001920:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001924:	400b      	ands	r3, r1
 8001926:	2b00      	cmp	r3, #0
 8001928:	d00a      	beq.n	8001940 <HAL_I2C_Init+0x138>
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	1e59      	subs	r1, r3, #1
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	fbb1 f3f3 	udiv	r3, r1, r3
 8001938:	3301      	adds	r3, #1
 800193a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800193e:	e051      	b.n	80019e4 <HAL_I2C_Init+0x1dc>
 8001940:	2304      	movs	r3, #4
 8001942:	e04f      	b.n	80019e4 <HAL_I2C_Init+0x1dc>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d111      	bne.n	8001970 <HAL_I2C_Init+0x168>
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	1e58      	subs	r0, r3, #1
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6859      	ldr	r1, [r3, #4]
 8001954:	460b      	mov	r3, r1
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	440b      	add	r3, r1
 800195a:	fbb0 f3f3 	udiv	r3, r0, r3
 800195e:	3301      	adds	r3, #1
 8001960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001964:	2b00      	cmp	r3, #0
 8001966:	bf0c      	ite	eq
 8001968:	2301      	moveq	r3, #1
 800196a:	2300      	movne	r3, #0
 800196c:	b2db      	uxtb	r3, r3
 800196e:	e012      	b.n	8001996 <HAL_I2C_Init+0x18e>
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	1e58      	subs	r0, r3, #1
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6859      	ldr	r1, [r3, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	440b      	add	r3, r1
 800197e:	0099      	lsls	r1, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	fbb0 f3f3 	udiv	r3, r0, r3
 8001986:	3301      	adds	r3, #1
 8001988:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800198c:	2b00      	cmp	r3, #0
 800198e:	bf0c      	ite	eq
 8001990:	2301      	moveq	r3, #1
 8001992:	2300      	movne	r3, #0
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <HAL_I2C_Init+0x196>
 800199a:	2301      	movs	r3, #1
 800199c:	e022      	b.n	80019e4 <HAL_I2C_Init+0x1dc>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d10e      	bne.n	80019c4 <HAL_I2C_Init+0x1bc>
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	1e58      	subs	r0, r3, #1
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6859      	ldr	r1, [r3, #4]
 80019ae:	460b      	mov	r3, r1
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	440b      	add	r3, r1
 80019b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80019b8:	3301      	adds	r3, #1
 80019ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019c2:	e00f      	b.n	80019e4 <HAL_I2C_Init+0x1dc>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	1e58      	subs	r0, r3, #1
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6859      	ldr	r1, [r3, #4]
 80019cc:	460b      	mov	r3, r1
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	440b      	add	r3, r1
 80019d2:	0099      	lsls	r1, r3, #2
 80019d4:	440b      	add	r3, r1
 80019d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80019da:	3301      	adds	r3, #1
 80019dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019e0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019e4:	6879      	ldr	r1, [r7, #4]
 80019e6:	6809      	ldr	r1, [r1, #0]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69da      	ldr	r2, [r3, #28]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a1b      	ldr	r3, [r3, #32]
 80019fe:	431a      	orrs	r2, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	430a      	orrs	r2, r1
 8001a06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a16:	687a      	ldr	r2, [r7, #4]
 8001a18:	6911      	ldr	r1, [r2, #16]
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	68d2      	ldr	r2, [r2, #12]
 8001a1e:	4311      	orrs	r1, r2
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	6812      	ldr	r2, [r2, #0]
 8001a24:	430b      	orrs	r3, r1
 8001a26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	695a      	ldr	r2, [r3, #20]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	699b      	ldr	r3, [r3, #24]
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	430a      	orrs	r2, r1
 8001a42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f042 0201 	orr.w	r2, r2, #1
 8001a52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2220      	movs	r2, #32
 8001a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3710      	adds	r7, #16
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	000186a0 	.word	0x000186a0
 8001a80:	001e847f 	.word	0x001e847f
 8001a84:	003d08ff 	.word	0x003d08ff
 8001a88:	431bde83 	.word	0x431bde83
 8001a8c:	10624dd3 	.word	0x10624dd3

08001a90 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b08c      	sub	sp, #48	; 0x30
 8001a94:	af02      	add	r7, sp, #8
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	4608      	mov	r0, r1
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	817b      	strh	r3, [r7, #10]
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	813b      	strh	r3, [r7, #8]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001aae:	f7ff f97f 	bl	8000db0 <HAL_GetTick>
 8001ab2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b20      	cmp	r3, #32
 8001abe:	f040 8244 	bne.w	8001f4a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	2319      	movs	r3, #25
 8001ac8:	2201      	movs	r2, #1
 8001aca:	4982      	ldr	r1, [pc, #520]	; (8001cd4 <HAL_I2C_Mem_Read+0x244>)
 8001acc:	68f8      	ldr	r0, [r7, #12]
 8001ace:	f000 fb2f 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	e237      	b.n	8001f4c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d101      	bne.n	8001aea <HAL_I2C_Mem_Read+0x5a>
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	e230      	b.n	8001f4c <HAL_I2C_Mem_Read+0x4bc>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d007      	beq.n	8001b10 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f042 0201 	orr.w	r2, r2, #1
 8001b0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2222      	movs	r2, #34	; 0x22
 8001b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2240      	movs	r2, #64	; 0x40
 8001b2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001b40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	4a62      	ldr	r2, [pc, #392]	; (8001cd8 <HAL_I2C_Mem_Read+0x248>)
 8001b50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b52:	88f8      	ldrh	r0, [r7, #6]
 8001b54:	893a      	ldrh	r2, [r7, #8]
 8001b56:	8979      	ldrh	r1, [r7, #10]
 8001b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5a:	9301      	str	r3, [sp, #4]
 8001b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	4603      	mov	r3, r0
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	f000 f9fc 	bl	8001f60 <I2C_RequestMemoryRead>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e1ec      	b.n	8001f4c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d113      	bne.n	8001ba2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	61fb      	str	r3, [r7, #28]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	61fb      	str	r3, [r7, #28]
 8001b8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	e1c0      	b.n	8001f24 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d11e      	bne.n	8001be8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001bb8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001bba:	b672      	cpsid	i
}
 8001bbc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61bb      	str	r3, [r7, #24]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	695b      	ldr	r3, [r3, #20]
 8001bc8:	61bb      	str	r3, [r7, #24]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	61bb      	str	r3, [r7, #24]
 8001bd2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001be2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001be4:	b662      	cpsie	i
}
 8001be6:	e035      	b.n	8001c54 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d11e      	bne.n	8001c2e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bfe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001c00:	b672      	cpsid	i
}
 8001c02:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	617b      	str	r3, [r7, #20]
 8001c18:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c28:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001c2a:	b662      	cpsie	i
}
 8001c2c:	e012      	b.n	8001c54 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001c3c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c3e:	2300      	movs	r3, #0
 8001c40:	613b      	str	r3, [r7, #16]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	695b      	ldr	r3, [r3, #20]
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001c54:	e166      	b.n	8001f24 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c5a:	2b03      	cmp	r3, #3
 8001c5c:	f200 811f 	bhi.w	8001e9e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d123      	bne.n	8001cb0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c6a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f000 fbc1 	bl	80023f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e167      	b.n	8001f4c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	691a      	ldr	r2, [r3, #16]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8e:	1c5a      	adds	r2, r3, #1
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	b29a      	uxth	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001cae:	e139      	b.n	8001f24 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d152      	bne.n	8001d5e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	4906      	ldr	r1, [pc, #24]	; (8001cdc <HAL_I2C_Mem_Read+0x24c>)
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	f000 fa34 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d008      	beq.n	8001ce0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e13c      	b.n	8001f4c <HAL_I2C_Mem_Read+0x4bc>
 8001cd2:	bf00      	nop
 8001cd4:	00100002 	.word	0x00100002
 8001cd8:	ffff0000 	.word	0xffff0000
 8001cdc:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001ce0:	b672      	cpsid	i
}
 8001ce2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cf2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	691a      	ldr	r2, [r3, #16]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfe:	b2d2      	uxtb	r2, r2
 8001d00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d10:	3b01      	subs	r3, #1
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001d26:	b662      	cpsie	i
}
 8001d28:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	691a      	ldr	r2, [r3, #16]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3c:	1c5a      	adds	r2, r3, #1
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d46:	3b01      	subs	r3, #1
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	3b01      	subs	r3, #1
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d5c:	e0e2      	b.n	8001f24 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d64:	2200      	movs	r2, #0
 8001d66:	497b      	ldr	r1, [pc, #492]	; (8001f54 <HAL_I2C_Mem_Read+0x4c4>)
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	f000 f9e1 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e0e9      	b.n	8001f4c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d86:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001d88:	b672      	cpsid	i
}
 8001d8a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	691a      	ldr	r2, [r3, #16]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9e:	1c5a      	adds	r2, r3, #1
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da8:	3b01      	subs	r3, #1
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	3b01      	subs	r3, #1
 8001db8:	b29a      	uxth	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001dbe:	4b66      	ldr	r3, [pc, #408]	; (8001f58 <HAL_I2C_Mem_Read+0x4c8>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	08db      	lsrs	r3, r3, #3
 8001dc4:	4a65      	ldr	r2, [pc, #404]	; (8001f5c <HAL_I2C_Mem_Read+0x4cc>)
 8001dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dca:	0a1a      	lsrs	r2, r3, #8
 8001dcc:	4613      	mov	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	4413      	add	r3, r2
 8001dd2:	00da      	lsls	r2, r3, #3
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001dd8:	6a3b      	ldr	r3, [r7, #32]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001dde:	6a3b      	ldr	r3, [r7, #32]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d118      	bne.n	8001e16 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2220      	movs	r2, #32
 8001dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfe:	f043 0220 	orr.w	r2, r3, #32
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001e06:	b662      	cpsie	i
}
 8001e08:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e09a      	b.n	8001f4c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	695b      	ldr	r3, [r3, #20]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d1d9      	bne.n	8001dd8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	691a      	ldr	r2, [r3, #16]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e46:	1c5a      	adds	r2, r3, #1
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e50:	3b01      	subs	r3, #1
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001e66:	b662      	cpsie	i
}
 8001e68:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	691a      	ldr	r2, [r3, #16]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e74:	b2d2      	uxtb	r2, r2
 8001e76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	1c5a      	adds	r2, r3, #1
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e86:	3b01      	subs	r3, #1
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e92:	b29b      	uxth	r3, r3
 8001e94:	3b01      	subs	r3, #1
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e9c:	e042      	b.n	8001f24 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ea0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ea2:	68f8      	ldr	r0, [r7, #12]
 8001ea4:	f000 faa6 	bl	80023f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e04c      	b.n	8001f4c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	691a      	ldr	r2, [r3, #16]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	1c5a      	adds	r2, r3, #1
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	3b01      	subs	r3, #1
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	f003 0304 	and.w	r3, r3, #4
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	d118      	bne.n	8001f24 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	691a      	ldr	r2, [r3, #16]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efc:	b2d2      	uxtb	r2, r2
 8001efe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	1c5a      	adds	r2, r3, #1
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f47f ae94 	bne.w	8001c56 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2220      	movs	r2, #32
 8001f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	e000      	b.n	8001f4c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8001f4a:	2302      	movs	r3, #2
  }
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3728      	adds	r7, #40	; 0x28
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	00010004 	.word	0x00010004
 8001f58:	20000004 	.word	0x20000004
 8001f5c:	14f8b589 	.word	0x14f8b589

08001f60 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b088      	sub	sp, #32
 8001f64:	af02      	add	r7, sp, #8
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	4608      	mov	r0, r1
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	4603      	mov	r3, r0
 8001f70:	817b      	strh	r3, [r7, #10]
 8001f72:	460b      	mov	r3, r1
 8001f74:	813b      	strh	r3, [r7, #8]
 8001f76:	4613      	mov	r3, r2
 8001f78:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001f88:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f000 f8c2 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00d      	beq.n	8001fce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fc0:	d103      	bne.n	8001fca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fc8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e0aa      	b.n	8002124 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fce:	897b      	ldrh	r3, [r7, #10]
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001fdc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	6a3a      	ldr	r2, [r7, #32]
 8001fe2:	4952      	ldr	r1, [pc, #328]	; (800212c <I2C_RequestMemoryRead+0x1cc>)
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f000 f91d 	bl	8002224 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e097      	b.n	8002124 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	617b      	str	r3, [r7, #20]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800200a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800200c:	6a39      	ldr	r1, [r7, #32]
 800200e:	68f8      	ldr	r0, [r7, #12]
 8002010:	f000 f9a8 	bl	8002364 <I2C_WaitOnTXEFlagUntilTimeout>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00d      	beq.n	8002036 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	2b04      	cmp	r3, #4
 8002020:	d107      	bne.n	8002032 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002030:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e076      	b.n	8002124 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002036:	88fb      	ldrh	r3, [r7, #6]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d105      	bne.n	8002048 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800203c:	893b      	ldrh	r3, [r7, #8]
 800203e:	b2da      	uxtb	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	611a      	str	r2, [r3, #16]
 8002046:	e021      	b.n	800208c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002048:	893b      	ldrh	r3, [r7, #8]
 800204a:	0a1b      	lsrs	r3, r3, #8
 800204c:	b29b      	uxth	r3, r3
 800204e:	b2da      	uxtb	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002058:	6a39      	ldr	r1, [r7, #32]
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f000 f982 	bl	8002364 <I2C_WaitOnTXEFlagUntilTimeout>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00d      	beq.n	8002082 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	2b04      	cmp	r3, #4
 800206c:	d107      	bne.n	800207e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800207c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e050      	b.n	8002124 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002082:	893b      	ldrh	r3, [r7, #8]
 8002084:	b2da      	uxtb	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800208c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800208e:	6a39      	ldr	r1, [r7, #32]
 8002090:	68f8      	ldr	r0, [r7, #12]
 8002092:	f000 f967 	bl	8002364 <I2C_WaitOnTXEFlagUntilTimeout>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00d      	beq.n	80020b8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	d107      	bne.n	80020b4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020b2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e035      	b.n	8002124 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020c6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	6a3b      	ldr	r3, [r7, #32]
 80020ce:	2200      	movs	r2, #0
 80020d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f000 f82b 	bl	8002130 <I2C_WaitOnFlagUntilTimeout>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00d      	beq.n	80020fc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80020ee:	d103      	bne.n	80020f8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e013      	b.n	8002124 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80020fc:	897b      	ldrh	r3, [r7, #10]
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	b2da      	uxtb	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210e:	6a3a      	ldr	r2, [r7, #32]
 8002110:	4906      	ldr	r1, [pc, #24]	; (800212c <I2C_RequestMemoryRead+0x1cc>)
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f000 f886 	bl	8002224 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3718      	adds	r7, #24
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	00010002 	.word	0x00010002

08002130 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	603b      	str	r3, [r7, #0]
 800213c:	4613      	mov	r3, r2
 800213e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002140:	e048      	b.n	80021d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002148:	d044      	beq.n	80021d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800214a:	f7fe fe31 	bl	8000db0 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	1ad3      	subs	r3, r2, r3
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	429a      	cmp	r2, r3
 8002158:	d302      	bcc.n	8002160 <I2C_WaitOnFlagUntilTimeout+0x30>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d139      	bne.n	80021d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	0c1b      	lsrs	r3, r3, #16
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b01      	cmp	r3, #1
 8002168:	d10d      	bne.n	8002186 <I2C_WaitOnFlagUntilTimeout+0x56>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	43da      	mvns	r2, r3
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	4013      	ands	r3, r2
 8002176:	b29b      	uxth	r3, r3
 8002178:	2b00      	cmp	r3, #0
 800217a:	bf0c      	ite	eq
 800217c:	2301      	moveq	r3, #1
 800217e:	2300      	movne	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	461a      	mov	r2, r3
 8002184:	e00c      	b.n	80021a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	43da      	mvns	r2, r3
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	4013      	ands	r3, r2
 8002192:	b29b      	uxth	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	bf0c      	ite	eq
 8002198:	2301      	moveq	r3, #1
 800219a:	2300      	movne	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	461a      	mov	r2, r3
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d116      	bne.n	80021d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2200      	movs	r2, #0
 80021aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2220      	movs	r2, #32
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c0:	f043 0220 	orr.w	r2, r3, #32
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e023      	b.n	800221c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	0c1b      	lsrs	r3, r3, #16
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d10d      	bne.n	80021fa <I2C_WaitOnFlagUntilTimeout+0xca>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	43da      	mvns	r2, r3
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	4013      	ands	r3, r2
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	bf0c      	ite	eq
 80021f0:	2301      	moveq	r3, #1
 80021f2:	2300      	movne	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	461a      	mov	r2, r3
 80021f8:	e00c      	b.n	8002214 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	43da      	mvns	r2, r3
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	4013      	ands	r3, r2
 8002206:	b29b      	uxth	r3, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	bf0c      	ite	eq
 800220c:	2301      	moveq	r3, #1
 800220e:	2300      	movne	r3, #0
 8002210:	b2db      	uxtb	r3, r3
 8002212:	461a      	mov	r2, r3
 8002214:	79fb      	ldrb	r3, [r7, #7]
 8002216:	429a      	cmp	r2, r3
 8002218:	d093      	beq.n	8002142 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
 8002230:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002232:	e071      	b.n	8002318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800223e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002242:	d123      	bne.n	800228c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002252:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800225c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2220      	movs	r2, #32
 8002268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	f043 0204 	orr.w	r2, r3, #4
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e067      	b.n	800235c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002292:	d041      	beq.n	8002318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002294:	f7fe fd8c 	bl	8000db0 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d302      	bcc.n	80022aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d136      	bne.n	8002318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	0c1b      	lsrs	r3, r3, #16
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d10c      	bne.n	80022ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	43da      	mvns	r2, r3
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	4013      	ands	r3, r2
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	bf14      	ite	ne
 80022c6:	2301      	movne	r3, #1
 80022c8:	2300      	moveq	r3, #0
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	e00b      	b.n	80022e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	43da      	mvns	r2, r3
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	4013      	ands	r3, r2
 80022da:	b29b      	uxth	r3, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	bf14      	ite	ne
 80022e0:	2301      	movne	r3, #1
 80022e2:	2300      	moveq	r3, #0
 80022e4:	b2db      	uxtb	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d016      	beq.n	8002318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2200      	movs	r2, #0
 80022ee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2220      	movs	r2, #32
 80022f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	f043 0220 	orr.w	r2, r3, #32
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e021      	b.n	800235c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	0c1b      	lsrs	r3, r3, #16
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b01      	cmp	r3, #1
 8002320:	d10c      	bne.n	800233c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695b      	ldr	r3, [r3, #20]
 8002328:	43da      	mvns	r2, r3
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	4013      	ands	r3, r2
 800232e:	b29b      	uxth	r3, r3
 8002330:	2b00      	cmp	r3, #0
 8002332:	bf14      	ite	ne
 8002334:	2301      	movne	r3, #1
 8002336:	2300      	moveq	r3, #0
 8002338:	b2db      	uxtb	r3, r3
 800233a:	e00b      	b.n	8002354 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	43da      	mvns	r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	4013      	ands	r3, r2
 8002348:	b29b      	uxth	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	bf14      	ite	ne
 800234e:	2301      	movne	r3, #1
 8002350:	2300      	moveq	r3, #0
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	f47f af6d 	bne.w	8002234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002370:	e034      	b.n	80023dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002372:	68f8      	ldr	r0, [r7, #12]
 8002374:	f000 f89b 	bl	80024ae <I2C_IsAcknowledgeFailed>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e034      	b.n	80023ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002388:	d028      	beq.n	80023dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800238a:	f7fe fd11 	bl	8000db0 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	429a      	cmp	r2, r3
 8002398:	d302      	bcc.n	80023a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d11d      	bne.n	80023dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023aa:	2b80      	cmp	r3, #128	; 0x80
 80023ac:	d016      	beq.n	80023dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2200      	movs	r2, #0
 80023b2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	2220      	movs	r2, #32
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2200      	movs	r2, #0
 80023c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	f043 0220 	orr.w	r2, r3, #32
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e007      	b.n	80023ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023e6:	2b80      	cmp	r3, #128	; 0x80
 80023e8:	d1c3      	bne.n	8002372 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3710      	adds	r7, #16
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002400:	e049      	b.n	8002496 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	f003 0310 	and.w	r3, r3, #16
 800240c:	2b10      	cmp	r3, #16
 800240e:	d119      	bne.n	8002444 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f06f 0210 	mvn.w	r2, #16
 8002418:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2220      	movs	r2, #32
 8002424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e030      	b.n	80024a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002444:	f7fe fcb4 	bl	8000db0 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	429a      	cmp	r2, r3
 8002452:	d302      	bcc.n	800245a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d11d      	bne.n	8002496 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	695b      	ldr	r3, [r3, #20]
 8002460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002464:	2b40      	cmp	r3, #64	; 0x40
 8002466:	d016      	beq.n	8002496 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2200      	movs	r2, #0
 800246c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2220      	movs	r2, #32
 8002472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	f043 0220 	orr.w	r2, r3, #32
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e007      	b.n	80024a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a0:	2b40      	cmp	r3, #64	; 0x40
 80024a2:	d1ae      	bne.n	8002402 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024c4:	d11b      	bne.n	80024fe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024ce:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2220      	movs	r2, #32
 80024da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	f043 0204 	orr.w	r2, r3, #4
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr
	...

0800250c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e272      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	f000 8087 	beq.w	800263a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800252c:	4b92      	ldr	r3, [pc, #584]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f003 030c 	and.w	r3, r3, #12
 8002534:	2b04      	cmp	r3, #4
 8002536:	d00c      	beq.n	8002552 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002538:	4b8f      	ldr	r3, [pc, #572]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 030c 	and.w	r3, r3, #12
 8002540:	2b08      	cmp	r3, #8
 8002542:	d112      	bne.n	800256a <HAL_RCC_OscConfig+0x5e>
 8002544:	4b8c      	ldr	r3, [pc, #560]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800254c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002550:	d10b      	bne.n	800256a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002552:	4b89      	ldr	r3, [pc, #548]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d06c      	beq.n	8002638 <HAL_RCC_OscConfig+0x12c>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d168      	bne.n	8002638 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e24c      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002572:	d106      	bne.n	8002582 <HAL_RCC_OscConfig+0x76>
 8002574:	4b80      	ldr	r3, [pc, #512]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a7f      	ldr	r2, [pc, #508]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 800257a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800257e:	6013      	str	r3, [r2, #0]
 8002580:	e02e      	b.n	80025e0 <HAL_RCC_OscConfig+0xd4>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10c      	bne.n	80025a4 <HAL_RCC_OscConfig+0x98>
 800258a:	4b7b      	ldr	r3, [pc, #492]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a7a      	ldr	r2, [pc, #488]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 8002590:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	4b78      	ldr	r3, [pc, #480]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a77      	ldr	r2, [pc, #476]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 800259c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	e01d      	b.n	80025e0 <HAL_RCC_OscConfig+0xd4>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025ac:	d10c      	bne.n	80025c8 <HAL_RCC_OscConfig+0xbc>
 80025ae:	4b72      	ldr	r3, [pc, #456]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a71      	ldr	r2, [pc, #452]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 80025b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025b8:	6013      	str	r3, [r2, #0]
 80025ba:	4b6f      	ldr	r3, [pc, #444]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a6e      	ldr	r2, [pc, #440]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 80025c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	e00b      	b.n	80025e0 <HAL_RCC_OscConfig+0xd4>
 80025c8:	4b6b      	ldr	r3, [pc, #428]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a6a      	ldr	r2, [pc, #424]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 80025ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025d2:	6013      	str	r3, [r2, #0]
 80025d4:	4b68      	ldr	r3, [pc, #416]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a67      	ldr	r2, [pc, #412]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 80025da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d013      	beq.n	8002610 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e8:	f7fe fbe2 	bl	8000db0 <HAL_GetTick>
 80025ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ee:	e008      	b.n	8002602 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f0:	f7fe fbde 	bl	8000db0 <HAL_GetTick>
 80025f4:	4602      	mov	r2, r0
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	1ad3      	subs	r3, r2, r3
 80025fa:	2b64      	cmp	r3, #100	; 0x64
 80025fc:	d901      	bls.n	8002602 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025fe:	2303      	movs	r3, #3
 8002600:	e200      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002602:	4b5d      	ldr	r3, [pc, #372]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0f0      	beq.n	80025f0 <HAL_RCC_OscConfig+0xe4>
 800260e:	e014      	b.n	800263a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002610:	f7fe fbce 	bl	8000db0 <HAL_GetTick>
 8002614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002616:	e008      	b.n	800262a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002618:	f7fe fbca 	bl	8000db0 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	2b64      	cmp	r3, #100	; 0x64
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e1ec      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800262a:	4b53      	ldr	r3, [pc, #332]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d1f0      	bne.n	8002618 <HAL_RCC_OscConfig+0x10c>
 8002636:	e000      	b.n	800263a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d063      	beq.n	800270e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002646:	4b4c      	ldr	r3, [pc, #304]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f003 030c 	and.w	r3, r3, #12
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00b      	beq.n	800266a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002652:	4b49      	ldr	r3, [pc, #292]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f003 030c 	and.w	r3, r3, #12
 800265a:	2b08      	cmp	r3, #8
 800265c:	d11c      	bne.n	8002698 <HAL_RCC_OscConfig+0x18c>
 800265e:	4b46      	ldr	r3, [pc, #280]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d116      	bne.n	8002698 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800266a:	4b43      	ldr	r3, [pc, #268]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d005      	beq.n	8002682 <HAL_RCC_OscConfig+0x176>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d001      	beq.n	8002682 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e1c0      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002682:	4b3d      	ldr	r3, [pc, #244]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4939      	ldr	r1, [pc, #228]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 8002692:	4313      	orrs	r3, r2
 8002694:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002696:	e03a      	b.n	800270e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d020      	beq.n	80026e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026a0:	4b36      	ldr	r3, [pc, #216]	; (800277c <HAL_RCC_OscConfig+0x270>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a6:	f7fe fb83 	bl	8000db0 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ae:	f7fe fb7f 	bl	8000db0 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e1a1      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c0:	4b2d      	ldr	r3, [pc, #180]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0f0      	beq.n	80026ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026cc:	4b2a      	ldr	r3, [pc, #168]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	4927      	ldr	r1, [pc, #156]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	600b      	str	r3, [r1, #0]
 80026e0:	e015      	b.n	800270e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026e2:	4b26      	ldr	r3, [pc, #152]	; (800277c <HAL_RCC_OscConfig+0x270>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e8:	f7fe fb62 	bl	8000db0 <HAL_GetTick>
 80026ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ee:	e008      	b.n	8002702 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026f0:	f7fe fb5e 	bl	8000db0 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e180      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002702:	4b1d      	ldr	r3, [pc, #116]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d1f0      	bne.n	80026f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d03a      	beq.n	8002790 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d019      	beq.n	8002756 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002722:	4b17      	ldr	r3, [pc, #92]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 8002724:	2201      	movs	r2, #1
 8002726:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002728:	f7fe fb42 	bl	8000db0 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002730:	f7fe fb3e 	bl	8000db0 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e160      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002742:	4b0d      	ldr	r3, [pc, #52]	; (8002778 <HAL_RCC_OscConfig+0x26c>)
 8002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0f0      	beq.n	8002730 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800274e:	2001      	movs	r0, #1
 8002750:	f000 face 	bl	8002cf0 <RCC_Delay>
 8002754:	e01c      	b.n	8002790 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002756:	4b0a      	ldr	r3, [pc, #40]	; (8002780 <HAL_RCC_OscConfig+0x274>)
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800275c:	f7fe fb28 	bl	8000db0 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002762:	e00f      	b.n	8002784 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002764:	f7fe fb24 	bl	8000db0 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d908      	bls.n	8002784 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e146      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
 8002776:	bf00      	nop
 8002778:	40021000 	.word	0x40021000
 800277c:	42420000 	.word	0x42420000
 8002780:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002784:	4b92      	ldr	r3, [pc, #584]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d1e9      	bne.n	8002764 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 80a6 	beq.w	80028ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800279e:	2300      	movs	r3, #0
 80027a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027a2:	4b8b      	ldr	r3, [pc, #556]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10d      	bne.n	80027ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ae:	4b88      	ldr	r3, [pc, #544]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	4a87      	ldr	r2, [pc, #540]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80027b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027b8:	61d3      	str	r3, [r2, #28]
 80027ba:	4b85      	ldr	r3, [pc, #532]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80027bc:	69db      	ldr	r3, [r3, #28]
 80027be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c2:	60bb      	str	r3, [r7, #8]
 80027c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027c6:	2301      	movs	r3, #1
 80027c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ca:	4b82      	ldr	r3, [pc, #520]	; (80029d4 <HAL_RCC_OscConfig+0x4c8>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d118      	bne.n	8002808 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027d6:	4b7f      	ldr	r3, [pc, #508]	; (80029d4 <HAL_RCC_OscConfig+0x4c8>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a7e      	ldr	r2, [pc, #504]	; (80029d4 <HAL_RCC_OscConfig+0x4c8>)
 80027dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027e2:	f7fe fae5 	bl	8000db0 <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ea:	f7fe fae1 	bl	8000db0 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b64      	cmp	r3, #100	; 0x64
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e103      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027fc:	4b75      	ldr	r3, [pc, #468]	; (80029d4 <HAL_RCC_OscConfig+0x4c8>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0f0      	beq.n	80027ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d106      	bne.n	800281e <HAL_RCC_OscConfig+0x312>
 8002810:	4b6f      	ldr	r3, [pc, #444]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	4a6e      	ldr	r2, [pc, #440]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	6213      	str	r3, [r2, #32]
 800281c:	e02d      	b.n	800287a <HAL_RCC_OscConfig+0x36e>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10c      	bne.n	8002840 <HAL_RCC_OscConfig+0x334>
 8002826:	4b6a      	ldr	r3, [pc, #424]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002828:	6a1b      	ldr	r3, [r3, #32]
 800282a:	4a69      	ldr	r2, [pc, #420]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 800282c:	f023 0301 	bic.w	r3, r3, #1
 8002830:	6213      	str	r3, [r2, #32]
 8002832:	4b67      	ldr	r3, [pc, #412]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	4a66      	ldr	r2, [pc, #408]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002838:	f023 0304 	bic.w	r3, r3, #4
 800283c:	6213      	str	r3, [r2, #32]
 800283e:	e01c      	b.n	800287a <HAL_RCC_OscConfig+0x36e>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	2b05      	cmp	r3, #5
 8002846:	d10c      	bne.n	8002862 <HAL_RCC_OscConfig+0x356>
 8002848:	4b61      	ldr	r3, [pc, #388]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	4a60      	ldr	r2, [pc, #384]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 800284e:	f043 0304 	orr.w	r3, r3, #4
 8002852:	6213      	str	r3, [r2, #32]
 8002854:	4b5e      	ldr	r3, [pc, #376]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	4a5d      	ldr	r2, [pc, #372]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 800285a:	f043 0301 	orr.w	r3, r3, #1
 800285e:	6213      	str	r3, [r2, #32]
 8002860:	e00b      	b.n	800287a <HAL_RCC_OscConfig+0x36e>
 8002862:	4b5b      	ldr	r3, [pc, #364]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	4a5a      	ldr	r2, [pc, #360]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002868:	f023 0301 	bic.w	r3, r3, #1
 800286c:	6213      	str	r3, [r2, #32]
 800286e:	4b58      	ldr	r3, [pc, #352]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	4a57      	ldr	r2, [pc, #348]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002874:	f023 0304 	bic.w	r3, r3, #4
 8002878:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d015      	beq.n	80028ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002882:	f7fe fa95 	bl	8000db0 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002888:	e00a      	b.n	80028a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800288a:	f7fe fa91 	bl	8000db0 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	f241 3288 	movw	r2, #5000	; 0x1388
 8002898:	4293      	cmp	r3, r2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e0b1      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028a0:	4b4b      	ldr	r3, [pc, #300]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0ee      	beq.n	800288a <HAL_RCC_OscConfig+0x37e>
 80028ac:	e014      	b.n	80028d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ae:	f7fe fa7f 	bl	8000db0 <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b4:	e00a      	b.n	80028cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b6:	f7fe fa7b 	bl	8000db0 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e09b      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028cc:	4b40      	ldr	r3, [pc, #256]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1ee      	bne.n	80028b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028d8:	7dfb      	ldrb	r3, [r7, #23]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d105      	bne.n	80028ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028de:	4b3c      	ldr	r3, [pc, #240]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	4a3b      	ldr	r2, [pc, #236]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80028e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f000 8087 	beq.w	8002a02 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028f4:	4b36      	ldr	r3, [pc, #216]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 030c 	and.w	r3, r3, #12
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d061      	beq.n	80029c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	2b02      	cmp	r3, #2
 8002906:	d146      	bne.n	8002996 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002908:	4b33      	ldr	r3, [pc, #204]	; (80029d8 <HAL_RCC_OscConfig+0x4cc>)
 800290a:	2200      	movs	r2, #0
 800290c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290e:	f7fe fa4f 	bl	8000db0 <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002916:	f7fe fa4b 	bl	8000db0 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e06d      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002928:	4b29      	ldr	r3, [pc, #164]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1f0      	bne.n	8002916 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a1b      	ldr	r3, [r3, #32]
 8002938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800293c:	d108      	bne.n	8002950 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800293e:	4b24      	ldr	r3, [pc, #144]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	4921      	ldr	r1, [pc, #132]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 800294c:	4313      	orrs	r3, r2
 800294e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002950:	4b1f      	ldr	r3, [pc, #124]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a19      	ldr	r1, [r3, #32]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002960:	430b      	orrs	r3, r1
 8002962:	491b      	ldr	r1, [pc, #108]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 8002964:	4313      	orrs	r3, r2
 8002966:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002968:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <HAL_RCC_OscConfig+0x4cc>)
 800296a:	2201      	movs	r2, #1
 800296c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296e:	f7fe fa1f 	bl	8000db0 <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002976:	f7fe fa1b 	bl	8000db0 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e03d      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002988:	4b11      	ldr	r3, [pc, #68]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0f0      	beq.n	8002976 <HAL_RCC_OscConfig+0x46a>
 8002994:	e035      	b.n	8002a02 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002996:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <HAL_RCC_OscConfig+0x4cc>)
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800299c:	f7fe fa08 	bl	8000db0 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a4:	f7fe fa04 	bl	8000db0 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e026      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029b6:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <HAL_RCC_OscConfig+0x4c4>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f0      	bne.n	80029a4 <HAL_RCC_OscConfig+0x498>
 80029c2:	e01e      	b.n	8002a02 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69db      	ldr	r3, [r3, #28]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d107      	bne.n	80029dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e019      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
 80029d0:	40021000 	.word	0x40021000
 80029d4:	40007000 	.word	0x40007000
 80029d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029dc:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <HAL_RCC_OscConfig+0x500>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d106      	bne.n	80029fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d001      	beq.n	8002a02 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40021000 	.word	0x40021000

08002a10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e0d0      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a24:	4b6a      	ldr	r3, [pc, #424]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0307 	and.w	r3, r3, #7
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d910      	bls.n	8002a54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a32:	4b67      	ldr	r3, [pc, #412]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f023 0207 	bic.w	r2, r3, #7
 8002a3a:	4965      	ldr	r1, [pc, #404]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a42:	4b63      	ldr	r3, [pc, #396]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d001      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e0b8      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d020      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0304 	and.w	r3, r3, #4
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d005      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a6c:	4b59      	ldr	r3, [pc, #356]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	4a58      	ldr	r2, [pc, #352]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a84:	4b53      	ldr	r3, [pc, #332]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	4a52      	ldr	r2, [pc, #328]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a90:	4b50      	ldr	r3, [pc, #320]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	494d      	ldr	r1, [pc, #308]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d040      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d107      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab6:	4b47      	ldr	r3, [pc, #284]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d115      	bne.n	8002aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e07f      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d107      	bne.n	8002ade <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ace:	4b41      	ldr	r3, [pc, #260]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d109      	bne.n	8002aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e073      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ade:	4b3d      	ldr	r3, [pc, #244]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0302 	and.w	r3, r3, #2
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e06b      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aee:	4b39      	ldr	r3, [pc, #228]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f023 0203 	bic.w	r2, r3, #3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	4936      	ldr	r1, [pc, #216]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b00:	f7fe f956 	bl	8000db0 <HAL_GetTick>
 8002b04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b06:	e00a      	b.n	8002b1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b08:	f7fe f952 	bl	8000db0 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e053      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1e:	4b2d      	ldr	r3, [pc, #180]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f003 020c 	and.w	r2, r3, #12
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d1eb      	bne.n	8002b08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b30:	4b27      	ldr	r3, [pc, #156]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d210      	bcs.n	8002b60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3e:	4b24      	ldr	r3, [pc, #144]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f023 0207 	bic.w	r2, r3, #7
 8002b46:	4922      	ldr	r1, [pc, #136]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4e:	4b20      	ldr	r3, [pc, #128]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	683a      	ldr	r2, [r7, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d001      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e032      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d008      	beq.n	8002b7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b6c:	4b19      	ldr	r3, [pc, #100]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	4916      	ldr	r1, [pc, #88]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d009      	beq.n	8002b9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b8a:	4b12      	ldr	r3, [pc, #72]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	490e      	ldr	r1, [pc, #56]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b9e:	f000 f821 	bl	8002be4 <HAL_RCC_GetSysClockFreq>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	4b0b      	ldr	r3, [pc, #44]	; (8002bd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	091b      	lsrs	r3, r3, #4
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	490a      	ldr	r1, [pc, #40]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002bb0:	5ccb      	ldrb	r3, [r1, r3]
 8002bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb6:	4a09      	ldr	r2, [pc, #36]	; (8002bdc <HAL_RCC_ClockConfig+0x1cc>)
 8002bb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bba:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <HAL_RCC_ClockConfig+0x1d0>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe f8b4 	bl	8000d2c <HAL_InitTick>

  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40022000 	.word	0x40022000
 8002bd4:	40021000 	.word	0x40021000
 8002bd8:	08004164 	.word	0x08004164
 8002bdc:	20000004 	.word	0x20000004
 8002be0:	20000008 	.word	0x20000008

08002be4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b087      	sub	sp, #28
 8002be8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bea:	2300      	movs	r3, #0
 8002bec:	60fb      	str	r3, [r7, #12]
 8002bee:	2300      	movs	r3, #0
 8002bf0:	60bb      	str	r3, [r7, #8]
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	617b      	str	r3, [r7, #20]
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bfe:	4b1e      	ldr	r3, [pc, #120]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f003 030c 	and.w	r3, r3, #12
 8002c0a:	2b04      	cmp	r3, #4
 8002c0c:	d002      	beq.n	8002c14 <HAL_RCC_GetSysClockFreq+0x30>
 8002c0e:	2b08      	cmp	r3, #8
 8002c10:	d003      	beq.n	8002c1a <HAL_RCC_GetSysClockFreq+0x36>
 8002c12:	e027      	b.n	8002c64 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c14:	4b19      	ldr	r3, [pc, #100]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x98>)
 8002c16:	613b      	str	r3, [r7, #16]
      break;
 8002c18:	e027      	b.n	8002c6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	0c9b      	lsrs	r3, r3, #18
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	4a17      	ldr	r2, [pc, #92]	; (8002c80 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c24:	5cd3      	ldrb	r3, [r2, r3]
 8002c26:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d010      	beq.n	8002c54 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c32:	4b11      	ldr	r3, [pc, #68]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	0c5b      	lsrs	r3, r3, #17
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	4a11      	ldr	r2, [pc, #68]	; (8002c84 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c3e:	5cd3      	ldrb	r3, [r2, r3]
 8002c40:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a0d      	ldr	r2, [pc, #52]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x98>)
 8002c46:	fb03 f202 	mul.w	r2, r3, r2
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	e004      	b.n	8002c5e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a0c      	ldr	r2, [pc, #48]	; (8002c88 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c58:	fb02 f303 	mul.w	r3, r2, r3
 8002c5c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	613b      	str	r3, [r7, #16]
      break;
 8002c62:	e002      	b.n	8002c6a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c64:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <HAL_RCC_GetSysClockFreq+0x98>)
 8002c66:	613b      	str	r3, [r7, #16]
      break;
 8002c68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c6a:	693b      	ldr	r3, [r7, #16]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	371c      	adds	r7, #28
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bc80      	pop	{r7}
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	007a1200 	.word	0x007a1200
 8002c80:	0800417c 	.word	0x0800417c
 8002c84:	0800418c 	.word	0x0800418c
 8002c88:	003d0900 	.word	0x003d0900

08002c8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c90:	4b02      	ldr	r3, [pc, #8]	; (8002c9c <HAL_RCC_GetHCLKFreq+0x10>)
 8002c92:	681b      	ldr	r3, [r3, #0]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bc80      	pop	{r7}
 8002c9a:	4770      	bx	lr
 8002c9c:	20000004 	.word	0x20000004

08002ca0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ca4:	f7ff fff2 	bl	8002c8c <HAL_RCC_GetHCLKFreq>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	4b05      	ldr	r3, [pc, #20]	; (8002cc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	0a1b      	lsrs	r3, r3, #8
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	4903      	ldr	r1, [pc, #12]	; (8002cc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cb6:	5ccb      	ldrb	r3, [r1, r3]
 8002cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	08004174 	.word	0x08004174

08002cc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ccc:	f7ff ffde 	bl	8002c8c <HAL_RCC_GetHCLKFreq>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	0adb      	lsrs	r3, r3, #11
 8002cd8:	f003 0307 	and.w	r3, r3, #7
 8002cdc:	4903      	ldr	r1, [pc, #12]	; (8002cec <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cde:	5ccb      	ldrb	r3, [r1, r3]
 8002ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	08004174 	.word	0x08004174

08002cf0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cf8:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <RCC_Delay+0x34>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a0a      	ldr	r2, [pc, #40]	; (8002d28 <RCC_Delay+0x38>)
 8002cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002d02:	0a5b      	lsrs	r3, r3, #9
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	fb02 f303 	mul.w	r3, r2, r3
 8002d0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d0c:	bf00      	nop
  }
  while (Delay --);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	1e5a      	subs	r2, r3, #1
 8002d12:	60fa      	str	r2, [r7, #12]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1f9      	bne.n	8002d0c <RCC_Delay+0x1c>
}
 8002d18:	bf00      	nop
 8002d1a:	bf00      	nop
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr
 8002d24:	20000004 	.word	0x20000004
 8002d28:	10624dd3 	.word	0x10624dd3

08002d2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e07e      	b.n	8002e3c <HAL_SPI_Init+0x110>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d108      	bne.n	8002d58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d4e:	d009      	beq.n	8002d64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	61da      	str	r2, [r3, #28]
 8002d56:	e005      	b.n	8002d64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d106      	bne.n	8002d7e <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f7fd fe8d 	bl	8000a98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2202      	movs	r2, #2
 8002d82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d94:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002db0:	431a      	orrs	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de2:	ea42 0103 	orr.w	r1, r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	0c1a      	lsrs	r2, r3, #16
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f002 0204 	and.w	r2, r2, #4
 8002e04:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e0e:	d105      	bne.n	8002e1c <HAL_SPI_Init+0xf0>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	b292      	uxth	r2, r2
 8002e1a:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	69da      	ldr	r2, [r3, #28]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e2a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2201      	movs	r2, #1
 8002e36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3708      	adds	r7, #8
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b08e      	sub	sp, #56	; 0x38
 8002e48:	af02      	add	r7, sp, #8
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
 8002e50:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_TxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002e56:	2301      	movs	r3, #1
 8002e58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d101      	bne.n	8002e6e <HAL_SPI_TransmitReceive+0x2a>
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	e21e      	b.n	80032ac <HAL_SPI_TransmitReceive+0x468>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e76:	f7fd ff9b 	bl	8000db0 <HAL_GetTick>
 8002e7a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002e8c:	887b      	ldrh	r3, [r7, #2]
 8002e8e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d00f      	beq.n	8002eb8 <HAL_SPI_TransmitReceive+0x74>
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e9e:	d107      	bne.n	8002eb0 <HAL_SPI_TransmitReceive+0x6c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d103      	bne.n	8002eb0 <HAL_SPI_TransmitReceive+0x6c>
 8002ea8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002eac:	2b04      	cmp	r3, #4
 8002eae:	d003      	beq.n	8002eb8 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002eb6:	e1f3      	b.n	80032a0 <HAL_SPI_TransmitReceive+0x45c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d005      	beq.n	8002eca <HAL_SPI_TransmitReceive+0x86>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d002      	beq.n	8002eca <HAL_SPI_TransmitReceive+0x86>
 8002ec4:	887b      	ldrh	r3, [r7, #2]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d103      	bne.n	8002ed2 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002ed0:	e1e6      	b.n	80032a0 <HAL_SPI_TransmitReceive+0x45c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d003      	beq.n	8002ee6 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2205      	movs	r2, #5
 8002ee2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	887a      	ldrh	r2, [r7, #2]
 8002ef6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	887a      	ldrh	r2, [r7, #2]
 8002efc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	68ba      	ldr	r2, [r7, #8]
 8002f02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	887a      	ldrh	r2, [r7, #2]
 8002f08:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	887a      	ldrh	r2, [r7, #2]
 8002f0e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f24:	d10f      	bne.n	8002f46 <HAL_SPI_TransmitReceive+0x102>
  {
    SPI_RESET_CRC(hspi);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f44:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f50:	2b40      	cmp	r3, #64	; 0x40
 8002f52:	d007      	beq.n	8002f64 <HAL_SPI_TransmitReceive+0x120>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f6c:	f040 808f 	bne.w	800308e <HAL_SPI_TransmitReceive+0x24a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d002      	beq.n	8002f7e <HAL_SPI_TransmitReceive+0x13a>
 8002f78:	8b7b      	ldrh	r3, [r7, #26]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d17c      	bne.n	8003078 <HAL_SPI_TransmitReceive+0x234>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	881a      	ldrh	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	1c9a      	adds	r2, r3, #2
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	b29a      	uxth	r2, r3
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fa2:	e069      	b.n	8003078 <HAL_SPI_TransmitReceive+0x234>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d12d      	bne.n	800300e <HAL_SPI_TransmitReceive+0x1ca>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d028      	beq.n	800300e <HAL_SPI_TransmitReceive+0x1ca>
 8002fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d125      	bne.n	800300e <HAL_SPI_TransmitReceive+0x1ca>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	881a      	ldrh	r2, [r3, #0]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	1c9a      	adds	r2, r3, #2
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10c      	bne.n	800300e <HAL_SPI_TransmitReceive+0x1ca>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ffc:	d107      	bne.n	800300e <HAL_SPI_TransmitReceive+0x1ca>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800300c:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	2b01      	cmp	r3, #1
 800301a:	d119      	bne.n	8003050 <HAL_SPI_TransmitReceive+0x20c>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003020:	b29b      	uxth	r3, r3
 8003022:	2b00      	cmp	r3, #0
 8003024:	d014      	beq.n	8003050 <HAL_SPI_TransmitReceive+0x20c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003030:	b292      	uxth	r2, r2
 8003032:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003038:	1c9a      	adds	r2, r3, #2
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003042:	b29b      	uxth	r3, r3
 8003044:	3b01      	subs	r3, #1
 8003046:	b29a      	uxth	r2, r3
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800304c:	2301      	movs	r3, #1
 800304e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003050:	f7fd feae 	bl	8000db0 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800305c:	429a      	cmp	r2, r3
 800305e:	d80b      	bhi.n	8003078 <HAL_SPI_TransmitReceive+0x234>
 8003060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003066:	d007      	beq.n	8003078 <HAL_SPI_TransmitReceive+0x234>
      {
        errorcode = HAL_TIMEOUT;
 8003068:	2303      	movs	r3, #3
 800306a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2201      	movs	r2, #1
 8003072:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003076:	e113      	b.n	80032a0 <HAL_SPI_TransmitReceive+0x45c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800307c:	b29b      	uxth	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d190      	bne.n	8002fa4 <HAL_SPI_TransmitReceive+0x160>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003086:	b29b      	uxth	r3, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	d18b      	bne.n	8002fa4 <HAL_SPI_TransmitReceive+0x160>
 800308c:	e093      	b.n	80031b6 <HAL_SPI_TransmitReceive+0x372>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <HAL_SPI_TransmitReceive+0x25a>
 8003096:	8b7b      	ldrh	r3, [r7, #26]
 8003098:	2b01      	cmp	r3, #1
 800309a:	f040 8082 	bne.w	80031a2 <HAL_SPI_TransmitReceive+0x35e>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	330c      	adds	r3, #12
 80030a8:	7812      	ldrb	r2, [r2, #0]
 80030aa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b0:	1c5a      	adds	r2, r3, #1
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	3b01      	subs	r3, #1
 80030be:	b29a      	uxth	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030c4:	e06d      	b.n	80031a2 <HAL_SPI_TransmitReceive+0x35e>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d12e      	bne.n	8003132 <HAL_SPI_TransmitReceive+0x2ee>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030d8:	b29b      	uxth	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d029      	beq.n	8003132 <HAL_SPI_TransmitReceive+0x2ee>
 80030de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d126      	bne.n	8003132 <HAL_SPI_TransmitReceive+0x2ee>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	330c      	adds	r3, #12
 80030ee:	7812      	ldrb	r2, [r2, #0]
 80030f0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	1c5a      	adds	r2, r3, #1
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003100:	b29b      	uxth	r3, r3
 8003102:	3b01      	subs	r3, #1
 8003104:	b29a      	uxth	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800310a:	2300      	movs	r3, #0
 800310c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003112:	b29b      	uxth	r3, r3
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10c      	bne.n	8003132 <HAL_SPI_TransmitReceive+0x2ee>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003120:	d107      	bne.n	8003132 <HAL_SPI_TransmitReceive+0x2ee>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003130:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f003 0301 	and.w	r3, r3, #1
 800313c:	2b01      	cmp	r3, #1
 800313e:	d119      	bne.n	8003174 <HAL_SPI_TransmitReceive+0x330>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003144:	b29b      	uxth	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d014      	beq.n	8003174 <HAL_SPI_TransmitReceive+0x330>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	68da      	ldr	r2, [r3, #12]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315c:	1c5a      	adds	r2, r3, #1
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003166:	b29b      	uxth	r3, r3
 8003168:	3b01      	subs	r3, #1
 800316a:	b29a      	uxth	r2, r3
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003170:	2301      	movs	r3, #1
 8003172:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003174:	f7fd fe1c 	bl	8000db0 <HAL_GetTick>
 8003178:	4602      	mov	r2, r0
 800317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003180:	429a      	cmp	r2, r3
 8003182:	d803      	bhi.n	800318c <HAL_SPI_TransmitReceive+0x348>
 8003184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800318a:	d102      	bne.n	8003192 <HAL_SPI_TransmitReceive+0x34e>
 800318c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800318e:	2b00      	cmp	r3, #0
 8003190:	d107      	bne.n	80031a2 <HAL_SPI_TransmitReceive+0x35e>
      {
        errorcode = HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80031a0:	e07e      	b.n	80032a0 <HAL_SPI_TransmitReceive+0x45c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d18c      	bne.n	80030c6 <HAL_SPI_TransmitReceive+0x282>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d187      	bne.n	80030c6 <HAL_SPI_TransmitReceive+0x282>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031be:	d119      	bne.n	80031f4 <HAL_SPI_TransmitReceive+0x3b0>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c6:	2201      	movs	r2, #1
 80031c8:	2101      	movs	r1, #1
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 f880 	bl	80032d0 <SPI_WaitFlagStateUntilTimeout>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d009      	beq.n	80031ea <HAL_SPI_TransmitReceive+0x3a6>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031da:	f043 0202 	orr.w	r2, r3, #2
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 80031e8:	e05a      	b.n	80032a0 <HAL_SPI_TransmitReceive+0x45c>
    }
    /* Read CRC */
    tmpreg = READ_REG(hspi->Instance->DR);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	617b      	str	r3, [r7, #20]
    /* To avoid GCC warning */
    UNUSED(tmpreg);
 80031f2:	697b      	ldr	r3, [r7, #20]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 0310 	and.w	r3, r3, #16
 80031fe:	2b10      	cmp	r3, #16
 8003200:	d124      	bne.n	800324c <HAL_SPI_TransmitReceive+0x408>
  {
    /* Check if CRC error is valid or not (workaround to be applied or not) */
    if (SPI_ISCRCErrorValid(hspi) == SPI_VALID_CRC_ERROR)
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 f90a 	bl	800341c <SPI_ISCRCErrorValid>
 8003208:	4603      	mov	r3, r0
 800320a:	2b01      	cmp	r3, #1
 800320c:	d119      	bne.n	8003242 <HAL_SPI_TransmitReceive+0x3fe>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003212:	f043 0202 	orr.w	r2, r3, #2
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	655a      	str	r2, [r3, #84]	; 0x54

      /* Reset CRC Calculation */
      SPI_RESET_CRC(hspi);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003228:	601a      	str	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003238:	601a      	str	r2, [r3, #0]

      errorcode = HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003240:	e004      	b.n	800324c <HAL_SPI_TransmitReceive+0x408>
    }
    else
    {
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800324a:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800324c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800324e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 f8c5 	bl	80033e0 <SPI_EndRxTxTransaction>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d006      	beq.n	800326a <HAL_SPI_TransmitReceive+0x426>
  {
    errorcode = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2220      	movs	r2, #32
 8003266:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003268:	e01a      	b.n	80032a0 <HAL_SPI_TransmitReceive+0x45c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10a      	bne.n	8003288 <HAL_SPI_TransmitReceive+0x444>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003272:	2300      	movs	r3, #0
 8003274:	613b      	str	r3, [r7, #16]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	613b      	str	r3, [r7, #16]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	613b      	str	r3, [r7, #16]
 8003286:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328c:	2b00      	cmp	r3, #0
 800328e:	d003      	beq.n	8003298 <HAL_SPI_TransmitReceive+0x454>
  {
    errorcode = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003296:	e003      	b.n	80032a0 <HAL_SPI_TransmitReceive+0x45c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80032a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3730      	adds	r7, #48	; 0x30
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032c2:	b2db      	uxtb	r3, r3
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bc80      	pop	{r7}
 80032cc:	4770      	bx	lr
	...

080032d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b088      	sub	sp, #32
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	603b      	str	r3, [r7, #0]
 80032dc:	4613      	mov	r3, r2
 80032de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80032e0:	f7fd fd66 	bl	8000db0 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e8:	1a9b      	subs	r3, r3, r2
 80032ea:	683a      	ldr	r2, [r7, #0]
 80032ec:	4413      	add	r3, r2
 80032ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80032f0:	f7fd fd5e 	bl	8000db0 <HAL_GetTick>
 80032f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80032f6:	4b39      	ldr	r3, [pc, #228]	; (80033dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	015b      	lsls	r3, r3, #5
 80032fc:	0d1b      	lsrs	r3, r3, #20
 80032fe:	69fa      	ldr	r2, [r7, #28]
 8003300:	fb02 f303 	mul.w	r3, r2, r3
 8003304:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003306:	e054      	b.n	80033b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330e:	d050      	beq.n	80033b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003310:	f7fd fd4e 	bl	8000db0 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	69fa      	ldr	r2, [r7, #28]
 800331c:	429a      	cmp	r2, r3
 800331e:	d902      	bls.n	8003326 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d13d      	bne.n	80033a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003334:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800333e:	d111      	bne.n	8003364 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003348:	d004      	beq.n	8003354 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003352:	d107      	bne.n	8003364 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003362:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003368:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800336c:	d10f      	bne.n	800338e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800338c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e017      	b.n	80033d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	3b01      	subs	r3, #1
 80033b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	4013      	ands	r3, r2
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	429a      	cmp	r2, r3
 80033c0:	bf0c      	ite	eq
 80033c2:	2301      	moveq	r3, #1
 80033c4:	2300      	movne	r3, #0
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	461a      	mov	r2, r3
 80033ca:	79fb      	ldrb	r3, [r7, #7]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d19b      	bne.n	8003308 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3720      	adds	r7, #32
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	20000004 	.word	0x20000004

080033e0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af02      	add	r7, sp, #8
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	2200      	movs	r2, #0
 80033f4:	2180      	movs	r1, #128	; 0x80
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f7ff ff6a 	bl	80032d0 <SPI_WaitFlagStateUntilTimeout>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d007      	beq.n	8003412 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003406:	f043 0220 	orr.w	r2, r3, #32
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e000      	b.n	8003414 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <SPI_ISCRCErrorValid>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval CRC error validity (SPI_INVALID_CRC_ERROR or SPI_VALID_CRC_ERROR).
  */
uint8_t SPI_ISCRCErrorValid(SPI_HandleTypeDef *hspi)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  }
#endif /* USE_SPI_CRC_ERROR_WORKAROUND */
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);

  return (SPI_VALID_CRC_ERROR);
 8003424:	2301      	movs	r3, #1
}
 8003426:	4618      	mov	r0, r3
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	bc80      	pop	{r7}
 800342e:	4770      	bx	lr

08003430 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e042      	b.n	80034c8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d106      	bne.n	800345c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7fd fb68 	bl	8000b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2224      	movs	r2, #36	; 0x24
 8003460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003472:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f91d 	bl	80036b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	691a      	ldr	r2, [r3, #16]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003488:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	695a      	ldr	r2, [r3, #20]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003498:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68da      	ldr	r2, [r3, #12]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2220      	movs	r2, #32
 80034b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2220      	movs	r2, #32
 80034bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80034c6:	2300      	movs	r3, #0
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3708      	adds	r7, #8
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b08a      	sub	sp, #40	; 0x28
 80034d4:	af02      	add	r7, sp, #8
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	603b      	str	r3, [r7, #0]
 80034dc:	4613      	mov	r3, r2
 80034de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b20      	cmp	r3, #32
 80034ee:	d16d      	bne.n	80035cc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d002      	beq.n	80034fc <HAL_UART_Transmit+0x2c>
 80034f6:	88fb      	ldrh	r3, [r7, #6]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e066      	b.n	80035ce <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2200      	movs	r2, #0
 8003504:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2221      	movs	r2, #33	; 0x21
 800350a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800350e:	f7fd fc4f 	bl	8000db0 <HAL_GetTick>
 8003512:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	88fa      	ldrh	r2, [r7, #6]
 8003518:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	88fa      	ldrh	r2, [r7, #6]
 800351e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003528:	d108      	bne.n	800353c <HAL_UART_Transmit+0x6c>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d104      	bne.n	800353c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003532:	2300      	movs	r3, #0
 8003534:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	61bb      	str	r3, [r7, #24]
 800353a:	e003      	b.n	8003544 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003540:	2300      	movs	r3, #0
 8003542:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003544:	e02a      	b.n	800359c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	2200      	movs	r2, #0
 800354e:	2180      	movs	r1, #128	; 0x80
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 f840 	bl	80035d6 <UART_WaitOnFlagUntilTimeout>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e036      	b.n	80035ce <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10b      	bne.n	800357e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	881b      	ldrh	r3, [r3, #0]
 800356a:	461a      	mov	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003574:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	3302      	adds	r3, #2
 800357a:	61bb      	str	r3, [r7, #24]
 800357c:	e007      	b.n	800358e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	781a      	ldrb	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	3301      	adds	r3, #1
 800358c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003592:	b29b      	uxth	r3, r3
 8003594:	3b01      	subs	r3, #1
 8003596:	b29a      	uxth	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1cf      	bne.n	8003546 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2200      	movs	r2, #0
 80035ae:	2140      	movs	r1, #64	; 0x40
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 f810 	bl	80035d6 <UART_WaitOnFlagUntilTimeout>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e006      	b.n	80035ce <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2220      	movs	r2, #32
 80035c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80035c8:	2300      	movs	r3, #0
 80035ca:	e000      	b.n	80035ce <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80035cc:	2302      	movs	r3, #2
  }
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3720      	adds	r7, #32
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b090      	sub	sp, #64	; 0x40
 80035da:	af00      	add	r7, sp, #0
 80035dc:	60f8      	str	r0, [r7, #12]
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	603b      	str	r3, [r7, #0]
 80035e2:	4613      	mov	r3, r2
 80035e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035e6:	e050      	b.n	800368a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ee:	d04c      	beq.n	800368a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d007      	beq.n	8003606 <UART_WaitOnFlagUntilTimeout+0x30>
 80035f6:	f7fd fbdb 	bl	8000db0 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003602:	429a      	cmp	r2, r3
 8003604:	d241      	bcs.n	800368a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	330c      	adds	r3, #12
 800360c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800360e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003610:	e853 3f00 	ldrex	r3, [r3]
 8003614:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003618:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800361c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	330c      	adds	r3, #12
 8003624:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003626:	637a      	str	r2, [r7, #52]	; 0x34
 8003628:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800362c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800362e:	e841 2300 	strex	r3, r2, [r1]
 8003632:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1e5      	bne.n	8003606 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	3314      	adds	r3, #20
 8003640:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	e853 3f00 	ldrex	r3, [r3]
 8003648:	613b      	str	r3, [r7, #16]
   return(result);
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	f023 0301 	bic.w	r3, r3, #1
 8003650:	63bb      	str	r3, [r7, #56]	; 0x38
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	3314      	adds	r3, #20
 8003658:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800365a:	623a      	str	r2, [r7, #32]
 800365c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800365e:	69f9      	ldr	r1, [r7, #28]
 8003660:	6a3a      	ldr	r2, [r7, #32]
 8003662:	e841 2300 	strex	r3, r2, [r1]
 8003666:	61bb      	str	r3, [r7, #24]
   return(result);
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1e5      	bne.n	800363a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2220      	movs	r2, #32
 8003672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2220      	movs	r2, #32
 800367a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e00f      	b.n	80036aa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	4013      	ands	r3, r2
 8003694:	68ba      	ldr	r2, [r7, #8]
 8003696:	429a      	cmp	r2, r3
 8003698:	bf0c      	ite	eq
 800369a:	2301      	moveq	r3, #1
 800369c:	2300      	movne	r3, #0
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	461a      	mov	r2, r3
 80036a2:	79fb      	ldrb	r3, [r7, #7]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d09f      	beq.n	80035e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3740      	adds	r7, #64	; 0x40
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
	...

080036b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68da      	ldr	r2, [r3, #12]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	431a      	orrs	r2, r3
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80036ee:	f023 030c 	bic.w	r3, r3, #12
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	6812      	ldr	r2, [r2, #0]
 80036f6:	68b9      	ldr	r1, [r7, #8]
 80036f8:	430b      	orrs	r3, r1
 80036fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	699a      	ldr	r2, [r3, #24]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a2c      	ldr	r2, [pc, #176]	; (80037c8 <UART_SetConfig+0x114>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d103      	bne.n	8003724 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800371c:	f7ff fad4 	bl	8002cc8 <HAL_RCC_GetPCLK2Freq>
 8003720:	60f8      	str	r0, [r7, #12]
 8003722:	e002      	b.n	800372a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003724:	f7ff fabc 	bl	8002ca0 <HAL_RCC_GetPCLK1Freq>
 8003728:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	4613      	mov	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	009a      	lsls	r2, r3, #2
 8003734:	441a      	add	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003740:	4a22      	ldr	r2, [pc, #136]	; (80037cc <UART_SetConfig+0x118>)
 8003742:	fba2 2303 	umull	r2, r3, r2, r3
 8003746:	095b      	lsrs	r3, r3, #5
 8003748:	0119      	lsls	r1, r3, #4
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	4613      	mov	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	009a      	lsls	r2, r3, #2
 8003754:	441a      	add	r2, r3
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003760:	4b1a      	ldr	r3, [pc, #104]	; (80037cc <UART_SetConfig+0x118>)
 8003762:	fba3 0302 	umull	r0, r3, r3, r2
 8003766:	095b      	lsrs	r3, r3, #5
 8003768:	2064      	movs	r0, #100	; 0x64
 800376a:	fb00 f303 	mul.w	r3, r0, r3
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	3332      	adds	r3, #50	; 0x32
 8003774:	4a15      	ldr	r2, [pc, #84]	; (80037cc <UART_SetConfig+0x118>)
 8003776:	fba2 2303 	umull	r2, r3, r2, r3
 800377a:	095b      	lsrs	r3, r3, #5
 800377c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003780:	4419      	add	r1, r3
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	4613      	mov	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	009a      	lsls	r2, r3, #2
 800378c:	441a      	add	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	fbb2 f2f3 	udiv	r2, r2, r3
 8003798:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <UART_SetConfig+0x118>)
 800379a:	fba3 0302 	umull	r0, r3, r3, r2
 800379e:	095b      	lsrs	r3, r3, #5
 80037a0:	2064      	movs	r0, #100	; 0x64
 80037a2:	fb00 f303 	mul.w	r3, r0, r3
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	3332      	adds	r3, #50	; 0x32
 80037ac:	4a07      	ldr	r2, [pc, #28]	; (80037cc <UART_SetConfig+0x118>)
 80037ae:	fba2 2303 	umull	r2, r3, r2, r3
 80037b2:	095b      	lsrs	r3, r3, #5
 80037b4:	f003 020f 	and.w	r2, r3, #15
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	440a      	add	r2, r1
 80037be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80037c0:	bf00      	nop
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40013800 	.word	0x40013800
 80037cc:	51eb851f 	.word	0x51eb851f

080037d0 <__errno>:
 80037d0:	4b01      	ldr	r3, [pc, #4]	; (80037d8 <__errno+0x8>)
 80037d2:	6818      	ldr	r0, [r3, #0]
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	20000010 	.word	0x20000010

080037dc <__libc_init_array>:
 80037dc:	b570      	push	{r4, r5, r6, lr}
 80037de:	2600      	movs	r6, #0
 80037e0:	4d0c      	ldr	r5, [pc, #48]	; (8003814 <__libc_init_array+0x38>)
 80037e2:	4c0d      	ldr	r4, [pc, #52]	; (8003818 <__libc_init_array+0x3c>)
 80037e4:	1b64      	subs	r4, r4, r5
 80037e6:	10a4      	asrs	r4, r4, #2
 80037e8:	42a6      	cmp	r6, r4
 80037ea:	d109      	bne.n	8003800 <__libc_init_array+0x24>
 80037ec:	f000 fc9c 	bl	8004128 <_init>
 80037f0:	2600      	movs	r6, #0
 80037f2:	4d0a      	ldr	r5, [pc, #40]	; (800381c <__libc_init_array+0x40>)
 80037f4:	4c0a      	ldr	r4, [pc, #40]	; (8003820 <__libc_init_array+0x44>)
 80037f6:	1b64      	subs	r4, r4, r5
 80037f8:	10a4      	asrs	r4, r4, #2
 80037fa:	42a6      	cmp	r6, r4
 80037fc:	d105      	bne.n	800380a <__libc_init_array+0x2e>
 80037fe:	bd70      	pop	{r4, r5, r6, pc}
 8003800:	f855 3b04 	ldr.w	r3, [r5], #4
 8003804:	4798      	blx	r3
 8003806:	3601      	adds	r6, #1
 8003808:	e7ee      	b.n	80037e8 <__libc_init_array+0xc>
 800380a:	f855 3b04 	ldr.w	r3, [r5], #4
 800380e:	4798      	blx	r3
 8003810:	3601      	adds	r6, #1
 8003812:	e7f2      	b.n	80037fa <__libc_init_array+0x1e>
 8003814:	080041c4 	.word	0x080041c4
 8003818:	080041c4 	.word	0x080041c4
 800381c:	080041c4 	.word	0x080041c4
 8003820:	080041c8 	.word	0x080041c8

08003824 <memset>:
 8003824:	4603      	mov	r3, r0
 8003826:	4402      	add	r2, r0
 8003828:	4293      	cmp	r3, r2
 800382a:	d100      	bne.n	800382e <memset+0xa>
 800382c:	4770      	bx	lr
 800382e:	f803 1b01 	strb.w	r1, [r3], #1
 8003832:	e7f9      	b.n	8003828 <memset+0x4>

08003834 <siprintf>:
 8003834:	b40e      	push	{r1, r2, r3}
 8003836:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800383a:	b500      	push	{lr}
 800383c:	b09c      	sub	sp, #112	; 0x70
 800383e:	ab1d      	add	r3, sp, #116	; 0x74
 8003840:	9002      	str	r0, [sp, #8]
 8003842:	9006      	str	r0, [sp, #24]
 8003844:	9107      	str	r1, [sp, #28]
 8003846:	9104      	str	r1, [sp, #16]
 8003848:	4808      	ldr	r0, [pc, #32]	; (800386c <siprintf+0x38>)
 800384a:	4909      	ldr	r1, [pc, #36]	; (8003870 <siprintf+0x3c>)
 800384c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003850:	9105      	str	r1, [sp, #20]
 8003852:	6800      	ldr	r0, [r0, #0]
 8003854:	a902      	add	r1, sp, #8
 8003856:	9301      	str	r3, [sp, #4]
 8003858:	f000 f868 	bl	800392c <_svfiprintf_r>
 800385c:	2200      	movs	r2, #0
 800385e:	9b02      	ldr	r3, [sp, #8]
 8003860:	701a      	strb	r2, [r3, #0]
 8003862:	b01c      	add	sp, #112	; 0x70
 8003864:	f85d eb04 	ldr.w	lr, [sp], #4
 8003868:	b003      	add	sp, #12
 800386a:	4770      	bx	lr
 800386c:	20000010 	.word	0x20000010
 8003870:	ffff0208 	.word	0xffff0208

08003874 <__ssputs_r>:
 8003874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003878:	688e      	ldr	r6, [r1, #8]
 800387a:	4682      	mov	sl, r0
 800387c:	429e      	cmp	r6, r3
 800387e:	460c      	mov	r4, r1
 8003880:	4690      	mov	r8, r2
 8003882:	461f      	mov	r7, r3
 8003884:	d838      	bhi.n	80038f8 <__ssputs_r+0x84>
 8003886:	898a      	ldrh	r2, [r1, #12]
 8003888:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800388c:	d032      	beq.n	80038f4 <__ssputs_r+0x80>
 800388e:	6825      	ldr	r5, [r4, #0]
 8003890:	6909      	ldr	r1, [r1, #16]
 8003892:	3301      	adds	r3, #1
 8003894:	eba5 0901 	sub.w	r9, r5, r1
 8003898:	6965      	ldr	r5, [r4, #20]
 800389a:	444b      	add	r3, r9
 800389c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80038a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80038a4:	106d      	asrs	r5, r5, #1
 80038a6:	429d      	cmp	r5, r3
 80038a8:	bf38      	it	cc
 80038aa:	461d      	movcc	r5, r3
 80038ac:	0553      	lsls	r3, r2, #21
 80038ae:	d531      	bpl.n	8003914 <__ssputs_r+0xa0>
 80038b0:	4629      	mov	r1, r5
 80038b2:	f000 fb6f 	bl	8003f94 <_malloc_r>
 80038b6:	4606      	mov	r6, r0
 80038b8:	b950      	cbnz	r0, 80038d0 <__ssputs_r+0x5c>
 80038ba:	230c      	movs	r3, #12
 80038bc:	f04f 30ff 	mov.w	r0, #4294967295
 80038c0:	f8ca 3000 	str.w	r3, [sl]
 80038c4:	89a3      	ldrh	r3, [r4, #12]
 80038c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038ca:	81a3      	strh	r3, [r4, #12]
 80038cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038d0:	464a      	mov	r2, r9
 80038d2:	6921      	ldr	r1, [r4, #16]
 80038d4:	f000 face 	bl	8003e74 <memcpy>
 80038d8:	89a3      	ldrh	r3, [r4, #12]
 80038da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80038de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038e2:	81a3      	strh	r3, [r4, #12]
 80038e4:	6126      	str	r6, [r4, #16]
 80038e6:	444e      	add	r6, r9
 80038e8:	6026      	str	r6, [r4, #0]
 80038ea:	463e      	mov	r6, r7
 80038ec:	6165      	str	r5, [r4, #20]
 80038ee:	eba5 0509 	sub.w	r5, r5, r9
 80038f2:	60a5      	str	r5, [r4, #8]
 80038f4:	42be      	cmp	r6, r7
 80038f6:	d900      	bls.n	80038fa <__ssputs_r+0x86>
 80038f8:	463e      	mov	r6, r7
 80038fa:	4632      	mov	r2, r6
 80038fc:	4641      	mov	r1, r8
 80038fe:	6820      	ldr	r0, [r4, #0]
 8003900:	f000 fac6 	bl	8003e90 <memmove>
 8003904:	68a3      	ldr	r3, [r4, #8]
 8003906:	2000      	movs	r0, #0
 8003908:	1b9b      	subs	r3, r3, r6
 800390a:	60a3      	str	r3, [r4, #8]
 800390c:	6823      	ldr	r3, [r4, #0]
 800390e:	4433      	add	r3, r6
 8003910:	6023      	str	r3, [r4, #0]
 8003912:	e7db      	b.n	80038cc <__ssputs_r+0x58>
 8003914:	462a      	mov	r2, r5
 8003916:	f000 fbb1 	bl	800407c <_realloc_r>
 800391a:	4606      	mov	r6, r0
 800391c:	2800      	cmp	r0, #0
 800391e:	d1e1      	bne.n	80038e4 <__ssputs_r+0x70>
 8003920:	4650      	mov	r0, sl
 8003922:	6921      	ldr	r1, [r4, #16]
 8003924:	f000 face 	bl	8003ec4 <_free_r>
 8003928:	e7c7      	b.n	80038ba <__ssputs_r+0x46>
	...

0800392c <_svfiprintf_r>:
 800392c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003930:	4698      	mov	r8, r3
 8003932:	898b      	ldrh	r3, [r1, #12]
 8003934:	4607      	mov	r7, r0
 8003936:	061b      	lsls	r3, r3, #24
 8003938:	460d      	mov	r5, r1
 800393a:	4614      	mov	r4, r2
 800393c:	b09d      	sub	sp, #116	; 0x74
 800393e:	d50e      	bpl.n	800395e <_svfiprintf_r+0x32>
 8003940:	690b      	ldr	r3, [r1, #16]
 8003942:	b963      	cbnz	r3, 800395e <_svfiprintf_r+0x32>
 8003944:	2140      	movs	r1, #64	; 0x40
 8003946:	f000 fb25 	bl	8003f94 <_malloc_r>
 800394a:	6028      	str	r0, [r5, #0]
 800394c:	6128      	str	r0, [r5, #16]
 800394e:	b920      	cbnz	r0, 800395a <_svfiprintf_r+0x2e>
 8003950:	230c      	movs	r3, #12
 8003952:	603b      	str	r3, [r7, #0]
 8003954:	f04f 30ff 	mov.w	r0, #4294967295
 8003958:	e0d1      	b.n	8003afe <_svfiprintf_r+0x1d2>
 800395a:	2340      	movs	r3, #64	; 0x40
 800395c:	616b      	str	r3, [r5, #20]
 800395e:	2300      	movs	r3, #0
 8003960:	9309      	str	r3, [sp, #36]	; 0x24
 8003962:	2320      	movs	r3, #32
 8003964:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003968:	2330      	movs	r3, #48	; 0x30
 800396a:	f04f 0901 	mov.w	r9, #1
 800396e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003972:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003b18 <_svfiprintf_r+0x1ec>
 8003976:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800397a:	4623      	mov	r3, r4
 800397c:	469a      	mov	sl, r3
 800397e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003982:	b10a      	cbz	r2, 8003988 <_svfiprintf_r+0x5c>
 8003984:	2a25      	cmp	r2, #37	; 0x25
 8003986:	d1f9      	bne.n	800397c <_svfiprintf_r+0x50>
 8003988:	ebba 0b04 	subs.w	fp, sl, r4
 800398c:	d00b      	beq.n	80039a6 <_svfiprintf_r+0x7a>
 800398e:	465b      	mov	r3, fp
 8003990:	4622      	mov	r2, r4
 8003992:	4629      	mov	r1, r5
 8003994:	4638      	mov	r0, r7
 8003996:	f7ff ff6d 	bl	8003874 <__ssputs_r>
 800399a:	3001      	adds	r0, #1
 800399c:	f000 80aa 	beq.w	8003af4 <_svfiprintf_r+0x1c8>
 80039a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80039a2:	445a      	add	r2, fp
 80039a4:	9209      	str	r2, [sp, #36]	; 0x24
 80039a6:	f89a 3000 	ldrb.w	r3, [sl]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f000 80a2 	beq.w	8003af4 <_svfiprintf_r+0x1c8>
 80039b0:	2300      	movs	r3, #0
 80039b2:	f04f 32ff 	mov.w	r2, #4294967295
 80039b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80039ba:	f10a 0a01 	add.w	sl, sl, #1
 80039be:	9304      	str	r3, [sp, #16]
 80039c0:	9307      	str	r3, [sp, #28]
 80039c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80039c6:	931a      	str	r3, [sp, #104]	; 0x68
 80039c8:	4654      	mov	r4, sl
 80039ca:	2205      	movs	r2, #5
 80039cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039d0:	4851      	ldr	r0, [pc, #324]	; (8003b18 <_svfiprintf_r+0x1ec>)
 80039d2:	f000 fa41 	bl	8003e58 <memchr>
 80039d6:	9a04      	ldr	r2, [sp, #16]
 80039d8:	b9d8      	cbnz	r0, 8003a12 <_svfiprintf_r+0xe6>
 80039da:	06d0      	lsls	r0, r2, #27
 80039dc:	bf44      	itt	mi
 80039de:	2320      	movmi	r3, #32
 80039e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039e4:	0711      	lsls	r1, r2, #28
 80039e6:	bf44      	itt	mi
 80039e8:	232b      	movmi	r3, #43	; 0x2b
 80039ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80039ee:	f89a 3000 	ldrb.w	r3, [sl]
 80039f2:	2b2a      	cmp	r3, #42	; 0x2a
 80039f4:	d015      	beq.n	8003a22 <_svfiprintf_r+0xf6>
 80039f6:	4654      	mov	r4, sl
 80039f8:	2000      	movs	r0, #0
 80039fa:	f04f 0c0a 	mov.w	ip, #10
 80039fe:	9a07      	ldr	r2, [sp, #28]
 8003a00:	4621      	mov	r1, r4
 8003a02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a06:	3b30      	subs	r3, #48	; 0x30
 8003a08:	2b09      	cmp	r3, #9
 8003a0a:	d94e      	bls.n	8003aaa <_svfiprintf_r+0x17e>
 8003a0c:	b1b0      	cbz	r0, 8003a3c <_svfiprintf_r+0x110>
 8003a0e:	9207      	str	r2, [sp, #28]
 8003a10:	e014      	b.n	8003a3c <_svfiprintf_r+0x110>
 8003a12:	eba0 0308 	sub.w	r3, r0, r8
 8003a16:	fa09 f303 	lsl.w	r3, r9, r3
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	46a2      	mov	sl, r4
 8003a1e:	9304      	str	r3, [sp, #16]
 8003a20:	e7d2      	b.n	80039c8 <_svfiprintf_r+0x9c>
 8003a22:	9b03      	ldr	r3, [sp, #12]
 8003a24:	1d19      	adds	r1, r3, #4
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	9103      	str	r1, [sp, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	bfbb      	ittet	lt
 8003a2e:	425b      	neglt	r3, r3
 8003a30:	f042 0202 	orrlt.w	r2, r2, #2
 8003a34:	9307      	strge	r3, [sp, #28]
 8003a36:	9307      	strlt	r3, [sp, #28]
 8003a38:	bfb8      	it	lt
 8003a3a:	9204      	strlt	r2, [sp, #16]
 8003a3c:	7823      	ldrb	r3, [r4, #0]
 8003a3e:	2b2e      	cmp	r3, #46	; 0x2e
 8003a40:	d10c      	bne.n	8003a5c <_svfiprintf_r+0x130>
 8003a42:	7863      	ldrb	r3, [r4, #1]
 8003a44:	2b2a      	cmp	r3, #42	; 0x2a
 8003a46:	d135      	bne.n	8003ab4 <_svfiprintf_r+0x188>
 8003a48:	9b03      	ldr	r3, [sp, #12]
 8003a4a:	3402      	adds	r4, #2
 8003a4c:	1d1a      	adds	r2, r3, #4
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	9203      	str	r2, [sp, #12]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	bfb8      	it	lt
 8003a56:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a5a:	9305      	str	r3, [sp, #20]
 8003a5c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003b1c <_svfiprintf_r+0x1f0>
 8003a60:	2203      	movs	r2, #3
 8003a62:	4650      	mov	r0, sl
 8003a64:	7821      	ldrb	r1, [r4, #0]
 8003a66:	f000 f9f7 	bl	8003e58 <memchr>
 8003a6a:	b140      	cbz	r0, 8003a7e <_svfiprintf_r+0x152>
 8003a6c:	2340      	movs	r3, #64	; 0x40
 8003a6e:	eba0 000a 	sub.w	r0, r0, sl
 8003a72:	fa03 f000 	lsl.w	r0, r3, r0
 8003a76:	9b04      	ldr	r3, [sp, #16]
 8003a78:	3401      	adds	r4, #1
 8003a7a:	4303      	orrs	r3, r0
 8003a7c:	9304      	str	r3, [sp, #16]
 8003a7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a82:	2206      	movs	r2, #6
 8003a84:	4826      	ldr	r0, [pc, #152]	; (8003b20 <_svfiprintf_r+0x1f4>)
 8003a86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a8a:	f000 f9e5 	bl	8003e58 <memchr>
 8003a8e:	2800      	cmp	r0, #0
 8003a90:	d038      	beq.n	8003b04 <_svfiprintf_r+0x1d8>
 8003a92:	4b24      	ldr	r3, [pc, #144]	; (8003b24 <_svfiprintf_r+0x1f8>)
 8003a94:	bb1b      	cbnz	r3, 8003ade <_svfiprintf_r+0x1b2>
 8003a96:	9b03      	ldr	r3, [sp, #12]
 8003a98:	3307      	adds	r3, #7
 8003a9a:	f023 0307 	bic.w	r3, r3, #7
 8003a9e:	3308      	adds	r3, #8
 8003aa0:	9303      	str	r3, [sp, #12]
 8003aa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003aa4:	4433      	add	r3, r6
 8003aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8003aa8:	e767      	b.n	800397a <_svfiprintf_r+0x4e>
 8003aaa:	460c      	mov	r4, r1
 8003aac:	2001      	movs	r0, #1
 8003aae:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ab2:	e7a5      	b.n	8003a00 <_svfiprintf_r+0xd4>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	f04f 0c0a 	mov.w	ip, #10
 8003aba:	4619      	mov	r1, r3
 8003abc:	3401      	adds	r4, #1
 8003abe:	9305      	str	r3, [sp, #20]
 8003ac0:	4620      	mov	r0, r4
 8003ac2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ac6:	3a30      	subs	r2, #48	; 0x30
 8003ac8:	2a09      	cmp	r2, #9
 8003aca:	d903      	bls.n	8003ad4 <_svfiprintf_r+0x1a8>
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d0c5      	beq.n	8003a5c <_svfiprintf_r+0x130>
 8003ad0:	9105      	str	r1, [sp, #20]
 8003ad2:	e7c3      	b.n	8003a5c <_svfiprintf_r+0x130>
 8003ad4:	4604      	mov	r4, r0
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	fb0c 2101 	mla	r1, ip, r1, r2
 8003adc:	e7f0      	b.n	8003ac0 <_svfiprintf_r+0x194>
 8003ade:	ab03      	add	r3, sp, #12
 8003ae0:	9300      	str	r3, [sp, #0]
 8003ae2:	462a      	mov	r2, r5
 8003ae4:	4638      	mov	r0, r7
 8003ae6:	4b10      	ldr	r3, [pc, #64]	; (8003b28 <_svfiprintf_r+0x1fc>)
 8003ae8:	a904      	add	r1, sp, #16
 8003aea:	f3af 8000 	nop.w
 8003aee:	1c42      	adds	r2, r0, #1
 8003af0:	4606      	mov	r6, r0
 8003af2:	d1d6      	bne.n	8003aa2 <_svfiprintf_r+0x176>
 8003af4:	89ab      	ldrh	r3, [r5, #12]
 8003af6:	065b      	lsls	r3, r3, #25
 8003af8:	f53f af2c 	bmi.w	8003954 <_svfiprintf_r+0x28>
 8003afc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003afe:	b01d      	add	sp, #116	; 0x74
 8003b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b04:	ab03      	add	r3, sp, #12
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	462a      	mov	r2, r5
 8003b0a:	4638      	mov	r0, r7
 8003b0c:	4b06      	ldr	r3, [pc, #24]	; (8003b28 <_svfiprintf_r+0x1fc>)
 8003b0e:	a904      	add	r1, sp, #16
 8003b10:	f000 f87c 	bl	8003c0c <_printf_i>
 8003b14:	e7eb      	b.n	8003aee <_svfiprintf_r+0x1c2>
 8003b16:	bf00      	nop
 8003b18:	0800418e 	.word	0x0800418e
 8003b1c:	08004194 	.word	0x08004194
 8003b20:	08004198 	.word	0x08004198
 8003b24:	00000000 	.word	0x00000000
 8003b28:	08003875 	.word	0x08003875

08003b2c <_printf_common>:
 8003b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b30:	4616      	mov	r6, r2
 8003b32:	4699      	mov	r9, r3
 8003b34:	688a      	ldr	r2, [r1, #8]
 8003b36:	690b      	ldr	r3, [r1, #16]
 8003b38:	4607      	mov	r7, r0
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	bfb8      	it	lt
 8003b3e:	4613      	movlt	r3, r2
 8003b40:	6033      	str	r3, [r6, #0]
 8003b42:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b46:	460c      	mov	r4, r1
 8003b48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b4c:	b10a      	cbz	r2, 8003b52 <_printf_common+0x26>
 8003b4e:	3301      	adds	r3, #1
 8003b50:	6033      	str	r3, [r6, #0]
 8003b52:	6823      	ldr	r3, [r4, #0]
 8003b54:	0699      	lsls	r1, r3, #26
 8003b56:	bf42      	ittt	mi
 8003b58:	6833      	ldrmi	r3, [r6, #0]
 8003b5a:	3302      	addmi	r3, #2
 8003b5c:	6033      	strmi	r3, [r6, #0]
 8003b5e:	6825      	ldr	r5, [r4, #0]
 8003b60:	f015 0506 	ands.w	r5, r5, #6
 8003b64:	d106      	bne.n	8003b74 <_printf_common+0x48>
 8003b66:	f104 0a19 	add.w	sl, r4, #25
 8003b6a:	68e3      	ldr	r3, [r4, #12]
 8003b6c:	6832      	ldr	r2, [r6, #0]
 8003b6e:	1a9b      	subs	r3, r3, r2
 8003b70:	42ab      	cmp	r3, r5
 8003b72:	dc28      	bgt.n	8003bc6 <_printf_common+0x9a>
 8003b74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003b78:	1e13      	subs	r3, r2, #0
 8003b7a:	6822      	ldr	r2, [r4, #0]
 8003b7c:	bf18      	it	ne
 8003b7e:	2301      	movne	r3, #1
 8003b80:	0692      	lsls	r2, r2, #26
 8003b82:	d42d      	bmi.n	8003be0 <_printf_common+0xb4>
 8003b84:	4649      	mov	r1, r9
 8003b86:	4638      	mov	r0, r7
 8003b88:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b8c:	47c0      	blx	r8
 8003b8e:	3001      	adds	r0, #1
 8003b90:	d020      	beq.n	8003bd4 <_printf_common+0xa8>
 8003b92:	6823      	ldr	r3, [r4, #0]
 8003b94:	68e5      	ldr	r5, [r4, #12]
 8003b96:	f003 0306 	and.w	r3, r3, #6
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	bf18      	it	ne
 8003b9e:	2500      	movne	r5, #0
 8003ba0:	6832      	ldr	r2, [r6, #0]
 8003ba2:	f04f 0600 	mov.w	r6, #0
 8003ba6:	68a3      	ldr	r3, [r4, #8]
 8003ba8:	bf08      	it	eq
 8003baa:	1aad      	subeq	r5, r5, r2
 8003bac:	6922      	ldr	r2, [r4, #16]
 8003bae:	bf08      	it	eq
 8003bb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	bfc4      	itt	gt
 8003bb8:	1a9b      	subgt	r3, r3, r2
 8003bba:	18ed      	addgt	r5, r5, r3
 8003bbc:	341a      	adds	r4, #26
 8003bbe:	42b5      	cmp	r5, r6
 8003bc0:	d11a      	bne.n	8003bf8 <_printf_common+0xcc>
 8003bc2:	2000      	movs	r0, #0
 8003bc4:	e008      	b.n	8003bd8 <_printf_common+0xac>
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	4652      	mov	r2, sl
 8003bca:	4649      	mov	r1, r9
 8003bcc:	4638      	mov	r0, r7
 8003bce:	47c0      	blx	r8
 8003bd0:	3001      	adds	r0, #1
 8003bd2:	d103      	bne.n	8003bdc <_printf_common+0xb0>
 8003bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8003bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bdc:	3501      	adds	r5, #1
 8003bde:	e7c4      	b.n	8003b6a <_printf_common+0x3e>
 8003be0:	2030      	movs	r0, #48	; 0x30
 8003be2:	18e1      	adds	r1, r4, r3
 8003be4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bee:	4422      	add	r2, r4
 8003bf0:	3302      	adds	r3, #2
 8003bf2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003bf6:	e7c5      	b.n	8003b84 <_printf_common+0x58>
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	4622      	mov	r2, r4
 8003bfc:	4649      	mov	r1, r9
 8003bfe:	4638      	mov	r0, r7
 8003c00:	47c0      	blx	r8
 8003c02:	3001      	adds	r0, #1
 8003c04:	d0e6      	beq.n	8003bd4 <_printf_common+0xa8>
 8003c06:	3601      	adds	r6, #1
 8003c08:	e7d9      	b.n	8003bbe <_printf_common+0x92>
	...

08003c0c <_printf_i>:
 8003c0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c10:	7e0f      	ldrb	r7, [r1, #24]
 8003c12:	4691      	mov	r9, r2
 8003c14:	2f78      	cmp	r7, #120	; 0x78
 8003c16:	4680      	mov	r8, r0
 8003c18:	460c      	mov	r4, r1
 8003c1a:	469a      	mov	sl, r3
 8003c1c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003c1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003c22:	d807      	bhi.n	8003c34 <_printf_i+0x28>
 8003c24:	2f62      	cmp	r7, #98	; 0x62
 8003c26:	d80a      	bhi.n	8003c3e <_printf_i+0x32>
 8003c28:	2f00      	cmp	r7, #0
 8003c2a:	f000 80d9 	beq.w	8003de0 <_printf_i+0x1d4>
 8003c2e:	2f58      	cmp	r7, #88	; 0x58
 8003c30:	f000 80a4 	beq.w	8003d7c <_printf_i+0x170>
 8003c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003c3c:	e03a      	b.n	8003cb4 <_printf_i+0xa8>
 8003c3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003c42:	2b15      	cmp	r3, #21
 8003c44:	d8f6      	bhi.n	8003c34 <_printf_i+0x28>
 8003c46:	a101      	add	r1, pc, #4	; (adr r1, 8003c4c <_printf_i+0x40>)
 8003c48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c4c:	08003ca5 	.word	0x08003ca5
 8003c50:	08003cb9 	.word	0x08003cb9
 8003c54:	08003c35 	.word	0x08003c35
 8003c58:	08003c35 	.word	0x08003c35
 8003c5c:	08003c35 	.word	0x08003c35
 8003c60:	08003c35 	.word	0x08003c35
 8003c64:	08003cb9 	.word	0x08003cb9
 8003c68:	08003c35 	.word	0x08003c35
 8003c6c:	08003c35 	.word	0x08003c35
 8003c70:	08003c35 	.word	0x08003c35
 8003c74:	08003c35 	.word	0x08003c35
 8003c78:	08003dc7 	.word	0x08003dc7
 8003c7c:	08003ce9 	.word	0x08003ce9
 8003c80:	08003da9 	.word	0x08003da9
 8003c84:	08003c35 	.word	0x08003c35
 8003c88:	08003c35 	.word	0x08003c35
 8003c8c:	08003de9 	.word	0x08003de9
 8003c90:	08003c35 	.word	0x08003c35
 8003c94:	08003ce9 	.word	0x08003ce9
 8003c98:	08003c35 	.word	0x08003c35
 8003c9c:	08003c35 	.word	0x08003c35
 8003ca0:	08003db1 	.word	0x08003db1
 8003ca4:	682b      	ldr	r3, [r5, #0]
 8003ca6:	1d1a      	adds	r2, r3, #4
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	602a      	str	r2, [r5, #0]
 8003cac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e0a4      	b.n	8003e02 <_printf_i+0x1f6>
 8003cb8:	6820      	ldr	r0, [r4, #0]
 8003cba:	6829      	ldr	r1, [r5, #0]
 8003cbc:	0606      	lsls	r6, r0, #24
 8003cbe:	f101 0304 	add.w	r3, r1, #4
 8003cc2:	d50a      	bpl.n	8003cda <_printf_i+0xce>
 8003cc4:	680e      	ldr	r6, [r1, #0]
 8003cc6:	602b      	str	r3, [r5, #0]
 8003cc8:	2e00      	cmp	r6, #0
 8003cca:	da03      	bge.n	8003cd4 <_printf_i+0xc8>
 8003ccc:	232d      	movs	r3, #45	; 0x2d
 8003cce:	4276      	negs	r6, r6
 8003cd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cd4:	230a      	movs	r3, #10
 8003cd6:	485e      	ldr	r0, [pc, #376]	; (8003e50 <_printf_i+0x244>)
 8003cd8:	e019      	b.n	8003d0e <_printf_i+0x102>
 8003cda:	680e      	ldr	r6, [r1, #0]
 8003cdc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ce0:	602b      	str	r3, [r5, #0]
 8003ce2:	bf18      	it	ne
 8003ce4:	b236      	sxthne	r6, r6
 8003ce6:	e7ef      	b.n	8003cc8 <_printf_i+0xbc>
 8003ce8:	682b      	ldr	r3, [r5, #0]
 8003cea:	6820      	ldr	r0, [r4, #0]
 8003cec:	1d19      	adds	r1, r3, #4
 8003cee:	6029      	str	r1, [r5, #0]
 8003cf0:	0601      	lsls	r1, r0, #24
 8003cf2:	d501      	bpl.n	8003cf8 <_printf_i+0xec>
 8003cf4:	681e      	ldr	r6, [r3, #0]
 8003cf6:	e002      	b.n	8003cfe <_printf_i+0xf2>
 8003cf8:	0646      	lsls	r6, r0, #25
 8003cfa:	d5fb      	bpl.n	8003cf4 <_printf_i+0xe8>
 8003cfc:	881e      	ldrh	r6, [r3, #0]
 8003cfe:	2f6f      	cmp	r7, #111	; 0x6f
 8003d00:	bf0c      	ite	eq
 8003d02:	2308      	moveq	r3, #8
 8003d04:	230a      	movne	r3, #10
 8003d06:	4852      	ldr	r0, [pc, #328]	; (8003e50 <_printf_i+0x244>)
 8003d08:	2100      	movs	r1, #0
 8003d0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003d0e:	6865      	ldr	r5, [r4, #4]
 8003d10:	2d00      	cmp	r5, #0
 8003d12:	bfa8      	it	ge
 8003d14:	6821      	ldrge	r1, [r4, #0]
 8003d16:	60a5      	str	r5, [r4, #8]
 8003d18:	bfa4      	itt	ge
 8003d1a:	f021 0104 	bicge.w	r1, r1, #4
 8003d1e:	6021      	strge	r1, [r4, #0]
 8003d20:	b90e      	cbnz	r6, 8003d26 <_printf_i+0x11a>
 8003d22:	2d00      	cmp	r5, #0
 8003d24:	d04d      	beq.n	8003dc2 <_printf_i+0x1b6>
 8003d26:	4615      	mov	r5, r2
 8003d28:	fbb6 f1f3 	udiv	r1, r6, r3
 8003d2c:	fb03 6711 	mls	r7, r3, r1, r6
 8003d30:	5dc7      	ldrb	r7, [r0, r7]
 8003d32:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003d36:	4637      	mov	r7, r6
 8003d38:	42bb      	cmp	r3, r7
 8003d3a:	460e      	mov	r6, r1
 8003d3c:	d9f4      	bls.n	8003d28 <_printf_i+0x11c>
 8003d3e:	2b08      	cmp	r3, #8
 8003d40:	d10b      	bne.n	8003d5a <_printf_i+0x14e>
 8003d42:	6823      	ldr	r3, [r4, #0]
 8003d44:	07de      	lsls	r6, r3, #31
 8003d46:	d508      	bpl.n	8003d5a <_printf_i+0x14e>
 8003d48:	6923      	ldr	r3, [r4, #16]
 8003d4a:	6861      	ldr	r1, [r4, #4]
 8003d4c:	4299      	cmp	r1, r3
 8003d4e:	bfde      	ittt	le
 8003d50:	2330      	movle	r3, #48	; 0x30
 8003d52:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003d56:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003d5a:	1b52      	subs	r2, r2, r5
 8003d5c:	6122      	str	r2, [r4, #16]
 8003d5e:	464b      	mov	r3, r9
 8003d60:	4621      	mov	r1, r4
 8003d62:	4640      	mov	r0, r8
 8003d64:	f8cd a000 	str.w	sl, [sp]
 8003d68:	aa03      	add	r2, sp, #12
 8003d6a:	f7ff fedf 	bl	8003b2c <_printf_common>
 8003d6e:	3001      	adds	r0, #1
 8003d70:	d14c      	bne.n	8003e0c <_printf_i+0x200>
 8003d72:	f04f 30ff 	mov.w	r0, #4294967295
 8003d76:	b004      	add	sp, #16
 8003d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d7c:	4834      	ldr	r0, [pc, #208]	; (8003e50 <_printf_i+0x244>)
 8003d7e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003d82:	6829      	ldr	r1, [r5, #0]
 8003d84:	6823      	ldr	r3, [r4, #0]
 8003d86:	f851 6b04 	ldr.w	r6, [r1], #4
 8003d8a:	6029      	str	r1, [r5, #0]
 8003d8c:	061d      	lsls	r5, r3, #24
 8003d8e:	d514      	bpl.n	8003dba <_printf_i+0x1ae>
 8003d90:	07df      	lsls	r7, r3, #31
 8003d92:	bf44      	itt	mi
 8003d94:	f043 0320 	orrmi.w	r3, r3, #32
 8003d98:	6023      	strmi	r3, [r4, #0]
 8003d9a:	b91e      	cbnz	r6, 8003da4 <_printf_i+0x198>
 8003d9c:	6823      	ldr	r3, [r4, #0]
 8003d9e:	f023 0320 	bic.w	r3, r3, #32
 8003da2:	6023      	str	r3, [r4, #0]
 8003da4:	2310      	movs	r3, #16
 8003da6:	e7af      	b.n	8003d08 <_printf_i+0xfc>
 8003da8:	6823      	ldr	r3, [r4, #0]
 8003daa:	f043 0320 	orr.w	r3, r3, #32
 8003dae:	6023      	str	r3, [r4, #0]
 8003db0:	2378      	movs	r3, #120	; 0x78
 8003db2:	4828      	ldr	r0, [pc, #160]	; (8003e54 <_printf_i+0x248>)
 8003db4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003db8:	e7e3      	b.n	8003d82 <_printf_i+0x176>
 8003dba:	0659      	lsls	r1, r3, #25
 8003dbc:	bf48      	it	mi
 8003dbe:	b2b6      	uxthmi	r6, r6
 8003dc0:	e7e6      	b.n	8003d90 <_printf_i+0x184>
 8003dc2:	4615      	mov	r5, r2
 8003dc4:	e7bb      	b.n	8003d3e <_printf_i+0x132>
 8003dc6:	682b      	ldr	r3, [r5, #0]
 8003dc8:	6826      	ldr	r6, [r4, #0]
 8003dca:	1d18      	adds	r0, r3, #4
 8003dcc:	6961      	ldr	r1, [r4, #20]
 8003dce:	6028      	str	r0, [r5, #0]
 8003dd0:	0635      	lsls	r5, r6, #24
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	d501      	bpl.n	8003dda <_printf_i+0x1ce>
 8003dd6:	6019      	str	r1, [r3, #0]
 8003dd8:	e002      	b.n	8003de0 <_printf_i+0x1d4>
 8003dda:	0670      	lsls	r0, r6, #25
 8003ddc:	d5fb      	bpl.n	8003dd6 <_printf_i+0x1ca>
 8003dde:	8019      	strh	r1, [r3, #0]
 8003de0:	2300      	movs	r3, #0
 8003de2:	4615      	mov	r5, r2
 8003de4:	6123      	str	r3, [r4, #16]
 8003de6:	e7ba      	b.n	8003d5e <_printf_i+0x152>
 8003de8:	682b      	ldr	r3, [r5, #0]
 8003dea:	2100      	movs	r1, #0
 8003dec:	1d1a      	adds	r2, r3, #4
 8003dee:	602a      	str	r2, [r5, #0]
 8003df0:	681d      	ldr	r5, [r3, #0]
 8003df2:	6862      	ldr	r2, [r4, #4]
 8003df4:	4628      	mov	r0, r5
 8003df6:	f000 f82f 	bl	8003e58 <memchr>
 8003dfa:	b108      	cbz	r0, 8003e00 <_printf_i+0x1f4>
 8003dfc:	1b40      	subs	r0, r0, r5
 8003dfe:	6060      	str	r0, [r4, #4]
 8003e00:	6863      	ldr	r3, [r4, #4]
 8003e02:	6123      	str	r3, [r4, #16]
 8003e04:	2300      	movs	r3, #0
 8003e06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e0a:	e7a8      	b.n	8003d5e <_printf_i+0x152>
 8003e0c:	462a      	mov	r2, r5
 8003e0e:	4649      	mov	r1, r9
 8003e10:	4640      	mov	r0, r8
 8003e12:	6923      	ldr	r3, [r4, #16]
 8003e14:	47d0      	blx	sl
 8003e16:	3001      	adds	r0, #1
 8003e18:	d0ab      	beq.n	8003d72 <_printf_i+0x166>
 8003e1a:	6823      	ldr	r3, [r4, #0]
 8003e1c:	079b      	lsls	r3, r3, #30
 8003e1e:	d413      	bmi.n	8003e48 <_printf_i+0x23c>
 8003e20:	68e0      	ldr	r0, [r4, #12]
 8003e22:	9b03      	ldr	r3, [sp, #12]
 8003e24:	4298      	cmp	r0, r3
 8003e26:	bfb8      	it	lt
 8003e28:	4618      	movlt	r0, r3
 8003e2a:	e7a4      	b.n	8003d76 <_printf_i+0x16a>
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	4632      	mov	r2, r6
 8003e30:	4649      	mov	r1, r9
 8003e32:	4640      	mov	r0, r8
 8003e34:	47d0      	blx	sl
 8003e36:	3001      	adds	r0, #1
 8003e38:	d09b      	beq.n	8003d72 <_printf_i+0x166>
 8003e3a:	3501      	adds	r5, #1
 8003e3c:	68e3      	ldr	r3, [r4, #12]
 8003e3e:	9903      	ldr	r1, [sp, #12]
 8003e40:	1a5b      	subs	r3, r3, r1
 8003e42:	42ab      	cmp	r3, r5
 8003e44:	dcf2      	bgt.n	8003e2c <_printf_i+0x220>
 8003e46:	e7eb      	b.n	8003e20 <_printf_i+0x214>
 8003e48:	2500      	movs	r5, #0
 8003e4a:	f104 0619 	add.w	r6, r4, #25
 8003e4e:	e7f5      	b.n	8003e3c <_printf_i+0x230>
 8003e50:	0800419f 	.word	0x0800419f
 8003e54:	080041b0 	.word	0x080041b0

08003e58 <memchr>:
 8003e58:	4603      	mov	r3, r0
 8003e5a:	b510      	push	{r4, lr}
 8003e5c:	b2c9      	uxtb	r1, r1
 8003e5e:	4402      	add	r2, r0
 8003e60:	4293      	cmp	r3, r2
 8003e62:	4618      	mov	r0, r3
 8003e64:	d101      	bne.n	8003e6a <memchr+0x12>
 8003e66:	2000      	movs	r0, #0
 8003e68:	e003      	b.n	8003e72 <memchr+0x1a>
 8003e6a:	7804      	ldrb	r4, [r0, #0]
 8003e6c:	3301      	adds	r3, #1
 8003e6e:	428c      	cmp	r4, r1
 8003e70:	d1f6      	bne.n	8003e60 <memchr+0x8>
 8003e72:	bd10      	pop	{r4, pc}

08003e74 <memcpy>:
 8003e74:	440a      	add	r2, r1
 8003e76:	4291      	cmp	r1, r2
 8003e78:	f100 33ff 	add.w	r3, r0, #4294967295
 8003e7c:	d100      	bne.n	8003e80 <memcpy+0xc>
 8003e7e:	4770      	bx	lr
 8003e80:	b510      	push	{r4, lr}
 8003e82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003e86:	4291      	cmp	r1, r2
 8003e88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003e8c:	d1f9      	bne.n	8003e82 <memcpy+0xe>
 8003e8e:	bd10      	pop	{r4, pc}

08003e90 <memmove>:
 8003e90:	4288      	cmp	r0, r1
 8003e92:	b510      	push	{r4, lr}
 8003e94:	eb01 0402 	add.w	r4, r1, r2
 8003e98:	d902      	bls.n	8003ea0 <memmove+0x10>
 8003e9a:	4284      	cmp	r4, r0
 8003e9c:	4623      	mov	r3, r4
 8003e9e:	d807      	bhi.n	8003eb0 <memmove+0x20>
 8003ea0:	1e43      	subs	r3, r0, #1
 8003ea2:	42a1      	cmp	r1, r4
 8003ea4:	d008      	beq.n	8003eb8 <memmove+0x28>
 8003ea6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003eaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003eae:	e7f8      	b.n	8003ea2 <memmove+0x12>
 8003eb0:	4601      	mov	r1, r0
 8003eb2:	4402      	add	r2, r0
 8003eb4:	428a      	cmp	r2, r1
 8003eb6:	d100      	bne.n	8003eba <memmove+0x2a>
 8003eb8:	bd10      	pop	{r4, pc}
 8003eba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ebe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003ec2:	e7f7      	b.n	8003eb4 <memmove+0x24>

08003ec4 <_free_r>:
 8003ec4:	b538      	push	{r3, r4, r5, lr}
 8003ec6:	4605      	mov	r5, r0
 8003ec8:	2900      	cmp	r1, #0
 8003eca:	d040      	beq.n	8003f4e <_free_r+0x8a>
 8003ecc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ed0:	1f0c      	subs	r4, r1, #4
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	bfb8      	it	lt
 8003ed6:	18e4      	addlt	r4, r4, r3
 8003ed8:	f000 f910 	bl	80040fc <__malloc_lock>
 8003edc:	4a1c      	ldr	r2, [pc, #112]	; (8003f50 <_free_r+0x8c>)
 8003ede:	6813      	ldr	r3, [r2, #0]
 8003ee0:	b933      	cbnz	r3, 8003ef0 <_free_r+0x2c>
 8003ee2:	6063      	str	r3, [r4, #4]
 8003ee4:	6014      	str	r4, [r2, #0]
 8003ee6:	4628      	mov	r0, r5
 8003ee8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003eec:	f000 b90c 	b.w	8004108 <__malloc_unlock>
 8003ef0:	42a3      	cmp	r3, r4
 8003ef2:	d908      	bls.n	8003f06 <_free_r+0x42>
 8003ef4:	6820      	ldr	r0, [r4, #0]
 8003ef6:	1821      	adds	r1, r4, r0
 8003ef8:	428b      	cmp	r3, r1
 8003efa:	bf01      	itttt	eq
 8003efc:	6819      	ldreq	r1, [r3, #0]
 8003efe:	685b      	ldreq	r3, [r3, #4]
 8003f00:	1809      	addeq	r1, r1, r0
 8003f02:	6021      	streq	r1, [r4, #0]
 8003f04:	e7ed      	b.n	8003ee2 <_free_r+0x1e>
 8003f06:	461a      	mov	r2, r3
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	b10b      	cbz	r3, 8003f10 <_free_r+0x4c>
 8003f0c:	42a3      	cmp	r3, r4
 8003f0e:	d9fa      	bls.n	8003f06 <_free_r+0x42>
 8003f10:	6811      	ldr	r1, [r2, #0]
 8003f12:	1850      	adds	r0, r2, r1
 8003f14:	42a0      	cmp	r0, r4
 8003f16:	d10b      	bne.n	8003f30 <_free_r+0x6c>
 8003f18:	6820      	ldr	r0, [r4, #0]
 8003f1a:	4401      	add	r1, r0
 8003f1c:	1850      	adds	r0, r2, r1
 8003f1e:	4283      	cmp	r3, r0
 8003f20:	6011      	str	r1, [r2, #0]
 8003f22:	d1e0      	bne.n	8003ee6 <_free_r+0x22>
 8003f24:	6818      	ldr	r0, [r3, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	4401      	add	r1, r0
 8003f2a:	6011      	str	r1, [r2, #0]
 8003f2c:	6053      	str	r3, [r2, #4]
 8003f2e:	e7da      	b.n	8003ee6 <_free_r+0x22>
 8003f30:	d902      	bls.n	8003f38 <_free_r+0x74>
 8003f32:	230c      	movs	r3, #12
 8003f34:	602b      	str	r3, [r5, #0]
 8003f36:	e7d6      	b.n	8003ee6 <_free_r+0x22>
 8003f38:	6820      	ldr	r0, [r4, #0]
 8003f3a:	1821      	adds	r1, r4, r0
 8003f3c:	428b      	cmp	r3, r1
 8003f3e:	bf01      	itttt	eq
 8003f40:	6819      	ldreq	r1, [r3, #0]
 8003f42:	685b      	ldreq	r3, [r3, #4]
 8003f44:	1809      	addeq	r1, r1, r0
 8003f46:	6021      	streq	r1, [r4, #0]
 8003f48:	6063      	str	r3, [r4, #4]
 8003f4a:	6054      	str	r4, [r2, #4]
 8003f4c:	e7cb      	b.n	8003ee6 <_free_r+0x22>
 8003f4e:	bd38      	pop	{r3, r4, r5, pc}
 8003f50:	20000260 	.word	0x20000260

08003f54 <sbrk_aligned>:
 8003f54:	b570      	push	{r4, r5, r6, lr}
 8003f56:	4e0e      	ldr	r6, [pc, #56]	; (8003f90 <sbrk_aligned+0x3c>)
 8003f58:	460c      	mov	r4, r1
 8003f5a:	6831      	ldr	r1, [r6, #0]
 8003f5c:	4605      	mov	r5, r0
 8003f5e:	b911      	cbnz	r1, 8003f66 <sbrk_aligned+0x12>
 8003f60:	f000 f8bc 	bl	80040dc <_sbrk_r>
 8003f64:	6030      	str	r0, [r6, #0]
 8003f66:	4621      	mov	r1, r4
 8003f68:	4628      	mov	r0, r5
 8003f6a:	f000 f8b7 	bl	80040dc <_sbrk_r>
 8003f6e:	1c43      	adds	r3, r0, #1
 8003f70:	d00a      	beq.n	8003f88 <sbrk_aligned+0x34>
 8003f72:	1cc4      	adds	r4, r0, #3
 8003f74:	f024 0403 	bic.w	r4, r4, #3
 8003f78:	42a0      	cmp	r0, r4
 8003f7a:	d007      	beq.n	8003f8c <sbrk_aligned+0x38>
 8003f7c:	1a21      	subs	r1, r4, r0
 8003f7e:	4628      	mov	r0, r5
 8003f80:	f000 f8ac 	bl	80040dc <_sbrk_r>
 8003f84:	3001      	adds	r0, #1
 8003f86:	d101      	bne.n	8003f8c <sbrk_aligned+0x38>
 8003f88:	f04f 34ff 	mov.w	r4, #4294967295
 8003f8c:	4620      	mov	r0, r4
 8003f8e:	bd70      	pop	{r4, r5, r6, pc}
 8003f90:	20000264 	.word	0x20000264

08003f94 <_malloc_r>:
 8003f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f98:	1ccd      	adds	r5, r1, #3
 8003f9a:	f025 0503 	bic.w	r5, r5, #3
 8003f9e:	3508      	adds	r5, #8
 8003fa0:	2d0c      	cmp	r5, #12
 8003fa2:	bf38      	it	cc
 8003fa4:	250c      	movcc	r5, #12
 8003fa6:	2d00      	cmp	r5, #0
 8003fa8:	4607      	mov	r7, r0
 8003faa:	db01      	blt.n	8003fb0 <_malloc_r+0x1c>
 8003fac:	42a9      	cmp	r1, r5
 8003fae:	d905      	bls.n	8003fbc <_malloc_r+0x28>
 8003fb0:	230c      	movs	r3, #12
 8003fb2:	2600      	movs	r6, #0
 8003fb4:	603b      	str	r3, [r7, #0]
 8003fb6:	4630      	mov	r0, r6
 8003fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003fbc:	4e2e      	ldr	r6, [pc, #184]	; (8004078 <_malloc_r+0xe4>)
 8003fbe:	f000 f89d 	bl	80040fc <__malloc_lock>
 8003fc2:	6833      	ldr	r3, [r6, #0]
 8003fc4:	461c      	mov	r4, r3
 8003fc6:	bb34      	cbnz	r4, 8004016 <_malloc_r+0x82>
 8003fc8:	4629      	mov	r1, r5
 8003fca:	4638      	mov	r0, r7
 8003fcc:	f7ff ffc2 	bl	8003f54 <sbrk_aligned>
 8003fd0:	1c43      	adds	r3, r0, #1
 8003fd2:	4604      	mov	r4, r0
 8003fd4:	d14d      	bne.n	8004072 <_malloc_r+0xde>
 8003fd6:	6834      	ldr	r4, [r6, #0]
 8003fd8:	4626      	mov	r6, r4
 8003fda:	2e00      	cmp	r6, #0
 8003fdc:	d140      	bne.n	8004060 <_malloc_r+0xcc>
 8003fde:	6823      	ldr	r3, [r4, #0]
 8003fe0:	4631      	mov	r1, r6
 8003fe2:	4638      	mov	r0, r7
 8003fe4:	eb04 0803 	add.w	r8, r4, r3
 8003fe8:	f000 f878 	bl	80040dc <_sbrk_r>
 8003fec:	4580      	cmp	r8, r0
 8003fee:	d13a      	bne.n	8004066 <_malloc_r+0xd2>
 8003ff0:	6821      	ldr	r1, [r4, #0]
 8003ff2:	3503      	adds	r5, #3
 8003ff4:	1a6d      	subs	r5, r5, r1
 8003ff6:	f025 0503 	bic.w	r5, r5, #3
 8003ffa:	3508      	adds	r5, #8
 8003ffc:	2d0c      	cmp	r5, #12
 8003ffe:	bf38      	it	cc
 8004000:	250c      	movcc	r5, #12
 8004002:	4638      	mov	r0, r7
 8004004:	4629      	mov	r1, r5
 8004006:	f7ff ffa5 	bl	8003f54 <sbrk_aligned>
 800400a:	3001      	adds	r0, #1
 800400c:	d02b      	beq.n	8004066 <_malloc_r+0xd2>
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	442b      	add	r3, r5
 8004012:	6023      	str	r3, [r4, #0]
 8004014:	e00e      	b.n	8004034 <_malloc_r+0xa0>
 8004016:	6822      	ldr	r2, [r4, #0]
 8004018:	1b52      	subs	r2, r2, r5
 800401a:	d41e      	bmi.n	800405a <_malloc_r+0xc6>
 800401c:	2a0b      	cmp	r2, #11
 800401e:	d916      	bls.n	800404e <_malloc_r+0xba>
 8004020:	1961      	adds	r1, r4, r5
 8004022:	42a3      	cmp	r3, r4
 8004024:	6025      	str	r5, [r4, #0]
 8004026:	bf18      	it	ne
 8004028:	6059      	strne	r1, [r3, #4]
 800402a:	6863      	ldr	r3, [r4, #4]
 800402c:	bf08      	it	eq
 800402e:	6031      	streq	r1, [r6, #0]
 8004030:	5162      	str	r2, [r4, r5]
 8004032:	604b      	str	r3, [r1, #4]
 8004034:	4638      	mov	r0, r7
 8004036:	f104 060b 	add.w	r6, r4, #11
 800403a:	f000 f865 	bl	8004108 <__malloc_unlock>
 800403e:	f026 0607 	bic.w	r6, r6, #7
 8004042:	1d23      	adds	r3, r4, #4
 8004044:	1af2      	subs	r2, r6, r3
 8004046:	d0b6      	beq.n	8003fb6 <_malloc_r+0x22>
 8004048:	1b9b      	subs	r3, r3, r6
 800404a:	50a3      	str	r3, [r4, r2]
 800404c:	e7b3      	b.n	8003fb6 <_malloc_r+0x22>
 800404e:	6862      	ldr	r2, [r4, #4]
 8004050:	42a3      	cmp	r3, r4
 8004052:	bf0c      	ite	eq
 8004054:	6032      	streq	r2, [r6, #0]
 8004056:	605a      	strne	r2, [r3, #4]
 8004058:	e7ec      	b.n	8004034 <_malloc_r+0xa0>
 800405a:	4623      	mov	r3, r4
 800405c:	6864      	ldr	r4, [r4, #4]
 800405e:	e7b2      	b.n	8003fc6 <_malloc_r+0x32>
 8004060:	4634      	mov	r4, r6
 8004062:	6876      	ldr	r6, [r6, #4]
 8004064:	e7b9      	b.n	8003fda <_malloc_r+0x46>
 8004066:	230c      	movs	r3, #12
 8004068:	4638      	mov	r0, r7
 800406a:	603b      	str	r3, [r7, #0]
 800406c:	f000 f84c 	bl	8004108 <__malloc_unlock>
 8004070:	e7a1      	b.n	8003fb6 <_malloc_r+0x22>
 8004072:	6025      	str	r5, [r4, #0]
 8004074:	e7de      	b.n	8004034 <_malloc_r+0xa0>
 8004076:	bf00      	nop
 8004078:	20000260 	.word	0x20000260

0800407c <_realloc_r>:
 800407c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004080:	4680      	mov	r8, r0
 8004082:	4614      	mov	r4, r2
 8004084:	460e      	mov	r6, r1
 8004086:	b921      	cbnz	r1, 8004092 <_realloc_r+0x16>
 8004088:	4611      	mov	r1, r2
 800408a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800408e:	f7ff bf81 	b.w	8003f94 <_malloc_r>
 8004092:	b92a      	cbnz	r2, 80040a0 <_realloc_r+0x24>
 8004094:	f7ff ff16 	bl	8003ec4 <_free_r>
 8004098:	4625      	mov	r5, r4
 800409a:	4628      	mov	r0, r5
 800409c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040a0:	f000 f838 	bl	8004114 <_malloc_usable_size_r>
 80040a4:	4284      	cmp	r4, r0
 80040a6:	4607      	mov	r7, r0
 80040a8:	d802      	bhi.n	80040b0 <_realloc_r+0x34>
 80040aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80040ae:	d812      	bhi.n	80040d6 <_realloc_r+0x5a>
 80040b0:	4621      	mov	r1, r4
 80040b2:	4640      	mov	r0, r8
 80040b4:	f7ff ff6e 	bl	8003f94 <_malloc_r>
 80040b8:	4605      	mov	r5, r0
 80040ba:	2800      	cmp	r0, #0
 80040bc:	d0ed      	beq.n	800409a <_realloc_r+0x1e>
 80040be:	42bc      	cmp	r4, r7
 80040c0:	4622      	mov	r2, r4
 80040c2:	4631      	mov	r1, r6
 80040c4:	bf28      	it	cs
 80040c6:	463a      	movcs	r2, r7
 80040c8:	f7ff fed4 	bl	8003e74 <memcpy>
 80040cc:	4631      	mov	r1, r6
 80040ce:	4640      	mov	r0, r8
 80040d0:	f7ff fef8 	bl	8003ec4 <_free_r>
 80040d4:	e7e1      	b.n	800409a <_realloc_r+0x1e>
 80040d6:	4635      	mov	r5, r6
 80040d8:	e7df      	b.n	800409a <_realloc_r+0x1e>
	...

080040dc <_sbrk_r>:
 80040dc:	b538      	push	{r3, r4, r5, lr}
 80040de:	2300      	movs	r3, #0
 80040e0:	4d05      	ldr	r5, [pc, #20]	; (80040f8 <_sbrk_r+0x1c>)
 80040e2:	4604      	mov	r4, r0
 80040e4:	4608      	mov	r0, r1
 80040e6:	602b      	str	r3, [r5, #0]
 80040e8:	f7fc fda8 	bl	8000c3c <_sbrk>
 80040ec:	1c43      	adds	r3, r0, #1
 80040ee:	d102      	bne.n	80040f6 <_sbrk_r+0x1a>
 80040f0:	682b      	ldr	r3, [r5, #0]
 80040f2:	b103      	cbz	r3, 80040f6 <_sbrk_r+0x1a>
 80040f4:	6023      	str	r3, [r4, #0]
 80040f6:	bd38      	pop	{r3, r4, r5, pc}
 80040f8:	20000268 	.word	0x20000268

080040fc <__malloc_lock>:
 80040fc:	4801      	ldr	r0, [pc, #4]	; (8004104 <__malloc_lock+0x8>)
 80040fe:	f000 b811 	b.w	8004124 <__retarget_lock_acquire_recursive>
 8004102:	bf00      	nop
 8004104:	2000026c 	.word	0x2000026c

08004108 <__malloc_unlock>:
 8004108:	4801      	ldr	r0, [pc, #4]	; (8004110 <__malloc_unlock+0x8>)
 800410a:	f000 b80c 	b.w	8004126 <__retarget_lock_release_recursive>
 800410e:	bf00      	nop
 8004110:	2000026c 	.word	0x2000026c

08004114 <_malloc_usable_size_r>:
 8004114:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004118:	1f18      	subs	r0, r3, #4
 800411a:	2b00      	cmp	r3, #0
 800411c:	bfbc      	itt	lt
 800411e:	580b      	ldrlt	r3, [r1, r0]
 8004120:	18c0      	addlt	r0, r0, r3
 8004122:	4770      	bx	lr

08004124 <__retarget_lock_acquire_recursive>:
 8004124:	4770      	bx	lr

08004126 <__retarget_lock_release_recursive>:
 8004126:	4770      	bx	lr

08004128 <_init>:
 8004128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800412a:	bf00      	nop
 800412c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800412e:	bc08      	pop	{r3}
 8004130:	469e      	mov	lr, r3
 8004132:	4770      	bx	lr

08004134 <_fini>:
 8004134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004136:	bf00      	nop
 8004138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800413a:	bc08      	pop	{r3}
 800413c:	469e      	mov	lr, r3
 800413e:	4770      	bx	lr
