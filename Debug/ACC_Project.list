
ACC_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056a4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080057b0  080057b0  000157b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005834  08005834  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005834  08005834  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005834  08005834  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005834  08005834  00015834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005838  08005838  00015838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800583c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  20000074  080058b0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000378  080058b0  00020378  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000de2e  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024f5  00000000  00000000  0002df0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d10  00000000  00000000  00030408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a28  00000000  00000000  00031118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018034  00000000  00000000  00031b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000109ae  00000000  00000000  00049b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000871ed  00000000  00000000  0005a522  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ad8  00000000  00000000  000e1710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  000e51e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	08005798 	.word	0x08005798

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	08005798 	.word	0x08005798

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <update_ACC_data>:
#define COMMAND_Z_HI		0x2D

ACC_SETTING	ACC_set = ACC_SETTING_DEFAULT;
OUT_DATA	OUT 	= OUT_DATA_XYZ_DEFAULT;

void update_ACC_data(I2C_HandleTypeDef *i2c){
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af04      	add	r7, sp, #16
 8000162:	6078      	str	r0, [r7, #4]

	uint8_t		command[1];

	HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_STATUS_REG, 1, &command[0], 1, 1000);		//Обнвляем статус регистров
 8000164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000168:	9302      	str	r3, [sp, #8]
 800016a:	2301      	movs	r3, #1
 800016c:	9301      	str	r3, [sp, #4]
 800016e:	f107 030c 	add.w	r3, r7, #12
 8000172:	9300      	str	r3, [sp, #0]
 8000174:	2301      	movs	r3, #1
 8000176:	2227      	movs	r2, #39	; 0x27
 8000178:	2130      	movs	r1, #48	; 0x30
 800017a:	6878      	ldr	r0, [r7, #4]
 800017c:	f002 f8f0 	bl	8002360 <HAL_I2C_Mem_Read>
	ACC_set.STATUS_REG.all = command[0];
 8000180:	7b3a      	ldrb	r2, [r7, #12]
 8000182:	4b0d      	ldr	r3, [pc, #52]	; (80001b8 <update_ACC_data+0x5c>)
 8000184:	70da      	strb	r2, [r3, #3]

	if(rs.RS_DataSended && ACC_set.STATUS_REG.bit.ZYXDA){
 8000186:	4b0d      	ldr	r3, [pc, #52]	; (80001bc <update_ACC_data+0x60>)
 8000188:	685b      	ldr	r3, [r3, #4]
 800018a:	2b00      	cmp	r3, #0
 800018c:	d00f      	beq.n	80001ae <update_ACC_data+0x52>
 800018e:	4b0a      	ldr	r3, [pc, #40]	; (80001b8 <update_ACC_data+0x5c>)
 8000190:	78db      	ldrb	r3, [r3, #3]
 8000192:	f003 0308 	and.w	r3, r3, #8
 8000196:	b2db      	uxtb	r3, r3
 8000198:	2b00      	cmp	r3, #0
 800019a:	d008      	beq.n	80001ae <update_ACC_data+0x52>
		read_x_axis(i2c);
 800019c:	6878      	ldr	r0, [r7, #4]
 800019e:	f000 f8e3 	bl	8000368 <read_x_axis>
		read_y_axis(i2c);
 80001a2:	6878      	ldr	r0, [r7, #4]
 80001a4:	f000 f926 	bl	80003f4 <read_y_axis>
		read_z_axis(i2c);
 80001a8:	6878      	ldr	r0, [r7, #4]
 80001aa:	f000 f96b 	bl	8000484 <read_z_axis>
	}
}
 80001ae:	bf00      	nop
 80001b0:	3710      	adds	r7, #16
 80001b2:	46bd      	mov	sp, r7
 80001b4:	bd80      	pop	{r7, pc}
 80001b6:	bf00      	nop
 80001b8:	20000000 	.word	0x20000000
 80001bc:	20000090 	.word	0x20000090

080001c0 <ACC_init>:

void ACC_init(I2C_HandleTypeDef *i2c){
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b082      	sub	sp, #8
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	6078      	str	r0, [r7, #4]

    ACC_init_addr(ACC_ADDR, i2c);
 80001c8:	6879      	ldr	r1, [r7, #4]
 80001ca:	2030      	movs	r0, #48	; 0x30
 80001cc:	f000 f80e 	bl	80001ec <ACC_init_addr>
    ACC_setting(ACC_ADDR, i2c);
 80001d0:	6879      	ldr	r1, [r7, #4]
 80001d2:	2030      	movs	r0, #48	; 0x30
 80001d4:	f000 f854 	bl	8000280 <ACC_setting>

    rs.RS_DataSended = 1;
 80001d8:	4b03      	ldr	r3, [pc, #12]	; (80001e8 <ACC_init+0x28>)
 80001da:	2201      	movs	r2, #1
 80001dc:	605a      	str	r2, [r3, #4]
    //ACC_check_settings(ACC_ADDR, i2c);
}
 80001de:	bf00      	nop
 80001e0:	3708      	adds	r7, #8
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bd80      	pop	{r7, pc}
 80001e6:	bf00      	nop
 80001e8:	20000090 	.word	0x20000090

080001ec <ACC_init_addr>:



void ACC_init_addr (uint8_t address, I2C_HandleTypeDef *i2c){
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b086      	sub	sp, #24
 80001f0:	af02      	add	r7, sp, #8
 80001f2:	4603      	mov	r3, r0
 80001f4:	6039      	str	r1, [r7, #0]
 80001f6:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef result;

    for(;;){
	result = HAL_I2C_IsDeviceReady(i2c, address, 1, 150);
 80001f8:	79fb      	ldrb	r3, [r7, #7]
 80001fa:	b299      	uxth	r1, r3
 80001fc:	2396      	movs	r3, #150	; 0x96
 80001fe:	2201      	movs	r2, #1
 8000200:	6838      	ldr	r0, [r7, #0]
 8000202:	f002 fb15 	bl	8002830 <HAL_I2C_IsDeviceReady>
 8000206:	4603      	mov	r3, r0
 8000208:	73fb      	strb	r3, [r7, #15]
	    if(result == HAL_OK)
 800020a:	7bfb      	ldrb	r3, [r7, #15]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d000      	beq.n	8000212 <ACC_init_addr+0x26>
	result = HAL_I2C_IsDeviceReady(i2c, address, 1, 150);
 8000210:	e7f2      	b.n	80001f8 <ACC_init_addr+0xc>
	    	break;
 8000212:	bf00      	nop
	}

    uint8_t command_arr[1];
    uint8_t receive_arr[1];

    command_arr[0] = 0xF;
 8000214:	230f      	movs	r3, #15
 8000216:	733b      	strb	r3, [r7, #12]
    //WHO_AM_I
    HAL_I2C_Master_Transmit(i2c, address, command_arr, sizeof(command_arr), 10);
 8000218:	79fb      	ldrb	r3, [r7, #7]
 800021a:	b299      	uxth	r1, r3
 800021c:	f107 020c 	add.w	r2, r7, #12
 8000220:	230a      	movs	r3, #10
 8000222:	9300      	str	r3, [sp, #0]
 8000224:	2301      	movs	r3, #1
 8000226:	6838      	ldr	r0, [r7, #0]
 8000228:	f001 fc36 	bl	8001a98 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(i2c, address, receive_arr, sizeof(receive_arr), 10);
 800022c:	79fb      	ldrb	r3, [r7, #7]
 800022e:	b299      	uxth	r1, r3
 8000230:	f107 0208 	add.w	r2, r7, #8
 8000234:	230a      	movs	r3, #10
 8000236:	9300      	str	r3, [sp, #0]
 8000238:	2301      	movs	r3, #1
 800023a:	6838      	ldr	r0, [r7, #0]
 800023c:	f001 fd2a 	bl	8001c94 <HAL_I2C_Master_Receive>

    GPIOC->BSRR |= GPIO_BSRR_BS13;
 8000240:	4b0e      	ldr	r3, [pc, #56]	; (800027c <ACC_init_addr+0x90>)
 8000242:	691b      	ldr	r3, [r3, #16]
 8000244:	4a0d      	ldr	r2, [pc, #52]	; (800027c <ACC_init_addr+0x90>)
 8000246:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800024a:	6113      	str	r3, [r2, #16]
    HAL_Delay(1000);
 800024c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000250:	f000 fe94 	bl	8000f7c <HAL_Delay>
    GPIOC->BSRR |= GPIO_BSRR_BR13;
 8000254:	4b09      	ldr	r3, [pc, #36]	; (800027c <ACC_init_addr+0x90>)
 8000256:	691b      	ldr	r3, [r3, #16]
 8000258:	4a08      	ldr	r2, [pc, #32]	; (800027c <ACC_init_addr+0x90>)
 800025a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800025e:	6113      	str	r3, [r2, #16]
    HAL_Delay(1000);
 8000260:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000264:	f000 fe8a 	bl	8000f7c <HAL_Delay>
    GPIOC->BSRR |= GPIO_BSRR_BS13;
 8000268:	4b04      	ldr	r3, [pc, #16]	; (800027c <ACC_init_addr+0x90>)
 800026a:	691b      	ldr	r3, [r3, #16]
 800026c:	4a03      	ldr	r2, [pc, #12]	; (800027c <ACC_init_addr+0x90>)
 800026e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000272:	6113      	str	r3, [r2, #16]
}
 8000274:	bf00      	nop
 8000276:	3710      	adds	r7, #16
 8000278:	46bd      	mov	sp, r7
 800027a:	bd80      	pop	{r7, pc}
 800027c:	40011000 	.word	0x40011000

08000280 <ACC_setting>:

void ACC_setting(uint8_t address, I2C_HandleTypeDef *i2c){
 8000280:	b580      	push	{r7, lr}
 8000282:	b088      	sub	sp, #32
 8000284:	af04      	add	r7, sp, #16
 8000286:	4603      	mov	r3, r0
 8000288:	6039      	str	r1, [r7, #0]
 800028a:	71fb      	strb	r3, [r7, #7]

    uint8_t 			command_arr[3];

    HAL_I2C_Mem_Write(i2c, address, COMMAND_CTRL_REG1, 1, &ACC_set.CTRL_REG1.all, 1, 1000);	//Отправка данных структур (настроек) в память.
 800028c:	79fb      	ldrb	r3, [r7, #7]
 800028e:	b299      	uxth	r1, r3
 8000290:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000294:	9302      	str	r3, [sp, #8]
 8000296:	2301      	movs	r3, #1
 8000298:	9301      	str	r3, [sp, #4]
 800029a:	4b29      	ldr	r3, [pc, #164]	; (8000340 <ACC_setting+0xc0>)
 800029c:	9300      	str	r3, [sp, #0]
 800029e:	2301      	movs	r3, #1
 80002a0:	2220      	movs	r2, #32
 80002a2:	6838      	ldr	r0, [r7, #0]
 80002a4:	f001 ff62 	bl	800216c <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(i2c, address, COMMAND_CTRL_REG2, 1, &ACC_set.CTRL_REG2.all, 1, 1000);
 80002a8:	79fb      	ldrb	r3, [r7, #7]
 80002aa:	b299      	uxth	r1, r3
 80002ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002b0:	9302      	str	r3, [sp, #8]
 80002b2:	2301      	movs	r3, #1
 80002b4:	9301      	str	r3, [sp, #4]
 80002b6:	4b23      	ldr	r3, [pc, #140]	; (8000344 <ACC_setting+0xc4>)
 80002b8:	9300      	str	r3, [sp, #0]
 80002ba:	2301      	movs	r3, #1
 80002bc:	2221      	movs	r2, #33	; 0x21
 80002be:	6838      	ldr	r0, [r7, #0]
 80002c0:	f001 ff54 	bl	800216c <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(i2c, address, COMMAND_CTRL_REG4, 1, &ACC_set.CTRL_REG4.all, 1, 1000);
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	b299      	uxth	r1, r3
 80002c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002cc:	9302      	str	r3, [sp, #8]
 80002ce:	2301      	movs	r3, #1
 80002d0:	9301      	str	r3, [sp, #4]
 80002d2:	4b1d      	ldr	r3, [pc, #116]	; (8000348 <ACC_setting+0xc8>)
 80002d4:	9300      	str	r3, [sp, #0]
 80002d6:	2301      	movs	r3, #1
 80002d8:	2223      	movs	r2, #35	; 0x23
 80002da:	6838      	ldr	r0, [r7, #0]
 80002dc:	f001 ff46 	bl	800216c <HAL_I2C_Mem_Write>

    HAL_I2C_Mem_Read(i2c, address, COMMAND_CTRL_REG1, 1, &command_arr[0], 1, 50);			//Для проверки, что данные записались верно
 80002e0:	79fb      	ldrb	r3, [r7, #7]
 80002e2:	b299      	uxth	r1, r3
 80002e4:	2332      	movs	r3, #50	; 0x32
 80002e6:	9302      	str	r3, [sp, #8]
 80002e8:	2301      	movs	r3, #1
 80002ea:	9301      	str	r3, [sp, #4]
 80002ec:	f107 030c 	add.w	r3, r7, #12
 80002f0:	9300      	str	r3, [sp, #0]
 80002f2:	2301      	movs	r3, #1
 80002f4:	2220      	movs	r2, #32
 80002f6:	6838      	ldr	r0, [r7, #0]
 80002f8:	f002 f832 	bl	8002360 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(i2c, address, COMMAND_CTRL_REG2, 1, &command_arr[1], 1, 50);
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	b299      	uxth	r1, r3
 8000300:	2332      	movs	r3, #50	; 0x32
 8000302:	9302      	str	r3, [sp, #8]
 8000304:	2301      	movs	r3, #1
 8000306:	9301      	str	r3, [sp, #4]
 8000308:	f107 030c 	add.w	r3, r7, #12
 800030c:	3301      	adds	r3, #1
 800030e:	9300      	str	r3, [sp, #0]
 8000310:	2301      	movs	r3, #1
 8000312:	2221      	movs	r2, #33	; 0x21
 8000314:	6838      	ldr	r0, [r7, #0]
 8000316:	f002 f823 	bl	8002360 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(i2c, address, COMMAND_CTRL_REG4, 1, &command_arr[2], 1, 50);
 800031a:	79fb      	ldrb	r3, [r7, #7]
 800031c:	b299      	uxth	r1, r3
 800031e:	2332      	movs	r3, #50	; 0x32
 8000320:	9302      	str	r3, [sp, #8]
 8000322:	2301      	movs	r3, #1
 8000324:	9301      	str	r3, [sp, #4]
 8000326:	f107 030c 	add.w	r3, r7, #12
 800032a:	3302      	adds	r3, #2
 800032c:	9300      	str	r3, [sp, #0]
 800032e:	2301      	movs	r3, #1
 8000330:	2223      	movs	r2, #35	; 0x23
 8000332:	6838      	ldr	r0, [r7, #0]
 8000334:	f002 f814 	bl	8002360 <HAL_I2C_Mem_Read>
}
 8000338:	bf00      	nop
 800033a:	3710      	adds	r7, #16
 800033c:	46bd      	mov	sp, r7
 800033e:	bd80      	pop	{r7, pc}
 8000340:	20000000 	.word	0x20000000
 8000344:	20000001 	.word	0x20000001
 8000348:	20000002 	.word	0x20000002

0800034c <write_axis>:


void write_axis(AXIS *axis, uint16_t arr){
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
 8000354:	460b      	mov	r3, r1
 8000356:	807b      	strh	r3, [r7, #2]
	axis->all = arr;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	887a      	ldrh	r2, [r7, #2]
 800035c:	801a      	strh	r2, [r3, #0]
}
 800035e:	bf00      	nop
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr

08000368 <read_x_axis>:

void read_x_axis(I2C_HandleTypeDef *i2c){
 8000368:	b580      	push	{r7, lr}
 800036a:	b088      	sub	sp, #32
 800036c:	af04      	add	r7, sp, #16
 800036e:	6078      	str	r0, [r7, #4]

    uint8_t data_LO_RX[1], data_HI_RX[1];

    if(ACC_set.STATUS_REG.bit.XOR || ACC_set.STATUS_REG.bit.XDA){
 8000370:	4b1d      	ldr	r3, [pc, #116]	; (80003e8 <read_x_axis+0x80>)
 8000372:	78db      	ldrb	r3, [r3, #3]
 8000374:	f003 0310 	and.w	r3, r3, #16
 8000378:	b2db      	uxtb	r3, r3
 800037a:	2b00      	cmp	r3, #0
 800037c:	d106      	bne.n	800038c <read_x_axis+0x24>
 800037e:	4b1a      	ldr	r3, [pc, #104]	; (80003e8 <read_x_axis+0x80>)
 8000380:	78db      	ldrb	r3, [r3, #3]
 8000382:	f003 0301 	and.w	r3, r3, #1
 8000386:	b2db      	uxtb	r3, r3
 8000388:	2b00      	cmp	r3, #0
 800038a:	d029      	beq.n	80003e0 <read_x_axis+0x78>

    	//Считываю значения и записываю их в массивы
		HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_X_HI, 1, &data_HI_RX[0], 1, 10);		//Считали данные с регистра и записали в структуру
 800038c:	230a      	movs	r3, #10
 800038e:	9302      	str	r3, [sp, #8]
 8000390:	2301      	movs	r3, #1
 8000392:	9301      	str	r3, [sp, #4]
 8000394:	f107 0308 	add.w	r3, r7, #8
 8000398:	9300      	str	r3, [sp, #0]
 800039a:	2301      	movs	r3, #1
 800039c:	2229      	movs	r2, #41	; 0x29
 800039e:	2130      	movs	r1, #48	; 0x30
 80003a0:	6878      	ldr	r0, [r7, #4]
 80003a2:	f001 ffdd 	bl	8002360 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_X_LO, 1, &data_LO_RX[0], 1, 10);
 80003a6:	230a      	movs	r3, #10
 80003a8:	9302      	str	r3, [sp, #8]
 80003aa:	2301      	movs	r3, #1
 80003ac:	9301      	str	r3, [sp, #4]
 80003ae:	f107 030c 	add.w	r3, r7, #12
 80003b2:	9300      	str	r3, [sp, #0]
 80003b4:	2301      	movs	r3, #1
 80003b6:	2228      	movs	r2, #40	; 0x28
 80003b8:	2130      	movs	r1, #48	; 0x30
 80003ba:	6878      	ldr	r0, [r7, #4]
 80003bc:	f001 ffd0 	bl	8002360 <HAL_I2C_Mem_Read>

		//Запись данных в структуру
		OUT.write_axis(&OUT.X, ((data_HI_RX[0] & 0xff) << 8) | data_LO_RX[0]);
 80003c0:	4b0a      	ldr	r3, [pc, #40]	; (80003ec <read_x_axis+0x84>)
 80003c2:	689b      	ldr	r3, [r3, #8]
 80003c4:	7a3a      	ldrb	r2, [r7, #8]
 80003c6:	0212      	lsls	r2, r2, #8
 80003c8:	b211      	sxth	r1, r2
 80003ca:	7b3a      	ldrb	r2, [r7, #12]
 80003cc:	b212      	sxth	r2, r2
 80003ce:	430a      	orrs	r2, r1
 80003d0:	b212      	sxth	r2, r2
 80003d2:	b292      	uxth	r2, r2
 80003d4:	4611      	mov	r1, r2
 80003d6:	4805      	ldr	r0, [pc, #20]	; (80003ec <read_x_axis+0x84>)
 80003d8:	4798      	blx	r3

		rs.RS_X_axis_data = 1;															//Данные готовы к отправке
 80003da:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <read_x_axis+0x88>)
 80003dc:	2201      	movs	r2, #1
 80003de:	609a      	str	r2, [r3, #8]
	}
}
 80003e0:	bf00      	nop
 80003e2:	3710      	adds	r7, #16
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	20000000 	.word	0x20000000
 80003ec:	2000000c 	.word	0x2000000c
 80003f0:	20000090 	.word	0x20000090

080003f4 <read_y_axis>:


void read_y_axis(I2C_HandleTypeDef *i2c){
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b088      	sub	sp, #32
 80003f8:	af04      	add	r7, sp, #16
 80003fa:	6078      	str	r0, [r7, #4]

    uint8_t data_LO_RX[1], data_HI_RX[1];

    if(ACC_set.STATUS_REG.bit.YOR || ACC_set.STATUS_REG.bit.YDA){
 80003fc:	4b1d      	ldr	r3, [pc, #116]	; (8000474 <read_y_axis+0x80>)
 80003fe:	78db      	ldrb	r3, [r3, #3]
 8000400:	f003 0320 	and.w	r3, r3, #32
 8000404:	b2db      	uxtb	r3, r3
 8000406:	2b00      	cmp	r3, #0
 8000408:	d106      	bne.n	8000418 <read_y_axis+0x24>
 800040a:	4b1a      	ldr	r3, [pc, #104]	; (8000474 <read_y_axis+0x80>)
 800040c:	78db      	ldrb	r3, [r3, #3]
 800040e:	f003 0302 	and.w	r3, r3, #2
 8000412:	b2db      	uxtb	r3, r3
 8000414:	2b00      	cmp	r3, #0
 8000416:	d029      	beq.n	800046c <read_y_axis+0x78>

    	//Считываю значения и записываю их в массивы
		HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_Y_HI, 1, &data_HI_RX[0], 1, 10);
 8000418:	230a      	movs	r3, #10
 800041a:	9302      	str	r3, [sp, #8]
 800041c:	2301      	movs	r3, #1
 800041e:	9301      	str	r3, [sp, #4]
 8000420:	f107 0308 	add.w	r3, r7, #8
 8000424:	9300      	str	r3, [sp, #0]
 8000426:	2301      	movs	r3, #1
 8000428:	222b      	movs	r2, #43	; 0x2b
 800042a:	2130      	movs	r1, #48	; 0x30
 800042c:	6878      	ldr	r0, [r7, #4]
 800042e:	f001 ff97 	bl	8002360 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_Y_LO, 1, &data_LO_RX[0], 1, 10);
 8000432:	230a      	movs	r3, #10
 8000434:	9302      	str	r3, [sp, #8]
 8000436:	2301      	movs	r3, #1
 8000438:	9301      	str	r3, [sp, #4]
 800043a:	f107 030c 	add.w	r3, r7, #12
 800043e:	9300      	str	r3, [sp, #0]
 8000440:	2301      	movs	r3, #1
 8000442:	222a      	movs	r2, #42	; 0x2a
 8000444:	2130      	movs	r1, #48	; 0x30
 8000446:	6878      	ldr	r0, [r7, #4]
 8000448:	f001 ff8a 	bl	8002360 <HAL_I2C_Mem_Read>

		//Запись данных в структуру
		OUT.write_axis(&OUT.Y, ((data_HI_RX[0] & 0xff) << 8) | data_LO_RX[0]);
 800044c:	4b0a      	ldr	r3, [pc, #40]	; (8000478 <read_y_axis+0x84>)
 800044e:	689b      	ldr	r3, [r3, #8]
 8000450:	7a3a      	ldrb	r2, [r7, #8]
 8000452:	0212      	lsls	r2, r2, #8
 8000454:	b211      	sxth	r1, r2
 8000456:	7b3a      	ldrb	r2, [r7, #12]
 8000458:	b212      	sxth	r2, r2
 800045a:	430a      	orrs	r2, r1
 800045c:	b212      	sxth	r2, r2
 800045e:	b292      	uxth	r2, r2
 8000460:	4611      	mov	r1, r2
 8000462:	4806      	ldr	r0, [pc, #24]	; (800047c <read_y_axis+0x88>)
 8000464:	4798      	blx	r3

	    rs.RS_Y_axis_data = 1;
 8000466:	4b06      	ldr	r3, [pc, #24]	; (8000480 <read_y_axis+0x8c>)
 8000468:	2201      	movs	r2, #1
 800046a:	60da      	str	r2, [r3, #12]
    }

}
 800046c:	bf00      	nop
 800046e:	3710      	adds	r7, #16
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	20000000 	.word	0x20000000
 8000478:	2000000c 	.word	0x2000000c
 800047c:	2000000e 	.word	0x2000000e
 8000480:	20000090 	.word	0x20000090

08000484 <read_z_axis>:


void read_z_axis(I2C_HandleTypeDef *i2c){
 8000484:	b580      	push	{r7, lr}
 8000486:	b088      	sub	sp, #32
 8000488:	af04      	add	r7, sp, #16
 800048a:	6078      	str	r0, [r7, #4]

    uint8_t data_LO_RX[1], data_HI_RX[1];
    if(ACC_set.STATUS_REG.bit.ZOR || ACC_set.STATUS_REG.bit.ZDA){
 800048c:	4b25      	ldr	r3, [pc, #148]	; (8000524 <read_z_axis+0xa0>)
 800048e:	78db      	ldrb	r3, [r3, #3]
 8000490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000494:	b2db      	uxtb	r3, r3
 8000496:	2b00      	cmp	r3, #0
 8000498:	d106      	bne.n	80004a8 <read_z_axis+0x24>
 800049a:	4b22      	ldr	r3, [pc, #136]	; (8000524 <read_z_axis+0xa0>)
 800049c:	78db      	ldrb	r3, [r3, #3]
 800049e:	f003 0304 	and.w	r3, r3, #4
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d029      	beq.n	80004fc <read_z_axis+0x78>

    	//Считываю значения и записываю их в массивы
		HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_Z_HI, 1, &data_HI_RX[0], 1, 10);
 80004a8:	230a      	movs	r3, #10
 80004aa:	9302      	str	r3, [sp, #8]
 80004ac:	2301      	movs	r3, #1
 80004ae:	9301      	str	r3, [sp, #4]
 80004b0:	f107 0308 	add.w	r3, r7, #8
 80004b4:	9300      	str	r3, [sp, #0]
 80004b6:	2301      	movs	r3, #1
 80004b8:	222d      	movs	r2, #45	; 0x2d
 80004ba:	2130      	movs	r1, #48	; 0x30
 80004bc:	6878      	ldr	r0, [r7, #4]
 80004be:	f001 ff4f 	bl	8002360 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_Z_LO, 1, &data_LO_RX[0], 1, 10);
 80004c2:	230a      	movs	r3, #10
 80004c4:	9302      	str	r3, [sp, #8]
 80004c6:	2301      	movs	r3, #1
 80004c8:	9301      	str	r3, [sp, #4]
 80004ca:	f107 030c 	add.w	r3, r7, #12
 80004ce:	9300      	str	r3, [sp, #0]
 80004d0:	2301      	movs	r3, #1
 80004d2:	222c      	movs	r2, #44	; 0x2c
 80004d4:	2130      	movs	r1, #48	; 0x30
 80004d6:	6878      	ldr	r0, [r7, #4]
 80004d8:	f001 ff42 	bl	8002360 <HAL_I2C_Mem_Read>

		//Запись данных в структуру
		OUT.write_axis(&OUT.Z, ((data_HI_RX[0] & 0xff) << 8) | data_LO_RX[0]);
 80004dc:	4b12      	ldr	r3, [pc, #72]	; (8000528 <read_z_axis+0xa4>)
 80004de:	689b      	ldr	r3, [r3, #8]
 80004e0:	7a3a      	ldrb	r2, [r7, #8]
 80004e2:	0212      	lsls	r2, r2, #8
 80004e4:	b211      	sxth	r1, r2
 80004e6:	7b3a      	ldrb	r2, [r7, #12]
 80004e8:	b212      	sxth	r2, r2
 80004ea:	430a      	orrs	r2, r1
 80004ec:	b212      	sxth	r2, r2
 80004ee:	b292      	uxth	r2, r2
 80004f0:	4611      	mov	r1, r2
 80004f2:	480e      	ldr	r0, [pc, #56]	; (800052c <read_z_axis+0xa8>)
 80004f4:	4798      	blx	r3

		rs.RS_Z_axis_data = 1;
 80004f6:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <read_z_axis+0xac>)
 80004f8:	2201      	movs	r2, #1
 80004fa:	611a      	str	r2, [r3, #16]
    }

    if(rs.RS_Z_axis_data && rs.RS_X_axis_data && rs.RS_Y_axis_data)
 80004fc:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <read_z_axis+0xac>)
 80004fe:	691b      	ldr	r3, [r3, #16]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d00a      	beq.n	800051a <read_z_axis+0x96>
 8000504:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <read_z_axis+0xac>)
 8000506:	689b      	ldr	r3, [r3, #8]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d006      	beq.n	800051a <read_z_axis+0x96>
 800050c:	4b08      	ldr	r3, [pc, #32]	; (8000530 <read_z_axis+0xac>)
 800050e:	68db      	ldr	r3, [r3, #12]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d002      	beq.n	800051a <read_z_axis+0x96>
    	rs.RS_DataReady = 1;
 8000514:	4b06      	ldr	r3, [pc, #24]	; (8000530 <read_z_axis+0xac>)
 8000516:	2201      	movs	r2, #1
 8000518:	601a      	str	r2, [r3, #0]

}
 800051a:	bf00      	nop
 800051c:	3710      	adds	r7, #16
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	20000000 	.word	0x20000000
 8000528:	2000000c 	.word	0x2000000c
 800052c:	20000010 	.word	0x20000010
 8000530:	20000090 	.word	0x20000090

08000534 <MCP2515_Initialize>:
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);


/* MCP2515 초기화 */
bool MCP2515_Initialize(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();
 800053a:	2201      	movs	r2, #1
 800053c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000540:	480b      	ldr	r0, [pc, #44]	; (8000570 <MCP2515_Initialize+0x3c>)
 8000542:	f001 f94d 	bl	80017e0 <HAL_GPIO_WritePin>

  uint8_t loop = 10;
 8000546:	230a      	movs	r3, #10
 8000548:	71fb      	strb	r3, [r7, #7]

  do {
    /* SPI Ready 확인 */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 800054a:	480a      	ldr	r0, [pc, #40]	; (8000574 <MCP2515_Initialize+0x40>)
 800054c:	f004 f993 	bl	8004876 <HAL_SPI_GetState>
 8000550:	4603      	mov	r3, r0
 8000552:	2b01      	cmp	r3, #1
 8000554:	d101      	bne.n	800055a <MCP2515_Initialize+0x26>
      return true;
 8000556:	2301      	movs	r3, #1
 8000558:	e006      	b.n	8000568 <MCP2515_Initialize+0x34>

    loop--;
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	3b01      	subs	r3, #1
 800055e:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d1f1      	bne.n	800054a <MCP2515_Initialize+0x16>

  return false;
 8000566:	2300      	movs	r3, #0
}
 8000568:	4618      	mov	r0, r3
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40010800 	.word	0x40010800
 8000574:	20000188 	.word	0x20000188

08000578 <MCP2515_SetConfigMode>:

/* MCP2515 를 설정모드로 전환 */

bool MCP2515_SetConfigMode(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
  /* CANCTRL Register Configuration 모드 설정 */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 800057e:	2180      	movs	r1, #128	; 0x80
 8000580:	200f      	movs	r0, #15
 8000582:	f000 f83b 	bl	80005fc <MCP2515_WriteByte>

  uint8_t loop = 10;
 8000586:	230a      	movs	r3, #10
 8000588:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 800058a:	200e      	movs	r0, #14
 800058c:	f000 f812 	bl	80005b4 <MCP2515_ReadByte>
 8000590:	4603      	mov	r3, r0
 8000592:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8000596:	2b80      	cmp	r3, #128	; 0x80
 8000598:	d101      	bne.n	800059e <MCP2515_SetConfigMode+0x26>
      return true;
 800059a:	2301      	movs	r3, #1
 800059c:	e006      	b.n	80005ac <MCP2515_SetConfigMode+0x34>

    loop--;
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	3b01      	subs	r3, #1
 80005a2:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d1ef      	bne.n	800058a <MCP2515_SetConfigMode+0x12>

  return false;
 80005aa:	2300      	movs	r3, #0
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* 1바이트 읽기 */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b084      	sub	sp, #16
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	4603      	mov	r3, r0
 80005bc:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;

  MCP2515_CS_LOW();
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005c4:	480c      	ldr	r0, [pc, #48]	; (80005f8 <MCP2515_ReadByte+0x44>)
 80005c6:	f001 f90b 	bl	80017e0 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ);
 80005ca:	2003      	movs	r0, #3
 80005cc:	f000 f83c 	bl	8000648 <SPI_Tx>
  SPI_Tx(address);
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	4618      	mov	r0, r3
 80005d4:	f000 f838 	bl	8000648 <SPI_Tx>
  retVal = SPI_Rx();
 80005d8:	f000 f848 	bl	800066c <SPI_Rx>
 80005dc:	4603      	mov	r3, r0
 80005de:	73fb      	strb	r3, [r7, #15]

  MCP2515_CS_HIGH();
 80005e0:	2201      	movs	r2, #1
 80005e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005e6:	4804      	ldr	r0, [pc, #16]	; (80005f8 <MCP2515_ReadByte+0x44>)
 80005e8:	f001 f8fa 	bl	80017e0 <HAL_GPIO_WritePin>

  return retVal;
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40010800 	.word	0x40010800

080005fc <MCP2515_WriteByte>:
  MCP2515_CS_HIGH();
}

/* 1바이트 쓰기 */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	460a      	mov	r2, r1
 8000606:	71fb      	strb	r3, [r7, #7]
 8000608:	4613      	mov	r3, r2
 800060a:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 800060c:	2200      	movs	r2, #0
 800060e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000612:	480c      	ldr	r0, [pc, #48]	; (8000644 <MCP2515_WriteByte+0x48>)
 8000614:	f001 f8e4 	bl	80017e0 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8000618:	2002      	movs	r0, #2
 800061a:	f000 f815 	bl	8000648 <SPI_Tx>
  SPI_Tx(address);
 800061e:	79fb      	ldrb	r3, [r7, #7]
 8000620:	4618      	mov	r0, r3
 8000622:	f000 f811 	bl	8000648 <SPI_Tx>
  SPI_Tx(data);
 8000626:	79bb      	ldrb	r3, [r7, #6]
 8000628:	4618      	mov	r0, r3
 800062a:	f000 f80d 	bl	8000648 <SPI_Tx>

  MCP2515_CS_HIGH();
 800062e:	2201      	movs	r2, #1
 8000630:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000634:	4803      	ldr	r0, [pc, #12]	; (8000644 <MCP2515_WriteByte+0x48>)
 8000636:	f001 f8d3 	bl	80017e0 <HAL_GPIO_WritePin>
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40010800 	.word	0x40010800

08000648 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx Wrapper 함수 */
static void SPI_Tx(uint8_t data)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 8000652:	1df9      	adds	r1, r7, #7
 8000654:	230a      	movs	r3, #10
 8000656:	2201      	movs	r2, #1
 8000658:	4803      	ldr	r0, [pc, #12]	; (8000668 <SPI_Tx+0x20>)
 800065a:	f003 fbb7 	bl	8003dcc <HAL_SPI_Transmit>
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000188 	.word	0x20000188

0800066c <SPI_Rx>:
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
}

/* SPI Rx Wrapper 함수 */
static uint8_t SPI_Rx(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8000672:	1df9      	adds	r1, r7, #7
 8000674:	230a      	movs	r3, #10
 8000676:	2201      	movs	r2, #1
 8000678:	4803      	ldr	r0, [pc, #12]	; (8000688 <SPI_Rx+0x1c>)
 800067a:	f003 fd0c 	bl	8004096 <HAL_SPI_Receive>
  return retVal;
 800067e:	79fb      	ldrb	r3, [r7, #7]
}
 8000680:	4618      	mov	r0, r3
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000188 	.word	0x20000188

0800068c <RS_Send>:
#include "string.h"
#include "stdio.h"

RS_DATA_STRUCT	rs;

void RS_Send(UART_HandleTypeDef *uart){
 800068c:	b580      	push	{r7, lr}
 800068e:	b092      	sub	sp, #72	; 0x48
 8000690:	af02      	add	r7, sp, #8
 8000692:	6078      	str	r0, [r7, #4]

    char			buffer[50]; //44
    HAL_StatusTypeDef	result;

    if(rs.RS_DataReady){
 8000694:	4b20      	ldr	r3, [pc, #128]	; (8000718 <RS_Send+0x8c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d038      	beq.n	800070e <RS_Send+0x82>

		sprintf(buffer, "X_axis: %d\tY_axis: %d\tZ_axis: %d\r\n", (int16_t)OUT.X.all, (int16_t)OUT.Y.all, (int16_t)OUT.Z.all);
 800069c:	4b1f      	ldr	r3, [pc, #124]	; (800071c <RS_Send+0x90>)
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	b21b      	sxth	r3, r3
 80006a2:	461a      	mov	r2, r3
 80006a4:	4b1d      	ldr	r3, [pc, #116]	; (800071c <RS_Send+0x90>)
 80006a6:	885b      	ldrh	r3, [r3, #2]
 80006a8:	b21b      	sxth	r3, r3
 80006aa:	4619      	mov	r1, r3
 80006ac:	4b1b      	ldr	r3, [pc, #108]	; (800071c <RS_Send+0x90>)
 80006ae:	889b      	ldrh	r3, [r3, #4]
 80006b0:	b21b      	sxth	r3, r3
 80006b2:	f107 000c 	add.w	r0, r7, #12
 80006b6:	9300      	str	r3, [sp, #0]
 80006b8:	460b      	mov	r3, r1
 80006ba:	4919      	ldr	r1, [pc, #100]	; (8000720 <RS_Send+0x94>)
 80006bc:	f004 fbba 	bl	8004e34 <siprintf>

		result = HAL_UART_Transmit(uart, (uint8_t*) buffer, strlen(buffer), 10);
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	4618      	mov	r0, r3
 80006c6:	f7ff fd41 	bl	800014c <strlen>
 80006ca:	4603      	mov	r3, r0
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	f107 010c 	add.w	r1, r7, #12
 80006d2:	230a      	movs	r3, #10
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f004 fa2d 	bl	8004b34 <HAL_UART_Transmit>
 80006da:	4603      	mov	r3, r0
 80006dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if(result == HAL_OK){
 80006e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d10f      	bne.n	8000708 <RS_Send+0x7c>

			rs.RS_X_axis_data = 0;
 80006e8:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <RS_Send+0x8c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
			rs.RS_Y_axis_data = 0;
 80006ee:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <RS_Send+0x8c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
			rs.RS_Z_axis_data = 0;
 80006f4:	4b08      	ldr	r3, [pc, #32]	; (8000718 <RS_Send+0x8c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]

			rs.RS_DataSended = 1;
 80006fa:	4b07      	ldr	r3, [pc, #28]	; (8000718 <RS_Send+0x8c>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	605a      	str	r2, [r3, #4]
		    rs.RS_DataReady = 0;
 8000700:	4b05      	ldr	r3, [pc, #20]	; (8000718 <RS_Send+0x8c>)
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
	//HAL_UART_Transmit(uart, (uint8_t*) "\033[0;0H", 6 , 5);
	//HAL_UART_Transmit(uart, (uint8_t*) "\033[2J", 4, 5);

    }

}
 8000706:	e002      	b.n	800070e <RS_Send+0x82>
			rs.RS_DataSended = 0;
 8000708:	4b03      	ldr	r3, [pc, #12]	; (8000718 <RS_Send+0x8c>)
 800070a:	2200      	movs	r2, #0
 800070c:	605a      	str	r2, [r3, #4]
}
 800070e:	bf00      	nop
 8000710:	3740      	adds	r7, #64	; 0x40
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	20000090 	.word	0x20000090
 800071c:	2000000c 	.word	0x2000000c
 8000720:	080057b0 	.word	0x080057b0

08000724 <GPIO_init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void GPIO_init(){
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0

    RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;				//Тактирование
 8000728:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <GPIO_init+0x3c>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	4a0c      	ldr	r2, [pc, #48]	; (8000760 <GPIO_init+0x3c>)
 800072e:	f043 0310 	orr.w	r3, r3, #16
 8000732:	6193      	str	r3, [r2, #24]

    GPIOC->CRH &= ~GPIO_CRH_CNF13;				//Oбнуление регистра CNF0/1 = 00
 8000734:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <GPIO_init+0x40>)
 8000736:	685b      	ldr	r3, [r3, #4]
 8000738:	4a0a      	ldr	r2, [pc, #40]	; (8000764 <GPIO_init+0x40>)
 800073a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800073e:	6053      	str	r3, [r2, #4]
    GPIOC->CRH |= GPIO_CRH_MODE13;				//MODE 11 => max 50MHz
 8000740:	4b08      	ldr	r3, [pc, #32]	; (8000764 <GPIO_init+0x40>)
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	4a07      	ldr	r2, [pc, #28]	; (8000764 <GPIO_init+0x40>)
 8000746:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800074a:	6053      	str	r3, [r2, #4]
    GPIOC->BSRR |= GPIO_BSRR_BR13;
 800074c:	4b05      	ldr	r3, [pc, #20]	; (8000764 <GPIO_init+0x40>)
 800074e:	691b      	ldr	r3, [r3, #16]
 8000750:	4a04      	ldr	r2, [pc, #16]	; (8000764 <GPIO_init+0x40>)
 8000752:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000756:	6113      	str	r3, [r2, #16]
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	bc80      	pop	{r7}
 800075e:	4770      	bx	lr
 8000760:	40021000 	.word	0x40021000
 8000764:	40011000 	.word	0x40011000

08000768 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800076c:	f000 fba4 	bl	8000eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000770:	f000 f828 	bl	80007c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000774:	f000 f936 	bl	80009e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000778:	f000 f90e 	bl	8000998 <MX_DMA_Init>
  MX_I2C1_Init();
 800077c:	f000 f87c 	bl	8000878 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000780:	f000 f8e0 	bl	8000944 <MX_USART1_UART_Init>
  MX_CRC_Init();
 8000784:	f000 f864 	bl	8000850 <MX_CRC_Init>
  MX_SPI2_Init();
 8000788:	f000 f8a4 	bl	80008d4 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  GPIO_init();
 800078c:	f7ff ffca 	bl	8000724 <GPIO_init>

  ACC_set.ACC_init(&hi2c1);
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <main+0x50>)
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	4809      	ldr	r0, [pc, #36]	; (80007bc <main+0x54>)
 8000796:	4798      	blx	r3

//  ACC_init(&hi2c1);

  if(MCP2515_Initialize() == true){
 8000798:	f7ff fecc 	bl	8000534 <MCP2515_Initialize>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <main+0x3e>
      MCP2515_SetConfigMode();
 80007a2:	f7ff fee9 	bl	8000578 <MCP2515_SetConfigMode>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ACC_set.update_ACC_data(&hi2c1);
 80007a6:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <main+0x50>)
 80007a8:	689b      	ldr	r3, [r3, #8]
 80007aa:	4804      	ldr	r0, [pc, #16]	; (80007bc <main+0x54>)
 80007ac:	4798      	blx	r3
	  RS_Send(&huart1);
 80007ae:	4804      	ldr	r0, [pc, #16]	; (80007c0 <main+0x58>)
 80007b0:	f7ff ff6c 	bl	800068c <RS_Send>
	  ACC_set.update_ACC_data(&hi2c1);
 80007b4:	e7f7      	b.n	80007a6 <main+0x3e>
 80007b6:	bf00      	nop
 80007b8:	20000000 	.word	0x20000000
 80007bc:	200000ac 	.word	0x200000ac
 80007c0:	200001e0 	.word	0x200001e0

080007c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b090      	sub	sp, #64	; 0x40
 80007c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ca:	f107 0318 	add.w	r3, r7, #24
 80007ce:	2228      	movs	r2, #40	; 0x28
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f004 fb4e 	bl	8004e74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007e6:	2301      	movs	r3, #1
 80007e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f4:	2301      	movs	r3, #1
 80007f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f8:	2302      	movs	r3, #2
 80007fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000800:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000802:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000806:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000808:	f107 0318 	add.w	r3, r7, #24
 800080c:	4618      	mov	r0, r3
 800080e:	f002 fe41 	bl	8003494 <HAL_RCC_OscConfig>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000818:	f000 f930 	bl	8000a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081c:	230f      	movs	r3, #15
 800081e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000820:	2302      	movs	r3, #2
 8000822:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000824:	2300      	movs	r3, #0
 8000826:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800082c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2102      	movs	r1, #2
 8000836:	4618      	mov	r0, r3
 8000838:	f003 f8ae 	bl	8003998 <HAL_RCC_ClockConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000842:	f000 f91b 	bl	8000a7c <Error_Handler>
  }
}
 8000846:	bf00      	nop
 8000848:	3740      	adds	r7, #64	; 0x40
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000854:	4b06      	ldr	r3, [pc, #24]	; (8000870 <MX_CRC_Init+0x20>)
 8000856:	4a07      	ldr	r2, [pc, #28]	; (8000874 <MX_CRC_Init+0x24>)
 8000858:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800085a:	4805      	ldr	r0, [pc, #20]	; (8000870 <MX_CRC_Init+0x20>)
 800085c:	f000 fcbf 	bl	80011de <HAL_CRC_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000866:	f000 f909 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	200000a4 	.word	0x200000a4
 8000874:	40023000 	.word	0x40023000

08000878 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <MX_I2C1_Init+0x50>)
 800087e:	4a13      	ldr	r2, [pc, #76]	; (80008cc <MX_I2C1_Init+0x54>)
 8000880:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000882:	4b11      	ldr	r3, [pc, #68]	; (80008c8 <MX_I2C1_Init+0x50>)
 8000884:	4a12      	ldr	r2, [pc, #72]	; (80008d0 <MX_I2C1_Init+0x58>)
 8000886:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <MX_I2C1_Init+0x50>)
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800088e:	4b0e      	ldr	r3, [pc, #56]	; (80008c8 <MX_I2C1_Init+0x50>)
 8000890:	2200      	movs	r2, #0
 8000892:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000894:	4b0c      	ldr	r3, [pc, #48]	; (80008c8 <MX_I2C1_Init+0x50>)
 8000896:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800089a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800089c:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <MX_I2C1_Init+0x50>)
 800089e:	2200      	movs	r2, #0
 80008a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008a2:	4b09      	ldr	r3, [pc, #36]	; (80008c8 <MX_I2C1_Init+0x50>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a8:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <MX_I2C1_Init+0x50>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <MX_I2C1_Init+0x50>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008b4:	4804      	ldr	r0, [pc, #16]	; (80008c8 <MX_I2C1_Init+0x50>)
 80008b6:	f000 ffab 	bl	8001810 <HAL_I2C_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008c0:	f000 f8dc 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	200000ac 	.word	0x200000ac
 80008cc:	40005400 	.word	0x40005400
 80008d0:	000186a0 	.word	0x000186a0

080008d4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008d8:	4b18      	ldr	r3, [pc, #96]	; (800093c <MX_SPI2_Init+0x68>)
 80008da:	4a19      	ldr	r2, [pc, #100]	; (8000940 <MX_SPI2_Init+0x6c>)
 80008dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008de:	4b17      	ldr	r3, [pc, #92]	; (800093c <MX_SPI2_Init+0x68>)
 80008e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <MX_SPI2_Init+0x68>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008ec:	4b13      	ldr	r3, [pc, #76]	; (800093c <MX_SPI2_Init+0x68>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008f2:	4b12      	ldr	r3, [pc, #72]	; (800093c <MX_SPI2_Init+0x68>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f8:	4b10      	ldr	r3, [pc, #64]	; (800093c <MX_SPI2_Init+0x68>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008fe:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_SPI2_Init+0x68>)
 8000900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000904:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000906:	4b0d      	ldr	r3, [pc, #52]	; (800093c <MX_SPI2_Init+0x68>)
 8000908:	2200      	movs	r2, #0
 800090a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800090c:	4b0b      	ldr	r3, [pc, #44]	; (800093c <MX_SPI2_Init+0x68>)
 800090e:	2200      	movs	r2, #0
 8000910:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000912:	4b0a      	ldr	r3, [pc, #40]	; (800093c <MX_SPI2_Init+0x68>)
 8000914:	2200      	movs	r2, #0
 8000916:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_ENABLE;
 8000918:	4b08      	ldr	r3, [pc, #32]	; (800093c <MX_SPI2_Init+0x68>)
 800091a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800091e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_SPI2_Init+0x68>)
 8000922:	220a      	movs	r2, #10
 8000924:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_SPI2_Init+0x68>)
 8000928:	f003 f9c4 	bl	8003cb4 <HAL_SPI_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8000932:	f000 f8a3 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000188 	.word	0x20000188
 8000940:	40003800 	.word	0x40003800

08000944 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 800094a:	4a12      	ldr	r2, [pc, #72]	; (8000994 <MX_USART1_UART_Init+0x50>)
 800094c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 8000950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000954:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b09      	ldr	r3, [pc, #36]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_USART1_UART_Init+0x4c>)
 800097c:	f004 f88a 	bl	8004a94 <HAL_UART_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000986:	f000 f879 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	200001e0 	.word	0x200001e0
 8000994:	40013800 	.word	0x40013800

08000998 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <MX_DMA_Init+0x48>)
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	4a0f      	ldr	r2, [pc, #60]	; (80009e0 <MX_DMA_Init+0x48>)
 80009a4:	f043 0301 	orr.w	r3, r3, #1
 80009a8:	6153      	str	r3, [r2, #20]
 80009aa:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <MX_DMA_Init+0x48>)
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	f003 0301 	and.w	r3, r3, #1
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2100      	movs	r1, #0
 80009ba:	2010      	movs	r0, #16
 80009bc:	f000 fbd9 	bl	8001172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80009c0:	2010      	movs	r0, #16
 80009c2:	f000 fbf2 	bl	80011aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2100      	movs	r1, #0
 80009ca:	2011      	movs	r0, #17
 80009cc:	f000 fbd1 	bl	8001172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80009d0:	2011      	movs	r0, #17
 80009d2:	f000 fbea 	bl	80011aa <HAL_NVIC_EnableIRQ>

}
 80009d6:	bf00      	nop
 80009d8:	3708      	adds	r7, #8
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40021000 	.word	0x40021000

080009e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b088      	sub	sp, #32
 80009e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ea:	f107 0310 	add.w	r3, r7, #16
 80009ee:	2200      	movs	r2, #0
 80009f0:	601a      	str	r2, [r3, #0]
 80009f2:	605a      	str	r2, [r3, #4]
 80009f4:	609a      	str	r2, [r3, #8]
 80009f6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009f8:	4b1e      	ldr	r3, [pc, #120]	; (8000a74 <MX_GPIO_Init+0x90>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	4a1d      	ldr	r2, [pc, #116]	; (8000a74 <MX_GPIO_Init+0x90>)
 80009fe:	f043 0320 	orr.w	r3, r3, #32
 8000a02:	6193      	str	r3, [r2, #24]
 8000a04:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <MX_GPIO_Init+0x90>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	f003 0320 	and.w	r3, r3, #32
 8000a0c:	60fb      	str	r3, [r7, #12]
 8000a0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a10:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <MX_GPIO_Init+0x90>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	4a17      	ldr	r2, [pc, #92]	; (8000a74 <MX_GPIO_Init+0x90>)
 8000a16:	f043 0308 	orr.w	r3, r3, #8
 8000a1a:	6193      	str	r3, [r2, #24]
 8000a1c:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <MX_GPIO_Init+0x90>)
 8000a1e:	699b      	ldr	r3, [r3, #24]
 8000a20:	f003 0308 	and.w	r3, r3, #8
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <MX_GPIO_Init+0x90>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	4a11      	ldr	r2, [pc, #68]	; (8000a74 <MX_GPIO_Init+0x90>)
 8000a2e:	f043 0304 	orr.w	r3, r3, #4
 8000a32:	6193      	str	r3, [r2, #24]
 8000a34:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <MX_GPIO_Init+0x90>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	f003 0304 	and.w	r3, r3, #4
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a46:	480c      	ldr	r0, [pc, #48]	; (8000a78 <MX_GPIO_Init+0x94>)
 8000a48:	f000 feca 	bl	80017e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000a4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	f107 0310 	add.w	r3, r7, #16
 8000a62:	4619      	mov	r1, r3
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <MX_GPIO_Init+0x94>)
 8000a66:	f000 fd37 	bl	80014d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a6a:	bf00      	nop
 8000a6c:	3720      	adds	r7, #32
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40021000 	.word	0x40021000
 8000a78:	40010800 	.word	0x40010800

08000a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a80:	b672      	cpsid	i
}
 8000a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <Error_Handler+0x8>
	...

08000a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <HAL_MspInit+0x5c>)
 8000a90:	699b      	ldr	r3, [r3, #24]
 8000a92:	4a14      	ldr	r2, [pc, #80]	; (8000ae4 <HAL_MspInit+0x5c>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6193      	str	r3, [r2, #24]
 8000a9a:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <HAL_MspInit+0x5c>)
 8000a9c:	699b      	ldr	r3, [r3, #24]
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60bb      	str	r3, [r7, #8]
 8000aa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <HAL_MspInit+0x5c>)
 8000aa8:	69db      	ldr	r3, [r3, #28]
 8000aaa:	4a0e      	ldr	r2, [pc, #56]	; (8000ae4 <HAL_MspInit+0x5c>)
 8000aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	61d3      	str	r3, [r2, #28]
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <HAL_MspInit+0x5c>)
 8000ab4:	69db      	ldr	r3, [r3, #28]
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000abe:	4b0a      	ldr	r3, [pc, #40]	; (8000ae8 <HAL_MspInit+0x60>)
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	60fb      	str	r3, [r7, #12]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <HAL_MspInit+0x60>)
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ada:	bf00      	nop
 8000adc:	3714      	adds	r7, #20
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bc80      	pop	{r7}
 8000ae2:	4770      	bx	lr
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	40010000 	.word	0x40010000

08000aec <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a09      	ldr	r2, [pc, #36]	; (8000b20 <HAL_CRC_MspInit+0x34>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d10b      	bne.n	8000b16 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000afe:	4b09      	ldr	r3, [pc, #36]	; (8000b24 <HAL_CRC_MspInit+0x38>)
 8000b00:	695b      	ldr	r3, [r3, #20]
 8000b02:	4a08      	ldr	r2, [pc, #32]	; (8000b24 <HAL_CRC_MspInit+0x38>)
 8000b04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b08:	6153      	str	r3, [r2, #20]
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_CRC_MspInit+0x38>)
 8000b0c:	695b      	ldr	r3, [r3, #20]
 8000b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000b16:	bf00      	nop
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	40023000 	.word	0x40023000
 8000b24:	40021000 	.word	0x40021000

08000b28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0310 	add.w	r3, r7, #16
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a3b      	ldr	r2, [pc, #236]	; (8000c30 <HAL_I2C_MspInit+0x108>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d16f      	bne.n	8000c28 <HAL_I2C_MspInit+0x100>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b48:	4b3a      	ldr	r3, [pc, #232]	; (8000c34 <HAL_I2C_MspInit+0x10c>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	4a39      	ldr	r2, [pc, #228]	; (8000c34 <HAL_I2C_MspInit+0x10c>)
 8000b4e:	f043 0308 	orr.w	r3, r3, #8
 8000b52:	6193      	str	r3, [r2, #24]
 8000b54:	4b37      	ldr	r3, [pc, #220]	; (8000c34 <HAL_I2C_MspInit+0x10c>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	f003 0308 	and.w	r3, r3, #8
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b60:	23c0      	movs	r3, #192	; 0xc0
 8000b62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b64:	2312      	movs	r3, #18
 8000b66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6c:	f107 0310 	add.w	r3, r7, #16
 8000b70:	4619      	mov	r1, r3
 8000b72:	4831      	ldr	r0, [pc, #196]	; (8000c38 <HAL_I2C_MspInit+0x110>)
 8000b74:	f000 fcb0 	bl	80014d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b78:	4b2e      	ldr	r3, [pc, #184]	; (8000c34 <HAL_I2C_MspInit+0x10c>)
 8000b7a:	69db      	ldr	r3, [r3, #28]
 8000b7c:	4a2d      	ldr	r2, [pc, #180]	; (8000c34 <HAL_I2C_MspInit+0x10c>)
 8000b7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b82:	61d3      	str	r3, [r2, #28]
 8000b84:	4b2b      	ldr	r3, [pc, #172]	; (8000c34 <HAL_I2C_MspInit+0x10c>)
 8000b86:	69db      	ldr	r3, [r3, #28]
 8000b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b8c:	60bb      	str	r3, [r7, #8]
 8000b8e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8000b90:	4b2a      	ldr	r3, [pc, #168]	; (8000c3c <HAL_I2C_MspInit+0x114>)
 8000b92:	4a2b      	ldr	r2, [pc, #172]	; (8000c40 <HAL_I2C_MspInit+0x118>)
 8000b94:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b96:	4b29      	ldr	r3, [pc, #164]	; (8000c3c <HAL_I2C_MspInit+0x114>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b9c:	4b27      	ldr	r3, [pc, #156]	; (8000c3c <HAL_I2C_MspInit+0x114>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ba2:	4b26      	ldr	r3, [pc, #152]	; (8000c3c <HAL_I2C_MspInit+0x114>)
 8000ba4:	2280      	movs	r2, #128	; 0x80
 8000ba6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ba8:	4b24      	ldr	r3, [pc, #144]	; (8000c3c <HAL_I2C_MspInit+0x114>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bae:	4b23      	ldr	r3, [pc, #140]	; (8000c3c <HAL_I2C_MspInit+0x114>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000bb4:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <HAL_I2C_MspInit+0x114>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000bba:	4b20      	ldr	r3, [pc, #128]	; (8000c3c <HAL_I2C_MspInit+0x114>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000bc0:	481e      	ldr	r0, [pc, #120]	; (8000c3c <HAL_I2C_MspInit+0x114>)
 8000bc2:	f000 fb29 	bl	8001218 <HAL_DMA_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 8000bcc:	f7ff ff56 	bl	8000a7c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a1a      	ldr	r2, [pc, #104]	; (8000c3c <HAL_I2C_MspInit+0x114>)
 8000bd4:	639a      	str	r2, [r3, #56]	; 0x38
 8000bd6:	4a19      	ldr	r2, [pc, #100]	; (8000c3c <HAL_I2C_MspInit+0x114>)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000bdc:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <HAL_I2C_MspInit+0x11c>)
 8000bde:	4a1a      	ldr	r2, [pc, #104]	; (8000c48 <HAL_I2C_MspInit+0x120>)
 8000be0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000be2:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <HAL_I2C_MspInit+0x11c>)
 8000be4:	2210      	movs	r2, #16
 8000be6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000be8:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <HAL_I2C_MspInit+0x11c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bee:	4b15      	ldr	r3, [pc, #84]	; (8000c44 <HAL_I2C_MspInit+0x11c>)
 8000bf0:	2280      	movs	r2, #128	; 0x80
 8000bf2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bf4:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <HAL_I2C_MspInit+0x11c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bfa:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <HAL_I2C_MspInit+0x11c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000c00:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <HAL_I2C_MspInit+0x11c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c06:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <HAL_I2C_MspInit+0x11c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000c0c:	480d      	ldr	r0, [pc, #52]	; (8000c44 <HAL_I2C_MspInit+0x11c>)
 8000c0e:	f000 fb03 	bl	8001218 <HAL_DMA_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <HAL_I2C_MspInit+0xf4>
    {
      Error_Handler();
 8000c18:	f7ff ff30 	bl	8000a7c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a09      	ldr	r2, [pc, #36]	; (8000c44 <HAL_I2C_MspInit+0x11c>)
 8000c20:	635a      	str	r2, [r3, #52]	; 0x34
 8000c22:	4a08      	ldr	r2, [pc, #32]	; (8000c44 <HAL_I2C_MspInit+0x11c>)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c28:	bf00      	nop
 8000c2a:	3720      	adds	r7, #32
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40005400 	.word	0x40005400
 8000c34:	40021000 	.word	0x40021000
 8000c38:	40010c00 	.word	0x40010c00
 8000c3c:	20000100 	.word	0x20000100
 8000c40:	40020080 	.word	0x40020080
 8000c44:	20000144 	.word	0x20000144
 8000c48:	4002006c 	.word	0x4002006c

08000c4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b088      	sub	sp, #32
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 0310 	add.w	r3, r7, #16
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a1c      	ldr	r2, [pc, #112]	; (8000cd8 <HAL_SPI_MspInit+0x8c>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d131      	bne.n	8000cd0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c6c:	4b1b      	ldr	r3, [pc, #108]	; (8000cdc <HAL_SPI_MspInit+0x90>)
 8000c6e:	69db      	ldr	r3, [r3, #28]
 8000c70:	4a1a      	ldr	r2, [pc, #104]	; (8000cdc <HAL_SPI_MspInit+0x90>)
 8000c72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c76:	61d3      	str	r3, [r2, #28]
 8000c78:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <HAL_SPI_MspInit+0x90>)
 8000c7a:	69db      	ldr	r3, [r3, #28]
 8000c7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c84:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <HAL_SPI_MspInit+0x90>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	4a14      	ldr	r2, [pc, #80]	; (8000cdc <HAL_SPI_MspInit+0x90>)
 8000c8a:	f043 0308 	orr.w	r3, r3, #8
 8000c8e:	6193      	str	r3, [r2, #24]
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <HAL_SPI_MspInit+0x90>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	f003 0308 	and.w	r3, r3, #8
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000c9c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000ca0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000caa:	f107 0310 	add.w	r3, r7, #16
 8000cae:	4619      	mov	r1, r3
 8000cb0:	480b      	ldr	r0, [pc, #44]	; (8000ce0 <HAL_SPI_MspInit+0x94>)
 8000cb2:	f000 fc11 	bl	80014d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000cb6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc4:	f107 0310 	add.w	r3, r7, #16
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <HAL_SPI_MspInit+0x94>)
 8000ccc:	f000 fc04 	bl	80014d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000cd0:	bf00      	nop
 8000cd2:	3720      	adds	r7, #32
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40003800 	.word	0x40003800
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	40010c00 	.word	0x40010c00

08000ce4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 0310 	add.w	r3, r7, #16
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a1c      	ldr	r2, [pc, #112]	; (8000d70 <HAL_UART_MspInit+0x8c>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d131      	bne.n	8000d68 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d04:	4b1b      	ldr	r3, [pc, #108]	; (8000d74 <HAL_UART_MspInit+0x90>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	4a1a      	ldr	r2, [pc, #104]	; (8000d74 <HAL_UART_MspInit+0x90>)
 8000d0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d0e:	6193      	str	r3, [r2, #24]
 8000d10:	4b18      	ldr	r3, [pc, #96]	; (8000d74 <HAL_UART_MspInit+0x90>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1c:	4b15      	ldr	r3, [pc, #84]	; (8000d74 <HAL_UART_MspInit+0x90>)
 8000d1e:	699b      	ldr	r3, [r3, #24]
 8000d20:	4a14      	ldr	r2, [pc, #80]	; (8000d74 <HAL_UART_MspInit+0x90>)
 8000d22:	f043 0304 	orr.w	r3, r3, #4
 8000d26:	6193      	str	r3, [r2, #24]
 8000d28:	4b12      	ldr	r3, [pc, #72]	; (8000d74 <HAL_UART_MspInit+0x90>)
 8000d2a:	699b      	ldr	r3, [r3, #24]
 8000d2c:	f003 0304 	and.w	r3, r3, #4
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d42:	f107 0310 	add.w	r3, r7, #16
 8000d46:	4619      	mov	r1, r3
 8000d48:	480b      	ldr	r0, [pc, #44]	; (8000d78 <HAL_UART_MspInit+0x94>)
 8000d4a:	f000 fbc5 	bl	80014d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d5c:	f107 0310 	add.w	r3, r7, #16
 8000d60:	4619      	mov	r1, r3
 8000d62:	4805      	ldr	r0, [pc, #20]	; (8000d78 <HAL_UART_MspInit+0x94>)
 8000d64:	f000 fbb8 	bl	80014d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d68:	bf00      	nop
 8000d6a:	3720      	adds	r7, #32
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40013800 	.word	0x40013800
 8000d74:	40021000 	.word	0x40021000
 8000d78:	40010800 	.word	0x40010800

08000d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <NMI_Handler+0x4>

08000d82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d82:	b480      	push	{r7}
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <HardFault_Handler+0x4>

08000d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <MemManage_Handler+0x4>

08000d8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d92:	e7fe      	b.n	8000d92 <BusFault_Handler+0x4>

08000d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <UsageFault_Handler+0x4>

08000d9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr

08000da6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr

08000db2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr

08000dbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc2:	f000 f8bf 	bl	8000f44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
	...

08000dcc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <DMA1_Channel6_IRQHandler+0x10>)
 8000dd2:	f000 fa7b 	bl	80012cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000144 	.word	0x20000144

08000de0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000de4:	4802      	ldr	r0, [pc, #8]	; (8000df0 <DMA1_Channel7_IRQHandler+0x10>)
 8000de6:	f000 fa71 	bl	80012cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000dea:	bf00      	nop
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000100 	.word	0x20000100

08000df4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dfc:	4a14      	ldr	r2, [pc, #80]	; (8000e50 <_sbrk+0x5c>)
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <_sbrk+0x60>)
 8000e00:	1ad3      	subs	r3, r2, r3
 8000e02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e08:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <_sbrk+0x64>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d102      	bne.n	8000e16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e10:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <_sbrk+0x64>)
 8000e12:	4a12      	ldr	r2, [pc, #72]	; (8000e5c <_sbrk+0x68>)
 8000e14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e16:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <_sbrk+0x64>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d207      	bcs.n	8000e34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e24:	f004 f82e 	bl	8004e84 <__errno>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	220c      	movs	r2, #12
 8000e2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e32:	e009      	b.n	8000e48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e34:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <_sbrk+0x64>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e3a:	4b07      	ldr	r3, [pc, #28]	; (8000e58 <_sbrk+0x64>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4413      	add	r3, r2
 8000e42:	4a05      	ldr	r2, [pc, #20]	; (8000e58 <_sbrk+0x64>)
 8000e44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e46:	68fb      	ldr	r3, [r7, #12]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20005000 	.word	0x20005000
 8000e54:	00000400 	.word	0x00000400
 8000e58:	20000228 	.word	0x20000228
 8000e5c:	20000378 	.word	0x20000378

08000e60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr

08000e6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e6c:	f7ff fff8 	bl	8000e60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e70:	480b      	ldr	r0, [pc, #44]	; (8000ea0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e72:	490c      	ldr	r1, [pc, #48]	; (8000ea4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e74:	4a0c      	ldr	r2, [pc, #48]	; (8000ea8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e78:	e002      	b.n	8000e80 <LoopCopyDataInit>

08000e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e7e:	3304      	adds	r3, #4

08000e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e84:	d3f9      	bcc.n	8000e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e86:	4a09      	ldr	r2, [pc, #36]	; (8000eac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e88:	4c09      	ldr	r4, [pc, #36]	; (8000eb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e8c:	e001      	b.n	8000e92 <LoopFillZerobss>

08000e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e90:	3204      	adds	r2, #4

08000e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e94:	d3fb      	bcc.n	8000e8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e96:	f003 fffb 	bl	8004e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e9a:	f7ff fc65 	bl	8000768 <main>
  bx lr
 8000e9e:	4770      	bx	lr
  ldr r0, =_sdata
 8000ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ea8:	0800583c 	.word	0x0800583c
  ldr r2, =_sbss
 8000eac:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000eb0:	20000378 	.word	0x20000378

08000eb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000eb4:	e7fe      	b.n	8000eb4 <ADC1_2_IRQHandler>
	...

08000eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <HAL_Init+0x28>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a07      	ldr	r2, [pc, #28]	; (8000ee0 <HAL_Init+0x28>)
 8000ec2:	f043 0310 	orr.w	r3, r3, #16
 8000ec6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec8:	2003      	movs	r0, #3
 8000eca:	f000 f947 	bl	800115c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ece:	200f      	movs	r0, #15
 8000ed0:	f000 f808 	bl	8000ee4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed4:	f7ff fdd8 	bl	8000a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	40022000 	.word	0x40022000

08000ee4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_InitTick+0x54>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4b12      	ldr	r3, [pc, #72]	; (8000f3c <HAL_InitTick+0x58>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 f95f 	bl	80011c6 <HAL_SYSTICK_Config>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e00e      	b.n	8000f30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2b0f      	cmp	r3, #15
 8000f16:	d80a      	bhi.n	8000f2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	6879      	ldr	r1, [r7, #4]
 8000f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f20:	f000 f927 	bl	8001172 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f24:	4a06      	ldr	r2, [pc, #24]	; (8000f40 <HAL_InitTick+0x5c>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	e000      	b.n	8000f30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3708      	adds	r7, #8
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000018 	.word	0x20000018
 8000f3c:	20000020 	.word	0x20000020
 8000f40:	2000001c 	.word	0x2000001c

08000f44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f48:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <HAL_IncTick+0x1c>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <HAL_IncTick+0x20>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	4413      	add	r3, r2
 8000f54:	4a03      	ldr	r2, [pc, #12]	; (8000f64 <HAL_IncTick+0x20>)
 8000f56:	6013      	str	r3, [r2, #0]
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr
 8000f60:	20000020 	.word	0x20000020
 8000f64:	2000022c 	.word	0x2000022c

08000f68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f6c:	4b02      	ldr	r3, [pc, #8]	; (8000f78 <HAL_GetTick+0x10>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr
 8000f78:	2000022c 	.word	0x2000022c

08000f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f84:	f7ff fff0 	bl	8000f68 <HAL_GetTick>
 8000f88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f94:	d005      	beq.n	8000fa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f96:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <HAL_Delay+0x44>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fa2:	bf00      	nop
 8000fa4:	f7ff ffe0 	bl	8000f68 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d8f7      	bhi.n	8000fa4 <HAL_Delay+0x28>
  {
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000020 	.word	0x20000020

08000fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	; (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff6:	4a04      	ldr	r2, [pc, #16]	; (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	60d3      	str	r3, [r2, #12]
}
 8000ffc:	bf00      	nop
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <__NVIC_GetPriorityGrouping+0x18>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	0a1b      	lsrs	r3, r3, #8
 8001016:	f003 0307 	and.w	r3, r3, #7
}
 800101a:	4618      	mov	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	2b00      	cmp	r3, #0
 8001038:	db0b      	blt.n	8001052 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	f003 021f 	and.w	r2, r3, #31
 8001040:	4906      	ldr	r1, [pc, #24]	; (800105c <__NVIC_EnableIRQ+0x34>)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	095b      	lsrs	r3, r3, #5
 8001048:	2001      	movs	r0, #1
 800104a:	fa00 f202 	lsl.w	r2, r0, r2
 800104e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr
 800105c:	e000e100 	.word	0xe000e100

08001060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	6039      	str	r1, [r7, #0]
 800106a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001070:	2b00      	cmp	r3, #0
 8001072:	db0a      	blt.n	800108a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	b2da      	uxtb	r2, r3
 8001078:	490c      	ldr	r1, [pc, #48]	; (80010ac <__NVIC_SetPriority+0x4c>)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	0112      	lsls	r2, r2, #4
 8001080:	b2d2      	uxtb	r2, r2
 8001082:	440b      	add	r3, r1
 8001084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001088:	e00a      	b.n	80010a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4908      	ldr	r1, [pc, #32]	; (80010b0 <__NVIC_SetPriority+0x50>)
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	f003 030f 	and.w	r3, r3, #15
 8001096:	3b04      	subs	r3, #4
 8001098:	0112      	lsls	r2, r2, #4
 800109a:	b2d2      	uxtb	r2, r2
 800109c:	440b      	add	r3, r1
 800109e:	761a      	strb	r2, [r3, #24]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bc80      	pop	{r7}
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000e100 	.word	0xe000e100
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b089      	sub	sp, #36	; 0x24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	60f8      	str	r0, [r7, #12]
 80010bc:	60b9      	str	r1, [r7, #8]
 80010be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f1c3 0307 	rsb	r3, r3, #7
 80010ce:	2b04      	cmp	r3, #4
 80010d0:	bf28      	it	cs
 80010d2:	2304      	movcs	r3, #4
 80010d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3304      	adds	r3, #4
 80010da:	2b06      	cmp	r3, #6
 80010dc:	d902      	bls.n	80010e4 <NVIC_EncodePriority+0x30>
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3b03      	subs	r3, #3
 80010e2:	e000      	b.n	80010e6 <NVIC_EncodePriority+0x32>
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e8:	f04f 32ff 	mov.w	r2, #4294967295
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43da      	mvns	r2, r3
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	401a      	ands	r2, r3
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	fa01 f303 	lsl.w	r3, r1, r3
 8001106:	43d9      	mvns	r1, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800110c:	4313      	orrs	r3, r2
         );
}
 800110e:	4618      	mov	r0, r3
 8001110:	3724      	adds	r7, #36	; 0x24
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr

08001118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001128:	d301      	bcc.n	800112e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800112a:	2301      	movs	r3, #1
 800112c:	e00f      	b.n	800114e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800112e:	4a0a      	ldr	r2, [pc, #40]	; (8001158 <SysTick_Config+0x40>)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3b01      	subs	r3, #1
 8001134:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001136:	210f      	movs	r1, #15
 8001138:	f04f 30ff 	mov.w	r0, #4294967295
 800113c:	f7ff ff90 	bl	8001060 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <SysTick_Config+0x40>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001146:	4b04      	ldr	r3, [pc, #16]	; (8001158 <SysTick_Config+0x40>)
 8001148:	2207      	movs	r2, #7
 800114a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	e000e010 	.word	0xe000e010

0800115c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ff2d 	bl	8000fc4 <__NVIC_SetPriorityGrouping>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001172:	b580      	push	{r7, lr}
 8001174:	b086      	sub	sp, #24
 8001176:	af00      	add	r7, sp, #0
 8001178:	4603      	mov	r3, r0
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	607a      	str	r2, [r7, #4]
 800117e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001184:	f7ff ff42 	bl	800100c <__NVIC_GetPriorityGrouping>
 8001188:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	68b9      	ldr	r1, [r7, #8]
 800118e:	6978      	ldr	r0, [r7, #20]
 8001190:	f7ff ff90 	bl	80010b4 <NVIC_EncodePriority>
 8001194:	4602      	mov	r2, r0
 8001196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119a:	4611      	mov	r1, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff5f 	bl	8001060 <__NVIC_SetPriority>
}
 80011a2:	bf00      	nop
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	4603      	mov	r3, r0
 80011b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ff35 	bl	8001028 <__NVIC_EnableIRQ>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff ffa2 	bl	8001118 <SysTick_Config>
 80011d4:	4603      	mov	r3, r0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d101      	bne.n	80011f0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e00e      	b.n	800120e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	795b      	ldrb	r3, [r3, #5]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d105      	bne.n	8001206 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f7ff fc73 	bl	8000aec <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2201      	movs	r2, #1
 800120a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
	...

08001218 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e043      	b.n	80012b6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	4b22      	ldr	r3, [pc, #136]	; (80012c0 <HAL_DMA_Init+0xa8>)
 8001236:	4413      	add	r3, r2
 8001238:	4a22      	ldr	r2, [pc, #136]	; (80012c4 <HAL_DMA_Init+0xac>)
 800123a:	fba2 2303 	umull	r2, r3, r2, r3
 800123e:	091b      	lsrs	r3, r3, #4
 8001240:	009a      	lsls	r2, r3, #2
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a1f      	ldr	r2, [pc, #124]	; (80012c8 <HAL_DMA_Init+0xb0>)
 800124a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2202      	movs	r2, #2
 8001250:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001262:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001266:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001270:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	68db      	ldr	r3, [r3, #12]
 8001276:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800127c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001288:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001290:	68fa      	ldr	r2, [r7, #12]
 8001292:	4313      	orrs	r3, r2
 8001294:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2200      	movs	r2, #0
 80012a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2201      	movs	r2, #1
 80012a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	bffdfff8 	.word	0xbffdfff8
 80012c4:	cccccccd 	.word	0xcccccccd
 80012c8:	40020000 	.word	0x40020000

080012cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e8:	2204      	movs	r2, #4
 80012ea:	409a      	lsls	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4013      	ands	r3, r2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d04f      	beq.n	8001394 <HAL_DMA_IRQHandler+0xc8>
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d04a      	beq.n	8001394 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0320 	and.w	r3, r3, #32
 8001308:	2b00      	cmp	r3, #0
 800130a:	d107      	bne.n	800131c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f022 0204 	bic.w	r2, r2, #4
 800131a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a66      	ldr	r2, [pc, #408]	; (80014bc <HAL_DMA_IRQHandler+0x1f0>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d029      	beq.n	800137a <HAL_DMA_IRQHandler+0xae>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a65      	ldr	r2, [pc, #404]	; (80014c0 <HAL_DMA_IRQHandler+0x1f4>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d022      	beq.n	8001376 <HAL_DMA_IRQHandler+0xaa>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a63      	ldr	r2, [pc, #396]	; (80014c4 <HAL_DMA_IRQHandler+0x1f8>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d01a      	beq.n	8001370 <HAL_DMA_IRQHandler+0xa4>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a62      	ldr	r2, [pc, #392]	; (80014c8 <HAL_DMA_IRQHandler+0x1fc>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d012      	beq.n	800136a <HAL_DMA_IRQHandler+0x9e>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a60      	ldr	r2, [pc, #384]	; (80014cc <HAL_DMA_IRQHandler+0x200>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d00a      	beq.n	8001364 <HAL_DMA_IRQHandler+0x98>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a5f      	ldr	r2, [pc, #380]	; (80014d0 <HAL_DMA_IRQHandler+0x204>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d102      	bne.n	800135e <HAL_DMA_IRQHandler+0x92>
 8001358:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800135c:	e00e      	b.n	800137c <HAL_DMA_IRQHandler+0xb0>
 800135e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001362:	e00b      	b.n	800137c <HAL_DMA_IRQHandler+0xb0>
 8001364:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001368:	e008      	b.n	800137c <HAL_DMA_IRQHandler+0xb0>
 800136a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800136e:	e005      	b.n	800137c <HAL_DMA_IRQHandler+0xb0>
 8001370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001374:	e002      	b.n	800137c <HAL_DMA_IRQHandler+0xb0>
 8001376:	2340      	movs	r3, #64	; 0x40
 8001378:	e000      	b.n	800137c <HAL_DMA_IRQHandler+0xb0>
 800137a:	2304      	movs	r3, #4
 800137c:	4a55      	ldr	r2, [pc, #340]	; (80014d4 <HAL_DMA_IRQHandler+0x208>)
 800137e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001384:	2b00      	cmp	r3, #0
 8001386:	f000 8094 	beq.w	80014b2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001392:	e08e      	b.n	80014b2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001398:	2202      	movs	r2, #2
 800139a:	409a      	lsls	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4013      	ands	r3, r2
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d056      	beq.n	8001452 <HAL_DMA_IRQHandler+0x186>
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d051      	beq.n	8001452 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0320 	and.w	r3, r3, #32
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d10b      	bne.n	80013d4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f022 020a 	bic.w	r2, r2, #10
 80013ca:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2201      	movs	r2, #1
 80013d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a38      	ldr	r2, [pc, #224]	; (80014bc <HAL_DMA_IRQHandler+0x1f0>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d029      	beq.n	8001432 <HAL_DMA_IRQHandler+0x166>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a37      	ldr	r2, [pc, #220]	; (80014c0 <HAL_DMA_IRQHandler+0x1f4>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d022      	beq.n	800142e <HAL_DMA_IRQHandler+0x162>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a35      	ldr	r2, [pc, #212]	; (80014c4 <HAL_DMA_IRQHandler+0x1f8>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d01a      	beq.n	8001428 <HAL_DMA_IRQHandler+0x15c>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a34      	ldr	r2, [pc, #208]	; (80014c8 <HAL_DMA_IRQHandler+0x1fc>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d012      	beq.n	8001422 <HAL_DMA_IRQHandler+0x156>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a32      	ldr	r2, [pc, #200]	; (80014cc <HAL_DMA_IRQHandler+0x200>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d00a      	beq.n	800141c <HAL_DMA_IRQHandler+0x150>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a31      	ldr	r2, [pc, #196]	; (80014d0 <HAL_DMA_IRQHandler+0x204>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d102      	bne.n	8001416 <HAL_DMA_IRQHandler+0x14a>
 8001410:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001414:	e00e      	b.n	8001434 <HAL_DMA_IRQHandler+0x168>
 8001416:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800141a:	e00b      	b.n	8001434 <HAL_DMA_IRQHandler+0x168>
 800141c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001420:	e008      	b.n	8001434 <HAL_DMA_IRQHandler+0x168>
 8001422:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001426:	e005      	b.n	8001434 <HAL_DMA_IRQHandler+0x168>
 8001428:	f44f 7300 	mov.w	r3, #512	; 0x200
 800142c:	e002      	b.n	8001434 <HAL_DMA_IRQHandler+0x168>
 800142e:	2320      	movs	r3, #32
 8001430:	e000      	b.n	8001434 <HAL_DMA_IRQHandler+0x168>
 8001432:	2302      	movs	r3, #2
 8001434:	4a27      	ldr	r2, [pc, #156]	; (80014d4 <HAL_DMA_IRQHandler+0x208>)
 8001436:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001444:	2b00      	cmp	r3, #0
 8001446:	d034      	beq.n	80014b2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001450:	e02f      	b.n	80014b2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001456:	2208      	movs	r2, #8
 8001458:	409a      	lsls	r2, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	4013      	ands	r3, r2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d028      	beq.n	80014b4 <HAL_DMA_IRQHandler+0x1e8>
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	f003 0308 	and.w	r3, r3, #8
 8001468:	2b00      	cmp	r3, #0
 800146a:	d023      	beq.n	80014b4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 020e 	bic.w	r2, r2, #14
 800147a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001484:	2101      	movs	r1, #1
 8001486:	fa01 f202 	lsl.w	r2, r1, r2
 800148a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2201      	movs	r2, #1
 8001496:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d004      	beq.n	80014b4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	4798      	blx	r3
    }
  }
  return;
 80014b2:	bf00      	nop
 80014b4:	bf00      	nop
}
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40020008 	.word	0x40020008
 80014c0:	4002001c 	.word	0x4002001c
 80014c4:	40020030 	.word	0x40020030
 80014c8:	40020044 	.word	0x40020044
 80014cc:	40020058 	.word	0x40020058
 80014d0:	4002006c 	.word	0x4002006c
 80014d4:	40020000 	.word	0x40020000

080014d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d8:	b480      	push	{r7}
 80014da:	b08b      	sub	sp, #44	; 0x2c
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014e2:	2300      	movs	r3, #0
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014e6:	2300      	movs	r3, #0
 80014e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ea:	e169      	b.n	80017c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014ec:	2201      	movs	r2, #1
 80014ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	69fa      	ldr	r2, [r7, #28]
 80014fc:	4013      	ands	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	429a      	cmp	r2, r3
 8001506:	f040 8158 	bne.w	80017ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	4a9a      	ldr	r2, [pc, #616]	; (8001778 <HAL_GPIO_Init+0x2a0>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d05e      	beq.n	80015d2 <HAL_GPIO_Init+0xfa>
 8001514:	4a98      	ldr	r2, [pc, #608]	; (8001778 <HAL_GPIO_Init+0x2a0>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d875      	bhi.n	8001606 <HAL_GPIO_Init+0x12e>
 800151a:	4a98      	ldr	r2, [pc, #608]	; (800177c <HAL_GPIO_Init+0x2a4>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d058      	beq.n	80015d2 <HAL_GPIO_Init+0xfa>
 8001520:	4a96      	ldr	r2, [pc, #600]	; (800177c <HAL_GPIO_Init+0x2a4>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d86f      	bhi.n	8001606 <HAL_GPIO_Init+0x12e>
 8001526:	4a96      	ldr	r2, [pc, #600]	; (8001780 <HAL_GPIO_Init+0x2a8>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d052      	beq.n	80015d2 <HAL_GPIO_Init+0xfa>
 800152c:	4a94      	ldr	r2, [pc, #592]	; (8001780 <HAL_GPIO_Init+0x2a8>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d869      	bhi.n	8001606 <HAL_GPIO_Init+0x12e>
 8001532:	4a94      	ldr	r2, [pc, #592]	; (8001784 <HAL_GPIO_Init+0x2ac>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d04c      	beq.n	80015d2 <HAL_GPIO_Init+0xfa>
 8001538:	4a92      	ldr	r2, [pc, #584]	; (8001784 <HAL_GPIO_Init+0x2ac>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d863      	bhi.n	8001606 <HAL_GPIO_Init+0x12e>
 800153e:	4a92      	ldr	r2, [pc, #584]	; (8001788 <HAL_GPIO_Init+0x2b0>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d046      	beq.n	80015d2 <HAL_GPIO_Init+0xfa>
 8001544:	4a90      	ldr	r2, [pc, #576]	; (8001788 <HAL_GPIO_Init+0x2b0>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d85d      	bhi.n	8001606 <HAL_GPIO_Init+0x12e>
 800154a:	2b12      	cmp	r3, #18
 800154c:	d82a      	bhi.n	80015a4 <HAL_GPIO_Init+0xcc>
 800154e:	2b12      	cmp	r3, #18
 8001550:	d859      	bhi.n	8001606 <HAL_GPIO_Init+0x12e>
 8001552:	a201      	add	r2, pc, #4	; (adr r2, 8001558 <HAL_GPIO_Init+0x80>)
 8001554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001558:	080015d3 	.word	0x080015d3
 800155c:	080015ad 	.word	0x080015ad
 8001560:	080015bf 	.word	0x080015bf
 8001564:	08001601 	.word	0x08001601
 8001568:	08001607 	.word	0x08001607
 800156c:	08001607 	.word	0x08001607
 8001570:	08001607 	.word	0x08001607
 8001574:	08001607 	.word	0x08001607
 8001578:	08001607 	.word	0x08001607
 800157c:	08001607 	.word	0x08001607
 8001580:	08001607 	.word	0x08001607
 8001584:	08001607 	.word	0x08001607
 8001588:	08001607 	.word	0x08001607
 800158c:	08001607 	.word	0x08001607
 8001590:	08001607 	.word	0x08001607
 8001594:	08001607 	.word	0x08001607
 8001598:	08001607 	.word	0x08001607
 800159c:	080015b5 	.word	0x080015b5
 80015a0:	080015c9 	.word	0x080015c9
 80015a4:	4a79      	ldr	r2, [pc, #484]	; (800178c <HAL_GPIO_Init+0x2b4>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d013      	beq.n	80015d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015aa:	e02c      	b.n	8001606 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	623b      	str	r3, [r7, #32]
          break;
 80015b2:	e029      	b.n	8001608 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	3304      	adds	r3, #4
 80015ba:	623b      	str	r3, [r7, #32]
          break;
 80015bc:	e024      	b.n	8001608 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	3308      	adds	r3, #8
 80015c4:	623b      	str	r3, [r7, #32]
          break;
 80015c6:	e01f      	b.n	8001608 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	330c      	adds	r3, #12
 80015ce:	623b      	str	r3, [r7, #32]
          break;
 80015d0:	e01a      	b.n	8001608 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d102      	bne.n	80015e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80015da:	2304      	movs	r3, #4
 80015dc:	623b      	str	r3, [r7, #32]
          break;
 80015de:	e013      	b.n	8001608 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d105      	bne.n	80015f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015e8:	2308      	movs	r3, #8
 80015ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69fa      	ldr	r2, [r7, #28]
 80015f0:	611a      	str	r2, [r3, #16]
          break;
 80015f2:	e009      	b.n	8001608 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80015f4:	2308      	movs	r3, #8
 80015f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	69fa      	ldr	r2, [r7, #28]
 80015fc:	615a      	str	r2, [r3, #20]
          break;
 80015fe:	e003      	b.n	8001608 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001600:	2300      	movs	r3, #0
 8001602:	623b      	str	r3, [r7, #32]
          break;
 8001604:	e000      	b.n	8001608 <HAL_GPIO_Init+0x130>
          break;
 8001606:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	2bff      	cmp	r3, #255	; 0xff
 800160c:	d801      	bhi.n	8001612 <HAL_GPIO_Init+0x13a>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	e001      	b.n	8001616 <HAL_GPIO_Init+0x13e>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	3304      	adds	r3, #4
 8001616:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	2bff      	cmp	r3, #255	; 0xff
 800161c:	d802      	bhi.n	8001624 <HAL_GPIO_Init+0x14c>
 800161e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	e002      	b.n	800162a <HAL_GPIO_Init+0x152>
 8001624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001626:	3b08      	subs	r3, #8
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	210f      	movs	r1, #15
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	fa01 f303 	lsl.w	r3, r1, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	401a      	ands	r2, r3
 800163c:	6a39      	ldr	r1, [r7, #32]
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	fa01 f303 	lsl.w	r3, r1, r3
 8001644:	431a      	orrs	r2, r3
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001652:	2b00      	cmp	r3, #0
 8001654:	f000 80b1 	beq.w	80017ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001658:	4b4d      	ldr	r3, [pc, #308]	; (8001790 <HAL_GPIO_Init+0x2b8>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	4a4c      	ldr	r2, [pc, #304]	; (8001790 <HAL_GPIO_Init+0x2b8>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	6193      	str	r3, [r2, #24]
 8001664:	4b4a      	ldr	r3, [pc, #296]	; (8001790 <HAL_GPIO_Init+0x2b8>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001670:	4a48      	ldr	r2, [pc, #288]	; (8001794 <HAL_GPIO_Init+0x2bc>)
 8001672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001674:	089b      	lsrs	r3, r3, #2
 8001676:	3302      	adds	r3, #2
 8001678:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800167c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	f003 0303 	and.w	r3, r3, #3
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	220f      	movs	r2, #15
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	4013      	ands	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	4a40      	ldr	r2, [pc, #256]	; (8001798 <HAL_GPIO_Init+0x2c0>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d013      	beq.n	80016c4 <HAL_GPIO_Init+0x1ec>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4a3f      	ldr	r2, [pc, #252]	; (800179c <HAL_GPIO_Init+0x2c4>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d00d      	beq.n	80016c0 <HAL_GPIO_Init+0x1e8>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a3e      	ldr	r2, [pc, #248]	; (80017a0 <HAL_GPIO_Init+0x2c8>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d007      	beq.n	80016bc <HAL_GPIO_Init+0x1e4>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a3d      	ldr	r2, [pc, #244]	; (80017a4 <HAL_GPIO_Init+0x2cc>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d101      	bne.n	80016b8 <HAL_GPIO_Init+0x1e0>
 80016b4:	2303      	movs	r3, #3
 80016b6:	e006      	b.n	80016c6 <HAL_GPIO_Init+0x1ee>
 80016b8:	2304      	movs	r3, #4
 80016ba:	e004      	b.n	80016c6 <HAL_GPIO_Init+0x1ee>
 80016bc:	2302      	movs	r3, #2
 80016be:	e002      	b.n	80016c6 <HAL_GPIO_Init+0x1ee>
 80016c0:	2301      	movs	r3, #1
 80016c2:	e000      	b.n	80016c6 <HAL_GPIO_Init+0x1ee>
 80016c4:	2300      	movs	r3, #0
 80016c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016c8:	f002 0203 	and.w	r2, r2, #3
 80016cc:	0092      	lsls	r2, r2, #2
 80016ce:	4093      	lsls	r3, r2
 80016d0:	68fa      	ldr	r2, [r7, #12]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80016d6:	492f      	ldr	r1, [pc, #188]	; (8001794 <HAL_GPIO_Init+0x2bc>)
 80016d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016da:	089b      	lsrs	r3, r3, #2
 80016dc:	3302      	adds	r3, #2
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d006      	beq.n	80016fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016f0:	4b2d      	ldr	r3, [pc, #180]	; (80017a8 <HAL_GPIO_Init+0x2d0>)
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	492c      	ldr	r1, [pc, #176]	; (80017a8 <HAL_GPIO_Init+0x2d0>)
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	608b      	str	r3, [r1, #8]
 80016fc:	e006      	b.n	800170c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016fe:	4b2a      	ldr	r3, [pc, #168]	; (80017a8 <HAL_GPIO_Init+0x2d0>)
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	43db      	mvns	r3, r3
 8001706:	4928      	ldr	r1, [pc, #160]	; (80017a8 <HAL_GPIO_Init+0x2d0>)
 8001708:	4013      	ands	r3, r2
 800170a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d006      	beq.n	8001726 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001718:	4b23      	ldr	r3, [pc, #140]	; (80017a8 <HAL_GPIO_Init+0x2d0>)
 800171a:	68da      	ldr	r2, [r3, #12]
 800171c:	4922      	ldr	r1, [pc, #136]	; (80017a8 <HAL_GPIO_Init+0x2d0>)
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	4313      	orrs	r3, r2
 8001722:	60cb      	str	r3, [r1, #12]
 8001724:	e006      	b.n	8001734 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001726:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <HAL_GPIO_Init+0x2d0>)
 8001728:	68da      	ldr	r2, [r3, #12]
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	43db      	mvns	r3, r3
 800172e:	491e      	ldr	r1, [pc, #120]	; (80017a8 <HAL_GPIO_Init+0x2d0>)
 8001730:	4013      	ands	r3, r2
 8001732:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173c:	2b00      	cmp	r3, #0
 800173e:	d006      	beq.n	800174e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001740:	4b19      	ldr	r3, [pc, #100]	; (80017a8 <HAL_GPIO_Init+0x2d0>)
 8001742:	685a      	ldr	r2, [r3, #4]
 8001744:	4918      	ldr	r1, [pc, #96]	; (80017a8 <HAL_GPIO_Init+0x2d0>)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	4313      	orrs	r3, r2
 800174a:	604b      	str	r3, [r1, #4]
 800174c:	e006      	b.n	800175c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800174e:	4b16      	ldr	r3, [pc, #88]	; (80017a8 <HAL_GPIO_Init+0x2d0>)
 8001750:	685a      	ldr	r2, [r3, #4]
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	43db      	mvns	r3, r3
 8001756:	4914      	ldr	r1, [pc, #80]	; (80017a8 <HAL_GPIO_Init+0x2d0>)
 8001758:	4013      	ands	r3, r2
 800175a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d021      	beq.n	80017ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001768:	4b0f      	ldr	r3, [pc, #60]	; (80017a8 <HAL_GPIO_Init+0x2d0>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	490e      	ldr	r1, [pc, #56]	; (80017a8 <HAL_GPIO_Init+0x2d0>)
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	4313      	orrs	r3, r2
 8001772:	600b      	str	r3, [r1, #0]
 8001774:	e021      	b.n	80017ba <HAL_GPIO_Init+0x2e2>
 8001776:	bf00      	nop
 8001778:	10320000 	.word	0x10320000
 800177c:	10310000 	.word	0x10310000
 8001780:	10220000 	.word	0x10220000
 8001784:	10210000 	.word	0x10210000
 8001788:	10120000 	.word	0x10120000
 800178c:	10110000 	.word	0x10110000
 8001790:	40021000 	.word	0x40021000
 8001794:	40010000 	.word	0x40010000
 8001798:	40010800 	.word	0x40010800
 800179c:	40010c00 	.word	0x40010c00
 80017a0:	40011000 	.word	0x40011000
 80017a4:	40011400 	.word	0x40011400
 80017a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017ac:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <HAL_GPIO_Init+0x304>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	69bb      	ldr	r3, [r7, #24]
 80017b2:	43db      	mvns	r3, r3
 80017b4:	4909      	ldr	r1, [pc, #36]	; (80017dc <HAL_GPIO_Init+0x304>)
 80017b6:	4013      	ands	r3, r2
 80017b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017bc:	3301      	adds	r3, #1
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c6:	fa22 f303 	lsr.w	r3, r2, r3
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	f47f ae8e 	bne.w	80014ec <HAL_GPIO_Init+0x14>
  }
}
 80017d0:	bf00      	nop
 80017d2:	bf00      	nop
 80017d4:	372c      	adds	r7, #44	; 0x2c
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr
 80017dc:	40010400 	.word	0x40010400

080017e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	807b      	strh	r3, [r7, #2]
 80017ec:	4613      	mov	r3, r2
 80017ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017f0:	787b      	ldrb	r3, [r7, #1]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d003      	beq.n	80017fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017f6:	887a      	ldrh	r2, [r7, #2]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80017fc:	e003      	b.n	8001806 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80017fe:	887b      	ldrh	r3, [r7, #2]
 8001800:	041a      	lsls	r2, r3, #16
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	611a      	str	r2, [r3, #16]
}
 8001806:	bf00      	nop
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr

08001810 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e12b      	b.n	8001a7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d106      	bne.n	800183c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff f976 	bl	8000b28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2224      	movs	r2, #36	; 0x24
 8001840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f022 0201 	bic.w	r2, r2, #1
 8001852:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001862:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001872:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001874:	f002 f9d8 	bl	8003c28 <HAL_RCC_GetPCLK1Freq>
 8001878:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	4a81      	ldr	r2, [pc, #516]	; (8001a84 <HAL_I2C_Init+0x274>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d807      	bhi.n	8001894 <HAL_I2C_Init+0x84>
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	4a80      	ldr	r2, [pc, #512]	; (8001a88 <HAL_I2C_Init+0x278>)
 8001888:	4293      	cmp	r3, r2
 800188a:	bf94      	ite	ls
 800188c:	2301      	movls	r3, #1
 800188e:	2300      	movhi	r3, #0
 8001890:	b2db      	uxtb	r3, r3
 8001892:	e006      	b.n	80018a2 <HAL_I2C_Init+0x92>
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4a7d      	ldr	r2, [pc, #500]	; (8001a8c <HAL_I2C_Init+0x27c>)
 8001898:	4293      	cmp	r3, r2
 800189a:	bf94      	ite	ls
 800189c:	2301      	movls	r3, #1
 800189e:	2300      	movhi	r3, #0
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e0e7      	b.n	8001a7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	4a78      	ldr	r2, [pc, #480]	; (8001a90 <HAL_I2C_Init+0x280>)
 80018ae:	fba2 2303 	umull	r2, r3, r2, r3
 80018b2:	0c9b      	lsrs	r3, r3, #18
 80018b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	68ba      	ldr	r2, [r7, #8]
 80018c6:	430a      	orrs	r2, r1
 80018c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	4a6a      	ldr	r2, [pc, #424]	; (8001a84 <HAL_I2C_Init+0x274>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d802      	bhi.n	80018e4 <HAL_I2C_Init+0xd4>
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	3301      	adds	r3, #1
 80018e2:	e009      	b.n	80018f8 <HAL_I2C_Init+0xe8>
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80018ea:	fb02 f303 	mul.w	r3, r2, r3
 80018ee:	4a69      	ldr	r2, [pc, #420]	; (8001a94 <HAL_I2C_Init+0x284>)
 80018f0:	fba2 2303 	umull	r2, r3, r2, r3
 80018f4:	099b      	lsrs	r3, r3, #6
 80018f6:	3301      	adds	r3, #1
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6812      	ldr	r2, [r2, #0]
 80018fc:	430b      	orrs	r3, r1
 80018fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	69db      	ldr	r3, [r3, #28]
 8001906:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800190a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	495c      	ldr	r1, [pc, #368]	; (8001a84 <HAL_I2C_Init+0x274>)
 8001914:	428b      	cmp	r3, r1
 8001916:	d819      	bhi.n	800194c <HAL_I2C_Init+0x13c>
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	1e59      	subs	r1, r3, #1
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	fbb1 f3f3 	udiv	r3, r1, r3
 8001926:	1c59      	adds	r1, r3, #1
 8001928:	f640 73fc 	movw	r3, #4092	; 0xffc
 800192c:	400b      	ands	r3, r1
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00a      	beq.n	8001948 <HAL_I2C_Init+0x138>
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	1e59      	subs	r1, r3, #1
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001940:	3301      	adds	r3, #1
 8001942:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001946:	e051      	b.n	80019ec <HAL_I2C_Init+0x1dc>
 8001948:	2304      	movs	r3, #4
 800194a:	e04f      	b.n	80019ec <HAL_I2C_Init+0x1dc>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d111      	bne.n	8001978 <HAL_I2C_Init+0x168>
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	1e58      	subs	r0, r3, #1
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6859      	ldr	r1, [r3, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	440b      	add	r3, r1
 8001962:	fbb0 f3f3 	udiv	r3, r0, r3
 8001966:	3301      	adds	r3, #1
 8001968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800196c:	2b00      	cmp	r3, #0
 800196e:	bf0c      	ite	eq
 8001970:	2301      	moveq	r3, #1
 8001972:	2300      	movne	r3, #0
 8001974:	b2db      	uxtb	r3, r3
 8001976:	e012      	b.n	800199e <HAL_I2C_Init+0x18e>
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	1e58      	subs	r0, r3, #1
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6859      	ldr	r1, [r3, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	440b      	add	r3, r1
 8001986:	0099      	lsls	r1, r3, #2
 8001988:	440b      	add	r3, r1
 800198a:	fbb0 f3f3 	udiv	r3, r0, r3
 800198e:	3301      	adds	r3, #1
 8001990:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001994:	2b00      	cmp	r3, #0
 8001996:	bf0c      	ite	eq
 8001998:	2301      	moveq	r3, #1
 800199a:	2300      	movne	r3, #0
 800199c:	b2db      	uxtb	r3, r3
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <HAL_I2C_Init+0x196>
 80019a2:	2301      	movs	r3, #1
 80019a4:	e022      	b.n	80019ec <HAL_I2C_Init+0x1dc>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d10e      	bne.n	80019cc <HAL_I2C_Init+0x1bc>
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	1e58      	subs	r0, r3, #1
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6859      	ldr	r1, [r3, #4]
 80019b6:	460b      	mov	r3, r1
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	440b      	add	r3, r1
 80019bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80019c0:	3301      	adds	r3, #1
 80019c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019ca:	e00f      	b.n	80019ec <HAL_I2C_Init+0x1dc>
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	1e58      	subs	r0, r3, #1
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6859      	ldr	r1, [r3, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	440b      	add	r3, r1
 80019da:	0099      	lsls	r1, r3, #2
 80019dc:	440b      	add	r3, r1
 80019de:	fbb0 f3f3 	udiv	r3, r0, r3
 80019e2:	3301      	adds	r3, #1
 80019e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	6809      	ldr	r1, [r1, #0]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	69da      	ldr	r2, [r3, #28]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6a1b      	ldr	r3, [r3, #32]
 8001a06:	431a      	orrs	r2, r3
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a1a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	6911      	ldr	r1, [r2, #16]
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	68d2      	ldr	r2, [r2, #12]
 8001a26:	4311      	orrs	r1, r2
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	6812      	ldr	r2, [r2, #0]
 8001a2c:	430b      	orrs	r3, r1
 8001a2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	695a      	ldr	r2, [r3, #20]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	699b      	ldr	r3, [r3, #24]
 8001a42:	431a      	orrs	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f042 0201 	orr.w	r2, r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2220      	movs	r2, #32
 8001a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001a78:	2300      	movs	r3, #0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	000186a0 	.word	0x000186a0
 8001a88:	001e847f 	.word	0x001e847f
 8001a8c:	003d08ff 	.word	0x003d08ff
 8001a90:	431bde83 	.word	0x431bde83
 8001a94:	10624dd3 	.word	0x10624dd3

08001a98 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b088      	sub	sp, #32
 8001a9c:	af02      	add	r7, sp, #8
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	607a      	str	r2, [r7, #4]
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	817b      	strh	r3, [r7, #10]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001aac:	f7ff fa5c 	bl	8000f68 <HAL_GetTick>
 8001ab0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b20      	cmp	r3, #32
 8001abc:	f040 80e0 	bne.w	8001c80 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	2319      	movs	r3, #25
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	4970      	ldr	r1, [pc, #448]	; (8001c8c <HAL_I2C_Master_Transmit+0x1f4>)
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f001 faac 	bl	8003028 <I2C_WaitOnFlagUntilTimeout>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e0d3      	b.n	8001c82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d101      	bne.n	8001ae8 <HAL_I2C_Master_Transmit+0x50>
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	e0cc      	b.n	8001c82 <HAL_I2C_Master_Transmit+0x1ea>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d007      	beq.n	8001b0e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f042 0201 	orr.w	r2, r2, #1
 8001b0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b1c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2221      	movs	r2, #33	; 0x21
 8001b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2210      	movs	r2, #16
 8001b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2200      	movs	r2, #0
 8001b32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	893a      	ldrh	r2, [r7, #8]
 8001b3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	4a50      	ldr	r2, [pc, #320]	; (8001c90 <HAL_I2C_Master_Transmit+0x1f8>)
 8001b4e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b50:	8979      	ldrh	r1, [r7, #10]
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	6a3a      	ldr	r2, [r7, #32]
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f000 ff98 	bl	8002a8c <I2C_MasterRequestWrite>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e08d      	b.n	8001c82 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b66:	2300      	movs	r3, #0
 8001b68:	613b      	str	r3, [r7, #16]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001b7c:	e066      	b.n	8001c4c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	6a39      	ldr	r1, [r7, #32]
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f001 fb6a 	bl	800325c <I2C_WaitOnTXEFlagUntilTimeout>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00d      	beq.n	8001baa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	d107      	bne.n	8001ba6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ba4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e06b      	b.n	8001c82 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bae:	781a      	ldrb	r2, [r3, #0]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bba:	1c5a      	adds	r2, r3, #1
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	d11b      	bne.n	8001c20 <HAL_I2C_Master_Transmit+0x188>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d017      	beq.n	8001c20 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	781a      	ldrb	r2, [r3, #0]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c00:	1c5a      	adds	r2, r3, #1
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	3b01      	subs	r3, #1
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	b29a      	uxth	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	6a39      	ldr	r1, [r7, #32]
 8001c24:	68f8      	ldr	r0, [r7, #12]
 8001c26:	f001 fb61 	bl	80032ec <I2C_WaitOnBTFFlagUntilTimeout>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d00d      	beq.n	8001c4c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c34:	2b04      	cmp	r3, #4
 8001c36:	d107      	bne.n	8001c48 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c46:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e01a      	b.n	8001c82 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d194      	bne.n	8001b7e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2220      	movs	r2, #32
 8001c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	e000      	b.n	8001c82 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001c80:	2302      	movs	r3, #2
  }
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3718      	adds	r7, #24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	00100002 	.word	0x00100002
 8001c90:	ffff0000 	.word	0xffff0000

08001c94 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b08c      	sub	sp, #48	; 0x30
 8001c98:	af02      	add	r7, sp, #8
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	607a      	str	r2, [r7, #4]
 8001c9e:	461a      	mov	r2, r3
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	817b      	strh	r3, [r7, #10]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001cac:	f7ff f95c 	bl	8000f68 <HAL_GetTick>
 8001cb0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b20      	cmp	r3, #32
 8001cbc:	f040 824b 	bne.w	8002156 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	2319      	movs	r3, #25
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	497f      	ldr	r1, [pc, #508]	; (8001ec8 <HAL_I2C_Master_Receive+0x234>)
 8001cca:	68f8      	ldr	r0, [r7, #12]
 8001ccc:	f001 f9ac 	bl	8003028 <I2C_WaitOnFlagUntilTimeout>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	e23e      	b.n	8002158 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d101      	bne.n	8001ce8 <HAL_I2C_Master_Receive+0x54>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e237      	b.n	8002158 <HAL_I2C_Master_Receive+0x4c4>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d007      	beq.n	8001d0e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f042 0201 	orr.w	r2, r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d1c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2222      	movs	r2, #34	; 0x22
 8001d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2210      	movs	r2, #16
 8001d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	893a      	ldrh	r2, [r7, #8]
 8001d3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	4a5f      	ldr	r2, [pc, #380]	; (8001ecc <HAL_I2C_Master_Receive+0x238>)
 8001d4e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d50:	8979      	ldrh	r1, [r7, #10]
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f000 ff1a 	bl	8002b90 <I2C_MasterRequestRead>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e1f8      	b.n	8002158 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d113      	bne.n	8001d96 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	695b      	ldr	r3, [r3, #20]
 8001d78:	61fb      	str	r3, [r7, #28]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	61fb      	str	r3, [r7, #28]
 8001d82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	e1cc      	b.n	8002130 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d11e      	bne.n	8001ddc <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001dae:	b672      	cpsid	i
}
 8001db0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001db2:	2300      	movs	r3, #0
 8001db4:	61bb      	str	r3, [r7, #24]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	61bb      	str	r3, [r7, #24]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	61bb      	str	r3, [r7, #24]
 8001dc6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dd6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001dd8:	b662      	cpsie	i
}
 8001dda:	e035      	b.n	8001e48 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d11e      	bne.n	8001e22 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001df2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001df4:	b672      	cpsid	i
}
 8001df6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	617b      	str	r3, [r7, #20]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e1c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001e1e:	b662      	cpsie	i
}
 8001e20:	e012      	b.n	8001e48 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e32:	2300      	movs	r3, #0
 8001e34:	613b      	str	r3, [r7, #16]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	695b      	ldr	r3, [r3, #20]
 8001e3c:	613b      	str	r3, [r7, #16]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001e48:	e172      	b.n	8002130 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e4e:	2b03      	cmp	r3, #3
 8001e50:	f200 811f 	bhi.w	8002092 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d123      	bne.n	8001ea4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e60:	68f8      	ldr	r0, [r7, #12]
 8001e62:	f001 fa8b 	bl	800337c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d001      	beq.n	8001e70 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e173      	b.n	8002158 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	691a      	ldr	r2, [r3, #16]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	1c5a      	adds	r2, r3, #1
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	3b01      	subs	r3, #1
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ea2:	e145      	b.n	8002130 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d152      	bne.n	8001f52 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	4906      	ldr	r1, [pc, #24]	; (8001ed0 <HAL_I2C_Master_Receive+0x23c>)
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	f001 f8b6 	bl	8003028 <I2C_WaitOnFlagUntilTimeout>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d008      	beq.n	8001ed4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e148      	b.n	8002158 <HAL_I2C_Master_Receive+0x4c4>
 8001ec6:	bf00      	nop
 8001ec8:	00100002 	.word	0x00100002
 8001ecc:	ffff0000 	.word	0xffff0000
 8001ed0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed4:	b672      	cpsid	i
}
 8001ed6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ee6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	691a      	ldr	r2, [r3, #16]
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efa:	1c5a      	adds	r2, r3, #1
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f04:	3b01      	subs	r3, #1
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	3b01      	subs	r3, #1
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001f1a:	b662      	cpsie	i
}
 8001f1c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	691a      	ldr	r2, [r3, #16]
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f28:	b2d2      	uxtb	r2, r2
 8001f2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f30:	1c5a      	adds	r2, r3, #1
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001f50:	e0ee      	b.n	8002130 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f58:	2200      	movs	r2, #0
 8001f5a:	4981      	ldr	r1, [pc, #516]	; (8002160 <HAL_I2C_Master_Receive+0x4cc>)
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f001 f863 	bl	8003028 <I2C_WaitOnFlagUntilTimeout>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e0f5      	b.n	8002158 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f7a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f7c:	b672      	cpsid	i
}
 8001f7e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	691a      	ldr	r2, [r3, #16]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f92:	1c5a      	adds	r2, r3, #1
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	3b01      	subs	r3, #1
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001fb2:	4b6c      	ldr	r3, [pc, #432]	; (8002164 <HAL_I2C_Master_Receive+0x4d0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	08db      	lsrs	r3, r3, #3
 8001fb8:	4a6b      	ldr	r2, [pc, #428]	; (8002168 <HAL_I2C_Master_Receive+0x4d4>)
 8001fba:	fba2 2303 	umull	r2, r3, r2, r3
 8001fbe:	0a1a      	lsrs	r2, r3, #8
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	00da      	lsls	r2, r3, #3
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001fcc:	6a3b      	ldr	r3, [r7, #32]
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001fd2:	6a3b      	ldr	r3, [r7, #32]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d118      	bne.n	800200a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2220      	movs	r2, #32
 8001fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	f043 0220 	orr.w	r2, r3, #32
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001ffa:	b662      	cpsie	i
}
 8001ffc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e0a6      	b.n	8002158 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	695b      	ldr	r3, [r3, #20]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b04      	cmp	r3, #4
 8002016:	d1d9      	bne.n	8001fcc <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002026:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	691a      	ldr	r2, [r3, #16]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203a:	1c5a      	adds	r2, r3, #1
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002044:	3b01      	subs	r3, #1
 8002046:	b29a      	uxth	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002050:	b29b      	uxth	r3, r3
 8002052:	3b01      	subs	r3, #1
 8002054:	b29a      	uxth	r2, r3
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800205a:	b662      	cpsie	i
}
 800205c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	691a      	ldr	r2, [r3, #16]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002070:	1c5a      	adds	r2, r3, #1
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800207a:	3b01      	subs	r3, #1
 800207c:	b29a      	uxth	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002086:	b29b      	uxth	r3, r3
 8002088:	3b01      	subs	r3, #1
 800208a:	b29a      	uxth	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002090:	e04e      	b.n	8002130 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002094:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f001 f970 	bl	800337c <I2C_WaitOnRXNEFlagUntilTimeout>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e058      	b.n	8002158 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	691a      	ldr	r2, [r3, #16]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b8:	1c5a      	adds	r2, r3, #1
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c2:	3b01      	subs	r3, #1
 80020c4:	b29a      	uxth	r2, r3
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	3b01      	subs	r3, #1
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	d124      	bne.n	8002130 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	d107      	bne.n	80020fe <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020fc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	691a      	ldr	r2, [r3, #16]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002110:	1c5a      	adds	r2, r3, #1
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800211a:	3b01      	subs	r3, #1
 800211c:	b29a      	uxth	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002126:	b29b      	uxth	r3, r3
 8002128:	3b01      	subs	r3, #1
 800212a:	b29a      	uxth	r2, r3
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002134:	2b00      	cmp	r3, #0
 8002136:	f47f ae88 	bne.w	8001e4a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2220      	movs	r2, #32
 800213e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002152:	2300      	movs	r3, #0
 8002154:	e000      	b.n	8002158 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002156:	2302      	movs	r3, #2
  }
}
 8002158:	4618      	mov	r0, r3
 800215a:	3728      	adds	r7, #40	; 0x28
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	00010004 	.word	0x00010004
 8002164:	20000018 	.word	0x20000018
 8002168:	14f8b589 	.word	0x14f8b589

0800216c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b088      	sub	sp, #32
 8002170:	af02      	add	r7, sp, #8
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	4608      	mov	r0, r1
 8002176:	4611      	mov	r1, r2
 8002178:	461a      	mov	r2, r3
 800217a:	4603      	mov	r3, r0
 800217c:	817b      	strh	r3, [r7, #10]
 800217e:	460b      	mov	r3, r1
 8002180:	813b      	strh	r3, [r7, #8]
 8002182:	4613      	mov	r3, r2
 8002184:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002186:	f7fe feef 	bl	8000f68 <HAL_GetTick>
 800218a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b20      	cmp	r3, #32
 8002196:	f040 80d9 	bne.w	800234c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	9300      	str	r3, [sp, #0]
 800219e:	2319      	movs	r3, #25
 80021a0:	2201      	movs	r2, #1
 80021a2:	496d      	ldr	r1, [pc, #436]	; (8002358 <HAL_I2C_Mem_Write+0x1ec>)
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f000 ff3f 	bl	8003028 <I2C_WaitOnFlagUntilTimeout>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80021b0:	2302      	movs	r3, #2
 80021b2:	e0cc      	b.n	800234e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d101      	bne.n	80021c2 <HAL_I2C_Mem_Write+0x56>
 80021be:	2302      	movs	r3, #2
 80021c0:	e0c5      	b.n	800234e <HAL_I2C_Mem_Write+0x1e2>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d007      	beq.n	80021e8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f042 0201 	orr.w	r2, r2, #1
 80021e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2221      	movs	r2, #33	; 0x21
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2240      	movs	r2, #64	; 0x40
 8002204:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2200      	movs	r2, #0
 800220c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6a3a      	ldr	r2, [r7, #32]
 8002212:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002218:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221e:	b29a      	uxth	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4a4d      	ldr	r2, [pc, #308]	; (800235c <HAL_I2C_Mem_Write+0x1f0>)
 8002228:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800222a:	88f8      	ldrh	r0, [r7, #6]
 800222c:	893a      	ldrh	r2, [r7, #8]
 800222e:	8979      	ldrh	r1, [r7, #10]
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	9301      	str	r3, [sp, #4]
 8002234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	4603      	mov	r3, r0
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 fd76 	bl	8002d2c <I2C_RequestMemoryWrite>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d052      	beq.n	80022ec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e081      	b.n	800234e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800224a:	697a      	ldr	r2, [r7, #20]
 800224c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f001 f804 	bl	800325c <I2C_WaitOnTXEFlagUntilTimeout>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00d      	beq.n	8002276 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	2b04      	cmp	r3, #4
 8002260:	d107      	bne.n	8002272 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002270:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e06b      	b.n	800234e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	781a      	ldrb	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	1c5a      	adds	r2, r3, #1
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002290:	3b01      	subs	r3, #1
 8002292:	b29a      	uxth	r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229c:	b29b      	uxth	r3, r3
 800229e:	3b01      	subs	r3, #1
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b04      	cmp	r3, #4
 80022b2:	d11b      	bne.n	80022ec <HAL_I2C_Mem_Write+0x180>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d017      	beq.n	80022ec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	781a      	ldrb	r2, [r3, #0]
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	1c5a      	adds	r2, r3, #1
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d6:	3b01      	subs	r3, #1
 80022d8:	b29a      	uxth	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	3b01      	subs	r3, #1
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d1aa      	bne.n	800224a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80022f8:	68f8      	ldr	r0, [r7, #12]
 80022fa:	f000 fff7 	bl	80032ec <I2C_WaitOnBTFFlagUntilTimeout>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d00d      	beq.n	8002320 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	2b04      	cmp	r3, #4
 800230a:	d107      	bne.n	800231c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800231a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e016      	b.n	800234e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800232e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	2220      	movs	r2, #32
 8002334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002348:	2300      	movs	r3, #0
 800234a:	e000      	b.n	800234e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800234c:	2302      	movs	r3, #2
  }
}
 800234e:	4618      	mov	r0, r3
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	00100002 	.word	0x00100002
 800235c:	ffff0000 	.word	0xffff0000

08002360 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b08c      	sub	sp, #48	; 0x30
 8002364:	af02      	add	r7, sp, #8
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	4608      	mov	r0, r1
 800236a:	4611      	mov	r1, r2
 800236c:	461a      	mov	r2, r3
 800236e:	4603      	mov	r3, r0
 8002370:	817b      	strh	r3, [r7, #10]
 8002372:	460b      	mov	r3, r1
 8002374:	813b      	strh	r3, [r7, #8]
 8002376:	4613      	mov	r3, r2
 8002378:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800237a:	2300      	movs	r3, #0
 800237c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800237e:	f7fe fdf3 	bl	8000f68 <HAL_GetTick>
 8002382:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b20      	cmp	r3, #32
 800238e:	f040 8244 	bne.w	800281a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	2319      	movs	r3, #25
 8002398:	2201      	movs	r2, #1
 800239a:	4982      	ldr	r1, [pc, #520]	; (80025a4 <HAL_I2C_Mem_Read+0x244>)
 800239c:	68f8      	ldr	r0, [r7, #12]
 800239e:	f000 fe43 	bl	8003028 <I2C_WaitOnFlagUntilTimeout>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80023a8:	2302      	movs	r3, #2
 80023aa:	e237      	b.n	800281c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d101      	bne.n	80023ba <HAL_I2C_Mem_Read+0x5a>
 80023b6:	2302      	movs	r3, #2
 80023b8:	e230      	b.n	800281c <HAL_I2C_Mem_Read+0x4bc>
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0301 	and.w	r3, r3, #1
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d007      	beq.n	80023e0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f042 0201 	orr.w	r2, r2, #1
 80023de:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023ee:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2222      	movs	r2, #34	; 0x22
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2240      	movs	r2, #64	; 0x40
 80023fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800240a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002410:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002416:	b29a      	uxth	r2, r3
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	4a62      	ldr	r2, [pc, #392]	; (80025a8 <HAL_I2C_Mem_Read+0x248>)
 8002420:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002422:	88f8      	ldrh	r0, [r7, #6]
 8002424:	893a      	ldrh	r2, [r7, #8]
 8002426:	8979      	ldrh	r1, [r7, #10]
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	9301      	str	r3, [sp, #4]
 800242c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	4603      	mov	r3, r0
 8002432:	68f8      	ldr	r0, [r7, #12]
 8002434:	f000 fd10 	bl	8002e58 <I2C_RequestMemoryRead>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e1ec      	b.n	800281c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002446:	2b00      	cmp	r3, #0
 8002448:	d113      	bne.n	8002472 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	695b      	ldr	r3, [r3, #20]
 8002454:	61fb      	str	r3, [r7, #28]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	61fb      	str	r3, [r7, #28]
 800245e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	e1c0      	b.n	80027f4 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002476:	2b01      	cmp	r3, #1
 8002478:	d11e      	bne.n	80024b8 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002488:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800248a:	b672      	cpsid	i
}
 800248c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800248e:	2300      	movs	r3, #0
 8002490:	61bb      	str	r3, [r7, #24]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	61bb      	str	r3, [r7, #24]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	61bb      	str	r3, [r7, #24]
 80024a2:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80024b4:	b662      	cpsie	i
}
 80024b6:	e035      	b.n	8002524 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d11e      	bne.n	80024fe <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80024d0:	b672      	cpsid	i
}
 80024d2:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	617b      	str	r3, [r7, #20]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80024fa:	b662      	cpsie	i
}
 80024fc:	e012      	b.n	8002524 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800250c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800250e:	2300      	movs	r3, #0
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	695b      	ldr	r3, [r3, #20]
 8002518:	613b      	str	r3, [r7, #16]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	613b      	str	r3, [r7, #16]
 8002522:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002524:	e166      	b.n	80027f4 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252a:	2b03      	cmp	r3, #3
 800252c:	f200 811f 	bhi.w	800276e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002534:	2b01      	cmp	r3, #1
 8002536:	d123      	bne.n	8002580 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800253a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f000 ff1d 	bl	800337c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e167      	b.n	800281c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691a      	ldr	r2, [r3, #16]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002568:	3b01      	subs	r3, #1
 800256a:	b29a      	uxth	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002574:	b29b      	uxth	r3, r3
 8002576:	3b01      	subs	r3, #1
 8002578:	b29a      	uxth	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800257e:	e139      	b.n	80027f4 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002584:	2b02      	cmp	r3, #2
 8002586:	d152      	bne.n	800262e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258e:	2200      	movs	r2, #0
 8002590:	4906      	ldr	r1, [pc, #24]	; (80025ac <HAL_I2C_Mem_Read+0x24c>)
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 fd48 	bl	8003028 <I2C_WaitOnFlagUntilTimeout>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d008      	beq.n	80025b0 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e13c      	b.n	800281c <HAL_I2C_Mem_Read+0x4bc>
 80025a2:	bf00      	nop
 80025a4:	00100002 	.word	0x00100002
 80025a8:	ffff0000 	.word	0xffff0000
 80025ac:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80025b0:	b672      	cpsid	i
}
 80025b2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	691a      	ldr	r2, [r3, #16]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d6:	1c5a      	adds	r2, r3, #1
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	3b01      	subs	r3, #1
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80025f6:	b662      	cpsie	i
}
 80025f8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	1c5a      	adds	r2, r3, #1
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002616:	3b01      	subs	r3, #1
 8002618:	b29a      	uxth	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002622:	b29b      	uxth	r3, r3
 8002624:	3b01      	subs	r3, #1
 8002626:	b29a      	uxth	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800262c:	e0e2      	b.n	80027f4 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002634:	2200      	movs	r2, #0
 8002636:	497b      	ldr	r1, [pc, #492]	; (8002824 <HAL_I2C_Mem_Read+0x4c4>)
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f000 fcf5 	bl	8003028 <I2C_WaitOnFlagUntilTimeout>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e0e9      	b.n	800281c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002656:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002658:	b672      	cpsid	i
}
 800265a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691a      	ldr	r2, [r3, #16]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266e:	1c5a      	adds	r2, r3, #1
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002678:	3b01      	subs	r3, #1
 800267a:	b29a      	uxth	r2, r3
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002684:	b29b      	uxth	r3, r3
 8002686:	3b01      	subs	r3, #1
 8002688:	b29a      	uxth	r2, r3
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800268e:	4b66      	ldr	r3, [pc, #408]	; (8002828 <HAL_I2C_Mem_Read+0x4c8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	08db      	lsrs	r3, r3, #3
 8002694:	4a65      	ldr	r2, [pc, #404]	; (800282c <HAL_I2C_Mem_Read+0x4cc>)
 8002696:	fba2 2303 	umull	r2, r3, r2, r3
 800269a:	0a1a      	lsrs	r2, r3, #8
 800269c:	4613      	mov	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	00da      	lsls	r2, r3, #3
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80026a8:	6a3b      	ldr	r3, [r7, #32]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d118      	bne.n	80026e6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2220      	movs	r2, #32
 80026be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ce:	f043 0220 	orr.w	r2, r3, #32
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80026d6:	b662      	cpsie	i
}
 80026d8:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e09a      	b.n	800281c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b04      	cmp	r3, #4
 80026f2:	d1d9      	bne.n	80026a8 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002702:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	691a      	ldr	r2, [r3, #16]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002716:	1c5a      	adds	r2, r3, #1
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002720:	3b01      	subs	r3, #1
 8002722:	b29a      	uxth	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800272c:	b29b      	uxth	r3, r3
 800272e:	3b01      	subs	r3, #1
 8002730:	b29a      	uxth	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002736:	b662      	cpsie	i
}
 8002738:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	691a      	ldr	r2, [r3, #16]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	b2d2      	uxtb	r2, r2
 8002746:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002756:	3b01      	subs	r3, #1
 8002758:	b29a      	uxth	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002762:	b29b      	uxth	r3, r3
 8002764:	3b01      	subs	r3, #1
 8002766:	b29a      	uxth	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800276c:	e042      	b.n	80027f4 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800276e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002770:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 fe02 	bl	800337c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e04c      	b.n	800281c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	691a      	ldr	r2, [r3, #16]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	b2d2      	uxtb	r2, r2
 800278e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	1c5a      	adds	r2, r3, #1
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279e:	3b01      	subs	r3, #1
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	3b01      	subs	r3, #1
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	f003 0304 	and.w	r3, r3, #4
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d118      	bne.n	80027f4 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	691a      	ldr	r2, [r3, #16]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027de:	3b01      	subs	r3, #1
 80027e0:	b29a      	uxth	r2, r3
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	3b01      	subs	r3, #1
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f47f ae94 	bne.w	8002526 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2220      	movs	r2, #32
 8002802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002816:	2300      	movs	r3, #0
 8002818:	e000      	b.n	800281c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800281a:	2302      	movs	r3, #2
  }
}
 800281c:	4618      	mov	r0, r3
 800281e:	3728      	adds	r7, #40	; 0x28
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	00010004 	.word	0x00010004
 8002828:	20000018 	.word	0x20000018
 800282c:	14f8b589 	.word	0x14f8b589

08002830 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08a      	sub	sp, #40	; 0x28
 8002834:	af02      	add	r7, sp, #8
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	607a      	str	r2, [r7, #4]
 800283a:	603b      	str	r3, [r7, #0]
 800283c:	460b      	mov	r3, r1
 800283e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002840:	f7fe fb92 	bl	8000f68 <HAL_GetTick>
 8002844:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002846:	2300      	movs	r3, #0
 8002848:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b20      	cmp	r3, #32
 8002854:	f040 8111 	bne.w	8002a7a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	2319      	movs	r3, #25
 800285e:	2201      	movs	r2, #1
 8002860:	4988      	ldr	r1, [pc, #544]	; (8002a84 <HAL_I2C_IsDeviceReady+0x254>)
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 fbe0 	bl	8003028 <I2C_WaitOnFlagUntilTimeout>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800286e:	2302      	movs	r3, #2
 8002870:	e104      	b.n	8002a7c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002878:	2b01      	cmp	r3, #1
 800287a:	d101      	bne.n	8002880 <HAL_I2C_IsDeviceReady+0x50>
 800287c:	2302      	movs	r3, #2
 800287e:	e0fd      	b.n	8002a7c <HAL_I2C_IsDeviceReady+0x24c>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2201      	movs	r2, #1
 8002884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b01      	cmp	r3, #1
 8002894:	d007      	beq.n	80028a6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f042 0201 	orr.w	r2, r2, #1
 80028a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2224      	movs	r2, #36	; 0x24
 80028ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4a70      	ldr	r2, [pc, #448]	; (8002a88 <HAL_I2C_IsDeviceReady+0x258>)
 80028c8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028d8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028e6:	68f8      	ldr	r0, [r7, #12]
 80028e8:	f000 fb9e 	bl	8003028 <I2C_WaitOnFlagUntilTimeout>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00d      	beq.n	800290e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002900:	d103      	bne.n	800290a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002908:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e0b6      	b.n	8002a7c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800290e:	897b      	ldrh	r3, [r7, #10]
 8002910:	b2db      	uxtb	r3, r3
 8002912:	461a      	mov	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800291c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800291e:	f7fe fb23 	bl	8000f68 <HAL_GetTick>
 8002922:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	695b      	ldr	r3, [r3, #20]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b02      	cmp	r3, #2
 8002930:	bf0c      	ite	eq
 8002932:	2301      	moveq	r3, #1
 8002934:	2300      	movne	r3, #0
 8002936:	b2db      	uxtb	r3, r3
 8002938:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	695b      	ldr	r3, [r3, #20]
 8002940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002944:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002948:	bf0c      	ite	eq
 800294a:	2301      	moveq	r3, #1
 800294c:	2300      	movne	r3, #0
 800294e:	b2db      	uxtb	r3, r3
 8002950:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002952:	e025      	b.n	80029a0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002954:	f7fe fb08 	bl	8000f68 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	683a      	ldr	r2, [r7, #0]
 8002960:	429a      	cmp	r2, r3
 8002962:	d302      	bcc.n	800296a <HAL_I2C_IsDeviceReady+0x13a>
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d103      	bne.n	8002972 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	22a0      	movs	r2, #160	; 0xa0
 800296e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	695b      	ldr	r3, [r3, #20]
 8002978:	f003 0302 	and.w	r3, r3, #2
 800297c:	2b02      	cmp	r3, #2
 800297e:	bf0c      	ite	eq
 8002980:	2301      	moveq	r3, #1
 8002982:	2300      	movne	r3, #0
 8002984:	b2db      	uxtb	r3, r3
 8002986:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002996:	bf0c      	ite	eq
 8002998:	2301      	moveq	r3, #1
 800299a:	2300      	movne	r3, #0
 800299c:	b2db      	uxtb	r3, r3
 800299e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	2ba0      	cmp	r3, #160	; 0xa0
 80029aa:	d005      	beq.n	80029b8 <HAL_I2C_IsDeviceReady+0x188>
 80029ac:	7dfb      	ldrb	r3, [r7, #23]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d102      	bne.n	80029b8 <HAL_I2C_IsDeviceReady+0x188>
 80029b2:	7dbb      	ldrb	r3, [r7, #22]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0cd      	beq.n	8002954 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2220      	movs	r2, #32
 80029bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	f003 0302 	and.w	r3, r3, #2
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d129      	bne.n	8002a22 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029dc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029de:	2300      	movs	r3, #0
 80029e0:	613b      	str	r3, [r7, #16]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	613b      	str	r3, [r7, #16]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	2319      	movs	r3, #25
 80029fa:	2201      	movs	r2, #1
 80029fc:	4921      	ldr	r1, [pc, #132]	; (8002a84 <HAL_I2C_IsDeviceReady+0x254>)
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 fb12 	bl	8003028 <I2C_WaitOnFlagUntilTimeout>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e036      	b.n	8002a7c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2220      	movs	r2, #32
 8002a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	e02c      	b.n	8002a7c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a30:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a3a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	2319      	movs	r3, #25
 8002a42:	2201      	movs	r2, #1
 8002a44:	490f      	ldr	r1, [pc, #60]	; (8002a84 <HAL_I2C_IsDeviceReady+0x254>)
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 faee 	bl	8003028 <I2C_WaitOnFlagUntilTimeout>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e012      	b.n	8002a7c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	f4ff af32 	bcc.w	80028ca <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2220      	movs	r2, #32
 8002a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e000      	b.n	8002a7c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002a7a:	2302      	movs	r3, #2
  }
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3720      	adds	r7, #32
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	00100002 	.word	0x00100002
 8002a88:	ffff0000 	.word	0xffff0000

08002a8c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b088      	sub	sp, #32
 8002a90:	af02      	add	r7, sp, #8
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	607a      	str	r2, [r7, #4]
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	2b08      	cmp	r3, #8
 8002aa6:	d006      	beq.n	8002ab6 <I2C_MasterRequestWrite+0x2a>
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d003      	beq.n	8002ab6 <I2C_MasterRequestWrite+0x2a>
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ab4:	d108      	bne.n	8002ac8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ac4:	601a      	str	r2, [r3, #0]
 8002ac6:	e00b      	b.n	8002ae0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002acc:	2b12      	cmp	r3, #18
 8002ace:	d107      	bne.n	8002ae0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ade:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	9300      	str	r3, [sp, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002aec:	68f8      	ldr	r0, [r7, #12]
 8002aee:	f000 fa9b 	bl	8003028 <I2C_WaitOnFlagUntilTimeout>
 8002af2:	4603      	mov	r3, r0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00d      	beq.n	8002b14 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b06:	d103      	bne.n	8002b10 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e035      	b.n	8002b80 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b1c:	d108      	bne.n	8002b30 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b1e:	897b      	ldrh	r3, [r7, #10]
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	461a      	mov	r2, r3
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b2c:	611a      	str	r2, [r3, #16]
 8002b2e:	e01b      	b.n	8002b68 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b30:	897b      	ldrh	r3, [r7, #10]
 8002b32:	11db      	asrs	r3, r3, #7
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	f003 0306 	and.w	r3, r3, #6
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	f063 030f 	orn	r3, r3, #15
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	490e      	ldr	r1, [pc, #56]	; (8002b88 <I2C_MasterRequestWrite+0xfc>)
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f000 fae4 	bl	800311c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e010      	b.n	8002b80 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b5e:	897b      	ldrh	r3, [r7, #10]
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	4907      	ldr	r1, [pc, #28]	; (8002b8c <I2C_MasterRequestWrite+0x100>)
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 fad4 	bl	800311c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b74:	4603      	mov	r3, r0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d001      	beq.n	8002b7e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e000      	b.n	8002b80 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	00010008 	.word	0x00010008
 8002b8c:	00010002 	.word	0x00010002

08002b90 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af02      	add	r7, sp, #8
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	607a      	str	r2, [r7, #4]
 8002b9a:	603b      	str	r3, [r7, #0]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bb4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d006      	beq.n	8002bca <I2C_MasterRequestRead+0x3a>
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d003      	beq.n	8002bca <I2C_MasterRequestRead+0x3a>
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bc8:	d108      	bne.n	8002bdc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	e00b      	b.n	8002bf4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be0:	2b11      	cmp	r3, #17
 8002be2:	d107      	bne.n	8002bf4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bf2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f000 fa11 	bl	8003028 <I2C_WaitOnFlagUntilTimeout>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00d      	beq.n	8002c28 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c1a:	d103      	bne.n	8002c24 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e079      	b.n	8002d1c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c30:	d108      	bne.n	8002c44 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c32:	897b      	ldrh	r3, [r7, #10]
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	611a      	str	r2, [r3, #16]
 8002c42:	e05f      	b.n	8002d04 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c44:	897b      	ldrh	r3, [r7, #10]
 8002c46:	11db      	asrs	r3, r3, #7
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	f003 0306 	and.w	r3, r3, #6
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	f063 030f 	orn	r3, r3, #15
 8002c54:	b2da      	uxtb	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	4930      	ldr	r1, [pc, #192]	; (8002d24 <I2C_MasterRequestRead+0x194>)
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 fa5a 	bl	800311c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e054      	b.n	8002d1c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c72:	897b      	ldrh	r3, [r7, #10]
 8002c74:	b2da      	uxtb	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	4929      	ldr	r1, [pc, #164]	; (8002d28 <I2C_MasterRequestRead+0x198>)
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 fa4a 	bl	800311c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e044      	b.n	8002d1c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c92:	2300      	movs	r3, #0
 8002c94:	613b      	str	r3, [r7, #16]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	613b      	str	r3, [r7, #16]
 8002ca6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cb6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	9300      	str	r3, [sp, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cc4:	68f8      	ldr	r0, [r7, #12]
 8002cc6:	f000 f9af 	bl	8003028 <I2C_WaitOnFlagUntilTimeout>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00d      	beq.n	8002cec <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cde:	d103      	bne.n	8002ce8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ce6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e017      	b.n	8002d1c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002cec:	897b      	ldrh	r3, [r7, #10]
 8002cee:	11db      	asrs	r3, r3, #7
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	f003 0306 	and.w	r3, r3, #6
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	f063 030e 	orn	r3, r3, #14
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	687a      	ldr	r2, [r7, #4]
 8002d08:	4907      	ldr	r1, [pc, #28]	; (8002d28 <I2C_MasterRequestRead+0x198>)
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f000 fa06 	bl	800311c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e000      	b.n	8002d1c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002d1a:	2300      	movs	r3, #0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3718      	adds	r7, #24
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	00010008 	.word	0x00010008
 8002d28:	00010002 	.word	0x00010002

08002d2c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b088      	sub	sp, #32
 8002d30:	af02      	add	r7, sp, #8
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	4608      	mov	r0, r1
 8002d36:	4611      	mov	r1, r2
 8002d38:	461a      	mov	r2, r3
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	817b      	strh	r3, [r7, #10]
 8002d3e:	460b      	mov	r3, r1
 8002d40:	813b      	strh	r3, [r7, #8]
 8002d42:	4613      	mov	r3, r2
 8002d44:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d54:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	6a3b      	ldr	r3, [r7, #32]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 f960 	bl	8003028 <I2C_WaitOnFlagUntilTimeout>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00d      	beq.n	8002d8a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d7c:	d103      	bne.n	8002d86 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d84:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e05f      	b.n	8002e4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d8a:	897b      	ldrh	r3, [r7, #10]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	461a      	mov	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d98:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9c:	6a3a      	ldr	r2, [r7, #32]
 8002d9e:	492d      	ldr	r1, [pc, #180]	; (8002e54 <I2C_RequestMemoryWrite+0x128>)
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 f9bb 	bl	800311c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e04c      	b.n	8002e4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002db0:	2300      	movs	r3, #0
 8002db2:	617b      	str	r3, [r7, #20]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	617b      	str	r3, [r7, #20]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc8:	6a39      	ldr	r1, [r7, #32]
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f000 fa46 	bl	800325c <I2C_WaitOnTXEFlagUntilTimeout>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00d      	beq.n	8002df2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d107      	bne.n	8002dee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e02b      	b.n	8002e4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002df2:	88fb      	ldrh	r3, [r7, #6]
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d105      	bne.n	8002e04 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002df8:	893b      	ldrh	r3, [r7, #8]
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	611a      	str	r2, [r3, #16]
 8002e02:	e021      	b.n	8002e48 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e04:	893b      	ldrh	r3, [r7, #8]
 8002e06:	0a1b      	lsrs	r3, r3, #8
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e14:	6a39      	ldr	r1, [r7, #32]
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 fa20 	bl	800325c <I2C_WaitOnTXEFlagUntilTimeout>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d00d      	beq.n	8002e3e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	d107      	bne.n	8002e3a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e005      	b.n	8002e4a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e3e:	893b      	ldrh	r3, [r7, #8]
 8002e40:	b2da      	uxtb	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	00010002 	.word	0x00010002

08002e58 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b088      	sub	sp, #32
 8002e5c:	af02      	add	r7, sp, #8
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	4608      	mov	r0, r1
 8002e62:	4611      	mov	r1, r2
 8002e64:	461a      	mov	r2, r3
 8002e66:	4603      	mov	r3, r0
 8002e68:	817b      	strh	r3, [r7, #10]
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	813b      	strh	r3, [r7, #8]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e80:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e90:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 f8c2 	bl	8003028 <I2C_WaitOnFlagUntilTimeout>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00d      	beq.n	8002ec6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eb8:	d103      	bne.n	8002ec2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ec0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e0aa      	b.n	800301c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ec6:	897b      	ldrh	r3, [r7, #10]
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	461a      	mov	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ed4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	6a3a      	ldr	r2, [r7, #32]
 8002eda:	4952      	ldr	r1, [pc, #328]	; (8003024 <I2C_RequestMemoryRead+0x1cc>)
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 f91d 	bl	800311c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e097      	b.n	800301c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eec:	2300      	movs	r3, #0
 8002eee:	617b      	str	r3, [r7, #20]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	617b      	str	r3, [r7, #20]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	617b      	str	r3, [r7, #20]
 8002f00:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f04:	6a39      	ldr	r1, [r7, #32]
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 f9a8 	bl	800325c <I2C_WaitOnTXEFlagUntilTimeout>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00d      	beq.n	8002f2e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	2b04      	cmp	r3, #4
 8002f18:	d107      	bne.n	8002f2a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f28:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e076      	b.n	800301c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f2e:	88fb      	ldrh	r3, [r7, #6]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d105      	bne.n	8002f40 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f34:	893b      	ldrh	r3, [r7, #8]
 8002f36:	b2da      	uxtb	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	611a      	str	r2, [r3, #16]
 8002f3e:	e021      	b.n	8002f84 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f40:	893b      	ldrh	r3, [r7, #8]
 8002f42:	0a1b      	lsrs	r3, r3, #8
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	b2da      	uxtb	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f50:	6a39      	ldr	r1, [r7, #32]
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 f982 	bl	800325c <I2C_WaitOnTXEFlagUntilTimeout>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00d      	beq.n	8002f7a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	2b04      	cmp	r3, #4
 8002f64:	d107      	bne.n	8002f76 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f74:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e050      	b.n	800301c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f7a:	893b      	ldrh	r3, [r7, #8]
 8002f7c:	b2da      	uxtb	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f86:	6a39      	ldr	r1, [r7, #32]
 8002f88:	68f8      	ldr	r0, [r7, #12]
 8002f8a:	f000 f967 	bl	800325c <I2C_WaitOnTXEFlagUntilTimeout>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00d      	beq.n	8002fb0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	d107      	bne.n	8002fac <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002faa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e035      	b.n	800301c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fbe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 f82b 	bl	8003028 <I2C_WaitOnFlagUntilTimeout>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00d      	beq.n	8002ff4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fe6:	d103      	bne.n	8002ff0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e013      	b.n	800301c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ff4:	897b      	ldrh	r3, [r7, #10]
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	f043 0301 	orr.w	r3, r3, #1
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	6a3a      	ldr	r2, [r7, #32]
 8003008:	4906      	ldr	r1, [pc, #24]	; (8003024 <I2C_RequestMemoryRead+0x1cc>)
 800300a:	68f8      	ldr	r0, [r7, #12]
 800300c:	f000 f886 	bl	800311c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e000      	b.n	800301c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	00010002 	.word	0x00010002

08003028 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	603b      	str	r3, [r7, #0]
 8003034:	4613      	mov	r3, r2
 8003036:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003038:	e048      	b.n	80030cc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003040:	d044      	beq.n	80030cc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003042:	f7fd ff91 	bl	8000f68 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	429a      	cmp	r2, r3
 8003050:	d302      	bcc.n	8003058 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d139      	bne.n	80030cc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	0c1b      	lsrs	r3, r3, #16
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b01      	cmp	r3, #1
 8003060:	d10d      	bne.n	800307e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	43da      	mvns	r2, r3
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	4013      	ands	r3, r2
 800306e:	b29b      	uxth	r3, r3
 8003070:	2b00      	cmp	r3, #0
 8003072:	bf0c      	ite	eq
 8003074:	2301      	moveq	r3, #1
 8003076:	2300      	movne	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	461a      	mov	r2, r3
 800307c:	e00c      	b.n	8003098 <I2C_WaitOnFlagUntilTimeout+0x70>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	43da      	mvns	r2, r3
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	4013      	ands	r3, r2
 800308a:	b29b      	uxth	r3, r3
 800308c:	2b00      	cmp	r3, #0
 800308e:	bf0c      	ite	eq
 8003090:	2301      	moveq	r3, #1
 8003092:	2300      	movne	r3, #0
 8003094:	b2db      	uxtb	r3, r3
 8003096:	461a      	mov	r2, r3
 8003098:	79fb      	ldrb	r3, [r7, #7]
 800309a:	429a      	cmp	r2, r3
 800309c:	d116      	bne.n	80030cc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2220      	movs	r2, #32
 80030a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2200      	movs	r2, #0
 80030b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	f043 0220 	orr.w	r2, r3, #32
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e023      	b.n	8003114 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	0c1b      	lsrs	r3, r3, #16
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d10d      	bne.n	80030f2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	43da      	mvns	r2, r3
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	4013      	ands	r3, r2
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	bf0c      	ite	eq
 80030e8:	2301      	moveq	r3, #1
 80030ea:	2300      	movne	r3, #0
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	461a      	mov	r2, r3
 80030f0:	e00c      	b.n	800310c <I2C_WaitOnFlagUntilTimeout+0xe4>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	43da      	mvns	r2, r3
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	4013      	ands	r3, r2
 80030fe:	b29b      	uxth	r3, r3
 8003100:	2b00      	cmp	r3, #0
 8003102:	bf0c      	ite	eq
 8003104:	2301      	moveq	r3, #1
 8003106:	2300      	movne	r3, #0
 8003108:	b2db      	uxtb	r3, r3
 800310a:	461a      	mov	r2, r3
 800310c:	79fb      	ldrb	r3, [r7, #7]
 800310e:	429a      	cmp	r2, r3
 8003110:	d093      	beq.n	800303a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3710      	adds	r7, #16
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
 8003128:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800312a:	e071      	b.n	8003210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003136:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800313a:	d123      	bne.n	8003184 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800314a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003154:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2220      	movs	r2, #32
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003170:	f043 0204 	orr.w	r2, r3, #4
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e067      	b.n	8003254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800318a:	d041      	beq.n	8003210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800318c:	f7fd feec 	bl	8000f68 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	429a      	cmp	r2, r3
 800319a:	d302      	bcc.n	80031a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d136      	bne.n	8003210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	0c1b      	lsrs	r3, r3, #16
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d10c      	bne.n	80031c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	43da      	mvns	r2, r3
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	4013      	ands	r3, r2
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	bf14      	ite	ne
 80031be:	2301      	movne	r3, #1
 80031c0:	2300      	moveq	r3, #0
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	e00b      	b.n	80031de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	43da      	mvns	r2, r3
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	4013      	ands	r3, r2
 80031d2:	b29b      	uxth	r3, r3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	bf14      	ite	ne
 80031d8:	2301      	movne	r3, #1
 80031da:	2300      	moveq	r3, #0
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d016      	beq.n	8003210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2220      	movs	r2, #32
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fc:	f043 0220 	orr.w	r2, r3, #32
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e021      	b.n	8003254 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	0c1b      	lsrs	r3, r3, #16
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b01      	cmp	r3, #1
 8003218:	d10c      	bne.n	8003234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	43da      	mvns	r2, r3
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	4013      	ands	r3, r2
 8003226:	b29b      	uxth	r3, r3
 8003228:	2b00      	cmp	r3, #0
 800322a:	bf14      	ite	ne
 800322c:	2301      	movne	r3, #1
 800322e:	2300      	moveq	r3, #0
 8003230:	b2db      	uxtb	r3, r3
 8003232:	e00b      	b.n	800324c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	43da      	mvns	r2, r3
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	4013      	ands	r3, r2
 8003240:	b29b      	uxth	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	bf14      	ite	ne
 8003246:	2301      	movne	r3, #1
 8003248:	2300      	moveq	r3, #0
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b00      	cmp	r3, #0
 800324e:	f47f af6d 	bne.w	800312c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003252:	2300      	movs	r3, #0
}
 8003254:	4618      	mov	r0, r3
 8003256:	3710      	adds	r7, #16
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003268:	e034      	b.n	80032d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	f000 f8e3 	bl	8003436 <I2C_IsAcknowledgeFailed>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d001      	beq.n	800327a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e034      	b.n	80032e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003280:	d028      	beq.n	80032d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003282:	f7fd fe71 	bl	8000f68 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	429a      	cmp	r2, r3
 8003290:	d302      	bcc.n	8003298 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d11d      	bne.n	80032d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a2:	2b80      	cmp	r3, #128	; 0x80
 80032a4:	d016      	beq.n	80032d4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2220      	movs	r2, #32
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	f043 0220 	orr.w	r2, r3, #32
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e007      	b.n	80032e4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032de:	2b80      	cmp	r3, #128	; 0x80
 80032e0:	d1c3      	bne.n	800326a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032f8:	e034      	b.n	8003364 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 f89b 	bl	8003436 <I2C_IsAcknowledgeFailed>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e034      	b.n	8003374 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003310:	d028      	beq.n	8003364 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003312:	f7fd fe29 	bl	8000f68 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	68ba      	ldr	r2, [r7, #8]
 800331e:	429a      	cmp	r2, r3
 8003320:	d302      	bcc.n	8003328 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d11d      	bne.n	8003364 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	f003 0304 	and.w	r3, r3, #4
 8003332:	2b04      	cmp	r3, #4
 8003334:	d016      	beq.n	8003364 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2220      	movs	r2, #32
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003350:	f043 0220 	orr.w	r2, r3, #32
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e007      	b.n	8003374 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	2b04      	cmp	r3, #4
 8003370:	d1c3      	bne.n	80032fa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003388:	e049      	b.n	800341e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	f003 0310 	and.w	r3, r3, #16
 8003394:	2b10      	cmp	r3, #16
 8003396:	d119      	bne.n	80033cc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f06f 0210 	mvn.w	r2, #16
 80033a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2200      	movs	r2, #0
 80033a6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e030      	b.n	800342e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033cc:	f7fd fdcc 	bl	8000f68 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d302      	bcc.n	80033e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d11d      	bne.n	800341e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ec:	2b40      	cmp	r3, #64	; 0x40
 80033ee:	d016      	beq.n	800341e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2220      	movs	r2, #32
 80033fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340a:	f043 0220 	orr.w	r2, r3, #32
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e007      	b.n	800342e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003428:	2b40      	cmp	r3, #64	; 0x40
 800342a:	d1ae      	bne.n	800338a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800344c:	d11b      	bne.n	8003486 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003456:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2220      	movs	r2, #32
 8003462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	f043 0204 	orr.w	r2, r3, #4
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e000      	b.n	8003488 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	bc80      	pop	{r7}
 8003490:	4770      	bx	lr
	...

08003494 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e272      	b.n	800398c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 8087 	beq.w	80035c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034b4:	4b92      	ldr	r3, [pc, #584]	; (8003700 <HAL_RCC_OscConfig+0x26c>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f003 030c 	and.w	r3, r3, #12
 80034bc:	2b04      	cmp	r3, #4
 80034be:	d00c      	beq.n	80034da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034c0:	4b8f      	ldr	r3, [pc, #572]	; (8003700 <HAL_RCC_OscConfig+0x26c>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f003 030c 	and.w	r3, r3, #12
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d112      	bne.n	80034f2 <HAL_RCC_OscConfig+0x5e>
 80034cc:	4b8c      	ldr	r3, [pc, #560]	; (8003700 <HAL_RCC_OscConfig+0x26c>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d8:	d10b      	bne.n	80034f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034da:	4b89      	ldr	r3, [pc, #548]	; (8003700 <HAL_RCC_OscConfig+0x26c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d06c      	beq.n	80035c0 <HAL_RCC_OscConfig+0x12c>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d168      	bne.n	80035c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e24c      	b.n	800398c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034fa:	d106      	bne.n	800350a <HAL_RCC_OscConfig+0x76>
 80034fc:	4b80      	ldr	r3, [pc, #512]	; (8003700 <HAL_RCC_OscConfig+0x26c>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a7f      	ldr	r2, [pc, #508]	; (8003700 <HAL_RCC_OscConfig+0x26c>)
 8003502:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003506:	6013      	str	r3, [r2, #0]
 8003508:	e02e      	b.n	8003568 <HAL_RCC_OscConfig+0xd4>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10c      	bne.n	800352c <HAL_RCC_OscConfig+0x98>
 8003512:	4b7b      	ldr	r3, [pc, #492]	; (8003700 <HAL_RCC_OscConfig+0x26c>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a7a      	ldr	r2, [pc, #488]	; (8003700 <HAL_RCC_OscConfig+0x26c>)
 8003518:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	4b78      	ldr	r3, [pc, #480]	; (8003700 <HAL_RCC_OscConfig+0x26c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a77      	ldr	r2, [pc, #476]	; (8003700 <HAL_RCC_OscConfig+0x26c>)
 8003524:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003528:	6013      	str	r3, [r2, #0]
 800352a:	e01d      	b.n	8003568 <HAL_RCC_OscConfig+0xd4>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003534:	d10c      	bne.n	8003550 <HAL_RCC_OscConfig+0xbc>
 8003536:	4b72      	ldr	r3, [pc, #456]	; (8003700 <HAL_RCC_OscConfig+0x26c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a71      	ldr	r2, [pc, #452]	; (8003700 <HAL_RCC_OscConfig+0x26c>)
 800353c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003540:	6013      	str	r3, [r2, #0]
 8003542:	4b6f      	ldr	r3, [pc, #444]	; (8003700 <HAL_RCC_OscConfig+0x26c>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a6e      	ldr	r2, [pc, #440]	; (8003700 <HAL_RCC_OscConfig+0x26c>)
 8003548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	e00b      	b.n	8003568 <HAL_RCC_OscConfig+0xd4>
 8003550:	4b6b      	ldr	r3, [pc, #428]	; (8003700 <HAL_RCC_OscConfig+0x26c>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a6a      	ldr	r2, [pc, #424]	; (8003700 <HAL_RCC_OscConfig+0x26c>)
 8003556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800355a:	6013      	str	r3, [r2, #0]
 800355c:	4b68      	ldr	r3, [pc, #416]	; (8003700 <HAL_RCC_OscConfig+0x26c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a67      	ldr	r2, [pc, #412]	; (8003700 <HAL_RCC_OscConfig+0x26c>)
 8003562:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003566:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d013      	beq.n	8003598 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003570:	f7fd fcfa 	bl	8000f68 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003578:	f7fd fcf6 	bl	8000f68 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b64      	cmp	r3, #100	; 0x64
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e200      	b.n	800398c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800358a:	4b5d      	ldr	r3, [pc, #372]	; (8003700 <HAL_RCC_OscConfig+0x26c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0f0      	beq.n	8003578 <HAL_RCC_OscConfig+0xe4>
 8003596:	e014      	b.n	80035c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003598:	f7fd fce6 	bl	8000f68 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a0:	f7fd fce2 	bl	8000f68 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b64      	cmp	r3, #100	; 0x64
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e1ec      	b.n	800398c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035b2:	4b53      	ldr	r3, [pc, #332]	; (8003700 <HAL_RCC_OscConfig+0x26c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f0      	bne.n	80035a0 <HAL_RCC_OscConfig+0x10c>
 80035be:	e000      	b.n	80035c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d063      	beq.n	8003696 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035ce:	4b4c      	ldr	r3, [pc, #304]	; (8003700 <HAL_RCC_OscConfig+0x26c>)
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f003 030c 	and.w	r3, r3, #12
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00b      	beq.n	80035f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80035da:	4b49      	ldr	r3, [pc, #292]	; (8003700 <HAL_RCC_OscConfig+0x26c>)
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f003 030c 	and.w	r3, r3, #12
 80035e2:	2b08      	cmp	r3, #8
 80035e4:	d11c      	bne.n	8003620 <HAL_RCC_OscConfig+0x18c>
 80035e6:	4b46      	ldr	r3, [pc, #280]	; (8003700 <HAL_RCC_OscConfig+0x26c>)
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d116      	bne.n	8003620 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035f2:	4b43      	ldr	r3, [pc, #268]	; (8003700 <HAL_RCC_OscConfig+0x26c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d005      	beq.n	800360a <HAL_RCC_OscConfig+0x176>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d001      	beq.n	800360a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e1c0      	b.n	800398c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800360a:	4b3d      	ldr	r3, [pc, #244]	; (8003700 <HAL_RCC_OscConfig+0x26c>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	00db      	lsls	r3, r3, #3
 8003618:	4939      	ldr	r1, [pc, #228]	; (8003700 <HAL_RCC_OscConfig+0x26c>)
 800361a:	4313      	orrs	r3, r2
 800361c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800361e:	e03a      	b.n	8003696 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d020      	beq.n	800366a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003628:	4b36      	ldr	r3, [pc, #216]	; (8003704 <HAL_RCC_OscConfig+0x270>)
 800362a:	2201      	movs	r2, #1
 800362c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362e:	f7fd fc9b 	bl	8000f68 <HAL_GetTick>
 8003632:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003634:	e008      	b.n	8003648 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003636:	f7fd fc97 	bl	8000f68 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b02      	cmp	r3, #2
 8003642:	d901      	bls.n	8003648 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e1a1      	b.n	800398c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003648:	4b2d      	ldr	r3, [pc, #180]	; (8003700 <HAL_RCC_OscConfig+0x26c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d0f0      	beq.n	8003636 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003654:	4b2a      	ldr	r3, [pc, #168]	; (8003700 <HAL_RCC_OscConfig+0x26c>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	695b      	ldr	r3, [r3, #20]
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	4927      	ldr	r1, [pc, #156]	; (8003700 <HAL_RCC_OscConfig+0x26c>)
 8003664:	4313      	orrs	r3, r2
 8003666:	600b      	str	r3, [r1, #0]
 8003668:	e015      	b.n	8003696 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800366a:	4b26      	ldr	r3, [pc, #152]	; (8003704 <HAL_RCC_OscConfig+0x270>)
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003670:	f7fd fc7a 	bl	8000f68 <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003678:	f7fd fc76 	bl	8000f68 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e180      	b.n	800398c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800368a:	4b1d      	ldr	r3, [pc, #116]	; (8003700 <HAL_RCC_OscConfig+0x26c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1f0      	bne.n	8003678 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0308 	and.w	r3, r3, #8
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d03a      	beq.n	8003718 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d019      	beq.n	80036de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036aa:	4b17      	ldr	r3, [pc, #92]	; (8003708 <HAL_RCC_OscConfig+0x274>)
 80036ac:	2201      	movs	r2, #1
 80036ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036b0:	f7fd fc5a 	bl	8000f68 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036b8:	f7fd fc56 	bl	8000f68 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e160      	b.n	800398c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ca:	4b0d      	ldr	r3, [pc, #52]	; (8003700 <HAL_RCC_OscConfig+0x26c>)
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0f0      	beq.n	80036b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80036d6:	2001      	movs	r0, #1
 80036d8:	f000 face 	bl	8003c78 <RCC_Delay>
 80036dc:	e01c      	b.n	8003718 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036de:	4b0a      	ldr	r3, [pc, #40]	; (8003708 <HAL_RCC_OscConfig+0x274>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e4:	f7fd fc40 	bl	8000f68 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ea:	e00f      	b.n	800370c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ec:	f7fd fc3c 	bl	8000f68 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d908      	bls.n	800370c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e146      	b.n	800398c <HAL_RCC_OscConfig+0x4f8>
 80036fe:	bf00      	nop
 8003700:	40021000 	.word	0x40021000
 8003704:	42420000 	.word	0x42420000
 8003708:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800370c:	4b92      	ldr	r3, [pc, #584]	; (8003958 <HAL_RCC_OscConfig+0x4c4>)
 800370e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1e9      	bne.n	80036ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 80a6 	beq.w	8003872 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003726:	2300      	movs	r3, #0
 8003728:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800372a:	4b8b      	ldr	r3, [pc, #556]	; (8003958 <HAL_RCC_OscConfig+0x4c4>)
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10d      	bne.n	8003752 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003736:	4b88      	ldr	r3, [pc, #544]	; (8003958 <HAL_RCC_OscConfig+0x4c4>)
 8003738:	69db      	ldr	r3, [r3, #28]
 800373a:	4a87      	ldr	r2, [pc, #540]	; (8003958 <HAL_RCC_OscConfig+0x4c4>)
 800373c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003740:	61d3      	str	r3, [r2, #28]
 8003742:	4b85      	ldr	r3, [pc, #532]	; (8003958 <HAL_RCC_OscConfig+0x4c4>)
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374a:	60bb      	str	r3, [r7, #8]
 800374c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800374e:	2301      	movs	r3, #1
 8003750:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003752:	4b82      	ldr	r3, [pc, #520]	; (800395c <HAL_RCC_OscConfig+0x4c8>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375a:	2b00      	cmp	r3, #0
 800375c:	d118      	bne.n	8003790 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800375e:	4b7f      	ldr	r3, [pc, #508]	; (800395c <HAL_RCC_OscConfig+0x4c8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a7e      	ldr	r2, [pc, #504]	; (800395c <HAL_RCC_OscConfig+0x4c8>)
 8003764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003768:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800376a:	f7fd fbfd 	bl	8000f68 <HAL_GetTick>
 800376e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003770:	e008      	b.n	8003784 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003772:	f7fd fbf9 	bl	8000f68 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b64      	cmp	r3, #100	; 0x64
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e103      	b.n	800398c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003784:	4b75      	ldr	r3, [pc, #468]	; (800395c <HAL_RCC_OscConfig+0x4c8>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0f0      	beq.n	8003772 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	2b01      	cmp	r3, #1
 8003796:	d106      	bne.n	80037a6 <HAL_RCC_OscConfig+0x312>
 8003798:	4b6f      	ldr	r3, [pc, #444]	; (8003958 <HAL_RCC_OscConfig+0x4c4>)
 800379a:	6a1b      	ldr	r3, [r3, #32]
 800379c:	4a6e      	ldr	r2, [pc, #440]	; (8003958 <HAL_RCC_OscConfig+0x4c4>)
 800379e:	f043 0301 	orr.w	r3, r3, #1
 80037a2:	6213      	str	r3, [r2, #32]
 80037a4:	e02d      	b.n	8003802 <HAL_RCC_OscConfig+0x36e>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10c      	bne.n	80037c8 <HAL_RCC_OscConfig+0x334>
 80037ae:	4b6a      	ldr	r3, [pc, #424]	; (8003958 <HAL_RCC_OscConfig+0x4c4>)
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	4a69      	ldr	r2, [pc, #420]	; (8003958 <HAL_RCC_OscConfig+0x4c4>)
 80037b4:	f023 0301 	bic.w	r3, r3, #1
 80037b8:	6213      	str	r3, [r2, #32]
 80037ba:	4b67      	ldr	r3, [pc, #412]	; (8003958 <HAL_RCC_OscConfig+0x4c4>)
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	4a66      	ldr	r2, [pc, #408]	; (8003958 <HAL_RCC_OscConfig+0x4c4>)
 80037c0:	f023 0304 	bic.w	r3, r3, #4
 80037c4:	6213      	str	r3, [r2, #32]
 80037c6:	e01c      	b.n	8003802 <HAL_RCC_OscConfig+0x36e>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	2b05      	cmp	r3, #5
 80037ce:	d10c      	bne.n	80037ea <HAL_RCC_OscConfig+0x356>
 80037d0:	4b61      	ldr	r3, [pc, #388]	; (8003958 <HAL_RCC_OscConfig+0x4c4>)
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	4a60      	ldr	r2, [pc, #384]	; (8003958 <HAL_RCC_OscConfig+0x4c4>)
 80037d6:	f043 0304 	orr.w	r3, r3, #4
 80037da:	6213      	str	r3, [r2, #32]
 80037dc:	4b5e      	ldr	r3, [pc, #376]	; (8003958 <HAL_RCC_OscConfig+0x4c4>)
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	4a5d      	ldr	r2, [pc, #372]	; (8003958 <HAL_RCC_OscConfig+0x4c4>)
 80037e2:	f043 0301 	orr.w	r3, r3, #1
 80037e6:	6213      	str	r3, [r2, #32]
 80037e8:	e00b      	b.n	8003802 <HAL_RCC_OscConfig+0x36e>
 80037ea:	4b5b      	ldr	r3, [pc, #364]	; (8003958 <HAL_RCC_OscConfig+0x4c4>)
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	4a5a      	ldr	r2, [pc, #360]	; (8003958 <HAL_RCC_OscConfig+0x4c4>)
 80037f0:	f023 0301 	bic.w	r3, r3, #1
 80037f4:	6213      	str	r3, [r2, #32]
 80037f6:	4b58      	ldr	r3, [pc, #352]	; (8003958 <HAL_RCC_OscConfig+0x4c4>)
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	4a57      	ldr	r2, [pc, #348]	; (8003958 <HAL_RCC_OscConfig+0x4c4>)
 80037fc:	f023 0304 	bic.w	r3, r3, #4
 8003800:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d015      	beq.n	8003836 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800380a:	f7fd fbad 	bl	8000f68 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003810:	e00a      	b.n	8003828 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003812:	f7fd fba9 	bl	8000f68 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003820:	4293      	cmp	r3, r2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e0b1      	b.n	800398c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003828:	4b4b      	ldr	r3, [pc, #300]	; (8003958 <HAL_RCC_OscConfig+0x4c4>)
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	f003 0302 	and.w	r3, r3, #2
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0ee      	beq.n	8003812 <HAL_RCC_OscConfig+0x37e>
 8003834:	e014      	b.n	8003860 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003836:	f7fd fb97 	bl	8000f68 <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800383c:	e00a      	b.n	8003854 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800383e:	f7fd fb93 	bl	8000f68 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	f241 3288 	movw	r2, #5000	; 0x1388
 800384c:	4293      	cmp	r3, r2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e09b      	b.n	800398c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003854:	4b40      	ldr	r3, [pc, #256]	; (8003958 <HAL_RCC_OscConfig+0x4c4>)
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	f003 0302 	and.w	r3, r3, #2
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1ee      	bne.n	800383e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003860:	7dfb      	ldrb	r3, [r7, #23]
 8003862:	2b01      	cmp	r3, #1
 8003864:	d105      	bne.n	8003872 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003866:	4b3c      	ldr	r3, [pc, #240]	; (8003958 <HAL_RCC_OscConfig+0x4c4>)
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	4a3b      	ldr	r2, [pc, #236]	; (8003958 <HAL_RCC_OscConfig+0x4c4>)
 800386c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003870:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 8087 	beq.w	800398a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800387c:	4b36      	ldr	r3, [pc, #216]	; (8003958 <HAL_RCC_OscConfig+0x4c4>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f003 030c 	and.w	r3, r3, #12
 8003884:	2b08      	cmp	r3, #8
 8003886:	d061      	beq.n	800394c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	2b02      	cmp	r3, #2
 800388e:	d146      	bne.n	800391e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003890:	4b33      	ldr	r3, [pc, #204]	; (8003960 <HAL_RCC_OscConfig+0x4cc>)
 8003892:	2200      	movs	r2, #0
 8003894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003896:	f7fd fb67 	bl	8000f68 <HAL_GetTick>
 800389a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800389c:	e008      	b.n	80038b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800389e:	f7fd fb63 	bl	8000f68 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e06d      	b.n	800398c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038b0:	4b29      	ldr	r3, [pc, #164]	; (8003958 <HAL_RCC_OscConfig+0x4c4>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1f0      	bne.n	800389e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038c4:	d108      	bne.n	80038d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80038c6:	4b24      	ldr	r3, [pc, #144]	; (8003958 <HAL_RCC_OscConfig+0x4c4>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	4921      	ldr	r1, [pc, #132]	; (8003958 <HAL_RCC_OscConfig+0x4c4>)
 80038d4:	4313      	orrs	r3, r2
 80038d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038d8:	4b1f      	ldr	r3, [pc, #124]	; (8003958 <HAL_RCC_OscConfig+0x4c4>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a19      	ldr	r1, [r3, #32]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	430b      	orrs	r3, r1
 80038ea:	491b      	ldr	r1, [pc, #108]	; (8003958 <HAL_RCC_OscConfig+0x4c4>)
 80038ec:	4313      	orrs	r3, r2
 80038ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038f0:	4b1b      	ldr	r3, [pc, #108]	; (8003960 <HAL_RCC_OscConfig+0x4cc>)
 80038f2:	2201      	movs	r2, #1
 80038f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f6:	f7fd fb37 	bl	8000f68 <HAL_GetTick>
 80038fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038fc:	e008      	b.n	8003910 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038fe:	f7fd fb33 	bl	8000f68 <HAL_GetTick>
 8003902:	4602      	mov	r2, r0
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d901      	bls.n	8003910 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e03d      	b.n	800398c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003910:	4b11      	ldr	r3, [pc, #68]	; (8003958 <HAL_RCC_OscConfig+0x4c4>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d0f0      	beq.n	80038fe <HAL_RCC_OscConfig+0x46a>
 800391c:	e035      	b.n	800398a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800391e:	4b10      	ldr	r3, [pc, #64]	; (8003960 <HAL_RCC_OscConfig+0x4cc>)
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003924:	f7fd fb20 	bl	8000f68 <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800392c:	f7fd fb1c 	bl	8000f68 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e026      	b.n	800398c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800393e:	4b06      	ldr	r3, [pc, #24]	; (8003958 <HAL_RCC_OscConfig+0x4c4>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f0      	bne.n	800392c <HAL_RCC_OscConfig+0x498>
 800394a:	e01e      	b.n	800398a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	69db      	ldr	r3, [r3, #28]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d107      	bne.n	8003964 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e019      	b.n	800398c <HAL_RCC_OscConfig+0x4f8>
 8003958:	40021000 	.word	0x40021000
 800395c:	40007000 	.word	0x40007000
 8003960:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003964:	4b0b      	ldr	r3, [pc, #44]	; (8003994 <HAL_RCC_OscConfig+0x500>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a1b      	ldr	r3, [r3, #32]
 8003974:	429a      	cmp	r2, r3
 8003976:	d106      	bne.n	8003986 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003982:	429a      	cmp	r2, r3
 8003984:	d001      	beq.n	800398a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e000      	b.n	800398c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40021000 	.word	0x40021000

08003998 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e0d0      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039ac:	4b6a      	ldr	r3, [pc, #424]	; (8003b58 <HAL_RCC_ClockConfig+0x1c0>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d910      	bls.n	80039dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ba:	4b67      	ldr	r3, [pc, #412]	; (8003b58 <HAL_RCC_ClockConfig+0x1c0>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f023 0207 	bic.w	r2, r3, #7
 80039c2:	4965      	ldr	r1, [pc, #404]	; (8003b58 <HAL_RCC_ClockConfig+0x1c0>)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ca:	4b63      	ldr	r3, [pc, #396]	; (8003b58 <HAL_RCC_ClockConfig+0x1c0>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0307 	and.w	r3, r3, #7
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d001      	beq.n	80039dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e0b8      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d020      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d005      	beq.n	8003a00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039f4:	4b59      	ldr	r3, [pc, #356]	; (8003b5c <HAL_RCC_ClockConfig+0x1c4>)
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	4a58      	ldr	r2, [pc, #352]	; (8003b5c <HAL_RCC_ClockConfig+0x1c4>)
 80039fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80039fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0308 	and.w	r3, r3, #8
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d005      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a0c:	4b53      	ldr	r3, [pc, #332]	; (8003b5c <HAL_RCC_ClockConfig+0x1c4>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	4a52      	ldr	r2, [pc, #328]	; (8003b5c <HAL_RCC_ClockConfig+0x1c4>)
 8003a12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a18:	4b50      	ldr	r3, [pc, #320]	; (8003b5c <HAL_RCC_ClockConfig+0x1c4>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	494d      	ldr	r1, [pc, #308]	; (8003b5c <HAL_RCC_ClockConfig+0x1c4>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d040      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d107      	bne.n	8003a4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3e:	4b47      	ldr	r3, [pc, #284]	; (8003b5c <HAL_RCC_ClockConfig+0x1c4>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d115      	bne.n	8003a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e07f      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d107      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a56:	4b41      	ldr	r3, [pc, #260]	; (8003b5c <HAL_RCC_ClockConfig+0x1c4>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d109      	bne.n	8003a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e073      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a66:	4b3d      	ldr	r3, [pc, #244]	; (8003b5c <HAL_RCC_ClockConfig+0x1c4>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e06b      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a76:	4b39      	ldr	r3, [pc, #228]	; (8003b5c <HAL_RCC_ClockConfig+0x1c4>)
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	f023 0203 	bic.w	r2, r3, #3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	4936      	ldr	r1, [pc, #216]	; (8003b5c <HAL_RCC_ClockConfig+0x1c4>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a88:	f7fd fa6e 	bl	8000f68 <HAL_GetTick>
 8003a8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a8e:	e00a      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a90:	f7fd fa6a 	bl	8000f68 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e053      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa6:	4b2d      	ldr	r3, [pc, #180]	; (8003b5c <HAL_RCC_ClockConfig+0x1c4>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f003 020c 	and.w	r2, r3, #12
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d1eb      	bne.n	8003a90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ab8:	4b27      	ldr	r3, [pc, #156]	; (8003b58 <HAL_RCC_ClockConfig+0x1c0>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0307 	and.w	r3, r3, #7
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d210      	bcs.n	8003ae8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ac6:	4b24      	ldr	r3, [pc, #144]	; (8003b58 <HAL_RCC_ClockConfig+0x1c0>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f023 0207 	bic.w	r2, r3, #7
 8003ace:	4922      	ldr	r1, [pc, #136]	; (8003b58 <HAL_RCC_ClockConfig+0x1c0>)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ad6:	4b20      	ldr	r3, [pc, #128]	; (8003b58 <HAL_RCC_ClockConfig+0x1c0>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d001      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e032      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d008      	beq.n	8003b06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003af4:	4b19      	ldr	r3, [pc, #100]	; (8003b5c <HAL_RCC_ClockConfig+0x1c4>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	4916      	ldr	r1, [pc, #88]	; (8003b5c <HAL_RCC_ClockConfig+0x1c4>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d009      	beq.n	8003b26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b12:	4b12      	ldr	r3, [pc, #72]	; (8003b5c <HAL_RCC_ClockConfig+0x1c4>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	490e      	ldr	r1, [pc, #56]	; (8003b5c <HAL_RCC_ClockConfig+0x1c4>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b26:	f000 f821 	bl	8003b6c <HAL_RCC_GetSysClockFreq>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	4b0b      	ldr	r3, [pc, #44]	; (8003b5c <HAL_RCC_ClockConfig+0x1c4>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	091b      	lsrs	r3, r3, #4
 8003b32:	f003 030f 	and.w	r3, r3, #15
 8003b36:	490a      	ldr	r1, [pc, #40]	; (8003b60 <HAL_RCC_ClockConfig+0x1c8>)
 8003b38:	5ccb      	ldrb	r3, [r1, r3]
 8003b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b3e:	4a09      	ldr	r2, [pc, #36]	; (8003b64 <HAL_RCC_ClockConfig+0x1cc>)
 8003b40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b42:	4b09      	ldr	r3, [pc, #36]	; (8003b68 <HAL_RCC_ClockConfig+0x1d0>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7fd f9cc 	bl	8000ee4 <HAL_InitTick>

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40022000 	.word	0x40022000
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	080057d4 	.word	0x080057d4
 8003b64:	20000018 	.word	0x20000018
 8003b68:	2000001c 	.word	0x2000001c

08003b6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	60fb      	str	r3, [r7, #12]
 8003b76:	2300      	movs	r3, #0
 8003b78:	60bb      	str	r3, [r7, #8]
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	617b      	str	r3, [r7, #20]
 8003b7e:	2300      	movs	r3, #0
 8003b80:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003b82:	2300      	movs	r3, #0
 8003b84:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b86:	4b1e      	ldr	r3, [pc, #120]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f003 030c 	and.w	r3, r3, #12
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d002      	beq.n	8003b9c <HAL_RCC_GetSysClockFreq+0x30>
 8003b96:	2b08      	cmp	r3, #8
 8003b98:	d003      	beq.n	8003ba2 <HAL_RCC_GetSysClockFreq+0x36>
 8003b9a:	e027      	b.n	8003bec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b9c:	4b19      	ldr	r3, [pc, #100]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b9e:	613b      	str	r3, [r7, #16]
      break;
 8003ba0:	e027      	b.n	8003bf2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	0c9b      	lsrs	r3, r3, #18
 8003ba6:	f003 030f 	and.w	r3, r3, #15
 8003baa:	4a17      	ldr	r2, [pc, #92]	; (8003c08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003bac:	5cd3      	ldrb	r3, [r2, r3]
 8003bae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d010      	beq.n	8003bdc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bba:	4b11      	ldr	r3, [pc, #68]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x94>)
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	0c5b      	lsrs	r3, r3, #17
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	4a11      	ldr	r2, [pc, #68]	; (8003c0c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003bc6:	5cd3      	ldrb	r3, [r2, r3]
 8003bc8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a0d      	ldr	r2, [pc, #52]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bce:	fb03 f202 	mul.w	r2, r3, r2
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd8:	617b      	str	r3, [r7, #20]
 8003bda:	e004      	b.n	8003be6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a0c      	ldr	r2, [pc, #48]	; (8003c10 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003be0:	fb02 f303 	mul.w	r3, r2, r3
 8003be4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	613b      	str	r3, [r7, #16]
      break;
 8003bea:	e002      	b.n	8003bf2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003bec:	4b05      	ldr	r3, [pc, #20]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bee:	613b      	str	r3, [r7, #16]
      break;
 8003bf0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bf2:	693b      	ldr	r3, [r7, #16]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	371c      	adds	r7, #28
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bc80      	pop	{r7}
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	40021000 	.word	0x40021000
 8003c04:	007a1200 	.word	0x007a1200
 8003c08:	080057ec 	.word	0x080057ec
 8003c0c:	080057fc 	.word	0x080057fc
 8003c10:	003d0900 	.word	0x003d0900

08003c14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c18:	4b02      	ldr	r3, [pc, #8]	; (8003c24 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bc80      	pop	{r7}
 8003c22:	4770      	bx	lr
 8003c24:	20000018 	.word	0x20000018

08003c28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c2c:	f7ff fff2 	bl	8003c14 <HAL_RCC_GetHCLKFreq>
 8003c30:	4602      	mov	r2, r0
 8003c32:	4b05      	ldr	r3, [pc, #20]	; (8003c48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	0a1b      	lsrs	r3, r3, #8
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	4903      	ldr	r1, [pc, #12]	; (8003c4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c3e:	5ccb      	ldrb	r3, [r1, r3]
 8003c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	080057e4 	.word	0x080057e4

08003c50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c54:	f7ff ffde 	bl	8003c14 <HAL_RCC_GetHCLKFreq>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	4b05      	ldr	r3, [pc, #20]	; (8003c70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	0adb      	lsrs	r3, r3, #11
 8003c60:	f003 0307 	and.w	r3, r3, #7
 8003c64:	4903      	ldr	r1, [pc, #12]	; (8003c74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c66:	5ccb      	ldrb	r3, [r1, r3]
 8003c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40021000 	.word	0x40021000
 8003c74:	080057e4 	.word	0x080057e4

08003c78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c80:	4b0a      	ldr	r3, [pc, #40]	; (8003cac <RCC_Delay+0x34>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a0a      	ldr	r2, [pc, #40]	; (8003cb0 <RCC_Delay+0x38>)
 8003c86:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8a:	0a5b      	lsrs	r3, r3, #9
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	fb02 f303 	mul.w	r3, r2, r3
 8003c92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c94:	bf00      	nop
  }
  while (Delay --);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	1e5a      	subs	r2, r3, #1
 8003c9a:	60fa      	str	r2, [r7, #12]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1f9      	bne.n	8003c94 <RCC_Delay+0x1c>
}
 8003ca0:	bf00      	nop
 8003ca2:	bf00      	nop
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bc80      	pop	{r7}
 8003caa:	4770      	bx	lr
 8003cac:	20000018 	.word	0x20000018
 8003cb0:	10624dd3 	.word	0x10624dd3

08003cb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e07e      	b.n	8003dc4 <HAL_SPI_Init+0x110>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d108      	bne.n	8003ce0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cd6:	d009      	beq.n	8003cec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	61da      	str	r2, [r3, #28]
 8003cde:	e005      	b.n	8003cec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d106      	bne.n	8003d06 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7fc ffa3 	bl	8000c4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2202      	movs	r2, #2
 8003d0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d1c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d2e:	431a      	orrs	r2, r3
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d38:	431a      	orrs	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	691b      	ldr	r3, [r3, #16]
 8003d3e:	f003 0302 	and.w	r3, r3, #2
 8003d42:	431a      	orrs	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	f003 0301 	and.w	r3, r3, #1
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d56:	431a      	orrs	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	69db      	ldr	r3, [r3, #28]
 8003d5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d60:	431a      	orrs	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d6a:	ea42 0103 	orr.w	r1, r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d72:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	0c1a      	lsrs	r2, r3, #16
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f002 0204 	and.w	r2, r2, #4
 8003d8c:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d96:	d105      	bne.n	8003da4 <HAL_SPI_Init+0xf0>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	b292      	uxth	r2, r2
 8003da2:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	69da      	ldr	r2, [r3, #28]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003db2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2200      	movs	r2, #0
 8003db8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3708      	adds	r7, #8
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b088      	sub	sp, #32
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	603b      	str	r3, [r7, #0]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d101      	bne.n	8003dee <HAL_SPI_Transmit+0x22>
 8003dea:	2302      	movs	r3, #2
 8003dec:	e14f      	b.n	800408e <HAL_SPI_Transmit+0x2c2>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2201      	movs	r2, #1
 8003df2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003df6:	f7fd f8b7 	bl	8000f68 <HAL_GetTick>
 8003dfa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003dfc:	88fb      	ldrh	r3, [r7, #6]
 8003dfe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d002      	beq.n	8003e12 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e10:	e138      	b.n	8004084 <HAL_SPI_Transmit+0x2b8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d002      	beq.n	8003e1e <HAL_SPI_Transmit+0x52>
 8003e18:	88fb      	ldrh	r3, [r7, #6]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d102      	bne.n	8003e24 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003e22:	e12f      	b.n	8004084 <HAL_SPI_Transmit+0x2b8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2203      	movs	r2, #3
 8003e28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	88fa      	ldrh	r2, [r7, #6]
 8003e3c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	88fa      	ldrh	r2, [r7, #6]
 8003e42:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e6a:	d10f      	bne.n	8003e8c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e7a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e8a:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e94:	d10f      	bne.n	8003eb6 <HAL_SPI_Transmit+0xea>
  {
    SPI_RESET_CRC(hspi);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ea4:	601a      	str	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003eb4:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec0:	2b40      	cmp	r3, #64	; 0x40
 8003ec2:	d007      	beq.n	8003ed4 <HAL_SPI_Transmit+0x108>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ed2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003edc:	d14f      	bne.n	8003f7e <HAL_SPI_Transmit+0x1b2>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d002      	beq.n	8003eec <HAL_SPI_Transmit+0x120>
 8003ee6:	8afb      	ldrh	r3, [r7, #22]
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d142      	bne.n	8003f72 <HAL_SPI_Transmit+0x1a6>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef0:	881a      	ldrh	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efc:	1c9a      	adds	r2, r3, #2
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f10:	e02f      	b.n	8003f72 <HAL_SPI_Transmit+0x1a6>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d112      	bne.n	8003f46 <HAL_SPI_Transmit+0x17a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f24:	881a      	ldrh	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f30:	1c9a      	adds	r2, r3, #2
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	86da      	strh	r2, [r3, #54]	; 0x36
 8003f44:	e015      	b.n	8003f72 <HAL_SPI_Transmit+0x1a6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f46:	f7fd f80f 	bl	8000f68 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d803      	bhi.n	8003f5e <HAL_SPI_Transmit+0x192>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5c:	d102      	bne.n	8003f64 <HAL_SPI_Transmit+0x198>
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d106      	bne.n	8003f72 <HAL_SPI_Transmit+0x1a6>
        {
          errorcode = HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003f70:	e088      	b.n	8004084 <HAL_SPI_Transmit+0x2b8>
    while (hspi->TxXferCount > 0U)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d1ca      	bne.n	8003f12 <HAL_SPI_Transmit+0x146>
 8003f7c:	e050      	b.n	8004020 <HAL_SPI_Transmit+0x254>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <HAL_SPI_Transmit+0x1c0>
 8003f86:	8afb      	ldrh	r3, [r7, #22]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d144      	bne.n	8004016 <HAL_SPI_Transmit+0x24a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	330c      	adds	r3, #12
 8003f96:	7812      	ldrb	r2, [r2, #0]
 8003f98:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9e:	1c5a      	adds	r2, r3, #1
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	3b01      	subs	r3, #1
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003fb2:	e030      	b.n	8004016 <HAL_SPI_Transmit+0x24a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d113      	bne.n	8003fea <HAL_SPI_Transmit+0x21e>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	330c      	adds	r3, #12
 8003fcc:	7812      	ldrb	r2, [r2, #0]
 8003fce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd4:	1c5a      	adds	r2, r3, #1
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	86da      	strh	r2, [r3, #54]	; 0x36
 8003fe8:	e015      	b.n	8004016 <HAL_SPI_Transmit+0x24a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fea:	f7fc ffbd 	bl	8000f68 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d803      	bhi.n	8004002 <HAL_SPI_Transmit+0x236>
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004000:	d102      	bne.n	8004008 <HAL_SPI_Transmit+0x23c>
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d106      	bne.n	8004016 <HAL_SPI_Transmit+0x24a>
        {
          errorcode = HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004014:	e036      	b.n	8004084 <HAL_SPI_Transmit+0x2b8>
    while (hspi->TxXferCount > 0U)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800401a:	b29b      	uxth	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1c9      	bne.n	8003fb4 <HAL_SPI_Transmit+0x1e8>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004024:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004028:	d107      	bne.n	800403a <HAL_SPI_Transmit+0x26e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004038:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	6839      	ldr	r1, [r7, #0]
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 fd00 	bl	8004a44 <SPI_EndRxTxTransaction>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2220      	movs	r2, #32
 800404e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10a      	bne.n	800406e <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004058:	2300      	movs	r3, #0
 800405a:	613b      	str	r3, [r7, #16]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	613b      	str	r3, [r7, #16]
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	613b      	str	r3, [r7, #16]
 800406c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004072:	2b00      	cmp	r3, #0
 8004074:	d002      	beq.n	800407c <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	77fb      	strb	r3, [r7, #31]
 800407a:	e003      	b.n	8004084 <HAL_SPI_Transmit+0x2b8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800408c:	7ffb      	ldrb	r3, [r7, #31]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3720      	adds	r7, #32
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}

08004096 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004096:	b580      	push	{r7, lr}
 8004098:	b08a      	sub	sp, #40	; 0x28
 800409a:	af02      	add	r7, sp, #8
 800409c:	60f8      	str	r0, [r7, #12]
 800409e:	60b9      	str	r1, [r7, #8]
 80040a0:	603b      	str	r3, [r7, #0]
 80040a2:	4613      	mov	r3, r2
 80040a4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 80040a6:	2300      	movs	r3, #0
 80040a8:	617b      	str	r3, [r7, #20]
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80040aa:	2300      	movs	r3, #0
 80040ac:	77fb      	strb	r3, [r7, #31]

  if (hspi->State != HAL_SPI_STATE_READY)
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d002      	beq.n	80040c0 <HAL_SPI_Receive+0x2a>
  {
    errorcode = HAL_BUSY;
 80040ba:	2302      	movs	r3, #2
 80040bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80040be:	e199      	b.n	80043f4 <HAL_SPI_Receive+0x35e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040c8:	d112      	bne.n	80040f0 <HAL_SPI_Receive+0x5a>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10e      	bne.n	80040f0 <HAL_SPI_Receive+0x5a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2204      	movs	r2, #4
 80040d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80040da:	88fa      	ldrh	r2, [r7, #6]
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	4613      	mov	r3, r2
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	68b9      	ldr	r1, [r7, #8]
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 f98d 	bl	8004406 <HAL_SPI_TransmitReceive>
 80040ec:	4603      	mov	r3, r0
 80040ee:	e186      	b.n	80043fe <HAL_SPI_Receive+0x368>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d101      	bne.n	80040fe <HAL_SPI_Receive+0x68>
 80040fa:	2302      	movs	r3, #2
 80040fc:	e17f      	b.n	80043fe <HAL_SPI_Receive+0x368>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004106:	f7fc ff2f 	bl	8000f68 <HAL_GetTick>
 800410a:	61b8      	str	r0, [r7, #24]

  if ((pData == NULL) || (Size == 0U))
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d002      	beq.n	8004118 <HAL_SPI_Receive+0x82>
 8004112:	88fb      	ldrh	r3, [r7, #6]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d102      	bne.n	800411e <HAL_SPI_Receive+0x88>
  {
    errorcode = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800411c:	e16a      	b.n	80043f4 <HAL_SPI_Receive+0x35e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2204      	movs	r2, #4
 8004122:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	68ba      	ldr	r2, [r7, #8]
 8004130:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	88fa      	ldrh	r2, [r7, #6]
 8004136:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	88fa      	ldrh	r2, [r7, #6]
 800413c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2200      	movs	r2, #0
 8004148:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004160:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004164:	d116      	bne.n	8004194 <HAL_SPI_Receive+0xfe>
  {
    SPI_RESET_CRC(hspi);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004174:	601a      	str	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004184:	601a      	str	r2, [r3, #0]
    /* this is done to handle the CRCNEXT before the latest data */
    hspi->RxXferCount--;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800418a:	b29b      	uxth	r3, r3
 800418c:	3b01      	subs	r3, #1
 800418e:	b29a      	uxth	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	87da      	strh	r2, [r3, #62]	; 0x3e
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800419c:	d10f      	bne.n	80041be <HAL_SPI_Receive+0x128>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80041bc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c8:	2b40      	cmp	r3, #64	; 0x40
 80041ca:	d007      	beq.n	80041dc <HAL_SPI_Receive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80041da:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d16a      	bne.n	80042ba <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80041e4:	e032      	b.n	800424c <HAL_SPI_Receive+0x1b6>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d115      	bne.n	8004220 <HAL_SPI_Receive+0x18a>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f103 020c 	add.w	r2, r3, #12
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004200:	7812      	ldrb	r2, [r2, #0]
 8004202:	b2d2      	uxtb	r2, r2
 8004204:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420a:	1c5a      	adds	r2, r3, #1
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004214:	b29b      	uxth	r3, r3
 8004216:	3b01      	subs	r3, #1
 8004218:	b29a      	uxth	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800421e:	e015      	b.n	800424c <HAL_SPI_Receive+0x1b6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004220:	f7fc fea2 	bl	8000f68 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	429a      	cmp	r2, r3
 800422e:	d803      	bhi.n	8004238 <HAL_SPI_Receive+0x1a2>
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004236:	d102      	bne.n	800423e <HAL_SPI_Receive+0x1a8>
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d106      	bne.n	800424c <HAL_SPI_Receive+0x1b6>
        {
          errorcode = HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800424a:	e0d3      	b.n	80043f4 <HAL_SPI_Receive+0x35e>
    while (hspi->RxXferCount > 0U)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004250:	b29b      	uxth	r3, r3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1c7      	bne.n	80041e6 <HAL_SPI_Receive+0x150>
 8004256:	e035      	b.n	80042c4 <HAL_SPI_Receive+0x22e>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b01      	cmp	r3, #1
 8004264:	d113      	bne.n	800428e <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68da      	ldr	r2, [r3, #12]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004270:	b292      	uxth	r2, r2
 8004272:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004278:	1c9a      	adds	r2, r3, #2
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004282:	b29b      	uxth	r3, r3
 8004284:	3b01      	subs	r3, #1
 8004286:	b29a      	uxth	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800428c:	e015      	b.n	80042ba <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800428e:	f7fc fe6b 	bl	8000f68 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	429a      	cmp	r2, r3
 800429c:	d803      	bhi.n	80042a6 <HAL_SPI_Receive+0x210>
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a4:	d102      	bne.n	80042ac <HAL_SPI_Receive+0x216>
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d106      	bne.n	80042ba <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80042b8:	e09c      	b.n	80043f4 <HAL_SPI_Receive+0x35e>
    while (hspi->RxXferCount > 0U)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042be:	b29b      	uxth	r3, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1c9      	bne.n	8004258 <HAL_SPI_Receive+0x1c2>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Handle the CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042cc:	d153      	bne.n	8004376 <HAL_SPI_Receive+0x2e0>
  {
    /* freeze the CRC before the latest data */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042dc:	601a      	str	r2, [r3, #0]

    /* Check if CRCNEXT is well reset by hardware */
    if (READ_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d007      	beq.n	80042fc <HAL_SPI_Receive+0x266>
    {
      /* Workaround to force CRCNEXT bit to zero in case of CRCNEXT is not reset automatically by hardware */
      CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80042fa:	601a      	str	r2, [r3, #0]
    }
    /* Read the latest data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	2201      	movs	r2, #1
 8004304:	2101      	movs	r1, #1
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 fac2 	bl	8004890 <SPI_WaitFlagStateUntilTimeout>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d002      	beq.n	8004318 <HAL_SPI_Receive+0x282>
    {
      /* the latest data has not been received */
      errorcode = HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	77fb      	strb	r3, [r7, #31]
      goto error;
 8004316:	e06d      	b.n	80043f4 <HAL_SPI_Receive+0x35e>
    }

    /* Receive last data in 16 Bit mode */
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004320:	d107      	bne.n	8004332 <HAL_SPI_Receive+0x29c>
    {
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68da      	ldr	r2, [r3, #12]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800432c:	b292      	uxth	r2, r2
 800432e:	801a      	strh	r2, [r3, #0]
 8004330:	e008      	b.n	8004344 <HAL_SPI_Receive+0x2ae>
    }
    /* Receive last data in 8 Bit mode */
    else
    {
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f103 020c 	add.w	r2, r3, #12
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800433e:	7812      	ldrb	r2, [r2, #0]
 8004340:	b2d2      	uxtb	r2, r2
 8004342:	701a      	strb	r2, [r3, #0]
    }

    /* Wait the CRC data */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	2201      	movs	r2, #1
 800434c:	2101      	movs	r1, #1
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 fa9e 	bl	8004890 <SPI_WaitFlagStateUntilTimeout>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d008      	beq.n	800436c <HAL_SPI_Receive+0x2d6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435e:	f043 0202 	orr.w	r2, r3, #2
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	77fb      	strb	r3, [r7, #31]
      goto error;
 800436a:	e043      	b.n	80043f4 <HAL_SPI_Receive+0x35e>
    }

    /* Read CRC to Flush DR and RXNE flag */
    tmpreg = READ_REG(hspi->Instance->DR);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	617b      	str	r3, [r7, #20]
    /* To avoid GCC warning */
    UNUSED(tmpreg);
 8004374:	697b      	ldr	r3, [r7, #20]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	6839      	ldr	r1, [r7, #0]
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 fb10 	bl	80049a0 <SPI_EndRxTransaction>
 8004380:	4603      	mov	r3, r0
 8004382:	2b00      	cmp	r3, #0
 8004384:	d002      	beq.n	800438c <HAL_SPI_Receive+0x2f6>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2220      	movs	r2, #32
 800438a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if (USE_SPI_CRC != 0U)
  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f003 0310 	and.w	r3, r3, #16
 8004396:	2b10      	cmp	r3, #16
 8004398:	d121      	bne.n	80043de <HAL_SPI_Receive+0x348>
  {
    /* Check if CRC error is valid or not (workaround to be applied or not) */
    if (SPI_ISCRCErrorValid(hspi) == SPI_VALID_CRC_ERROR)
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 fb70 	bl	8004a80 <SPI_ISCRCErrorValid>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d116      	bne.n	80043d4 <HAL_SPI_Receive+0x33e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043aa:	f043 0202 	orr.w	r2, r3, #2
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Reset CRC Calculation */
      SPI_RESET_CRC(hspi);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043c0:	601a      	str	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	e004      	b.n	80043de <HAL_SPI_Receive+0x348>
    }
    else
    {
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80043dc:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d002      	beq.n	80043ec <HAL_SPI_Receive+0x356>
  {
    errorcode = HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	77fb      	strb	r3, [r7, #31]
 80043ea:	e003      	b.n	80043f4 <HAL_SPI_Receive+0x35e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80043fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3720      	adds	r7, #32
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b08e      	sub	sp, #56	; 0x38
 800440a:	af02      	add	r7, sp, #8
 800440c:	60f8      	str	r0, [r7, #12]
 800440e:	60b9      	str	r1, [r7, #8]
 8004410:	607a      	str	r2, [r7, #4]
 8004412:	807b      	strh	r3, [r7, #2]
  uint16_t             initial_TxXferCount;
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
 8004414:	2300      	movs	r3, #0
 8004416:	617b      	str	r3, [r7, #20]
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004418:	2301      	movs	r3, #1
 800441a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800441c:	2300      	movs	r3, #0
 800441e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004428:	2b01      	cmp	r3, #1
 800442a:	d101      	bne.n	8004430 <HAL_SPI_TransmitReceive+0x2a>
 800442c:	2302      	movs	r3, #2
 800442e:	e21e      	b.n	800486e <HAL_SPI_TransmitReceive+0x468>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004438:	f7fc fd96 	bl	8000f68 <HAL_GetTick>
 800443c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004444:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800444e:	887b      	ldrh	r3, [r7, #2]
 8004450:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004452:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004456:	2b01      	cmp	r3, #1
 8004458:	d00f      	beq.n	800447a <HAL_SPI_TransmitReceive+0x74>
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004460:	d107      	bne.n	8004472 <HAL_SPI_TransmitReceive+0x6c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d103      	bne.n	8004472 <HAL_SPI_TransmitReceive+0x6c>
 800446a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800446e:	2b04      	cmp	r3, #4
 8004470:	d003      	beq.n	800447a <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8004472:	2302      	movs	r3, #2
 8004474:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004478:	e1f3      	b.n	8004862 <HAL_SPI_TransmitReceive+0x45c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d005      	beq.n	800448c <HAL_SPI_TransmitReceive+0x86>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <HAL_SPI_TransmitReceive+0x86>
 8004486:	887b      	ldrh	r3, [r7, #2]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d103      	bne.n	8004494 <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004492:	e1e6      	b.n	8004862 <HAL_SPI_TransmitReceive+0x45c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b04      	cmp	r3, #4
 800449e:	d003      	beq.n	80044a8 <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2205      	movs	r2, #5
 80044a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	887a      	ldrh	r2, [r7, #2]
 80044b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	887a      	ldrh	r2, [r7, #2]
 80044be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	887a      	ldrh	r2, [r7, #2]
 80044ca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	887a      	ldrh	r2, [r7, #2]
 80044d0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	645a      	str	r2, [r3, #68]	; 0x44

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044e6:	d10f      	bne.n	8004508 <HAL_SPI_TransmitReceive+0x102>
  {
    SPI_RESET_CRC(hspi);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044f6:	601a      	str	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004506:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004512:	2b40      	cmp	r3, #64	; 0x40
 8004514:	d007      	beq.n	8004526 <HAL_SPI_TransmitReceive+0x120>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004524:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800452e:	f040 808f 	bne.w	8004650 <HAL_SPI_TransmitReceive+0x24a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d002      	beq.n	8004540 <HAL_SPI_TransmitReceive+0x13a>
 800453a:	8b7b      	ldrh	r3, [r7, #26]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d17c      	bne.n	800463a <HAL_SPI_TransmitReceive+0x234>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004544:	881a      	ldrh	r2, [r3, #0]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004550:	1c9a      	adds	r2, r3, #2
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800455a:	b29b      	uxth	r3, r3
 800455c:	3b01      	subs	r3, #1
 800455e:	b29a      	uxth	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004564:	e069      	b.n	800463a <HAL_SPI_TransmitReceive+0x234>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b02      	cmp	r3, #2
 8004572:	d12d      	bne.n	80045d0 <HAL_SPI_TransmitReceive+0x1ca>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004578:	b29b      	uxth	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d028      	beq.n	80045d0 <HAL_SPI_TransmitReceive+0x1ca>
 800457e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004580:	2b01      	cmp	r3, #1
 8004582:	d125      	bne.n	80045d0 <HAL_SPI_TransmitReceive+0x1ca>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004588:	881a      	ldrh	r2, [r3, #0]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004594:	1c9a      	adds	r2, r3, #2
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800459e:	b29b      	uxth	r3, r3
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045a8:	2300      	movs	r3, #0
 80045aa:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045b0:	b29b      	uxth	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10c      	bne.n	80045d0 <HAL_SPI_TransmitReceive+0x1ca>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045be:	d107      	bne.n	80045d0 <HAL_SPI_TransmitReceive+0x1ca>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045ce:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d119      	bne.n	8004612 <HAL_SPI_TransmitReceive+0x20c>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d014      	beq.n	8004612 <HAL_SPI_TransmitReceive+0x20c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68da      	ldr	r2, [r3, #12]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f2:	b292      	uxth	r2, r2
 80045f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fa:	1c9a      	adds	r2, r3, #2
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004604:	b29b      	uxth	r3, r3
 8004606:	3b01      	subs	r3, #1
 8004608:	b29a      	uxth	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800460e:	2301      	movs	r3, #1
 8004610:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004612:	f7fc fca9 	bl	8000f68 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800461e:	429a      	cmp	r2, r3
 8004620:	d80b      	bhi.n	800463a <HAL_SPI_TransmitReceive+0x234>
 8004622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004628:	d007      	beq.n	800463a <HAL_SPI_TransmitReceive+0x234>
      {
        errorcode = HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004638:	e113      	b.n	8004862 <HAL_SPI_TransmitReceive+0x45c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800463e:	b29b      	uxth	r3, r3
 8004640:	2b00      	cmp	r3, #0
 8004642:	d190      	bne.n	8004566 <HAL_SPI_TransmitReceive+0x160>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004648:	b29b      	uxth	r3, r3
 800464a:	2b00      	cmp	r3, #0
 800464c:	d18b      	bne.n	8004566 <HAL_SPI_TransmitReceive+0x160>
 800464e:	e093      	b.n	8004778 <HAL_SPI_TransmitReceive+0x372>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d003      	beq.n	8004660 <HAL_SPI_TransmitReceive+0x25a>
 8004658:	8b7b      	ldrh	r3, [r7, #26]
 800465a:	2b01      	cmp	r3, #1
 800465c:	f040 8082 	bne.w	8004764 <HAL_SPI_TransmitReceive+0x35e>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	330c      	adds	r3, #12
 800466a:	7812      	ldrb	r2, [r2, #0]
 800466c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004672:	1c5a      	adds	r2, r3, #1
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800467c:	b29b      	uxth	r3, r3
 800467e:	3b01      	subs	r3, #1
 8004680:	b29a      	uxth	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004686:	e06d      	b.n	8004764 <HAL_SPI_TransmitReceive+0x35e>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b02      	cmp	r3, #2
 8004694:	d12e      	bne.n	80046f4 <HAL_SPI_TransmitReceive+0x2ee>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800469a:	b29b      	uxth	r3, r3
 800469c:	2b00      	cmp	r3, #0
 800469e:	d029      	beq.n	80046f4 <HAL_SPI_TransmitReceive+0x2ee>
 80046a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d126      	bne.n	80046f4 <HAL_SPI_TransmitReceive+0x2ee>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	330c      	adds	r3, #12
 80046b0:	7812      	ldrb	r2, [r2, #0]
 80046b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b8:	1c5a      	adds	r2, r3, #1
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80046cc:	2300      	movs	r3, #0
 80046ce:	62fb      	str	r3, [r7, #44]	; 0x2c

#if (USE_SPI_CRC != 0U)
        /* Enable CRC Transmission */
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10c      	bne.n	80046f4 <HAL_SPI_TransmitReceive+0x2ee>
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046e2:	d107      	bne.n	80046f4 <HAL_SPI_TransmitReceive+0x2ee>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80046f2:	601a      	str	r2, [r3, #0]
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d119      	bne.n	8004736 <HAL_SPI_TransmitReceive+0x330>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004706:	b29b      	uxth	r3, r3
 8004708:	2b00      	cmp	r3, #0
 800470a:	d014      	beq.n	8004736 <HAL_SPI_TransmitReceive+0x330>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68da      	ldr	r2, [r3, #12]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004716:	b2d2      	uxtb	r2, r2
 8004718:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471e:	1c5a      	adds	r2, r3, #1
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004728:	b29b      	uxth	r3, r3
 800472a:	3b01      	subs	r3, #1
 800472c:	b29a      	uxth	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004732:	2301      	movs	r3, #1
 8004734:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004736:	f7fc fc17 	bl	8000f68 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004742:	429a      	cmp	r2, r3
 8004744:	d803      	bhi.n	800474e <HAL_SPI_TransmitReceive+0x348>
 8004746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474c:	d102      	bne.n	8004754 <HAL_SPI_TransmitReceive+0x34e>
 800474e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004750:	2b00      	cmp	r3, #0
 8004752:	d107      	bne.n	8004764 <HAL_SPI_TransmitReceive+0x35e>
      {
        errorcode = HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8004762:	e07e      	b.n	8004862 <HAL_SPI_TransmitReceive+0x45c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004768:	b29b      	uxth	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d18c      	bne.n	8004688 <HAL_SPI_TransmitReceive+0x282>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004772:	b29b      	uxth	r3, r3
 8004774:	2b00      	cmp	r3, #0
 8004776:	d187      	bne.n	8004688 <HAL_SPI_TransmitReceive+0x282>
    }
  }

#if (USE_SPI_CRC != 0U)
  /* Read CRC from DR to close CRC calculation process */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800477c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004780:	d119      	bne.n	80047b6 <HAL_SPI_TransmitReceive+0x3b0>
  {
    /* Wait until TXE flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	9300      	str	r3, [sp, #0]
 8004786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004788:	2201      	movs	r2, #1
 800478a:	2101      	movs	r1, #1
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f000 f87f 	bl	8004890 <SPI_WaitFlagStateUntilTimeout>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d009      	beq.n	80047ac <HAL_SPI_TransmitReceive+0x3a6>
    {
      /* Error on the CRC reception */
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800479c:	f043 0202 	orr.w	r2, r3, #2
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
      goto error;
 80047aa:	e05a      	b.n	8004862 <HAL_SPI_TransmitReceive+0x45c>
    }
    /* Read CRC */
    tmpreg = READ_REG(hspi->Instance->DR);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	617b      	str	r3, [r7, #20]
    /* To avoid GCC warning */
    UNUSED(tmpreg);
 80047b4:	697b      	ldr	r3, [r7, #20]
  }

  /* Check if CRC error occurred */
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f003 0310 	and.w	r3, r3, #16
 80047c0:	2b10      	cmp	r3, #16
 80047c2:	d124      	bne.n	800480e <HAL_SPI_TransmitReceive+0x408>
  {
    /* Check if CRC error is valid or not (workaround to be applied or not) */
    if (SPI_ISCRCErrorValid(hspi) == SPI_VALID_CRC_ERROR)
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f000 f95b 	bl	8004a80 <SPI_ISCRCErrorValid>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d119      	bne.n	8004804 <HAL_SPI_TransmitReceive+0x3fe>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047d4:	f043 0202 	orr.w	r2, r3, #2
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	655a      	str	r2, [r3, #84]	; 0x54

      /* Reset CRC Calculation */
      SPI_RESET_CRC(hspi);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047fa:	601a      	str	r2, [r3, #0]

      errorcode = HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004802:	e004      	b.n	800480e <HAL_SPI_TransmitReceive+0x408>
    }
    else
    {
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800480c:	609a      	str	r2, [r3, #8]
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800480e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004810:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 f916 	bl	8004a44 <SPI_EndRxTxTransaction>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d006      	beq.n	800482c <HAL_SPI_TransmitReceive+0x426>
  {
    errorcode = HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2220      	movs	r2, #32
 8004828:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800482a:	e01a      	b.n	8004862 <HAL_SPI_TransmitReceive+0x45c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10a      	bne.n	800484a <HAL_SPI_TransmitReceive+0x444>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004834:	2300      	movs	r3, #0
 8004836:	613b      	str	r3, [r7, #16]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	613b      	str	r3, [r7, #16]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	613b      	str	r3, [r7, #16]
 8004848:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800484e:	2b00      	cmp	r3, #0
 8004850:	d003      	beq.n	800485a <HAL_SPI_TransmitReceive+0x454>
  {
    errorcode = HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004858:	e003      	b.n	8004862 <HAL_SPI_TransmitReceive+0x45c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800486a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800486e:	4618      	mov	r0, r3
 8004870:	3730      	adds	r7, #48	; 0x30
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004876:	b480      	push	{r7}
 8004878:	b083      	sub	sp, #12
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004884:	b2db      	uxtb	r3, r3
}
 8004886:	4618      	mov	r0, r3
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	bc80      	pop	{r7}
 800488e:	4770      	bx	lr

08004890 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b088      	sub	sp, #32
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	603b      	str	r3, [r7, #0]
 800489c:	4613      	mov	r3, r2
 800489e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80048a0:	f7fc fb62 	bl	8000f68 <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a8:	1a9b      	subs	r3, r3, r2
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	4413      	add	r3, r2
 80048ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80048b0:	f7fc fb5a 	bl	8000f68 <HAL_GetTick>
 80048b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80048b6:	4b39      	ldr	r3, [pc, #228]	; (800499c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	015b      	lsls	r3, r3, #5
 80048bc:	0d1b      	lsrs	r3, r3, #20
 80048be:	69fa      	ldr	r2, [r7, #28]
 80048c0:	fb02 f303 	mul.w	r3, r2, r3
 80048c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048c6:	e054      	b.n	8004972 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ce:	d050      	beq.n	8004972 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80048d0:	f7fc fb4a 	bl	8000f68 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	69fa      	ldr	r2, [r7, #28]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d902      	bls.n	80048e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d13d      	bne.n	8004962 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	685a      	ldr	r2, [r3, #4]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80048f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048fe:	d111      	bne.n	8004924 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004908:	d004      	beq.n	8004914 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004912:	d107      	bne.n	8004924 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004922:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004928:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800492c:	d10f      	bne.n	800494e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800493c:	601a      	str	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800494c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e017      	b.n	8004992 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004968:	2300      	movs	r3, #0
 800496a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	3b01      	subs	r3, #1
 8004970:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	4013      	ands	r3, r2
 800497c:	68ba      	ldr	r2, [r7, #8]
 800497e:	429a      	cmp	r2, r3
 8004980:	bf0c      	ite	eq
 8004982:	2301      	moveq	r3, #1
 8004984:	2300      	movne	r3, #0
 8004986:	b2db      	uxtb	r3, r3
 8004988:	461a      	mov	r2, r3
 800498a:	79fb      	ldrb	r3, [r7, #7]
 800498c:	429a      	cmp	r2, r3
 800498e:	d19b      	bne.n	80048c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3720      	adds	r7, #32
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	20000018 	.word	0x20000018

080049a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af02      	add	r7, sp, #8
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049b4:	d111      	bne.n	80049da <SPI_EndRxTransaction+0x3a>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049be:	d004      	beq.n	80049ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049c8:	d107      	bne.n	80049da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049d8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049e2:	d117      	bne.n	8004a14 <SPI_EndRxTransaction+0x74>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049ec:	d112      	bne.n	8004a14 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	9300      	str	r3, [sp, #0]
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2200      	movs	r2, #0
 80049f6:	2101      	movs	r1, #1
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	f7ff ff49 	bl	8004890 <SPI_WaitFlagStateUntilTimeout>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d01a      	beq.n	8004a3a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a08:	f043 0220 	orr.w	r2, r3, #32
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a10:	2303      	movs	r3, #3
 8004a12:	e013      	b.n	8004a3c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	9300      	str	r3, [sp, #0]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	2180      	movs	r1, #128	; 0x80
 8004a1e:	68f8      	ldr	r0, [r7, #12]
 8004a20:	f7ff ff36 	bl	8004890 <SPI_WaitFlagStateUntilTimeout>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d007      	beq.n	8004a3a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a2e:	f043 0220 	orr.w	r2, r3, #32
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e000      	b.n	8004a3c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b086      	sub	sp, #24
 8004a48:	af02      	add	r7, sp, #8
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	2200      	movs	r2, #0
 8004a58:	2180      	movs	r1, #128	; 0x80
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f7ff ff18 	bl	8004890 <SPI_WaitFlagStateUntilTimeout>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d007      	beq.n	8004a76 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a6a:	f043 0220 	orr.w	r2, r3, #32
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e000      	b.n	8004a78 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004a76:	2300      	movs	r3, #0
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <SPI_ISCRCErrorValid>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval CRC error validity (SPI_INVALID_CRC_ERROR or SPI_VALID_CRC_ERROR).
  */
uint8_t SPI_ISCRCErrorValid(SPI_HandleTypeDef *hspi)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  }
#endif /* USE_SPI_CRC_ERROR_WORKAROUND */
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hspi);

  return (SPI_VALID_CRC_ERROR);
 8004a88:	2301      	movs	r3, #1
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bc80      	pop	{r7}
 8004a92:	4770      	bx	lr

08004a94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d101      	bne.n	8004aa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e042      	b.n	8004b2c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d106      	bne.n	8004ac0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f7fc f912 	bl	8000ce4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2224      	movs	r2, #36	; 0x24
 8004ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	68da      	ldr	r2, [r3, #12]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ad6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 f91d 	bl	8004d18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	691a      	ldr	r2, [r3, #16]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004aec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	695a      	ldr	r2, [r3, #20]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004afc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68da      	ldr	r2, [r3, #12]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2220      	movs	r2, #32
 8004b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2220      	movs	r2, #32
 8004b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b08a      	sub	sp, #40	; 0x28
 8004b38:	af02      	add	r7, sp, #8
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	603b      	str	r3, [r7, #0]
 8004b40:	4613      	mov	r3, r2
 8004b42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b44:	2300      	movs	r3, #0
 8004b46:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b20      	cmp	r3, #32
 8004b52:	d16d      	bne.n	8004c30 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d002      	beq.n	8004b60 <HAL_UART_Transmit+0x2c>
 8004b5a:	88fb      	ldrh	r3, [r7, #6]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d101      	bne.n	8004b64 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e066      	b.n	8004c32 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2221      	movs	r2, #33	; 0x21
 8004b6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b72:	f7fc f9f9 	bl	8000f68 <HAL_GetTick>
 8004b76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	88fa      	ldrh	r2, [r7, #6]
 8004b7c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	88fa      	ldrh	r2, [r7, #6]
 8004b82:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b8c:	d108      	bne.n	8004ba0 <HAL_UART_Transmit+0x6c>
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d104      	bne.n	8004ba0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b96:	2300      	movs	r3, #0
 8004b98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	61bb      	str	r3, [r7, #24]
 8004b9e:	e003      	b.n	8004ba8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ba8:	e02a      	b.n	8004c00 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	2180      	movs	r1, #128	; 0x80
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f000 f840 	bl	8004c3a <UART_WaitOnFlagUntilTimeout>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d001      	beq.n	8004bc4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004bc0:	2303      	movs	r3, #3
 8004bc2:	e036      	b.n	8004c32 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10b      	bne.n	8004be2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	881b      	ldrh	r3, [r3, #0]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	3302      	adds	r3, #2
 8004bde:	61bb      	str	r3, [r7, #24]
 8004be0:	e007      	b.n	8004bf2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	781a      	ldrb	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	3301      	adds	r3, #1
 8004bf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1cf      	bne.n	8004baa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	9300      	str	r3, [sp, #0]
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	2200      	movs	r2, #0
 8004c12:	2140      	movs	r1, #64	; 0x40
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f000 f810 	bl	8004c3a <UART_WaitOnFlagUntilTimeout>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e006      	b.n	8004c32 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2220      	movs	r2, #32
 8004c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	e000      	b.n	8004c32 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004c30:	2302      	movs	r3, #2
  }
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3720      	adds	r7, #32
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}

08004c3a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c3a:	b580      	push	{r7, lr}
 8004c3c:	b090      	sub	sp, #64	; 0x40
 8004c3e:	af00      	add	r7, sp, #0
 8004c40:	60f8      	str	r0, [r7, #12]
 8004c42:	60b9      	str	r1, [r7, #8]
 8004c44:	603b      	str	r3, [r7, #0]
 8004c46:	4613      	mov	r3, r2
 8004c48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c4a:	e050      	b.n	8004cee <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c52:	d04c      	beq.n	8004cee <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004c54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d007      	beq.n	8004c6a <UART_WaitOnFlagUntilTimeout+0x30>
 8004c5a:	f7fc f985 	bl	8000f68 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d241      	bcs.n	8004cee <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	330c      	adds	r3, #12
 8004c70:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c74:	e853 3f00 	ldrex	r3, [r3]
 8004c78:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	330c      	adds	r3, #12
 8004c88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c8a:	637a      	str	r2, [r7, #52]	; 0x34
 8004c8c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c92:	e841 2300 	strex	r3, r2, [r1]
 8004c96:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1e5      	bne.n	8004c6a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	3314      	adds	r3, #20
 8004ca4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	e853 3f00 	ldrex	r3, [r3]
 8004cac:	613b      	str	r3, [r7, #16]
   return(result);
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	f023 0301 	bic.w	r3, r3, #1
 8004cb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	3314      	adds	r3, #20
 8004cbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cbe:	623a      	str	r2, [r7, #32]
 8004cc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc2:	69f9      	ldr	r1, [r7, #28]
 8004cc4:	6a3a      	ldr	r2, [r7, #32]
 8004cc6:	e841 2300 	strex	r3, r2, [r1]
 8004cca:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1e5      	bne.n	8004c9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2220      	movs	r2, #32
 8004cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2220      	movs	r2, #32
 8004cde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e00f      	b.n	8004d0e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	bf0c      	ite	eq
 8004cfe:	2301      	moveq	r3, #1
 8004d00:	2300      	movne	r3, #0
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	461a      	mov	r2, r3
 8004d06:	79fb      	ldrb	r3, [r7, #7]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d09f      	beq.n	8004c4c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3740      	adds	r7, #64	; 0x40
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
	...

08004d18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68da      	ldr	r2, [r3, #12]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689a      	ldr	r2, [r3, #8]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	431a      	orrs	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004d52:	f023 030c 	bic.w	r3, r3, #12
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6812      	ldr	r2, [r2, #0]
 8004d5a:	68b9      	ldr	r1, [r7, #8]
 8004d5c:	430b      	orrs	r3, r1
 8004d5e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	699a      	ldr	r2, [r3, #24]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a2c      	ldr	r2, [pc, #176]	; (8004e2c <UART_SetConfig+0x114>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d103      	bne.n	8004d88 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004d80:	f7fe ff66 	bl	8003c50 <HAL_RCC_GetPCLK2Freq>
 8004d84:	60f8      	str	r0, [r7, #12]
 8004d86:	e002      	b.n	8004d8e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004d88:	f7fe ff4e 	bl	8003c28 <HAL_RCC_GetPCLK1Freq>
 8004d8c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	4613      	mov	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4413      	add	r3, r2
 8004d96:	009a      	lsls	r2, r3, #2
 8004d98:	441a      	add	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da4:	4a22      	ldr	r2, [pc, #136]	; (8004e30 <UART_SetConfig+0x118>)
 8004da6:	fba2 2303 	umull	r2, r3, r2, r3
 8004daa:	095b      	lsrs	r3, r3, #5
 8004dac:	0119      	lsls	r1, r3, #4
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	4613      	mov	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	009a      	lsls	r2, r3, #2
 8004db8:	441a      	add	r2, r3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dc4:	4b1a      	ldr	r3, [pc, #104]	; (8004e30 <UART_SetConfig+0x118>)
 8004dc6:	fba3 0302 	umull	r0, r3, r3, r2
 8004dca:	095b      	lsrs	r3, r3, #5
 8004dcc:	2064      	movs	r0, #100	; 0x64
 8004dce:	fb00 f303 	mul.w	r3, r0, r3
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	3332      	adds	r3, #50	; 0x32
 8004dd8:	4a15      	ldr	r2, [pc, #84]	; (8004e30 <UART_SetConfig+0x118>)
 8004dda:	fba2 2303 	umull	r2, r3, r2, r3
 8004dde:	095b      	lsrs	r3, r3, #5
 8004de0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004de4:	4419      	add	r1, r3
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	4613      	mov	r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	009a      	lsls	r2, r3, #2
 8004df0:	441a      	add	r2, r3
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dfc:	4b0c      	ldr	r3, [pc, #48]	; (8004e30 <UART_SetConfig+0x118>)
 8004dfe:	fba3 0302 	umull	r0, r3, r3, r2
 8004e02:	095b      	lsrs	r3, r3, #5
 8004e04:	2064      	movs	r0, #100	; 0x64
 8004e06:	fb00 f303 	mul.w	r3, r0, r3
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	011b      	lsls	r3, r3, #4
 8004e0e:	3332      	adds	r3, #50	; 0x32
 8004e10:	4a07      	ldr	r2, [pc, #28]	; (8004e30 <UART_SetConfig+0x118>)
 8004e12:	fba2 2303 	umull	r2, r3, r2, r3
 8004e16:	095b      	lsrs	r3, r3, #5
 8004e18:	f003 020f 	and.w	r2, r3, #15
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	440a      	add	r2, r1
 8004e22:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004e24:	bf00      	nop
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	40013800 	.word	0x40013800
 8004e30:	51eb851f 	.word	0x51eb851f

08004e34 <siprintf>:
 8004e34:	b40e      	push	{r1, r2, r3}
 8004e36:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e3a:	b500      	push	{lr}
 8004e3c:	b09c      	sub	sp, #112	; 0x70
 8004e3e:	ab1d      	add	r3, sp, #116	; 0x74
 8004e40:	9002      	str	r0, [sp, #8]
 8004e42:	9006      	str	r0, [sp, #24]
 8004e44:	9107      	str	r1, [sp, #28]
 8004e46:	9104      	str	r1, [sp, #16]
 8004e48:	4808      	ldr	r0, [pc, #32]	; (8004e6c <siprintf+0x38>)
 8004e4a:	4909      	ldr	r1, [pc, #36]	; (8004e70 <siprintf+0x3c>)
 8004e4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e50:	9105      	str	r1, [sp, #20]
 8004e52:	6800      	ldr	r0, [r0, #0]
 8004e54:	a902      	add	r1, sp, #8
 8004e56:	9301      	str	r3, [sp, #4]
 8004e58:	f000 f98e 	bl	8005178 <_svfiprintf_r>
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	9b02      	ldr	r3, [sp, #8]
 8004e60:	701a      	strb	r2, [r3, #0]
 8004e62:	b01c      	add	sp, #112	; 0x70
 8004e64:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e68:	b003      	add	sp, #12
 8004e6a:	4770      	bx	lr
 8004e6c:	20000070 	.word	0x20000070
 8004e70:	ffff0208 	.word	0xffff0208

08004e74 <memset>:
 8004e74:	4603      	mov	r3, r0
 8004e76:	4402      	add	r2, r0
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d100      	bne.n	8004e7e <memset+0xa>
 8004e7c:	4770      	bx	lr
 8004e7e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e82:	e7f9      	b.n	8004e78 <memset+0x4>

08004e84 <__errno>:
 8004e84:	4b01      	ldr	r3, [pc, #4]	; (8004e8c <__errno+0x8>)
 8004e86:	6818      	ldr	r0, [r3, #0]
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	20000070 	.word	0x20000070

08004e90 <__libc_init_array>:
 8004e90:	b570      	push	{r4, r5, r6, lr}
 8004e92:	2600      	movs	r6, #0
 8004e94:	4d0c      	ldr	r5, [pc, #48]	; (8004ec8 <__libc_init_array+0x38>)
 8004e96:	4c0d      	ldr	r4, [pc, #52]	; (8004ecc <__libc_init_array+0x3c>)
 8004e98:	1b64      	subs	r4, r4, r5
 8004e9a:	10a4      	asrs	r4, r4, #2
 8004e9c:	42a6      	cmp	r6, r4
 8004e9e:	d109      	bne.n	8004eb4 <__libc_init_array+0x24>
 8004ea0:	f000 fc7a 	bl	8005798 <_init>
 8004ea4:	2600      	movs	r6, #0
 8004ea6:	4d0a      	ldr	r5, [pc, #40]	; (8004ed0 <__libc_init_array+0x40>)
 8004ea8:	4c0a      	ldr	r4, [pc, #40]	; (8004ed4 <__libc_init_array+0x44>)
 8004eaa:	1b64      	subs	r4, r4, r5
 8004eac:	10a4      	asrs	r4, r4, #2
 8004eae:	42a6      	cmp	r6, r4
 8004eb0:	d105      	bne.n	8004ebe <__libc_init_array+0x2e>
 8004eb2:	bd70      	pop	{r4, r5, r6, pc}
 8004eb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004eb8:	4798      	blx	r3
 8004eba:	3601      	adds	r6, #1
 8004ebc:	e7ee      	b.n	8004e9c <__libc_init_array+0xc>
 8004ebe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ec2:	4798      	blx	r3
 8004ec4:	3601      	adds	r6, #1
 8004ec6:	e7f2      	b.n	8004eae <__libc_init_array+0x1e>
 8004ec8:	08005834 	.word	0x08005834
 8004ecc:	08005834 	.word	0x08005834
 8004ed0:	08005834 	.word	0x08005834
 8004ed4:	08005838 	.word	0x08005838

08004ed8 <__retarget_lock_acquire_recursive>:
 8004ed8:	4770      	bx	lr

08004eda <__retarget_lock_release_recursive>:
 8004eda:	4770      	bx	lr

08004edc <_free_r>:
 8004edc:	b538      	push	{r3, r4, r5, lr}
 8004ede:	4605      	mov	r5, r0
 8004ee0:	2900      	cmp	r1, #0
 8004ee2:	d040      	beq.n	8004f66 <_free_r+0x8a>
 8004ee4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ee8:	1f0c      	subs	r4, r1, #4
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	bfb8      	it	lt
 8004eee:	18e4      	addlt	r4, r4, r3
 8004ef0:	f000 f8dc 	bl	80050ac <__malloc_lock>
 8004ef4:	4a1c      	ldr	r2, [pc, #112]	; (8004f68 <_free_r+0x8c>)
 8004ef6:	6813      	ldr	r3, [r2, #0]
 8004ef8:	b933      	cbnz	r3, 8004f08 <_free_r+0x2c>
 8004efa:	6063      	str	r3, [r4, #4]
 8004efc:	6014      	str	r4, [r2, #0]
 8004efe:	4628      	mov	r0, r5
 8004f00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f04:	f000 b8d8 	b.w	80050b8 <__malloc_unlock>
 8004f08:	42a3      	cmp	r3, r4
 8004f0a:	d908      	bls.n	8004f1e <_free_r+0x42>
 8004f0c:	6820      	ldr	r0, [r4, #0]
 8004f0e:	1821      	adds	r1, r4, r0
 8004f10:	428b      	cmp	r3, r1
 8004f12:	bf01      	itttt	eq
 8004f14:	6819      	ldreq	r1, [r3, #0]
 8004f16:	685b      	ldreq	r3, [r3, #4]
 8004f18:	1809      	addeq	r1, r1, r0
 8004f1a:	6021      	streq	r1, [r4, #0]
 8004f1c:	e7ed      	b.n	8004efa <_free_r+0x1e>
 8004f1e:	461a      	mov	r2, r3
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	b10b      	cbz	r3, 8004f28 <_free_r+0x4c>
 8004f24:	42a3      	cmp	r3, r4
 8004f26:	d9fa      	bls.n	8004f1e <_free_r+0x42>
 8004f28:	6811      	ldr	r1, [r2, #0]
 8004f2a:	1850      	adds	r0, r2, r1
 8004f2c:	42a0      	cmp	r0, r4
 8004f2e:	d10b      	bne.n	8004f48 <_free_r+0x6c>
 8004f30:	6820      	ldr	r0, [r4, #0]
 8004f32:	4401      	add	r1, r0
 8004f34:	1850      	adds	r0, r2, r1
 8004f36:	4283      	cmp	r3, r0
 8004f38:	6011      	str	r1, [r2, #0]
 8004f3a:	d1e0      	bne.n	8004efe <_free_r+0x22>
 8004f3c:	6818      	ldr	r0, [r3, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	4408      	add	r0, r1
 8004f42:	6010      	str	r0, [r2, #0]
 8004f44:	6053      	str	r3, [r2, #4]
 8004f46:	e7da      	b.n	8004efe <_free_r+0x22>
 8004f48:	d902      	bls.n	8004f50 <_free_r+0x74>
 8004f4a:	230c      	movs	r3, #12
 8004f4c:	602b      	str	r3, [r5, #0]
 8004f4e:	e7d6      	b.n	8004efe <_free_r+0x22>
 8004f50:	6820      	ldr	r0, [r4, #0]
 8004f52:	1821      	adds	r1, r4, r0
 8004f54:	428b      	cmp	r3, r1
 8004f56:	bf01      	itttt	eq
 8004f58:	6819      	ldreq	r1, [r3, #0]
 8004f5a:	685b      	ldreq	r3, [r3, #4]
 8004f5c:	1809      	addeq	r1, r1, r0
 8004f5e:	6021      	streq	r1, [r4, #0]
 8004f60:	6063      	str	r3, [r4, #4]
 8004f62:	6054      	str	r4, [r2, #4]
 8004f64:	e7cb      	b.n	8004efe <_free_r+0x22>
 8004f66:	bd38      	pop	{r3, r4, r5, pc}
 8004f68:	20000370 	.word	0x20000370

08004f6c <sbrk_aligned>:
 8004f6c:	b570      	push	{r4, r5, r6, lr}
 8004f6e:	4e0e      	ldr	r6, [pc, #56]	; (8004fa8 <sbrk_aligned+0x3c>)
 8004f70:	460c      	mov	r4, r1
 8004f72:	6831      	ldr	r1, [r6, #0]
 8004f74:	4605      	mov	r5, r0
 8004f76:	b911      	cbnz	r1, 8004f7e <sbrk_aligned+0x12>
 8004f78:	f000 fbaa 	bl	80056d0 <_sbrk_r>
 8004f7c:	6030      	str	r0, [r6, #0]
 8004f7e:	4621      	mov	r1, r4
 8004f80:	4628      	mov	r0, r5
 8004f82:	f000 fba5 	bl	80056d0 <_sbrk_r>
 8004f86:	1c43      	adds	r3, r0, #1
 8004f88:	d00a      	beq.n	8004fa0 <sbrk_aligned+0x34>
 8004f8a:	1cc4      	adds	r4, r0, #3
 8004f8c:	f024 0403 	bic.w	r4, r4, #3
 8004f90:	42a0      	cmp	r0, r4
 8004f92:	d007      	beq.n	8004fa4 <sbrk_aligned+0x38>
 8004f94:	1a21      	subs	r1, r4, r0
 8004f96:	4628      	mov	r0, r5
 8004f98:	f000 fb9a 	bl	80056d0 <_sbrk_r>
 8004f9c:	3001      	adds	r0, #1
 8004f9e:	d101      	bne.n	8004fa4 <sbrk_aligned+0x38>
 8004fa0:	f04f 34ff 	mov.w	r4, #4294967295
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	bd70      	pop	{r4, r5, r6, pc}
 8004fa8:	20000374 	.word	0x20000374

08004fac <_malloc_r>:
 8004fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fb0:	1ccd      	adds	r5, r1, #3
 8004fb2:	f025 0503 	bic.w	r5, r5, #3
 8004fb6:	3508      	adds	r5, #8
 8004fb8:	2d0c      	cmp	r5, #12
 8004fba:	bf38      	it	cc
 8004fbc:	250c      	movcc	r5, #12
 8004fbe:	2d00      	cmp	r5, #0
 8004fc0:	4607      	mov	r7, r0
 8004fc2:	db01      	blt.n	8004fc8 <_malloc_r+0x1c>
 8004fc4:	42a9      	cmp	r1, r5
 8004fc6:	d905      	bls.n	8004fd4 <_malloc_r+0x28>
 8004fc8:	230c      	movs	r3, #12
 8004fca:	2600      	movs	r6, #0
 8004fcc:	603b      	str	r3, [r7, #0]
 8004fce:	4630      	mov	r0, r6
 8004fd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fd4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80050a8 <_malloc_r+0xfc>
 8004fd8:	f000 f868 	bl	80050ac <__malloc_lock>
 8004fdc:	f8d8 3000 	ldr.w	r3, [r8]
 8004fe0:	461c      	mov	r4, r3
 8004fe2:	bb5c      	cbnz	r4, 800503c <_malloc_r+0x90>
 8004fe4:	4629      	mov	r1, r5
 8004fe6:	4638      	mov	r0, r7
 8004fe8:	f7ff ffc0 	bl	8004f6c <sbrk_aligned>
 8004fec:	1c43      	adds	r3, r0, #1
 8004fee:	4604      	mov	r4, r0
 8004ff0:	d155      	bne.n	800509e <_malloc_r+0xf2>
 8004ff2:	f8d8 4000 	ldr.w	r4, [r8]
 8004ff6:	4626      	mov	r6, r4
 8004ff8:	2e00      	cmp	r6, #0
 8004ffa:	d145      	bne.n	8005088 <_malloc_r+0xdc>
 8004ffc:	2c00      	cmp	r4, #0
 8004ffe:	d048      	beq.n	8005092 <_malloc_r+0xe6>
 8005000:	6823      	ldr	r3, [r4, #0]
 8005002:	4631      	mov	r1, r6
 8005004:	4638      	mov	r0, r7
 8005006:	eb04 0903 	add.w	r9, r4, r3
 800500a:	f000 fb61 	bl	80056d0 <_sbrk_r>
 800500e:	4581      	cmp	r9, r0
 8005010:	d13f      	bne.n	8005092 <_malloc_r+0xe6>
 8005012:	6821      	ldr	r1, [r4, #0]
 8005014:	4638      	mov	r0, r7
 8005016:	1a6d      	subs	r5, r5, r1
 8005018:	4629      	mov	r1, r5
 800501a:	f7ff ffa7 	bl	8004f6c <sbrk_aligned>
 800501e:	3001      	adds	r0, #1
 8005020:	d037      	beq.n	8005092 <_malloc_r+0xe6>
 8005022:	6823      	ldr	r3, [r4, #0]
 8005024:	442b      	add	r3, r5
 8005026:	6023      	str	r3, [r4, #0]
 8005028:	f8d8 3000 	ldr.w	r3, [r8]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d038      	beq.n	80050a2 <_malloc_r+0xf6>
 8005030:	685a      	ldr	r2, [r3, #4]
 8005032:	42a2      	cmp	r2, r4
 8005034:	d12b      	bne.n	800508e <_malloc_r+0xe2>
 8005036:	2200      	movs	r2, #0
 8005038:	605a      	str	r2, [r3, #4]
 800503a:	e00f      	b.n	800505c <_malloc_r+0xb0>
 800503c:	6822      	ldr	r2, [r4, #0]
 800503e:	1b52      	subs	r2, r2, r5
 8005040:	d41f      	bmi.n	8005082 <_malloc_r+0xd6>
 8005042:	2a0b      	cmp	r2, #11
 8005044:	d917      	bls.n	8005076 <_malloc_r+0xca>
 8005046:	1961      	adds	r1, r4, r5
 8005048:	42a3      	cmp	r3, r4
 800504a:	6025      	str	r5, [r4, #0]
 800504c:	bf18      	it	ne
 800504e:	6059      	strne	r1, [r3, #4]
 8005050:	6863      	ldr	r3, [r4, #4]
 8005052:	bf08      	it	eq
 8005054:	f8c8 1000 	streq.w	r1, [r8]
 8005058:	5162      	str	r2, [r4, r5]
 800505a:	604b      	str	r3, [r1, #4]
 800505c:	4638      	mov	r0, r7
 800505e:	f104 060b 	add.w	r6, r4, #11
 8005062:	f000 f829 	bl	80050b8 <__malloc_unlock>
 8005066:	f026 0607 	bic.w	r6, r6, #7
 800506a:	1d23      	adds	r3, r4, #4
 800506c:	1af2      	subs	r2, r6, r3
 800506e:	d0ae      	beq.n	8004fce <_malloc_r+0x22>
 8005070:	1b9b      	subs	r3, r3, r6
 8005072:	50a3      	str	r3, [r4, r2]
 8005074:	e7ab      	b.n	8004fce <_malloc_r+0x22>
 8005076:	42a3      	cmp	r3, r4
 8005078:	6862      	ldr	r2, [r4, #4]
 800507a:	d1dd      	bne.n	8005038 <_malloc_r+0x8c>
 800507c:	f8c8 2000 	str.w	r2, [r8]
 8005080:	e7ec      	b.n	800505c <_malloc_r+0xb0>
 8005082:	4623      	mov	r3, r4
 8005084:	6864      	ldr	r4, [r4, #4]
 8005086:	e7ac      	b.n	8004fe2 <_malloc_r+0x36>
 8005088:	4634      	mov	r4, r6
 800508a:	6876      	ldr	r6, [r6, #4]
 800508c:	e7b4      	b.n	8004ff8 <_malloc_r+0x4c>
 800508e:	4613      	mov	r3, r2
 8005090:	e7cc      	b.n	800502c <_malloc_r+0x80>
 8005092:	230c      	movs	r3, #12
 8005094:	4638      	mov	r0, r7
 8005096:	603b      	str	r3, [r7, #0]
 8005098:	f000 f80e 	bl	80050b8 <__malloc_unlock>
 800509c:	e797      	b.n	8004fce <_malloc_r+0x22>
 800509e:	6025      	str	r5, [r4, #0]
 80050a0:	e7dc      	b.n	800505c <_malloc_r+0xb0>
 80050a2:	605b      	str	r3, [r3, #4]
 80050a4:	deff      	udf	#255	; 0xff
 80050a6:	bf00      	nop
 80050a8:	20000370 	.word	0x20000370

080050ac <__malloc_lock>:
 80050ac:	4801      	ldr	r0, [pc, #4]	; (80050b4 <__malloc_lock+0x8>)
 80050ae:	f7ff bf13 	b.w	8004ed8 <__retarget_lock_acquire_recursive>
 80050b2:	bf00      	nop
 80050b4:	2000036c 	.word	0x2000036c

080050b8 <__malloc_unlock>:
 80050b8:	4801      	ldr	r0, [pc, #4]	; (80050c0 <__malloc_unlock+0x8>)
 80050ba:	f7ff bf0e 	b.w	8004eda <__retarget_lock_release_recursive>
 80050be:	bf00      	nop
 80050c0:	2000036c 	.word	0x2000036c

080050c4 <__ssputs_r>:
 80050c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050c8:	461f      	mov	r7, r3
 80050ca:	688e      	ldr	r6, [r1, #8]
 80050cc:	4682      	mov	sl, r0
 80050ce:	42be      	cmp	r6, r7
 80050d0:	460c      	mov	r4, r1
 80050d2:	4690      	mov	r8, r2
 80050d4:	680b      	ldr	r3, [r1, #0]
 80050d6:	d82c      	bhi.n	8005132 <__ssputs_r+0x6e>
 80050d8:	898a      	ldrh	r2, [r1, #12]
 80050da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80050de:	d026      	beq.n	800512e <__ssputs_r+0x6a>
 80050e0:	6965      	ldr	r5, [r4, #20]
 80050e2:	6909      	ldr	r1, [r1, #16]
 80050e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050e8:	eba3 0901 	sub.w	r9, r3, r1
 80050ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80050f0:	1c7b      	adds	r3, r7, #1
 80050f2:	444b      	add	r3, r9
 80050f4:	106d      	asrs	r5, r5, #1
 80050f6:	429d      	cmp	r5, r3
 80050f8:	bf38      	it	cc
 80050fa:	461d      	movcc	r5, r3
 80050fc:	0553      	lsls	r3, r2, #21
 80050fe:	d527      	bpl.n	8005150 <__ssputs_r+0x8c>
 8005100:	4629      	mov	r1, r5
 8005102:	f7ff ff53 	bl	8004fac <_malloc_r>
 8005106:	4606      	mov	r6, r0
 8005108:	b360      	cbz	r0, 8005164 <__ssputs_r+0xa0>
 800510a:	464a      	mov	r2, r9
 800510c:	6921      	ldr	r1, [r4, #16]
 800510e:	f000 fafd 	bl	800570c <memcpy>
 8005112:	89a3      	ldrh	r3, [r4, #12]
 8005114:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800511c:	81a3      	strh	r3, [r4, #12]
 800511e:	6126      	str	r6, [r4, #16]
 8005120:	444e      	add	r6, r9
 8005122:	6026      	str	r6, [r4, #0]
 8005124:	463e      	mov	r6, r7
 8005126:	6165      	str	r5, [r4, #20]
 8005128:	eba5 0509 	sub.w	r5, r5, r9
 800512c:	60a5      	str	r5, [r4, #8]
 800512e:	42be      	cmp	r6, r7
 8005130:	d900      	bls.n	8005134 <__ssputs_r+0x70>
 8005132:	463e      	mov	r6, r7
 8005134:	4632      	mov	r2, r6
 8005136:	4641      	mov	r1, r8
 8005138:	6820      	ldr	r0, [r4, #0]
 800513a:	f000 faaf 	bl	800569c <memmove>
 800513e:	2000      	movs	r0, #0
 8005140:	68a3      	ldr	r3, [r4, #8]
 8005142:	1b9b      	subs	r3, r3, r6
 8005144:	60a3      	str	r3, [r4, #8]
 8005146:	6823      	ldr	r3, [r4, #0]
 8005148:	4433      	add	r3, r6
 800514a:	6023      	str	r3, [r4, #0]
 800514c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005150:	462a      	mov	r2, r5
 8005152:	f000 fae9 	bl	8005728 <_realloc_r>
 8005156:	4606      	mov	r6, r0
 8005158:	2800      	cmp	r0, #0
 800515a:	d1e0      	bne.n	800511e <__ssputs_r+0x5a>
 800515c:	4650      	mov	r0, sl
 800515e:	6921      	ldr	r1, [r4, #16]
 8005160:	f7ff febc 	bl	8004edc <_free_r>
 8005164:	230c      	movs	r3, #12
 8005166:	f8ca 3000 	str.w	r3, [sl]
 800516a:	89a3      	ldrh	r3, [r4, #12]
 800516c:	f04f 30ff 	mov.w	r0, #4294967295
 8005170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005174:	81a3      	strh	r3, [r4, #12]
 8005176:	e7e9      	b.n	800514c <__ssputs_r+0x88>

08005178 <_svfiprintf_r>:
 8005178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800517c:	4698      	mov	r8, r3
 800517e:	898b      	ldrh	r3, [r1, #12]
 8005180:	4607      	mov	r7, r0
 8005182:	061b      	lsls	r3, r3, #24
 8005184:	460d      	mov	r5, r1
 8005186:	4614      	mov	r4, r2
 8005188:	b09d      	sub	sp, #116	; 0x74
 800518a:	d50e      	bpl.n	80051aa <_svfiprintf_r+0x32>
 800518c:	690b      	ldr	r3, [r1, #16]
 800518e:	b963      	cbnz	r3, 80051aa <_svfiprintf_r+0x32>
 8005190:	2140      	movs	r1, #64	; 0x40
 8005192:	f7ff ff0b 	bl	8004fac <_malloc_r>
 8005196:	6028      	str	r0, [r5, #0]
 8005198:	6128      	str	r0, [r5, #16]
 800519a:	b920      	cbnz	r0, 80051a6 <_svfiprintf_r+0x2e>
 800519c:	230c      	movs	r3, #12
 800519e:	603b      	str	r3, [r7, #0]
 80051a0:	f04f 30ff 	mov.w	r0, #4294967295
 80051a4:	e0d0      	b.n	8005348 <_svfiprintf_r+0x1d0>
 80051a6:	2340      	movs	r3, #64	; 0x40
 80051a8:	616b      	str	r3, [r5, #20]
 80051aa:	2300      	movs	r3, #0
 80051ac:	9309      	str	r3, [sp, #36]	; 0x24
 80051ae:	2320      	movs	r3, #32
 80051b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051b4:	2330      	movs	r3, #48	; 0x30
 80051b6:	f04f 0901 	mov.w	r9, #1
 80051ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80051be:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8005360 <_svfiprintf_r+0x1e8>
 80051c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051c6:	4623      	mov	r3, r4
 80051c8:	469a      	mov	sl, r3
 80051ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051ce:	b10a      	cbz	r2, 80051d4 <_svfiprintf_r+0x5c>
 80051d0:	2a25      	cmp	r2, #37	; 0x25
 80051d2:	d1f9      	bne.n	80051c8 <_svfiprintf_r+0x50>
 80051d4:	ebba 0b04 	subs.w	fp, sl, r4
 80051d8:	d00b      	beq.n	80051f2 <_svfiprintf_r+0x7a>
 80051da:	465b      	mov	r3, fp
 80051dc:	4622      	mov	r2, r4
 80051de:	4629      	mov	r1, r5
 80051e0:	4638      	mov	r0, r7
 80051e2:	f7ff ff6f 	bl	80050c4 <__ssputs_r>
 80051e6:	3001      	adds	r0, #1
 80051e8:	f000 80a9 	beq.w	800533e <_svfiprintf_r+0x1c6>
 80051ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051ee:	445a      	add	r2, fp
 80051f0:	9209      	str	r2, [sp, #36]	; 0x24
 80051f2:	f89a 3000 	ldrb.w	r3, [sl]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	f000 80a1 	beq.w	800533e <_svfiprintf_r+0x1c6>
 80051fc:	2300      	movs	r3, #0
 80051fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005202:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005206:	f10a 0a01 	add.w	sl, sl, #1
 800520a:	9304      	str	r3, [sp, #16]
 800520c:	9307      	str	r3, [sp, #28]
 800520e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005212:	931a      	str	r3, [sp, #104]	; 0x68
 8005214:	4654      	mov	r4, sl
 8005216:	2205      	movs	r2, #5
 8005218:	f814 1b01 	ldrb.w	r1, [r4], #1
 800521c:	4850      	ldr	r0, [pc, #320]	; (8005360 <_svfiprintf_r+0x1e8>)
 800521e:	f000 fa67 	bl	80056f0 <memchr>
 8005222:	9a04      	ldr	r2, [sp, #16]
 8005224:	b9d8      	cbnz	r0, 800525e <_svfiprintf_r+0xe6>
 8005226:	06d0      	lsls	r0, r2, #27
 8005228:	bf44      	itt	mi
 800522a:	2320      	movmi	r3, #32
 800522c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005230:	0711      	lsls	r1, r2, #28
 8005232:	bf44      	itt	mi
 8005234:	232b      	movmi	r3, #43	; 0x2b
 8005236:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800523a:	f89a 3000 	ldrb.w	r3, [sl]
 800523e:	2b2a      	cmp	r3, #42	; 0x2a
 8005240:	d015      	beq.n	800526e <_svfiprintf_r+0xf6>
 8005242:	4654      	mov	r4, sl
 8005244:	2000      	movs	r0, #0
 8005246:	f04f 0c0a 	mov.w	ip, #10
 800524a:	9a07      	ldr	r2, [sp, #28]
 800524c:	4621      	mov	r1, r4
 800524e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005252:	3b30      	subs	r3, #48	; 0x30
 8005254:	2b09      	cmp	r3, #9
 8005256:	d94d      	bls.n	80052f4 <_svfiprintf_r+0x17c>
 8005258:	b1b0      	cbz	r0, 8005288 <_svfiprintf_r+0x110>
 800525a:	9207      	str	r2, [sp, #28]
 800525c:	e014      	b.n	8005288 <_svfiprintf_r+0x110>
 800525e:	eba0 0308 	sub.w	r3, r0, r8
 8005262:	fa09 f303 	lsl.w	r3, r9, r3
 8005266:	4313      	orrs	r3, r2
 8005268:	46a2      	mov	sl, r4
 800526a:	9304      	str	r3, [sp, #16]
 800526c:	e7d2      	b.n	8005214 <_svfiprintf_r+0x9c>
 800526e:	9b03      	ldr	r3, [sp, #12]
 8005270:	1d19      	adds	r1, r3, #4
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	9103      	str	r1, [sp, #12]
 8005276:	2b00      	cmp	r3, #0
 8005278:	bfbb      	ittet	lt
 800527a:	425b      	neglt	r3, r3
 800527c:	f042 0202 	orrlt.w	r2, r2, #2
 8005280:	9307      	strge	r3, [sp, #28]
 8005282:	9307      	strlt	r3, [sp, #28]
 8005284:	bfb8      	it	lt
 8005286:	9204      	strlt	r2, [sp, #16]
 8005288:	7823      	ldrb	r3, [r4, #0]
 800528a:	2b2e      	cmp	r3, #46	; 0x2e
 800528c:	d10c      	bne.n	80052a8 <_svfiprintf_r+0x130>
 800528e:	7863      	ldrb	r3, [r4, #1]
 8005290:	2b2a      	cmp	r3, #42	; 0x2a
 8005292:	d134      	bne.n	80052fe <_svfiprintf_r+0x186>
 8005294:	9b03      	ldr	r3, [sp, #12]
 8005296:	3402      	adds	r4, #2
 8005298:	1d1a      	adds	r2, r3, #4
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	9203      	str	r2, [sp, #12]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	bfb8      	it	lt
 80052a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80052a6:	9305      	str	r3, [sp, #20]
 80052a8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005364 <_svfiprintf_r+0x1ec>
 80052ac:	2203      	movs	r2, #3
 80052ae:	4650      	mov	r0, sl
 80052b0:	7821      	ldrb	r1, [r4, #0]
 80052b2:	f000 fa1d 	bl	80056f0 <memchr>
 80052b6:	b138      	cbz	r0, 80052c8 <_svfiprintf_r+0x150>
 80052b8:	2240      	movs	r2, #64	; 0x40
 80052ba:	9b04      	ldr	r3, [sp, #16]
 80052bc:	eba0 000a 	sub.w	r0, r0, sl
 80052c0:	4082      	lsls	r2, r0
 80052c2:	4313      	orrs	r3, r2
 80052c4:	3401      	adds	r4, #1
 80052c6:	9304      	str	r3, [sp, #16]
 80052c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052cc:	2206      	movs	r2, #6
 80052ce:	4826      	ldr	r0, [pc, #152]	; (8005368 <_svfiprintf_r+0x1f0>)
 80052d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052d4:	f000 fa0c 	bl	80056f0 <memchr>
 80052d8:	2800      	cmp	r0, #0
 80052da:	d038      	beq.n	800534e <_svfiprintf_r+0x1d6>
 80052dc:	4b23      	ldr	r3, [pc, #140]	; (800536c <_svfiprintf_r+0x1f4>)
 80052de:	bb1b      	cbnz	r3, 8005328 <_svfiprintf_r+0x1b0>
 80052e0:	9b03      	ldr	r3, [sp, #12]
 80052e2:	3307      	adds	r3, #7
 80052e4:	f023 0307 	bic.w	r3, r3, #7
 80052e8:	3308      	adds	r3, #8
 80052ea:	9303      	str	r3, [sp, #12]
 80052ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052ee:	4433      	add	r3, r6
 80052f0:	9309      	str	r3, [sp, #36]	; 0x24
 80052f2:	e768      	b.n	80051c6 <_svfiprintf_r+0x4e>
 80052f4:	460c      	mov	r4, r1
 80052f6:	2001      	movs	r0, #1
 80052f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80052fc:	e7a6      	b.n	800524c <_svfiprintf_r+0xd4>
 80052fe:	2300      	movs	r3, #0
 8005300:	f04f 0c0a 	mov.w	ip, #10
 8005304:	4619      	mov	r1, r3
 8005306:	3401      	adds	r4, #1
 8005308:	9305      	str	r3, [sp, #20]
 800530a:	4620      	mov	r0, r4
 800530c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005310:	3a30      	subs	r2, #48	; 0x30
 8005312:	2a09      	cmp	r2, #9
 8005314:	d903      	bls.n	800531e <_svfiprintf_r+0x1a6>
 8005316:	2b00      	cmp	r3, #0
 8005318:	d0c6      	beq.n	80052a8 <_svfiprintf_r+0x130>
 800531a:	9105      	str	r1, [sp, #20]
 800531c:	e7c4      	b.n	80052a8 <_svfiprintf_r+0x130>
 800531e:	4604      	mov	r4, r0
 8005320:	2301      	movs	r3, #1
 8005322:	fb0c 2101 	mla	r1, ip, r1, r2
 8005326:	e7f0      	b.n	800530a <_svfiprintf_r+0x192>
 8005328:	ab03      	add	r3, sp, #12
 800532a:	9300      	str	r3, [sp, #0]
 800532c:	462a      	mov	r2, r5
 800532e:	4638      	mov	r0, r7
 8005330:	4b0f      	ldr	r3, [pc, #60]	; (8005370 <_svfiprintf_r+0x1f8>)
 8005332:	a904      	add	r1, sp, #16
 8005334:	f3af 8000 	nop.w
 8005338:	1c42      	adds	r2, r0, #1
 800533a:	4606      	mov	r6, r0
 800533c:	d1d6      	bne.n	80052ec <_svfiprintf_r+0x174>
 800533e:	89ab      	ldrh	r3, [r5, #12]
 8005340:	065b      	lsls	r3, r3, #25
 8005342:	f53f af2d 	bmi.w	80051a0 <_svfiprintf_r+0x28>
 8005346:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005348:	b01d      	add	sp, #116	; 0x74
 800534a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800534e:	ab03      	add	r3, sp, #12
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	462a      	mov	r2, r5
 8005354:	4638      	mov	r0, r7
 8005356:	4b06      	ldr	r3, [pc, #24]	; (8005370 <_svfiprintf_r+0x1f8>)
 8005358:	a904      	add	r1, sp, #16
 800535a:	f000 f87d 	bl	8005458 <_printf_i>
 800535e:	e7eb      	b.n	8005338 <_svfiprintf_r+0x1c0>
 8005360:	080057fe 	.word	0x080057fe
 8005364:	08005804 	.word	0x08005804
 8005368:	08005808 	.word	0x08005808
 800536c:	00000000 	.word	0x00000000
 8005370:	080050c5 	.word	0x080050c5

08005374 <_printf_common>:
 8005374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005378:	4616      	mov	r6, r2
 800537a:	4699      	mov	r9, r3
 800537c:	688a      	ldr	r2, [r1, #8]
 800537e:	690b      	ldr	r3, [r1, #16]
 8005380:	4607      	mov	r7, r0
 8005382:	4293      	cmp	r3, r2
 8005384:	bfb8      	it	lt
 8005386:	4613      	movlt	r3, r2
 8005388:	6033      	str	r3, [r6, #0]
 800538a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800538e:	460c      	mov	r4, r1
 8005390:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005394:	b10a      	cbz	r2, 800539a <_printf_common+0x26>
 8005396:	3301      	adds	r3, #1
 8005398:	6033      	str	r3, [r6, #0]
 800539a:	6823      	ldr	r3, [r4, #0]
 800539c:	0699      	lsls	r1, r3, #26
 800539e:	bf42      	ittt	mi
 80053a0:	6833      	ldrmi	r3, [r6, #0]
 80053a2:	3302      	addmi	r3, #2
 80053a4:	6033      	strmi	r3, [r6, #0]
 80053a6:	6825      	ldr	r5, [r4, #0]
 80053a8:	f015 0506 	ands.w	r5, r5, #6
 80053ac:	d106      	bne.n	80053bc <_printf_common+0x48>
 80053ae:	f104 0a19 	add.w	sl, r4, #25
 80053b2:	68e3      	ldr	r3, [r4, #12]
 80053b4:	6832      	ldr	r2, [r6, #0]
 80053b6:	1a9b      	subs	r3, r3, r2
 80053b8:	42ab      	cmp	r3, r5
 80053ba:	dc2b      	bgt.n	8005414 <_printf_common+0xa0>
 80053bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053c0:	1e13      	subs	r3, r2, #0
 80053c2:	6822      	ldr	r2, [r4, #0]
 80053c4:	bf18      	it	ne
 80053c6:	2301      	movne	r3, #1
 80053c8:	0692      	lsls	r2, r2, #26
 80053ca:	d430      	bmi.n	800542e <_printf_common+0xba>
 80053cc:	4649      	mov	r1, r9
 80053ce:	4638      	mov	r0, r7
 80053d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80053d4:	47c0      	blx	r8
 80053d6:	3001      	adds	r0, #1
 80053d8:	d023      	beq.n	8005422 <_printf_common+0xae>
 80053da:	6823      	ldr	r3, [r4, #0]
 80053dc:	6922      	ldr	r2, [r4, #16]
 80053de:	f003 0306 	and.w	r3, r3, #6
 80053e2:	2b04      	cmp	r3, #4
 80053e4:	bf14      	ite	ne
 80053e6:	2500      	movne	r5, #0
 80053e8:	6833      	ldreq	r3, [r6, #0]
 80053ea:	f04f 0600 	mov.w	r6, #0
 80053ee:	bf08      	it	eq
 80053f0:	68e5      	ldreq	r5, [r4, #12]
 80053f2:	f104 041a 	add.w	r4, r4, #26
 80053f6:	bf08      	it	eq
 80053f8:	1aed      	subeq	r5, r5, r3
 80053fa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80053fe:	bf08      	it	eq
 8005400:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005404:	4293      	cmp	r3, r2
 8005406:	bfc4      	itt	gt
 8005408:	1a9b      	subgt	r3, r3, r2
 800540a:	18ed      	addgt	r5, r5, r3
 800540c:	42b5      	cmp	r5, r6
 800540e:	d11a      	bne.n	8005446 <_printf_common+0xd2>
 8005410:	2000      	movs	r0, #0
 8005412:	e008      	b.n	8005426 <_printf_common+0xb2>
 8005414:	2301      	movs	r3, #1
 8005416:	4652      	mov	r2, sl
 8005418:	4649      	mov	r1, r9
 800541a:	4638      	mov	r0, r7
 800541c:	47c0      	blx	r8
 800541e:	3001      	adds	r0, #1
 8005420:	d103      	bne.n	800542a <_printf_common+0xb6>
 8005422:	f04f 30ff 	mov.w	r0, #4294967295
 8005426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800542a:	3501      	adds	r5, #1
 800542c:	e7c1      	b.n	80053b2 <_printf_common+0x3e>
 800542e:	2030      	movs	r0, #48	; 0x30
 8005430:	18e1      	adds	r1, r4, r3
 8005432:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005436:	1c5a      	adds	r2, r3, #1
 8005438:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800543c:	4422      	add	r2, r4
 800543e:	3302      	adds	r3, #2
 8005440:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005444:	e7c2      	b.n	80053cc <_printf_common+0x58>
 8005446:	2301      	movs	r3, #1
 8005448:	4622      	mov	r2, r4
 800544a:	4649      	mov	r1, r9
 800544c:	4638      	mov	r0, r7
 800544e:	47c0      	blx	r8
 8005450:	3001      	adds	r0, #1
 8005452:	d0e6      	beq.n	8005422 <_printf_common+0xae>
 8005454:	3601      	adds	r6, #1
 8005456:	e7d9      	b.n	800540c <_printf_common+0x98>

08005458 <_printf_i>:
 8005458:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800545c:	7e0f      	ldrb	r7, [r1, #24]
 800545e:	4691      	mov	r9, r2
 8005460:	2f78      	cmp	r7, #120	; 0x78
 8005462:	4680      	mov	r8, r0
 8005464:	460c      	mov	r4, r1
 8005466:	469a      	mov	sl, r3
 8005468:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800546a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800546e:	d807      	bhi.n	8005480 <_printf_i+0x28>
 8005470:	2f62      	cmp	r7, #98	; 0x62
 8005472:	d80a      	bhi.n	800548a <_printf_i+0x32>
 8005474:	2f00      	cmp	r7, #0
 8005476:	f000 80d5 	beq.w	8005624 <_printf_i+0x1cc>
 800547a:	2f58      	cmp	r7, #88	; 0x58
 800547c:	f000 80c1 	beq.w	8005602 <_printf_i+0x1aa>
 8005480:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005484:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005488:	e03a      	b.n	8005500 <_printf_i+0xa8>
 800548a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800548e:	2b15      	cmp	r3, #21
 8005490:	d8f6      	bhi.n	8005480 <_printf_i+0x28>
 8005492:	a101      	add	r1, pc, #4	; (adr r1, 8005498 <_printf_i+0x40>)
 8005494:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005498:	080054f1 	.word	0x080054f1
 800549c:	08005505 	.word	0x08005505
 80054a0:	08005481 	.word	0x08005481
 80054a4:	08005481 	.word	0x08005481
 80054a8:	08005481 	.word	0x08005481
 80054ac:	08005481 	.word	0x08005481
 80054b0:	08005505 	.word	0x08005505
 80054b4:	08005481 	.word	0x08005481
 80054b8:	08005481 	.word	0x08005481
 80054bc:	08005481 	.word	0x08005481
 80054c0:	08005481 	.word	0x08005481
 80054c4:	0800560b 	.word	0x0800560b
 80054c8:	08005531 	.word	0x08005531
 80054cc:	080055c5 	.word	0x080055c5
 80054d0:	08005481 	.word	0x08005481
 80054d4:	08005481 	.word	0x08005481
 80054d8:	0800562d 	.word	0x0800562d
 80054dc:	08005481 	.word	0x08005481
 80054e0:	08005531 	.word	0x08005531
 80054e4:	08005481 	.word	0x08005481
 80054e8:	08005481 	.word	0x08005481
 80054ec:	080055cd 	.word	0x080055cd
 80054f0:	682b      	ldr	r3, [r5, #0]
 80054f2:	1d1a      	adds	r2, r3, #4
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	602a      	str	r2, [r5, #0]
 80054f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005500:	2301      	movs	r3, #1
 8005502:	e0a0      	b.n	8005646 <_printf_i+0x1ee>
 8005504:	6820      	ldr	r0, [r4, #0]
 8005506:	682b      	ldr	r3, [r5, #0]
 8005508:	0607      	lsls	r7, r0, #24
 800550a:	f103 0104 	add.w	r1, r3, #4
 800550e:	6029      	str	r1, [r5, #0]
 8005510:	d501      	bpl.n	8005516 <_printf_i+0xbe>
 8005512:	681e      	ldr	r6, [r3, #0]
 8005514:	e003      	b.n	800551e <_printf_i+0xc6>
 8005516:	0646      	lsls	r6, r0, #25
 8005518:	d5fb      	bpl.n	8005512 <_printf_i+0xba>
 800551a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800551e:	2e00      	cmp	r6, #0
 8005520:	da03      	bge.n	800552a <_printf_i+0xd2>
 8005522:	232d      	movs	r3, #45	; 0x2d
 8005524:	4276      	negs	r6, r6
 8005526:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800552a:	230a      	movs	r3, #10
 800552c:	4859      	ldr	r0, [pc, #356]	; (8005694 <_printf_i+0x23c>)
 800552e:	e012      	b.n	8005556 <_printf_i+0xfe>
 8005530:	682b      	ldr	r3, [r5, #0]
 8005532:	6820      	ldr	r0, [r4, #0]
 8005534:	1d19      	adds	r1, r3, #4
 8005536:	6029      	str	r1, [r5, #0]
 8005538:	0605      	lsls	r5, r0, #24
 800553a:	d501      	bpl.n	8005540 <_printf_i+0xe8>
 800553c:	681e      	ldr	r6, [r3, #0]
 800553e:	e002      	b.n	8005546 <_printf_i+0xee>
 8005540:	0641      	lsls	r1, r0, #25
 8005542:	d5fb      	bpl.n	800553c <_printf_i+0xe4>
 8005544:	881e      	ldrh	r6, [r3, #0]
 8005546:	2f6f      	cmp	r7, #111	; 0x6f
 8005548:	bf0c      	ite	eq
 800554a:	2308      	moveq	r3, #8
 800554c:	230a      	movne	r3, #10
 800554e:	4851      	ldr	r0, [pc, #324]	; (8005694 <_printf_i+0x23c>)
 8005550:	2100      	movs	r1, #0
 8005552:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005556:	6865      	ldr	r5, [r4, #4]
 8005558:	2d00      	cmp	r5, #0
 800555a:	bfa8      	it	ge
 800555c:	6821      	ldrge	r1, [r4, #0]
 800555e:	60a5      	str	r5, [r4, #8]
 8005560:	bfa4      	itt	ge
 8005562:	f021 0104 	bicge.w	r1, r1, #4
 8005566:	6021      	strge	r1, [r4, #0]
 8005568:	b90e      	cbnz	r6, 800556e <_printf_i+0x116>
 800556a:	2d00      	cmp	r5, #0
 800556c:	d04b      	beq.n	8005606 <_printf_i+0x1ae>
 800556e:	4615      	mov	r5, r2
 8005570:	fbb6 f1f3 	udiv	r1, r6, r3
 8005574:	fb03 6711 	mls	r7, r3, r1, r6
 8005578:	5dc7      	ldrb	r7, [r0, r7]
 800557a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800557e:	4637      	mov	r7, r6
 8005580:	42bb      	cmp	r3, r7
 8005582:	460e      	mov	r6, r1
 8005584:	d9f4      	bls.n	8005570 <_printf_i+0x118>
 8005586:	2b08      	cmp	r3, #8
 8005588:	d10b      	bne.n	80055a2 <_printf_i+0x14a>
 800558a:	6823      	ldr	r3, [r4, #0]
 800558c:	07de      	lsls	r6, r3, #31
 800558e:	d508      	bpl.n	80055a2 <_printf_i+0x14a>
 8005590:	6923      	ldr	r3, [r4, #16]
 8005592:	6861      	ldr	r1, [r4, #4]
 8005594:	4299      	cmp	r1, r3
 8005596:	bfde      	ittt	le
 8005598:	2330      	movle	r3, #48	; 0x30
 800559a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800559e:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055a2:	1b52      	subs	r2, r2, r5
 80055a4:	6122      	str	r2, [r4, #16]
 80055a6:	464b      	mov	r3, r9
 80055a8:	4621      	mov	r1, r4
 80055aa:	4640      	mov	r0, r8
 80055ac:	f8cd a000 	str.w	sl, [sp]
 80055b0:	aa03      	add	r2, sp, #12
 80055b2:	f7ff fedf 	bl	8005374 <_printf_common>
 80055b6:	3001      	adds	r0, #1
 80055b8:	d14a      	bne.n	8005650 <_printf_i+0x1f8>
 80055ba:	f04f 30ff 	mov.w	r0, #4294967295
 80055be:	b004      	add	sp, #16
 80055c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055c4:	6823      	ldr	r3, [r4, #0]
 80055c6:	f043 0320 	orr.w	r3, r3, #32
 80055ca:	6023      	str	r3, [r4, #0]
 80055cc:	2778      	movs	r7, #120	; 0x78
 80055ce:	4832      	ldr	r0, [pc, #200]	; (8005698 <_printf_i+0x240>)
 80055d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80055d4:	6823      	ldr	r3, [r4, #0]
 80055d6:	6829      	ldr	r1, [r5, #0]
 80055d8:	061f      	lsls	r7, r3, #24
 80055da:	f851 6b04 	ldr.w	r6, [r1], #4
 80055de:	d402      	bmi.n	80055e6 <_printf_i+0x18e>
 80055e0:	065f      	lsls	r7, r3, #25
 80055e2:	bf48      	it	mi
 80055e4:	b2b6      	uxthmi	r6, r6
 80055e6:	07df      	lsls	r7, r3, #31
 80055e8:	bf48      	it	mi
 80055ea:	f043 0320 	orrmi.w	r3, r3, #32
 80055ee:	6029      	str	r1, [r5, #0]
 80055f0:	bf48      	it	mi
 80055f2:	6023      	strmi	r3, [r4, #0]
 80055f4:	b91e      	cbnz	r6, 80055fe <_printf_i+0x1a6>
 80055f6:	6823      	ldr	r3, [r4, #0]
 80055f8:	f023 0320 	bic.w	r3, r3, #32
 80055fc:	6023      	str	r3, [r4, #0]
 80055fe:	2310      	movs	r3, #16
 8005600:	e7a6      	b.n	8005550 <_printf_i+0xf8>
 8005602:	4824      	ldr	r0, [pc, #144]	; (8005694 <_printf_i+0x23c>)
 8005604:	e7e4      	b.n	80055d0 <_printf_i+0x178>
 8005606:	4615      	mov	r5, r2
 8005608:	e7bd      	b.n	8005586 <_printf_i+0x12e>
 800560a:	682b      	ldr	r3, [r5, #0]
 800560c:	6826      	ldr	r6, [r4, #0]
 800560e:	1d18      	adds	r0, r3, #4
 8005610:	6961      	ldr	r1, [r4, #20]
 8005612:	6028      	str	r0, [r5, #0]
 8005614:	0635      	lsls	r5, r6, #24
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	d501      	bpl.n	800561e <_printf_i+0x1c6>
 800561a:	6019      	str	r1, [r3, #0]
 800561c:	e002      	b.n	8005624 <_printf_i+0x1cc>
 800561e:	0670      	lsls	r0, r6, #25
 8005620:	d5fb      	bpl.n	800561a <_printf_i+0x1c2>
 8005622:	8019      	strh	r1, [r3, #0]
 8005624:	2300      	movs	r3, #0
 8005626:	4615      	mov	r5, r2
 8005628:	6123      	str	r3, [r4, #16]
 800562a:	e7bc      	b.n	80055a6 <_printf_i+0x14e>
 800562c:	682b      	ldr	r3, [r5, #0]
 800562e:	2100      	movs	r1, #0
 8005630:	1d1a      	adds	r2, r3, #4
 8005632:	602a      	str	r2, [r5, #0]
 8005634:	681d      	ldr	r5, [r3, #0]
 8005636:	6862      	ldr	r2, [r4, #4]
 8005638:	4628      	mov	r0, r5
 800563a:	f000 f859 	bl	80056f0 <memchr>
 800563e:	b108      	cbz	r0, 8005644 <_printf_i+0x1ec>
 8005640:	1b40      	subs	r0, r0, r5
 8005642:	6060      	str	r0, [r4, #4]
 8005644:	6863      	ldr	r3, [r4, #4]
 8005646:	6123      	str	r3, [r4, #16]
 8005648:	2300      	movs	r3, #0
 800564a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800564e:	e7aa      	b.n	80055a6 <_printf_i+0x14e>
 8005650:	462a      	mov	r2, r5
 8005652:	4649      	mov	r1, r9
 8005654:	4640      	mov	r0, r8
 8005656:	6923      	ldr	r3, [r4, #16]
 8005658:	47d0      	blx	sl
 800565a:	3001      	adds	r0, #1
 800565c:	d0ad      	beq.n	80055ba <_printf_i+0x162>
 800565e:	6823      	ldr	r3, [r4, #0]
 8005660:	079b      	lsls	r3, r3, #30
 8005662:	d413      	bmi.n	800568c <_printf_i+0x234>
 8005664:	68e0      	ldr	r0, [r4, #12]
 8005666:	9b03      	ldr	r3, [sp, #12]
 8005668:	4298      	cmp	r0, r3
 800566a:	bfb8      	it	lt
 800566c:	4618      	movlt	r0, r3
 800566e:	e7a6      	b.n	80055be <_printf_i+0x166>
 8005670:	2301      	movs	r3, #1
 8005672:	4632      	mov	r2, r6
 8005674:	4649      	mov	r1, r9
 8005676:	4640      	mov	r0, r8
 8005678:	47d0      	blx	sl
 800567a:	3001      	adds	r0, #1
 800567c:	d09d      	beq.n	80055ba <_printf_i+0x162>
 800567e:	3501      	adds	r5, #1
 8005680:	68e3      	ldr	r3, [r4, #12]
 8005682:	9903      	ldr	r1, [sp, #12]
 8005684:	1a5b      	subs	r3, r3, r1
 8005686:	42ab      	cmp	r3, r5
 8005688:	dcf2      	bgt.n	8005670 <_printf_i+0x218>
 800568a:	e7eb      	b.n	8005664 <_printf_i+0x20c>
 800568c:	2500      	movs	r5, #0
 800568e:	f104 0619 	add.w	r6, r4, #25
 8005692:	e7f5      	b.n	8005680 <_printf_i+0x228>
 8005694:	0800580f 	.word	0x0800580f
 8005698:	08005820 	.word	0x08005820

0800569c <memmove>:
 800569c:	4288      	cmp	r0, r1
 800569e:	b510      	push	{r4, lr}
 80056a0:	eb01 0402 	add.w	r4, r1, r2
 80056a4:	d902      	bls.n	80056ac <memmove+0x10>
 80056a6:	4284      	cmp	r4, r0
 80056a8:	4623      	mov	r3, r4
 80056aa:	d807      	bhi.n	80056bc <memmove+0x20>
 80056ac:	1e43      	subs	r3, r0, #1
 80056ae:	42a1      	cmp	r1, r4
 80056b0:	d008      	beq.n	80056c4 <memmove+0x28>
 80056b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80056ba:	e7f8      	b.n	80056ae <memmove+0x12>
 80056bc:	4601      	mov	r1, r0
 80056be:	4402      	add	r2, r0
 80056c0:	428a      	cmp	r2, r1
 80056c2:	d100      	bne.n	80056c6 <memmove+0x2a>
 80056c4:	bd10      	pop	{r4, pc}
 80056c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80056ce:	e7f7      	b.n	80056c0 <memmove+0x24>

080056d0 <_sbrk_r>:
 80056d0:	b538      	push	{r3, r4, r5, lr}
 80056d2:	2300      	movs	r3, #0
 80056d4:	4d05      	ldr	r5, [pc, #20]	; (80056ec <_sbrk_r+0x1c>)
 80056d6:	4604      	mov	r4, r0
 80056d8:	4608      	mov	r0, r1
 80056da:	602b      	str	r3, [r5, #0]
 80056dc:	f7fb fb8a 	bl	8000df4 <_sbrk>
 80056e0:	1c43      	adds	r3, r0, #1
 80056e2:	d102      	bne.n	80056ea <_sbrk_r+0x1a>
 80056e4:	682b      	ldr	r3, [r5, #0]
 80056e6:	b103      	cbz	r3, 80056ea <_sbrk_r+0x1a>
 80056e8:	6023      	str	r3, [r4, #0]
 80056ea:	bd38      	pop	{r3, r4, r5, pc}
 80056ec:	20000368 	.word	0x20000368

080056f0 <memchr>:
 80056f0:	4603      	mov	r3, r0
 80056f2:	b510      	push	{r4, lr}
 80056f4:	b2c9      	uxtb	r1, r1
 80056f6:	4402      	add	r2, r0
 80056f8:	4293      	cmp	r3, r2
 80056fa:	4618      	mov	r0, r3
 80056fc:	d101      	bne.n	8005702 <memchr+0x12>
 80056fe:	2000      	movs	r0, #0
 8005700:	e003      	b.n	800570a <memchr+0x1a>
 8005702:	7804      	ldrb	r4, [r0, #0]
 8005704:	3301      	adds	r3, #1
 8005706:	428c      	cmp	r4, r1
 8005708:	d1f6      	bne.n	80056f8 <memchr+0x8>
 800570a:	bd10      	pop	{r4, pc}

0800570c <memcpy>:
 800570c:	440a      	add	r2, r1
 800570e:	4291      	cmp	r1, r2
 8005710:	f100 33ff 	add.w	r3, r0, #4294967295
 8005714:	d100      	bne.n	8005718 <memcpy+0xc>
 8005716:	4770      	bx	lr
 8005718:	b510      	push	{r4, lr}
 800571a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800571e:	4291      	cmp	r1, r2
 8005720:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005724:	d1f9      	bne.n	800571a <memcpy+0xe>
 8005726:	bd10      	pop	{r4, pc}

08005728 <_realloc_r>:
 8005728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800572c:	4680      	mov	r8, r0
 800572e:	4614      	mov	r4, r2
 8005730:	460e      	mov	r6, r1
 8005732:	b921      	cbnz	r1, 800573e <_realloc_r+0x16>
 8005734:	4611      	mov	r1, r2
 8005736:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800573a:	f7ff bc37 	b.w	8004fac <_malloc_r>
 800573e:	b92a      	cbnz	r2, 800574c <_realloc_r+0x24>
 8005740:	f7ff fbcc 	bl	8004edc <_free_r>
 8005744:	4625      	mov	r5, r4
 8005746:	4628      	mov	r0, r5
 8005748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800574c:	f000 f81b 	bl	8005786 <_malloc_usable_size_r>
 8005750:	4284      	cmp	r4, r0
 8005752:	4607      	mov	r7, r0
 8005754:	d802      	bhi.n	800575c <_realloc_r+0x34>
 8005756:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800575a:	d812      	bhi.n	8005782 <_realloc_r+0x5a>
 800575c:	4621      	mov	r1, r4
 800575e:	4640      	mov	r0, r8
 8005760:	f7ff fc24 	bl	8004fac <_malloc_r>
 8005764:	4605      	mov	r5, r0
 8005766:	2800      	cmp	r0, #0
 8005768:	d0ed      	beq.n	8005746 <_realloc_r+0x1e>
 800576a:	42bc      	cmp	r4, r7
 800576c:	4622      	mov	r2, r4
 800576e:	4631      	mov	r1, r6
 8005770:	bf28      	it	cs
 8005772:	463a      	movcs	r2, r7
 8005774:	f7ff ffca 	bl	800570c <memcpy>
 8005778:	4631      	mov	r1, r6
 800577a:	4640      	mov	r0, r8
 800577c:	f7ff fbae 	bl	8004edc <_free_r>
 8005780:	e7e1      	b.n	8005746 <_realloc_r+0x1e>
 8005782:	4635      	mov	r5, r6
 8005784:	e7df      	b.n	8005746 <_realloc_r+0x1e>

08005786 <_malloc_usable_size_r>:
 8005786:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800578a:	1f18      	subs	r0, r3, #4
 800578c:	2b00      	cmp	r3, #0
 800578e:	bfbc      	itt	lt
 8005790:	580b      	ldrlt	r3, [r1, r0]
 8005792:	18c0      	addlt	r0, r0, r3
 8005794:	4770      	bx	lr
	...

08005798 <_init>:
 8005798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579a:	bf00      	nop
 800579c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800579e:	bc08      	pop	{r3}
 80057a0:	469e      	mov	lr, r3
 80057a2:	4770      	bx	lr

080057a4 <_fini>:
 80057a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057a6:	bf00      	nop
 80057a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057aa:	bc08      	pop	{r3}
 80057ac:	469e      	mov	lr, r3
 80057ae:	4770      	bx	lr
