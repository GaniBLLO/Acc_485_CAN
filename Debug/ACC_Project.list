
ACC_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007178  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08007284  08007284  00017284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007308  08007308  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08007308  08007308  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007308  08007308  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007308  08007308  00017308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800730c  0800730c  0001730c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007310  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000074  08007384  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08007384  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000119bb  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028d2  00000000  00000000  00031a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  00034330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc0  00000000  00000000  000351d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000189f7  00000000  00000000  00035f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000115e2  00000000  00000000  0004e987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a394  00000000  00000000  0005ff69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea2fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040c0  00000000  00000000  000ea350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	0800726c 	.word	0x0800726c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	0800726c 	.word	0x0800726c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <update_ACC_data>:

ACC_SETTING	ACC_set = ACC_SETTING_DEFAULT;
OUT_DATA	OUT 	= OUT_DATA_XYZ_DEFAULT;
extern RS_DATA_STRUCT	rs;

void update_ACC_data(I2C_HandleTypeDef *i2c){
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af04      	add	r7, sp, #16
 8000162:	6078      	str	r0, [r7, #4]

	uint8_t		command[1];

	HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_STATUS_REG, 1, &command[0], 1, 10);		//Обнвляем статус регистров
 8000164:	230a      	movs	r3, #10
 8000166:	9302      	str	r3, [sp, #8]
 8000168:	2301      	movs	r3, #1
 800016a:	9301      	str	r3, [sp, #4]
 800016c:	f107 030c 	add.w	r3, r7, #12
 8000170:	9300      	str	r3, [sp, #0]
 8000172:	2301      	movs	r3, #1
 8000174:	2227      	movs	r2, #39	; 0x27
 8000176:	2130      	movs	r1, #48	; 0x30
 8000178:	6878      	ldr	r0, [r7, #4]
 800017a:	f003 fb29 	bl	80037d0 <HAL_I2C_Mem_Read>
	ACC_set.STATUS_REG.all = command[0];
 800017e:	7b3a      	ldrb	r2, [r7, #12]
 8000180:	4b0c      	ldr	r3, [pc, #48]	; (80001b4 <update_ACC_data+0x58>)
 8000182:	70da      	strb	r2, [r3, #3]

	if(rs.RS_DataSended && ACC_set.STATUS_REG.bit.ZYXDA){
 8000184:	4b0c      	ldr	r3, [pc, #48]	; (80001b8 <update_ACC_data+0x5c>)
 8000186:	685b      	ldr	r3, [r3, #4]
 8000188:	2b00      	cmp	r3, #0
 800018a:	d00f      	beq.n	80001ac <update_ACC_data+0x50>
 800018c:	4b09      	ldr	r3, [pc, #36]	; (80001b4 <update_ACC_data+0x58>)
 800018e:	78db      	ldrb	r3, [r3, #3]
 8000190:	f003 0308 	and.w	r3, r3, #8
 8000194:	b2db      	uxtb	r3, r3
 8000196:	2b00      	cmp	r3, #0
 8000198:	d008      	beq.n	80001ac <update_ACC_data+0x50>
		read_x_axis(i2c);
 800019a:	6878      	ldr	r0, [r7, #4]
 800019c:	f000 f8c8 	bl	8000330 <read_x_axis>
		read_y_axis(i2c);
 80001a0:	6878      	ldr	r0, [r7, #4]
 80001a2:	f000 f905 	bl	80003b0 <read_y_axis>
		read_z_axis(i2c);
 80001a6:	6878      	ldr	r0, [r7, #4]
 80001a8:	f000 f942 	bl	8000430 <read_z_axis>
	}
}
 80001ac:	bf00      	nop
 80001ae:	3710      	adds	r7, #16
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	20000000 	.word	0x20000000
 80001b8:	200000ac 	.word	0x200000ac

080001bc <ACC_init>:

void ACC_init(I2C_HandleTypeDef *i2c){
 80001bc:	b580      	push	{r7, lr}
 80001be:	b082      	sub	sp, #8
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]

    ACC_init_addr(ACC_ADDR, i2c);
 80001c4:	6879      	ldr	r1, [r7, #4]
 80001c6:	2030      	movs	r0, #48	; 0x30
 80001c8:	f000 f80e 	bl	80001e8 <ACC_init_addr>
    ACC_setting(ACC_ADDR, i2c);
 80001cc:	6879      	ldr	r1, [r7, #4]
 80001ce:	2030      	movs	r0, #48	; 0x30
 80001d0:	f000 f84a 	bl	8000268 <ACC_setting>

    rs.RS_DataSended = 1;
 80001d4:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <ACC_init+0x28>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	605a      	str	r2, [r3, #4]
}
 80001da:	bf00      	nop
 80001dc:	3708      	adds	r7, #8
 80001de:	46bd      	mov	sp, r7
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	200000ac 	.word	0x200000ac

080001e8 <ACC_init_addr>:

void ACC_init_addr (uint8_t address, I2C_HandleTypeDef *i2c){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b086      	sub	sp, #24
 80001ec:	af02      	add	r7, sp, #8
 80001ee:	4603      	mov	r3, r0
 80001f0:	6039      	str	r1, [r7, #0]
 80001f2:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef result;

    for(;;){
	result = HAL_I2C_IsDeviceReady(i2c, address, 1, 150);
 80001f4:	79fb      	ldrb	r3, [r7, #7]
 80001f6:	b299      	uxth	r1, r3
 80001f8:	2396      	movs	r3, #150	; 0x96
 80001fa:	2201      	movs	r2, #1
 80001fc:	6838      	ldr	r0, [r7, #0]
 80001fe:	f003 fd4f 	bl	8003ca0 <HAL_I2C_IsDeviceReady>
 8000202:	4603      	mov	r3, r0
 8000204:	73fb      	strb	r3, [r7, #15]
	    if(result == HAL_OK)
 8000206:	7bfb      	ldrb	r3, [r7, #15]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d000      	beq.n	800020e <ACC_init_addr+0x26>
	result = HAL_I2C_IsDeviceReady(i2c, address, 1, 150);
 800020c:	e7f2      	b.n	80001f4 <ACC_init_addr+0xc>
	    	break;
 800020e:	bf00      	nop
	}

    uint8_t command_arr[1];
    uint8_t receive_arr[1];

    command_arr[0] = 0xF;
 8000210:	230f      	movs	r3, #15
 8000212:	733b      	strb	r3, [r7, #12]
    //WHO_AM_I
    HAL_I2C_Master_Transmit(i2c, address, command_arr, sizeof(command_arr), 10);
 8000214:	79fb      	ldrb	r3, [r7, #7]
 8000216:	b299      	uxth	r1, r3
 8000218:	f107 020c 	add.w	r2, r7, #12
 800021c:	230a      	movs	r3, #10
 800021e:	9300      	str	r3, [sp, #0]
 8000220:	2301      	movs	r3, #1
 8000222:	6838      	ldr	r0, [r7, #0]
 8000224:	f002 fe70 	bl	8002f08 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(i2c, address, receive_arr, sizeof(receive_arr), 10);
 8000228:	79fb      	ldrb	r3, [r7, #7]
 800022a:	b299      	uxth	r1, r3
 800022c:	f107 0208 	add.w	r2, r7, #8
 8000230:	230a      	movs	r3, #10
 8000232:	9300      	str	r3, [sp, #0]
 8000234:	2301      	movs	r3, #1
 8000236:	6838      	ldr	r0, [r7, #0]
 8000238:	f002 ff64 	bl	8003104 <HAL_I2C_Master_Receive>

    GPIOC->BSRR |= GPIO_BSRR_BR13;
 800023c:	4b09      	ldr	r3, [pc, #36]	; (8000264 <ACC_init_addr+0x7c>)
 800023e:	691b      	ldr	r3, [r3, #16]
 8000240:	4a08      	ldr	r2, [pc, #32]	; (8000264 <ACC_init_addr+0x7c>)
 8000242:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000246:	6113      	str	r3, [r2, #16]
    HAL_Delay(1000);
 8000248:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800024c:	f001 f9da 	bl	8001604 <HAL_Delay>
    GPIOC->BSRR |= GPIO_BSRR_BS13;
 8000250:	4b04      	ldr	r3, [pc, #16]	; (8000264 <ACC_init_addr+0x7c>)
 8000252:	691b      	ldr	r3, [r3, #16]
 8000254:	4a03      	ldr	r2, [pc, #12]	; (8000264 <ACC_init_addr+0x7c>)
 8000256:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800025a:	6113      	str	r3, [r2, #16]
}
 800025c:	bf00      	nop
 800025e:	3710      	adds	r7, #16
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	40011000 	.word	0x40011000

08000268 <ACC_setting>:

void ACC_setting(uint8_t address, I2C_HandleTypeDef *i2c){
 8000268:	b580      	push	{r7, lr}
 800026a:	b088      	sub	sp, #32
 800026c:	af04      	add	r7, sp, #16
 800026e:	4603      	mov	r3, r0
 8000270:	6039      	str	r1, [r7, #0]
 8000272:	71fb      	strb	r3, [r7, #7]

    uint8_t 			command_arr[3];

    HAL_I2C_Mem_Write(i2c, address, COMMAND_CTRL_REG1, 1, &ACC_set.CTRL_REG1.all, 1, 10);	//Отправка данных структур (настроек) в память.
 8000274:	79fb      	ldrb	r3, [r7, #7]
 8000276:	b299      	uxth	r1, r3
 8000278:	230a      	movs	r3, #10
 800027a:	9302      	str	r3, [sp, #8]
 800027c:	2301      	movs	r3, #1
 800027e:	9301      	str	r3, [sp, #4]
 8000280:	4b28      	ldr	r3, [pc, #160]	; (8000324 <ACC_setting+0xbc>)
 8000282:	9300      	str	r3, [sp, #0]
 8000284:	2301      	movs	r3, #1
 8000286:	2220      	movs	r2, #32
 8000288:	6838      	ldr	r0, [r7, #0]
 800028a:	f003 f9a7 	bl	80035dc <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(i2c, address, COMMAND_CTRL_REG2, 1, &ACC_set.CTRL_REG2.all, 1, 10);
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	b299      	uxth	r1, r3
 8000292:	230a      	movs	r3, #10
 8000294:	9302      	str	r3, [sp, #8]
 8000296:	2301      	movs	r3, #1
 8000298:	9301      	str	r3, [sp, #4]
 800029a:	4b23      	ldr	r3, [pc, #140]	; (8000328 <ACC_setting+0xc0>)
 800029c:	9300      	str	r3, [sp, #0]
 800029e:	2301      	movs	r3, #1
 80002a0:	2221      	movs	r2, #33	; 0x21
 80002a2:	6838      	ldr	r0, [r7, #0]
 80002a4:	f003 f99a 	bl	80035dc <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(i2c, address, COMMAND_CTRL_REG4, 1, &ACC_set.CTRL_REG4.all, 1, 10);
 80002a8:	79fb      	ldrb	r3, [r7, #7]
 80002aa:	b299      	uxth	r1, r3
 80002ac:	230a      	movs	r3, #10
 80002ae:	9302      	str	r3, [sp, #8]
 80002b0:	2301      	movs	r3, #1
 80002b2:	9301      	str	r3, [sp, #4]
 80002b4:	4b1d      	ldr	r3, [pc, #116]	; (800032c <ACC_setting+0xc4>)
 80002b6:	9300      	str	r3, [sp, #0]
 80002b8:	2301      	movs	r3, #1
 80002ba:	2223      	movs	r2, #35	; 0x23
 80002bc:	6838      	ldr	r0, [r7, #0]
 80002be:	f003 f98d 	bl	80035dc <HAL_I2C_Mem_Write>

    HAL_I2C_Mem_Read(i2c, address, COMMAND_CTRL_REG1, 1, &command_arr[0], 1, 50);			//Для проверки, что данные записались верно
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	b299      	uxth	r1, r3
 80002c6:	2332      	movs	r3, #50	; 0x32
 80002c8:	9302      	str	r3, [sp, #8]
 80002ca:	2301      	movs	r3, #1
 80002cc:	9301      	str	r3, [sp, #4]
 80002ce:	f107 030c 	add.w	r3, r7, #12
 80002d2:	9300      	str	r3, [sp, #0]
 80002d4:	2301      	movs	r3, #1
 80002d6:	2220      	movs	r2, #32
 80002d8:	6838      	ldr	r0, [r7, #0]
 80002da:	f003 fa79 	bl	80037d0 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(i2c, address, COMMAND_CTRL_REG2, 1, &command_arr[1], 1, 50);
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	b299      	uxth	r1, r3
 80002e2:	2332      	movs	r3, #50	; 0x32
 80002e4:	9302      	str	r3, [sp, #8]
 80002e6:	2301      	movs	r3, #1
 80002e8:	9301      	str	r3, [sp, #4]
 80002ea:	f107 030c 	add.w	r3, r7, #12
 80002ee:	3301      	adds	r3, #1
 80002f0:	9300      	str	r3, [sp, #0]
 80002f2:	2301      	movs	r3, #1
 80002f4:	2221      	movs	r2, #33	; 0x21
 80002f6:	6838      	ldr	r0, [r7, #0]
 80002f8:	f003 fa6a 	bl	80037d0 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(i2c, address, COMMAND_CTRL_REG4, 1, &command_arr[2], 1, 50);
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	b299      	uxth	r1, r3
 8000300:	2332      	movs	r3, #50	; 0x32
 8000302:	9302      	str	r3, [sp, #8]
 8000304:	2301      	movs	r3, #1
 8000306:	9301      	str	r3, [sp, #4]
 8000308:	f107 030c 	add.w	r3, r7, #12
 800030c:	3302      	adds	r3, #2
 800030e:	9300      	str	r3, [sp, #0]
 8000310:	2301      	movs	r3, #1
 8000312:	2223      	movs	r2, #35	; 0x23
 8000314:	6838      	ldr	r0, [r7, #0]
 8000316:	f003 fa5b 	bl	80037d0 <HAL_I2C_Mem_Read>
}
 800031a:	bf00      	nop
 800031c:	3710      	adds	r7, #16
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
 8000322:	bf00      	nop
 8000324:	20000000 	.word	0x20000000
 8000328:	20000001 	.word	0x20000001
 800032c:	20000002 	.word	0x20000002

08000330 <read_x_axis>:


void read_x_axis(I2C_HandleTypeDef *i2c){
 8000330:	b580      	push	{r7, lr}
 8000332:	b088      	sub	sp, #32
 8000334:	af04      	add	r7, sp, #16
 8000336:	6078      	str	r0, [r7, #4]

    uint8_t data_LO_RX[1], data_HI_RX[1];

    if(ACC_set.STATUS_REG.bit.XOR || ACC_set.STATUS_REG.bit.XDA){
 8000338:	4b1a      	ldr	r3, [pc, #104]	; (80003a4 <read_x_axis+0x74>)
 800033a:	78db      	ldrb	r3, [r3, #3]
 800033c:	f003 0310 	and.w	r3, r3, #16
 8000340:	b2db      	uxtb	r3, r3
 8000342:	2b00      	cmp	r3, #0
 8000344:	d106      	bne.n	8000354 <read_x_axis+0x24>
 8000346:	4b17      	ldr	r3, [pc, #92]	; (80003a4 <read_x_axis+0x74>)
 8000348:	78db      	ldrb	r3, [r3, #3]
 800034a:	f003 0301 	and.w	r3, r3, #1
 800034e:	b2db      	uxtb	r3, r3
 8000350:	2b00      	cmp	r3, #0
 8000352:	d022      	beq.n	800039a <read_x_axis+0x6a>

	HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_X_HI, 1, &data_HI_RX[0], 1, 10);		//Считали данные с регистра и записали в структуру
 8000354:	230a      	movs	r3, #10
 8000356:	9302      	str	r3, [sp, #8]
 8000358:	2301      	movs	r3, #1
 800035a:	9301      	str	r3, [sp, #4]
 800035c:	f107 0308 	add.w	r3, r7, #8
 8000360:	9300      	str	r3, [sp, #0]
 8000362:	2301      	movs	r3, #1
 8000364:	2229      	movs	r2, #41	; 0x29
 8000366:	2130      	movs	r1, #48	; 0x30
 8000368:	6878      	ldr	r0, [r7, #4]
 800036a:	f003 fa31 	bl	80037d0 <HAL_I2C_Mem_Read>
	OUT.X.bit.HI = data_HI_RX[0] & 0xff;
 800036e:	7a3a      	ldrb	r2, [r7, #8]
 8000370:	4b0d      	ldr	r3, [pc, #52]	; (80003a8 <read_x_axis+0x78>)
 8000372:	705a      	strb	r2, [r3, #1]


	HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_X_LO, 1, &data_LO_RX[0], 1, 10);
 8000374:	230a      	movs	r3, #10
 8000376:	9302      	str	r3, [sp, #8]
 8000378:	2301      	movs	r3, #1
 800037a:	9301      	str	r3, [sp, #4]
 800037c:	f107 030c 	add.w	r3, r7, #12
 8000380:	9300      	str	r3, [sp, #0]
 8000382:	2301      	movs	r3, #1
 8000384:	2228      	movs	r2, #40	; 0x28
 8000386:	2130      	movs	r1, #48	; 0x30
 8000388:	6878      	ldr	r0, [r7, #4]
 800038a:	f003 fa21 	bl	80037d0 <HAL_I2C_Mem_Read>
	OUT.X.bit.LO = data_LO_RX[0] & 0xff;
 800038e:	7b3a      	ldrb	r2, [r7, #12]
 8000390:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <read_x_axis+0x78>)
 8000392:	701a      	strb	r2, [r3, #0]

	rs.RS_X_axis_data = 1;									//Данные готовы к отправке
 8000394:	4b05      	ldr	r3, [pc, #20]	; (80003ac <read_x_axis+0x7c>)
 8000396:	2201      	movs	r2, #1
 8000398:	609a      	str	r2, [r3, #8]
    }
}
 800039a:	bf00      	nop
 800039c:	3710      	adds	r7, #16
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	bf00      	nop
 80003a4:	20000000 	.word	0x20000000
 80003a8:	20000090 	.word	0x20000090
 80003ac:	200000ac 	.word	0x200000ac

080003b0 <read_y_axis>:


void read_y_axis(I2C_HandleTypeDef *i2c){
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b088      	sub	sp, #32
 80003b4:	af04      	add	r7, sp, #16
 80003b6:	6078      	str	r0, [r7, #4]

    uint8_t data_LO_RX[1], data_HI_RX[1];

    if(ACC_set.STATUS_REG.bit.YOR || ACC_set.STATUS_REG.bit.YDA){
 80003b8:	4b1a      	ldr	r3, [pc, #104]	; (8000424 <read_y_axis+0x74>)
 80003ba:	78db      	ldrb	r3, [r3, #3]
 80003bc:	f003 0320 	and.w	r3, r3, #32
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d106      	bne.n	80003d4 <read_y_axis+0x24>
 80003c6:	4b17      	ldr	r3, [pc, #92]	; (8000424 <read_y_axis+0x74>)
 80003c8:	78db      	ldrb	r3, [r3, #3]
 80003ca:	f003 0302 	and.w	r3, r3, #2
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d022      	beq.n	800041a <read_y_axis+0x6a>

	HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_Y_HI, 1, &data_HI_RX[0], 1, 10);
 80003d4:	230a      	movs	r3, #10
 80003d6:	9302      	str	r3, [sp, #8]
 80003d8:	2301      	movs	r3, #1
 80003da:	9301      	str	r3, [sp, #4]
 80003dc:	f107 0308 	add.w	r3, r7, #8
 80003e0:	9300      	str	r3, [sp, #0]
 80003e2:	2301      	movs	r3, #1
 80003e4:	222b      	movs	r2, #43	; 0x2b
 80003e6:	2130      	movs	r1, #48	; 0x30
 80003e8:	6878      	ldr	r0, [r7, #4]
 80003ea:	f003 f9f1 	bl	80037d0 <HAL_I2C_Mem_Read>
	OUT.Y.bit.HI = data_HI_RX[0] & 0xff;
 80003ee:	7a3a      	ldrb	r2, [r7, #8]
 80003f0:	4b0d      	ldr	r3, [pc, #52]	; (8000428 <read_y_axis+0x78>)
 80003f2:	70da      	strb	r2, [r3, #3]

	HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_Y_LO, 1, &data_LO_RX[0], 1, 10);
 80003f4:	230a      	movs	r3, #10
 80003f6:	9302      	str	r3, [sp, #8]
 80003f8:	2301      	movs	r3, #1
 80003fa:	9301      	str	r3, [sp, #4]
 80003fc:	f107 030c 	add.w	r3, r7, #12
 8000400:	9300      	str	r3, [sp, #0]
 8000402:	2301      	movs	r3, #1
 8000404:	222a      	movs	r2, #42	; 0x2a
 8000406:	2130      	movs	r1, #48	; 0x30
 8000408:	6878      	ldr	r0, [r7, #4]
 800040a:	f003 f9e1 	bl	80037d0 <HAL_I2C_Mem_Read>
	OUT.Y.bit.LO = data_LO_RX[0] & 0xff;
 800040e:	7b3a      	ldrb	r2, [r7, #12]
 8000410:	4b05      	ldr	r3, [pc, #20]	; (8000428 <read_y_axis+0x78>)
 8000412:	709a      	strb	r2, [r3, #2]

	rs.RS_Y_axis_data = 1;
 8000414:	4b05      	ldr	r3, [pc, #20]	; (800042c <read_y_axis+0x7c>)
 8000416:	2201      	movs	r2, #1
 8000418:	60da      	str	r2, [r3, #12]
    }

}
 800041a:	bf00      	nop
 800041c:	3710      	adds	r7, #16
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	20000000 	.word	0x20000000
 8000428:	20000090 	.word	0x20000090
 800042c:	200000ac 	.word	0x200000ac

08000430 <read_z_axis>:


void read_z_axis(I2C_HandleTypeDef *i2c){
 8000430:	b580      	push	{r7, lr}
 8000432:	b088      	sub	sp, #32
 8000434:	af04      	add	r7, sp, #16
 8000436:	6078      	str	r0, [r7, #4]

    uint8_t data_LO_RX[1], data_HI_RX[1];
    if(ACC_set.STATUS_REG.bit.ZOR || ACC_set.STATUS_REG.bit.ZDA){
 8000438:	4b1a      	ldr	r3, [pc, #104]	; (80004a4 <read_z_axis+0x74>)
 800043a:	78db      	ldrb	r3, [r3, #3]
 800043c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000440:	b2db      	uxtb	r3, r3
 8000442:	2b00      	cmp	r3, #0
 8000444:	d106      	bne.n	8000454 <read_z_axis+0x24>
 8000446:	4b17      	ldr	r3, [pc, #92]	; (80004a4 <read_z_axis+0x74>)
 8000448:	78db      	ldrb	r3, [r3, #3]
 800044a:	f003 0304 	and.w	r3, r3, #4
 800044e:	b2db      	uxtb	r3, r3
 8000450:	2b00      	cmp	r3, #0
 8000452:	d022      	beq.n	800049a <read_z_axis+0x6a>

	HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_Z_HI, 1, &data_HI_RX[0], 1, 10);
 8000454:	230a      	movs	r3, #10
 8000456:	9302      	str	r3, [sp, #8]
 8000458:	2301      	movs	r3, #1
 800045a:	9301      	str	r3, [sp, #4]
 800045c:	f107 0308 	add.w	r3, r7, #8
 8000460:	9300      	str	r3, [sp, #0]
 8000462:	2301      	movs	r3, #1
 8000464:	222d      	movs	r2, #45	; 0x2d
 8000466:	2130      	movs	r1, #48	; 0x30
 8000468:	6878      	ldr	r0, [r7, #4]
 800046a:	f003 f9b1 	bl	80037d0 <HAL_I2C_Mem_Read>
	OUT.Z.bit.HI = data_HI_RX[0] & 0xff;
 800046e:	7a3a      	ldrb	r2, [r7, #8]
 8000470:	4b0d      	ldr	r3, [pc, #52]	; (80004a8 <read_z_axis+0x78>)
 8000472:	715a      	strb	r2, [r3, #5]

	HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_Z_LO, 1, &data_LO_RX[0], 1, 10);
 8000474:	230a      	movs	r3, #10
 8000476:	9302      	str	r3, [sp, #8]
 8000478:	2301      	movs	r3, #1
 800047a:	9301      	str	r3, [sp, #4]
 800047c:	f107 030c 	add.w	r3, r7, #12
 8000480:	9300      	str	r3, [sp, #0]
 8000482:	2301      	movs	r3, #1
 8000484:	222c      	movs	r2, #44	; 0x2c
 8000486:	2130      	movs	r1, #48	; 0x30
 8000488:	6878      	ldr	r0, [r7, #4]
 800048a:	f003 f9a1 	bl	80037d0 <HAL_I2C_Mem_Read>
	OUT.Z.bit.LO = data_LO_RX[0] & 0xff;
 800048e:	7b3a      	ldrb	r2, [r7, #12]
 8000490:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <read_z_axis+0x78>)
 8000492:	711a      	strb	r2, [r3, #4]

	rs.RS_Z_axis_data = 1;
 8000494:	4b05      	ldr	r3, [pc, #20]	; (80004ac <read_z_axis+0x7c>)
 8000496:	2201      	movs	r2, #1
 8000498:	611a      	str	r2, [r3, #16]
    }

//    if(rs.RS_Z_axis_data && rs.RS_X_axis_data && rs.RS_Y_axis_data){
//    	rs.RS_DataReady = 1;
//    }
}
 800049a:	bf00      	nop
 800049c:	3710      	adds	r7, #16
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	20000000 	.word	0x20000000
 80004a8:	20000090 	.word	0x20000090
 80004ac:	200000ac 	.word	0x200000ac

080004b0 <MCP2515_SetNormalMode>:

/* MCP2515 를 Normal모드로 전환 */


bool MCP2515_SetNormalMode(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
  /* CANCTRL Register Normal 모드 설정 */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 80004b6:	2100      	movs	r1, #0
 80004b8:	200f      	movs	r0, #15
 80004ba:	f000 f851 	bl	8000560 <MCP2515_WriteByte>

  uint8_t loop = 10;
 80004be:	230a      	movs	r3, #10
 80004c0:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 80004c2:	200e      	movs	r0, #14
 80004c4:	f000 f828 	bl	8000518 <MCP2515_ReadByte>
 80004c8:	4603      	mov	r3, r0
 80004ca:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d101      	bne.n	80004d6 <MCP2515_SetNormalMode+0x26>
      return true;
 80004d2:	2301      	movs	r3, #1
 80004d4:	e006      	b.n	80004e4 <MCP2515_SetNormalMode+0x34>

    loop--;
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	3b01      	subs	r3, #1
 80004da:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 80004dc:	79fb      	ldrb	r3, [r7, #7]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d1ef      	bne.n	80004c2 <MCP2515_SetNormalMode+0x12>

  return false;
 80004e2:	2300      	movs	r3, #0
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	3708      	adds	r7, #8
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}

080004ec <MCP2515_Reset>:
  return false;
}

/* MCP2515 SPI-Reset */
void MCP2515_Reset(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  MCP2515_CS_LOW();
 80004f0:	2200      	movs	r2, #0
 80004f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004f6:	4807      	ldr	r0, [pc, #28]	; (8000514 <MCP2515_Reset+0x28>)
 80004f8:	f002 fb90 	bl	8002c1c <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_RESET);
 80004fc:	20c0      	movs	r0, #192	; 0xc0
 80004fe:	f000 f8bb 	bl	8000678 <SPI_Tx>

  MCP2515_CS_HIGH();
 8000502:	2201      	movs	r2, #1
 8000504:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000508:	4802      	ldr	r0, [pc, #8]	; (8000514 <MCP2515_Reset+0x28>)
 800050a:	f002 fb87 	bl	8002c1c <HAL_GPIO_WritePin>
}
 800050e:	bf00      	nop
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40010800 	.word	0x40010800

08000518 <MCP2515_ReadByte>:

/* 1바이트 읽기 */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;

  MCP2515_CS_LOW();
 8000522:	2200      	movs	r2, #0
 8000524:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000528:	480c      	ldr	r0, [pc, #48]	; (800055c <MCP2515_ReadByte+0x44>)
 800052a:	f002 fb77 	bl	8002c1c <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ);
 800052e:	2003      	movs	r0, #3
 8000530:	f000 f8a2 	bl	8000678 <SPI_Tx>
  SPI_Tx(address);
 8000534:	79fb      	ldrb	r3, [r7, #7]
 8000536:	4618      	mov	r0, r3
 8000538:	f000 f89e 	bl	8000678 <SPI_Tx>
  retVal = SPI_Rx();
 800053c:	f000 f8c2 	bl	80006c4 <SPI_Rx>
 8000540:	4603      	mov	r3, r0
 8000542:	73fb      	strb	r3, [r7, #15]

  MCP2515_CS_HIGH();
 8000544:	2201      	movs	r2, #1
 8000546:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800054a:	4804      	ldr	r0, [pc, #16]	; (800055c <MCP2515_ReadByte+0x44>)
 800054c:	f002 fb66 	bl	8002c1c <HAL_GPIO_WritePin>

  return retVal;
 8000550:	7bfb      	ldrb	r3, [r7, #15]
}
 8000552:	4618      	mov	r0, r3
 8000554:	3710      	adds	r7, #16
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	40010800 	.word	0x40010800

08000560 <MCP2515_WriteByte>:
  MCP2515_CS_HIGH();
}

/* 1바이트 쓰기 */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	460a      	mov	r2, r1
 800056a:	71fb      	strb	r3, [r7, #7]
 800056c:	4613      	mov	r3, r2
 800056e:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8000570:	2200      	movs	r2, #0
 8000572:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000576:	480c      	ldr	r0, [pc, #48]	; (80005a8 <MCP2515_WriteByte+0x48>)
 8000578:	f002 fb50 	bl	8002c1c <HAL_GPIO_WritePin>
  SPI_Tx(MCP2515_WRITE);
 800057c:	2002      	movs	r0, #2
 800057e:	f000 f87b 	bl	8000678 <SPI_Tx>
  SPI_Tx(address);
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	4618      	mov	r0, r3
 8000586:	f000 f877 	bl	8000678 <SPI_Tx>
  SPI_Tx(data);
 800058a:	79bb      	ldrb	r3, [r7, #6]
 800058c:	4618      	mov	r0, r3
 800058e:	f000 f873 	bl	8000678 <SPI_Tx>
  MCP2515_CS_HIGH();
 8000592:	2201      	movs	r2, #1
 8000594:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000598:	4803      	ldr	r0, [pc, #12]	; (80005a8 <MCP2515_WriteByte+0x48>)
 800059a:	f002 fb3f 	bl	8002c1c <HAL_GPIO_WritePin>
}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40010800 	.word	0x40010800

080005ac <MCP2515_WriteByteSequence>:

/* Sequential Bytes 쓰기 */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	603a      	str	r2, [r7, #0]
 80005b6:	71fb      	strb	r3, [r7, #7]
 80005b8:	460b      	mov	r3, r1
 80005ba:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 80005bc:	2200      	movs	r2, #0
 80005be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005c2:	480f      	ldr	r0, [pc, #60]	; (8000600 <MCP2515_WriteByteSequence+0x54>)
 80005c4:	f002 fb2a 	bl	8002c1c <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 80005c8:	2002      	movs	r0, #2
 80005ca:	f000 f855 	bl	8000678 <SPI_Tx>
  SPI_Tx(startAddress);
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 f851 	bl	8000678 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 80005d6:	79ba      	ldrb	r2, [r7, #6]
 80005d8:	79fb      	ldrb	r3, [r7, #7]
 80005da:	1ad3      	subs	r3, r2, r3
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	3301      	adds	r3, #1
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	4619      	mov	r1, r3
 80005e4:	6838      	ldr	r0, [r7, #0]
 80005e6:	f000 f859 	bl	800069c <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 80005ea:	2201      	movs	r2, #1
 80005ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005f0:	4803      	ldr	r0, [pc, #12]	; (8000600 <MCP2515_WriteByteSequence+0x54>)
 80005f2:	f002 fb13 	bl	8002c1c <HAL_GPIO_WritePin>
}
 80005f6:	bf00      	nop
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40010800 	.word	0x40010800

08000604 <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* RTS 명령을 통해서 TxBuffer 전송 */
void MCP2515_RequestToSend(uint8_t instruction)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 800060e:	2200      	movs	r2, #0
 8000610:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000614:	4808      	ldr	r0, [pc, #32]	; (8000638 <MCP2515_RequestToSend+0x34>)
 8000616:	f002 fb01 	bl	8002c1c <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	4618      	mov	r0, r3
 800061e:	f000 f82b 	bl	8000678 <SPI_Tx>

  MCP2515_CS_HIGH();
 8000622:	2201      	movs	r2, #1
 8000624:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000628:	4803      	ldr	r0, [pc, #12]	; (8000638 <MCP2515_RequestToSend+0x34>)
 800062a:	f002 faf7 	bl	8002c1c <HAL_GPIO_WritePin>
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40010800 	.word	0x40010800

0800063c <MCP2515_ReadStatus>:

/* MCP2515 Status 확인 */
uint8_t MCP2515_ReadStatus(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 8000642:	2200      	movs	r2, #0
 8000644:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000648:	480a      	ldr	r0, [pc, #40]	; (8000674 <MCP2515_ReadStatus+0x38>)
 800064a:	f002 fae7 	bl	8002c1c <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ_STATUS);
 800064e:	20a0      	movs	r0, #160	; 0xa0
 8000650:	f000 f812 	bl	8000678 <SPI_Tx>
  retVal = SPI_Rx();
 8000654:	f000 f836 	bl	80006c4 <SPI_Rx>
 8000658:	4603      	mov	r3, r0
 800065a:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 800065c:	2201      	movs	r2, #1
 800065e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000662:	4804      	ldr	r0, [pc, #16]	; (8000674 <MCP2515_ReadStatus+0x38>)
 8000664:	f002 fada 	bl	8002c1c <HAL_GPIO_WritePin>

  return retVal;
 8000668:	79fb      	ldrb	r3, [r7, #7]
}
 800066a:	4618      	mov	r0, r3
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40010800 	.word	0x40010800

08000678 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx Wrapper 함수 */
static void SPI_Tx(uint8_t data)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 8000682:	1df9      	adds	r1, r7, #7
 8000684:	2364      	movs	r3, #100	; 0x64
 8000686:	2201      	movs	r2, #1
 8000688:	4803      	ldr	r0, [pc, #12]	; (8000698 <SPI_Tx+0x20>)
 800068a:	f004 fdcf 	bl	800522c <HAL_SPI_Transmit>
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000180 	.word	0x20000180

0800069c <SPI_TxBuffer>:

/* SPI Tx Wrapper 함수 */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	460b      	mov	r3, r1
 80006a6:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
 80006a8:	78fb      	ldrb	r3, [r7, #3]
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	2364      	movs	r3, #100	; 0x64
 80006ae:	6879      	ldr	r1, [r7, #4]
 80006b0:	4803      	ldr	r0, [pc, #12]	; (80006c0 <SPI_TxBuffer+0x24>)
 80006b2:	f004 fdbb 	bl	800522c <HAL_SPI_Transmit>
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000180 	.word	0x20000180

080006c4 <SPI_Rx>:

/* SPI Rx Wrapper 함수 */
static uint8_t SPI_Rx(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 80006ca:	1df9      	adds	r1, r7, #7
 80006cc:	2364      	movs	r3, #100	; 0x64
 80006ce:	2201      	movs	r2, #1
 80006d0:	4803      	ldr	r0, [pc, #12]	; (80006e0 <SPI_Rx+0x1c>)
 80006d2:	f004 feee 	bl	80054b2 <HAL_SPI_Receive>
  return retVal;
 80006d6:	79fb      	ldrb	r3, [r7, #7]
}
 80006d8:	4618      	mov	r0, r3
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000180 	.word	0x20000180

080006e4 <en_peripheria>:
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
}

void en_peripheria(CAN_HandleTypeDef *hcan){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]


	if(HAL_CAN_Start(hcan) != HAL_OK){
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f001 f971 	bl	80019d4 <HAL_CAN_Start>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <en_peripheria+0x18>
	  Error_Handler();
 80006f8:	f000 fca4 	bl	8001044 <Error_Handler>
	}

	if(HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 80006fc:	2102      	movs	r1, #2
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f001 facd 	bl	8001c9e <HAL_CAN_ActivateNotification>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <en_peripheria+0x2a>
	  Error_Handler();
 800070a:	f000 fc9b 	bl	8001044 <Error_Handler>
	}

	if(HAL_CAN_ActivateNotification(hcan, CAN_IT_ERROR) != HAL_OK){
 800070e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f001 fac3 	bl	8001c9e <HAL_CAN_ActivateNotification>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <en_peripheria+0x3e>
	  Error_Handler();
 800071e:	f000 fc91 	bl	8001044 <Error_Handler>
	}
	/*Setting normal mode*/
	  while(MCP2515_SetNormalMode() != true);
 8000722:	bf00      	nop
 8000724:	f7ff fec4 	bl	80004b0 <MCP2515_SetNormalMode>
 8000728:	4603      	mov	r3, r0
 800072a:	f083 0301 	eor.w	r3, r3, #1
 800072e:	b2db      	uxtb	r3, r3
 8000730:	2b00      	cmp	r3, #0
 8000732:	d1f7      	bne.n	8000724 <en_peripheria+0x40>
}
 8000734:	bf00      	nop
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <setting_CNFx>:
void setting_CNFx(){
 800073e:	b580      	push	{r7, lr}
 8000740:	b088      	sub	sp, #32
 8000742:	af00      	add	r7, sp, #0
 * Tbit = SyncSeg + PropSeg + PhSeg1+ PhSeg2 = 16(18)
 * Tbit = 1tq + (7tq + 7tq) + 2tq = 17 => 88.235%
 * BRP = 1
 * SJW = 00 => 1*Tq */

    MCP2515_WriteByte(MCP2515_CNF1, 0x1);		//Настройка тактирования
 8000744:	2101      	movs	r1, #1
 8000746:	202a      	movs	r0, #42	; 0x2a
 8000748:	f7ff ff0a 	bl	8000560 <MCP2515_WriteByte>
    MCP2515_WriteByte(MCP2515_CNF2, 0xB1);		//FF
 800074c:	21b1      	movs	r1, #177	; 0xb1
 800074e:	2029      	movs	r0, #41	; 0x29
 8000750:	f7ff ff06 	bl	8000560 <MCP2515_WriteByte>
    MCP2515_WriteByte(MCP2515_CNF3, 0x85);		//82
 8000754:	2185      	movs	r1, #133	; 0x85
 8000756:	2028      	movs	r0, #40	; 0x28
 8000758:	f7ff ff02 	bl	8000560 <MCP2515_WriteByte>

    MCP2515_WriteByte(MCP2515_TXB0CTRL, 0x0);		//Настройка состояния, приоритетности поступаемых сообщений в буфер
 800075c:	2100      	movs	r1, #0
 800075e:	2030      	movs	r0, #48	; 0x30
 8000760:	f7ff fefe 	bl	8000560 <MCP2515_WriteByte>
    MCP2515_WriteByte(MCP2515_TXB1CTRL, 0x0);
 8000764:	2100      	movs	r1, #0
 8000766:	2040      	movs	r0, #64	; 0x40
 8000768:	f7ff fefa 	bl	8000560 <MCP2515_WriteByte>
    MCP2515_WriteByte(MCP2515_TXB2CTRL, 0x0);
 800076c:	2100      	movs	r1, #0
 800076e:	2050      	movs	r0, #80	; 0x50
 8000770:	f7ff fef6 	bl	8000560 <MCP2515_WriteByte>

    MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x0);
 8000774:	2100      	movs	r1, #0
 8000776:	2060      	movs	r0, #96	; 0x60
 8000778:	f7ff fef2 	bl	8000560 <MCP2515_WriteByte>
    MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x0);
 800077c:	2100      	movs	r1, #0
 800077e:	2070      	movs	r0, #112	; 0x70
 8000780:	f7ff feee 	bl	8000560 <MCP2515_WriteByte>

    MCP2515_WriteByte(MCP2515_CANINTE, 0x0);
 8000784:	2100      	movs	r1, #0
 8000786:	202b      	movs	r0, #43	; 0x2b
 8000788:	f7ff feea 	bl	8000560 <MCP2515_WriteByte>
    MCP2515_WriteByte(MCP2515_CANINTF, 0x0);
 800078c:	2100      	movs	r1, #0
 800078e:	202c      	movs	r0, #44	; 0x2c
 8000790:	f7ff fee6 	bl	8000560 <MCP2515_WriteByte>
    RXF5 RXF5reg;
    RXM0 RXM0reg;
    RXM1 RXM1reg;

    /* Intialize Rx Mask values */
    RXM0reg.RXM0SIDH = 0x0;
 8000794:	2300      	movs	r3, #0
 8000796:	713b      	strb	r3, [r7, #4]
    RXM0reg.RXM0SIDL = 0x0;
 8000798:	2300      	movs	r3, #0
 800079a:	717b      	strb	r3, [r7, #5]
    RXM0reg.RXM0EID8 = 0x0;
 800079c:	2300      	movs	r3, #0
 800079e:	71bb      	strb	r3, [r7, #6]
    RXM0reg.RXM0EID0 = 0x0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	71fb      	strb	r3, [r7, #7]

    RXM1reg.RXM1SIDH = 0x0;
 80007a4:	2300      	movs	r3, #0
 80007a6:	703b      	strb	r3, [r7, #0]
    RXM1reg.RXM1SIDL = 0x0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	707b      	strb	r3, [r7, #1]
    RXM1reg.RXM1EID8 = 0x0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	70bb      	strb	r3, [r7, #2]
    RXM1reg.RXM1EID0 = 0x0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	70fb      	strb	r3, [r7, #3]

    /* Intialize Rx Filter values */
    RXF0reg.RXF0SIDH = 0x0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	773b      	strb	r3, [r7, #28]
    RXF0reg.RXF0SIDL = 0x0;      //Starndard Filter
 80007b8:	2300      	movs	r3, #0
 80007ba:	777b      	strb	r3, [r7, #29]
    RXF0reg.RXF0EID8 = 0x0;
 80007bc:	2300      	movs	r3, #0
 80007be:	77bb      	strb	r3, [r7, #30]
    RXF0reg.RXF0EID0 = 0x0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	77fb      	strb	r3, [r7, #31]

    RXF1reg.RXF1SIDH = 0x0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	763b      	strb	r3, [r7, #24]
    RXF1reg.RXF1SIDL = 0x0;      //Exntended Filter
 80007c8:	2300      	movs	r3, #0
 80007ca:	767b      	strb	r3, [r7, #25]
    RXF1reg.RXF1EID8 = 0x0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	76bb      	strb	r3, [r7, #26]
    RXF1reg.RXF1EID0 = 0x0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	76fb      	strb	r3, [r7, #27]

    RXF2reg.RXF2SIDH = 0x0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	753b      	strb	r3, [r7, #20]
    RXF2reg.RXF2SIDL = 0x0;
 80007d8:	2300      	movs	r3, #0
 80007da:	757b      	strb	r3, [r7, #21]
    RXF2reg.RXF2EID8 = 0x0;
 80007dc:	2300      	movs	r3, #0
 80007de:	75bb      	strb	r3, [r7, #22]
    RXF2reg.RXF2EID0 = 0x0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	75fb      	strb	r3, [r7, #23]

    RXF3reg.RXF3SIDH = 0x0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	743b      	strb	r3, [r7, #16]
    RXF3reg.RXF3SIDL = 0x0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	747b      	strb	r3, [r7, #17]
    RXF3reg.RXF3EID8 = 0x0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	74bb      	strb	r3, [r7, #18]
    RXF3reg.RXF3EID0 = 0x0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	74fb      	strb	r3, [r7, #19]

    RXF4reg.RXF4SIDH = 0x0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	733b      	strb	r3, [r7, #12]
    RXF4reg.RXF4SIDL = 0x0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	737b      	strb	r3, [r7, #13]
    RXF4reg.RXF4EID8 = 0x0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	73bb      	strb	r3, [r7, #14]
    RXF4reg.RXF4EID0 = 0x0;
 8000800:	2300      	movs	r3, #0
 8000802:	73fb      	strb	r3, [r7, #15]

    RXF5reg.RXF5SIDH = 0x0;
 8000804:	2300      	movs	r3, #0
 8000806:	723b      	strb	r3, [r7, #8]
    RXF5reg.RXF5SIDL = 0x0;		//08
 8000808:	2300      	movs	r3, #0
 800080a:	727b      	strb	r3, [r7, #9]
    RXF5reg.RXF5EID8 = 0x0;
 800080c:	2300      	movs	r3, #0
 800080e:	72bb      	strb	r3, [r7, #10]
    RXF5reg.RXF5EID0 = 0x0;
 8000810:	2300      	movs	r3, #0
 8000812:	72fb      	strb	r3, [r7, #11]

    MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	461a      	mov	r2, r3
 8000818:	2123      	movs	r1, #35	; 0x23
 800081a:	2020      	movs	r0, #32
 800081c:	f7ff fec6 	bl	80005ac <MCP2515_WriteByteSequence>
    MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8000820:	463b      	mov	r3, r7
 8000822:	461a      	mov	r2, r3
 8000824:	2127      	movs	r1, #39	; 0x27
 8000826:	2024      	movs	r0, #36	; 0x24
 8000828:	f7ff fec0 	bl	80005ac <MCP2515_WriteByteSequence>
    MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	461a      	mov	r2, r3
 8000832:	2103      	movs	r1, #3
 8000834:	2000      	movs	r0, #0
 8000836:	f7ff feb9 	bl	80005ac <MCP2515_WriteByteSequence>
    MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 800083a:	f107 0318 	add.w	r3, r7, #24
 800083e:	461a      	mov	r2, r3
 8000840:	2107      	movs	r1, #7
 8000842:	2004      	movs	r0, #4
 8000844:	f7ff feb2 	bl	80005ac <MCP2515_WriteByteSequence>
    MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	461a      	mov	r2, r3
 800084e:	210b      	movs	r1, #11
 8000850:	2008      	movs	r0, #8
 8000852:	f7ff feab 	bl	80005ac <MCP2515_WriteByteSequence>
    MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8000856:	f107 0310 	add.w	r3, r7, #16
 800085a:	461a      	mov	r2, r3
 800085c:	2113      	movs	r1, #19
 800085e:	2010      	movs	r0, #16
 8000860:	f7ff fea4 	bl	80005ac <MCP2515_WriteByteSequence>
    MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 8000864:	f107 030c 	add.w	r3, r7, #12
 8000868:	461a      	mov	r2, r3
 800086a:	2117      	movs	r1, #23
 800086c:	2014      	movs	r0, #20
 800086e:	f7ff fe9d 	bl	80005ac <MCP2515_WriteByteSequence>
    MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8000872:	f107 0308 	add.w	r3, r7, #8
 8000876:	461a      	mov	r2, r3
 8000878:	211b      	movs	r1, #27
 800087a:	2018      	movs	r0, #24
 800087c:	f7ff fe96 	bl	80005ac <MCP2515_WriteByteSequence>
}
 8000880:	bf00      	nop
 8000882:	3720      	adds	r7, #32
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}

08000888 <MCP_settings>:

void MCP_settings(){
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0

    HAL_SPI_StateTypeDef	result;

    result = HAL_SPI_GetState(&hspi1);
 800088e:	4809      	ldr	r0, [pc, #36]	; (80008b4 <MCP_settings+0x2c>)
 8000890:	f005 f8d7 	bl	8005a42 <HAL_SPI_GetState>
 8000894:	4603      	mov	r3, r0
 8000896:	71fb      	strb	r3, [r7, #7]
     if(result == HAL_SPI_STATE_READY)
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d101      	bne.n	80008a2 <MCP_settings+0x1a>
    	 MCP2515_Reset();
 800089e:	f7ff fe25 	bl	80004ec <MCP2515_Reset>
     HAL_Delay(3);
 80008a2:	2003      	movs	r0, #3
 80008a4:	f000 feae 	bl	8001604 <HAL_Delay>

    setting_CNFx();
 80008a8:	f7ff ff49 	bl	800073e <setting_CNFx>
}
 80008ac:	bf00      	nop
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20000180 	.word	0x20000180

080008b8 <SPI_Send>:


void SPI_Send(CAN_TxHeaderTypeDef *TxBuff){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
    uint8_t	res;

    ctrl_status.ctrl_status = MCP2515_ReadStatus();
 80008c0:	f7ff febc 	bl	800063c <MCP2515_ReadStatus>
 80008c4:	4603      	mov	r3, r0
 80008c6:	461a      	mov	r2, r3
 80008c8:	4b29      	ldr	r3, [pc, #164]	; (8000970 <SPI_Send+0xb8>)
 80008ca:	701a      	strb	r2, [r3, #0]

    if(ctrl_status.TXB0REQ != 1){
 80008cc:	4b28      	ldr	r3, [pc, #160]	; (8000970 <SPI_Send+0xb8>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	f003 0304 	and.w	r3, r3, #4
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d146      	bne.n	8000968 <SPI_Send+0xb0>

		res = HAL_SPI_GetState(&hspi1);
 80008da:	4826      	ldr	r0, [pc, #152]	; (8000974 <SPI_Send+0xbc>)
 80008dc:	f005 f8b1 	bl	8005a42 <HAL_SPI_GetState>
 80008e0:	4603      	mov	r3, r0
 80008e2:	73fb      	strb	r3, [r7, #15]
		if(res == HAL_SPI_STATE_READY){
 80008e4:	7bfb      	ldrb	r3, [r7, #15]
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d13e      	bne.n	8000968 <SPI_Send+0xb0>

			uint8_t	axis_data[6];

			axis_data[0] = OUT.X.bit.LO;
 80008ea:	4b23      	ldr	r3, [pc, #140]	; (8000978 <SPI_Send+0xc0>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	723b      	strb	r3, [r7, #8]
			axis_data[1] = OUT.X.bit.HI;
 80008f0:	4b21      	ldr	r3, [pc, #132]	; (8000978 <SPI_Send+0xc0>)
 80008f2:	785b      	ldrb	r3, [r3, #1]
 80008f4:	727b      	strb	r3, [r7, #9]
			axis_data[2] = OUT.Y.bit.LO;
 80008f6:	4b20      	ldr	r3, [pc, #128]	; (8000978 <SPI_Send+0xc0>)
 80008f8:	789b      	ldrb	r3, [r3, #2]
 80008fa:	72bb      	strb	r3, [r7, #10]
			axis_data[3] = OUT.Y.bit.HI;
 80008fc:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <SPI_Send+0xc0>)
 80008fe:	78db      	ldrb	r3, [r3, #3]
 8000900:	72fb      	strb	r3, [r7, #11]
			axis_data[4] = OUT.Z.bit.LO;
 8000902:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <SPI_Send+0xc0>)
 8000904:	791b      	ldrb	r3, [r3, #4]
 8000906:	733b      	strb	r3, [r7, #12]
			axis_data[5] = OUT.Z.bit.HI;
 8000908:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <SPI_Send+0xc0>)
 800090a:	795b      	ldrb	r3, [r3, #5]
 800090c:	737b      	strb	r3, [r7, #13]


			MCP2515_CS_LOW();
 800090e:	2200      	movs	r2, #0
 8000910:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000914:	4819      	ldr	r0, [pc, #100]	; (800097c <SPI_Send+0xc4>)
 8000916:	f002 f981 	bl	8002c1c <HAL_GPIO_WritePin>
			SPI_Tx(MCP2515_LOAD_TXB0SIDH);
 800091a:	2040      	movs	r0, #64	; 0x40
 800091c:	f7ff feac 	bl	8000678 <SPI_Tx>
		    SPI_TxBuffer( (uint8_t*)(TxBuff->StdId), 4);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	2104      	movs	r1, #4
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff feb8 	bl	800069c <SPI_TxBuffer>
			SPI_Tx((uint8_t)TxBuff->DLC);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	691b      	ldr	r3, [r3, #16]
 8000930:	b2db      	uxtb	r3, r3
 8000932:	4618      	mov	r0, r3
 8000934:	f7ff fea0 	bl	8000678 <SPI_Tx>
			SPI_TxBuffer(axis_data, (uint8_t)TxBuff->DLC);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	691b      	ldr	r3, [r3, #16]
 800093c:	b2da      	uxtb	r2, r3
 800093e:	f107 0308 	add.w	r3, r7, #8
 8000942:	4611      	mov	r1, r2
 8000944:	4618      	mov	r0, r3
 8000946:	f7ff fea9 	bl	800069c <SPI_TxBuffer>
			SPI_TxBuffer(axis_data, 2);
 800094a:	f107 0308 	add.w	r3, r7, #8
 800094e:	2102      	movs	r1, #2
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff fea3 	bl	800069c <SPI_TxBuffer>
			MCP2515_CS_HIGH();
 8000956:	2201      	movs	r2, #1
 8000958:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800095c:	4807      	ldr	r0, [pc, #28]	; (800097c <SPI_Send+0xc4>)
 800095e:	f002 f95d 	bl	8002c1c <HAL_GPIO_WritePin>

			MCP2515_RequestToSend(MCP2515_RTS_TX0);
 8000962:	2081      	movs	r0, #129	; 0x81
 8000964:	f7ff fe4e 	bl	8000604 <MCP2515_RequestToSend>
//			MCP2515_CS_HIGH();
//
//			MCP2515_RequestToSend(MCP2515_RTS_TX2);
//		}
//    }
}
 8000968:	bf00      	nop
 800096a:	3710      	adds	r7, #16
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000098 	.word	0x20000098
 8000974:	20000180 	.word	0x20000180
 8000978:	20000090 	.word	0x20000090
 800097c:	40010800 	.word	0x40010800

08000980 <check_errors>:

void check_errors(CAN_HandleTypeDef *hcan){
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	static uint8_t buss_err = 0x0,
			TX_err_pass = 0x0,
			RX_err_pass = 0x0;
	HAL_CAN_StateTypeDef	res;

	CTRL.REG_ERRORS.error_flag_reg = MCP2515_ReadByte(MCP2515_EFLG);
 8000988:	202d      	movs	r0, #45	; 0x2d
 800098a:	f7ff fdc5 	bl	8000518 <MCP2515_ReadByte>
 800098e:	4603      	mov	r3, r0
 8000990:	461a      	mov	r2, r3
 8000992:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <check_errors+0x78>)
 8000994:	721a      	strb	r2, [r3, #8]

	buss_err = CANSPI_isBussOff();
 8000996:	f000 f837 	bl	8000a08 <CANSPI_isBussOff>
 800099a:	4603      	mov	r3, r0
 800099c:	461a      	mov	r2, r3
 800099e:	4b17      	ldr	r3, [pc, #92]	; (80009fc <check_errors+0x7c>)
 80009a0:	701a      	strb	r2, [r3, #0]
	TX_err_pass = CANSPI_isTxErrorPassive();
 80009a2:	f000 f84d 	bl	8000a40 <CANSPI_isTxErrorPassive>
 80009a6:	4603      	mov	r3, r0
 80009a8:	461a      	mov	r2, r3
 80009aa:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <check_errors+0x80>)
 80009ac:	701a      	strb	r2, [r3, #0]
	RX_err_pass = CANSPI_isRxErrorPassive();
 80009ae:	f000 f863 	bl	8000a78 <CANSPI_isRxErrorPassive>
 80009b2:	4603      	mov	r3, r0
 80009b4:	461a      	mov	r2, r3
 80009b6:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <check_errors+0x84>)
 80009b8:	701a      	strb	r2, [r3, #0]
	res = HAL_CAN_GetState(hcan);
 80009ba:	6878      	ldr	r0, [r7, #4]
 80009bc:	f001 fbb7 	bl	800212e <HAL_CAN_GetState>
 80009c0:	4603      	mov	r3, r0
 80009c2:	73fb      	strb	r3, [r7, #15]

	if(TX_err_pass){
 80009c4:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <check_errors+0x80>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d006      	beq.n	80009da <check_errors+0x5a>
		CTRL.CNT_ERRORS.bit.TX_err = MCP2515_ReadByte(MCP2515_TEC);
 80009cc:	201c      	movs	r0, #28
 80009ce:	f7ff fda3 	bl	8000518 <MCP2515_ReadByte>
 80009d2:	4603      	mov	r3, r0
 80009d4:	461a      	mov	r2, r3
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <check_errors+0x78>)
 80009d8:	70da      	strb	r2, [r3, #3]
	}
	if(RX_err_pass){
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <check_errors+0x84>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d006      	beq.n	80009f0 <check_errors+0x70>
		CTRL.CNT_ERRORS.bit.TX_err = MCP2515_ReadByte(MCP2515_REC);
 80009e2:	201d      	movs	r0, #29
 80009e4:	f7ff fd98 	bl	8000518 <MCP2515_ReadByte>
 80009e8:	4603      	mov	r3, r0
 80009ea:	461a      	mov	r2, r3
 80009ec:	4b02      	ldr	r3, [pc, #8]	; (80009f8 <check_errors+0x78>)
 80009ee:	70da      	strb	r2, [r3, #3]
	}
}
 80009f0:	bf00      	nop
 80009f2:	3710      	adds	r7, #16
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	2000009c 	.word	0x2000009c
 80009fc:	200000a8 	.word	0x200000a8
 8000a00:	200000a9 	.word	0x200000a9
 8000a04:	200000aa 	.word	0x200000aa

08000a08 <CANSPI_isBussOff>:

/* check BUS off */
uint8_t CANSPI_isBussOff(void){
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
  uint8_t returnValue = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	71fb      	strb	r3, [r7, #7]

  CTRL.REG_ERRORS.error_flag_reg = MCP2515_ReadByte(MCP2515_EFLG);
 8000a12:	202d      	movs	r0, #45	; 0x2d
 8000a14:	f7ff fd80 	bl	8000518 <MCP2515_ReadByte>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <CANSPI_isBussOff+0x34>)
 8000a1e:	721a      	strb	r2, [r3, #8]

  if(CTRL.REG_ERRORS.TXBO == 1)
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <CANSPI_isBussOff+0x34>)
 8000a22:	7a1b      	ldrb	r3, [r3, #8]
 8000a24:	f003 0320 	and.w	r3, r3, #32
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <CANSPI_isBussOff+0x2a>
  {
    returnValue = 1;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	71fb      	strb	r3, [r7, #7]
  }

  return (returnValue);
 8000a32:	79fb      	ldrb	r3, [r7, #7]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	2000009c 	.word	0x2000009c

08000a40 <CANSPI_isTxErrorPassive>:

/* check Tx Passive Error */
uint8_t CANSPI_isTxErrorPassive(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
  uint8_t returnValue = 0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	71fb      	strb	r3, [r7, #7]

  CTRL.REG_ERRORS.error_flag_reg = MCP2515_ReadByte(MCP2515_EFLG);
 8000a4a:	202d      	movs	r0, #45	; 0x2d
 8000a4c:	f7ff fd64 	bl	8000518 <MCP2515_ReadByte>
 8000a50:	4603      	mov	r3, r0
 8000a52:	461a      	mov	r2, r3
 8000a54:	4b07      	ldr	r3, [pc, #28]	; (8000a74 <CANSPI_isTxErrorPassive+0x34>)
 8000a56:	721a      	strb	r2, [r3, #8]

  if(CTRL.REG_ERRORS.TXEP == 1)
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <CANSPI_isTxErrorPassive+0x34>)
 8000a5a:	7a1b      	ldrb	r3, [r3, #8]
 8000a5c:	f003 0310 	and.w	r3, r3, #16
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <CANSPI_isTxErrorPassive+0x2a>
  {
    returnValue = 1;
 8000a66:	2301      	movs	r3, #1
 8000a68:	71fb      	strb	r3, [r7, #7]
  }

  return (returnValue);
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3708      	adds	r7, #8
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	2000009c 	.word	0x2000009c

08000a78 <CANSPI_isRxErrorPassive>:

/* check Rx Passive Error */
uint8_t CANSPI_isRxErrorPassive(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
  uint8_t returnValue = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	71fb      	strb	r3, [r7, #7]

  CTRL.REG_ERRORS.error_flag_reg = MCP2515_ReadByte(MCP2515_EFLG);
 8000a82:	202d      	movs	r0, #45	; 0x2d
 8000a84:	f7ff fd48 	bl	8000518 <MCP2515_ReadByte>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4b07      	ldr	r3, [pc, #28]	; (8000aac <CANSPI_isRxErrorPassive+0x34>)
 8000a8e:	721a      	strb	r2, [r3, #8]

  if(CTRL.REG_ERRORS.RXEP == 1)
 8000a90:	4b06      	ldr	r3, [pc, #24]	; (8000aac <CANSPI_isRxErrorPassive+0x34>)
 8000a92:	7a1b      	ldrb	r3, [r3, #8]
 8000a94:	f003 0308 	and.w	r3, r3, #8
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <CANSPI_isRxErrorPassive+0x2a>
  {
    returnValue = 1;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	71fb      	strb	r3, [r7, #7]
  }

  return (returnValue);
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	2000009c 	.word	0x2000009c

08000ab0 <HAL_UART_TxCpltCallback>:
RS_DATA_STRUCT			rs;
extern OUT_DATA			OUT;
OUT_DATA				RX_CAN_Data;


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]

	rs.RS_DataSended = 1;
 8000ab8:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <HAL_UART_TxCpltCallback+0x20>)
 8000aba:	2201      	movs	r2, #1
 8000abc:	605a      	str	r2, [r3, #4]
	rs.RS_DataReady = 0;
 8000abe:	4b04      	ldr	r3, [pc, #16]	; (8000ad0 <HAL_UART_TxCpltCallback+0x20>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	200000ac 	.word	0x200000ac

08000ad4 <HAL_UART_TxHalfCpltCallback>:

void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart){
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]

	rs.RS_X_axis_data = 0;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_UART_TxHalfCpltCallback+0x24>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
	rs.RS_Y_axis_data = 0;
 8000ae2:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <HAL_UART_TxHalfCpltCallback+0x24>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	60da      	str	r2, [r3, #12]
	rs.RS_Z_axis_data = 0;
 8000ae8:	4b03      	ldr	r3, [pc, #12]	; (8000af8 <HAL_UART_TxHalfCpltCallback+0x24>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr
 8000af8:	200000ac 	.word	0x200000ac

08000afc <CAN_Recieve>:

    }

}

void CAN_Recieve(UART_HandleTypeDef *uart, CAN_RxHeaderTypeDef *RxBuff, uint8_t *rx_ml){
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b094      	sub	sp, #80	; 0x50
 8000b00:	af02      	add	r7, sp, #8
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
	char 			buffer[50];

	//HAL_StatusTypeDef	result;

		if(rs.RS_DataReady){
 8000b08:	4b21      	ldr	r3, [pc, #132]	; (8000b90 <CAN_Recieve+0x94>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d037      	beq.n	8000b80 <CAN_Recieve+0x84>

			RX_CAN_Data.X.bit.LO = rx_ml[0];// & 0x0f;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	781a      	ldrb	r2, [r3, #0]
 8000b14:	4b1f      	ldr	r3, [pc, #124]	; (8000b94 <CAN_Recieve+0x98>)
 8000b16:	701a      	strb	r2, [r3, #0]
			RX_CAN_Data.X.bit.HI = rx_ml[1];// & 0x0f;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	785a      	ldrb	r2, [r3, #1]
 8000b1c:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <CAN_Recieve+0x98>)
 8000b1e:	705a      	strb	r2, [r3, #1]
			RX_CAN_Data.Y.bit.LO = rx_ml[2];// & 0x0f;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	789a      	ldrb	r2, [r3, #2]
 8000b24:	4b1b      	ldr	r3, [pc, #108]	; (8000b94 <CAN_Recieve+0x98>)
 8000b26:	709a      	strb	r2, [r3, #2]
			RX_CAN_Data.Y.bit.HI = rx_ml[3];// & 0x0f;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	78da      	ldrb	r2, [r3, #3]
 8000b2c:	4b19      	ldr	r3, [pc, #100]	; (8000b94 <CAN_Recieve+0x98>)
 8000b2e:	70da      	strb	r2, [r3, #3]
			RX_CAN_Data.Z.bit.LO = rx_ml[4];// & 0x0f;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	791a      	ldrb	r2, [r3, #4]
 8000b34:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <CAN_Recieve+0x98>)
 8000b36:	711a      	strb	r2, [r3, #4]
			RX_CAN_Data.Z.bit.HI = rx_ml[5];// & 0x0f;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	795a      	ldrb	r2, [r3, #5]
 8000b3c:	4b15      	ldr	r3, [pc, #84]	; (8000b94 <CAN_Recieve+0x98>)
 8000b3e:	715a      	strb	r2, [r3, #5]

			sprintf(buffer, "X_axis: %d\tY_axis: %d\tZ_axis: %d\r\n", (int16_t)RX_CAN_Data.X.all, (int16_t)RX_CAN_Data.Y.all, (int16_t)RX_CAN_Data.Z.all);
 8000b40:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <CAN_Recieve+0x98>)
 8000b42:	881b      	ldrh	r3, [r3, #0]
 8000b44:	b21b      	sxth	r3, r3
 8000b46:	461a      	mov	r2, r3
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <CAN_Recieve+0x98>)
 8000b4a:	885b      	ldrh	r3, [r3, #2]
 8000b4c:	b21b      	sxth	r3, r3
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <CAN_Recieve+0x98>)
 8000b52:	889b      	ldrh	r3, [r3, #4]
 8000b54:	b21b      	sxth	r3, r3
 8000b56:	f107 0014 	add.w	r0, r7, #20
 8000b5a:	9300      	str	r3, [sp, #0]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	490e      	ldr	r1, [pc, #56]	; (8000b98 <CAN_Recieve+0x9c>)
 8000b60:	f005 ff0a 	bl	8006978 <siprintf>
			HAL_UART_Transmit_DMA(uart, (uint8_t*)buffer, strlen(buffer));
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff faef 	bl	800014c <strlen>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	b29a      	uxth	r2, r3
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	4619      	mov	r1, r3
 8000b78:	68f8      	ldr	r0, [r7, #12]
 8000b7a:	f005 f8b7 	bl	8005cec <HAL_UART_Transmit_DMA>
//				rs.RS_DataReady = 0;
//				}
		}
		else
			rs.RS_DataSended = 0;
}
 8000b7e:	e002      	b.n	8000b86 <CAN_Recieve+0x8a>
			rs.RS_DataSended = 0;
 8000b80:	4b03      	ldr	r3, [pc, #12]	; (8000b90 <CAN_Recieve+0x94>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	605a      	str	r2, [r3, #4]
}
 8000b86:	bf00      	nop
 8000b88:	3748      	adds	r7, #72	; 0x48
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	200000ac 	.word	0x200000ac
 8000b94:	200000c0 	.word	0x200000c0
 8000b98:	08007284 	.word	0x08007284

08000b9c <HAL_CAN_RxFifo0MsgPendingCallback>:
uint8_t RxData[6] = {0};
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0MsgPendingCallback (CAN_HandleTypeDef * hcan){
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
	extern RS_DATA_STRUCT	rs;

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000ba4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ba8:	4811      	ldr	r0, [pc, #68]	; (8000bf0 <HAL_CAN_RxFifo0MsgPendingCallback+0x54>)
 8000baa:	f002 f84f 	bl	8002c4c <HAL_GPIO_TogglePin>

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &Rx_CAN_Header, RxData) == HAL_OK){
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <HAL_CAN_RxFifo0MsgPendingCallback+0x58>)
 8000bb0:	4a11      	ldr	r2, [pc, #68]	; (8000bf8 <HAL_CAN_RxFifo0MsgPendingCallback+0x5c>)
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f000 ff51 	bl	8001a5c <HAL_CAN_GetRxMessage>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d112      	bne.n	8000be6 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
    	if((rs.RS_Z_axis_data && rs.RS_X_axis_data && rs.RS_Y_axis_data) && !(rs.RS_DataSended))
 8000bc0:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000bc2:	691b      	ldr	r3, [r3, #16]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d00e      	beq.n	8000be6 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000bca:	689b      	ldr	r3, [r3, #8]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d00a      	beq.n	8000be6 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
 8000bd0:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d006      	beq.n	8000be6 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d102      	bne.n	8000be6 <HAL_CAN_RxFifo0MsgPendingCallback+0x4a>
    	    	rs.RS_DataReady = 1;
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_CAN_RxFifo0MsgPendingCallback+0x60>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	601a      	str	r2, [r3, #0]
    }
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40011000 	.word	0x40011000
 8000bf4:	20000264 	.word	0x20000264
 8000bf8:	200000e0 	.word	0x200000e0
 8000bfc:	200000ac 	.word	0x200000ac

08000c00 <set_SPI_Header>:


void set_SPI_Header(){
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

    Tx_SPI_Header.StdId = 	0xF<<5;//37 << 5;
 8000c04:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <set_SPI_Header+0x34>)
 8000c06:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000c0a:	601a      	str	r2, [r3, #0]
    Tx_SPI_Header.ExtId = 	0x0;
 8000c0c:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <set_SPI_Header+0x34>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	605a      	str	r2, [r3, #4]
    Tx_SPI_Header.IDE = 	CAN_ID_STD;
 8000c12:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <set_SPI_Header+0x34>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
    Tx_SPI_Header.RTR = 	CAN_RTR_DATA;
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <set_SPI_Header+0x34>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
    Tx_SPI_Header.DLC = 	6;
 8000c1e:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <set_SPI_Header+0x34>)
 8000c20:	2206      	movs	r2, #6
 8000c22:	611a      	str	r2, [r3, #16]
    Tx_SPI_Header.TransmitGlobalTime = DISABLE;
 8000c24:	4b03      	ldr	r3, [pc, #12]	; (8000c34 <set_SPI_Header+0x34>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	751a      	strb	r2, [r3, #20]
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	200000c8 	.word	0x200000c8

08000c38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c3c:	f000 fc80 	bl	8001540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c40:	f000 f832 	bl	8000ca8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c44:	f000 f990 	bl	8000f68 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c48:	f000 f970 	bl	8000f2c <MX_DMA_Init>
  MX_I2C1_Init();
 8000c4c:	f000 f8e0 	bl	8000e10 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000c50:	f000 f942 	bl	8000ed8 <MX_USART1_UART_Init>
  MX_CRC_Init();
 8000c54:	f000 f8c8 	bl	8000de8 <MX_CRC_Init>
  MX_CAN_Init();
 8000c58:	f000 f86c 	bl	8000d34 <MX_CAN_Init>
  MX_SPI1_Init();
 8000c5c:	f000 f906 	bl	8000e6c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  ACC_init(&hi2c1);
 8000c60:	480b      	ldr	r0, [pc, #44]	; (8000c90 <main+0x58>)
 8000c62:	f7ff faab 	bl	80001bc <ACC_init>
  MCP_settings();
 8000c66:	f7ff fe0f 	bl	8000888 <MCP_settings>
  en_peripheria(&hcan);
 8000c6a:	480a      	ldr	r0, [pc, #40]	; (8000c94 <main+0x5c>)
 8000c6c:	f7ff fd3a 	bl	80006e4 <en_peripheria>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    update_ACC_data(&hi2c1);
 8000c70:	4807      	ldr	r0, [pc, #28]	; (8000c90 <main+0x58>)
 8000c72:	f7ff fa73 	bl	800015c <update_ACC_data>
    SPI_Send(&Tx_SPI_Header);
 8000c76:	4808      	ldr	r0, [pc, #32]	; (8000c98 <main+0x60>)
 8000c78:	f7ff fe1e 	bl	80008b8 <SPI_Send>
    CAN_Recieve(&huart1, &Rx_CAN_Header, RxData);
 8000c7c:	4a07      	ldr	r2, [pc, #28]	; (8000c9c <main+0x64>)
 8000c7e:	4908      	ldr	r1, [pc, #32]	; (8000ca0 <main+0x68>)
 8000c80:	4808      	ldr	r0, [pc, #32]	; (8000ca4 <main+0x6c>)
 8000c82:	f7ff ff3b 	bl	8000afc <CAN_Recieve>

    check_errors(&hcan);
 8000c86:	4803      	ldr	r0, [pc, #12]	; (8000c94 <main+0x5c>)
 8000c88:	f7ff fe7a 	bl	8000980 <check_errors>
    update_ACC_data(&hi2c1);
 8000c8c:	e7f0      	b.n	8000c70 <main+0x38>
 8000c8e:	bf00      	nop
 8000c90:	2000012c 	.word	0x2000012c
 8000c94:	200000fc 	.word	0x200000fc
 8000c98:	200000c8 	.word	0x200000c8
 8000c9c:	20000264 	.word	0x20000264
 8000ca0:	200000e0 	.word	0x200000e0
 8000ca4:	200001d8 	.word	0x200001d8

08000ca8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b090      	sub	sp, #64	; 0x40
 8000cac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cae:	f107 0318 	add.w	r3, r7, #24
 8000cb2:	2228      	movs	r2, #40	; 0x28
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f005 fe56 	bl	8006968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
 8000cc8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cd2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ce0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ce4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000ce6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cec:	f107 0318 	add.w	r3, r7, #24
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f003 fe07 	bl	8004904 <HAL_RCC_OscConfig>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000cfc:	f000 f9a2 	bl	8001044 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d00:	230f      	movs	r3, #15
 8000d02:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d04:	2302      	movs	r3, #2
 8000d06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	2101      	movs	r1, #1
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f004 f874 	bl	8004e08 <HAL_RCC_ClockConfig>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000d26:	f000 f98d 	bl	8001044 <Error_Handler>
  }
}
 8000d2a:	bf00      	nop
 8000d2c:	3740      	adds	r7, #64	; 0x40
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
	...

08000d34 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	; 0x28
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000d3a:	4b28      	ldr	r3, [pc, #160]	; (8000ddc <MX_CAN_Init+0xa8>)
 8000d3c:	4a28      	ldr	r2, [pc, #160]	; (8000de0 <MX_CAN_Init+0xac>)
 8000d3e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 12;
 8000d40:	4b26      	ldr	r3, [pc, #152]	; (8000ddc <MX_CAN_Init+0xa8>)
 8000d42:	220c      	movs	r2, #12
 8000d44:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000d46:	4b25      	ldr	r3, [pc, #148]	; (8000ddc <MX_CAN_Init+0xa8>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d4c:	4b23      	ldr	r3, [pc, #140]	; (8000ddc <MX_CAN_Init+0xa8>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000d52:	4b22      	ldr	r3, [pc, #136]	; (8000ddc <MX_CAN_Init+0xa8>)
 8000d54:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8000d58:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000d5a:	4b20      	ldr	r3, [pc, #128]	; (8000ddc <MX_CAN_Init+0xa8>)
 8000d5c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000d60:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000d62:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <MX_CAN_Init+0xa8>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000d68:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <MX_CAN_Init+0xa8>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000d6e:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <MX_CAN_Init+0xa8>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000d74:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <MX_CAN_Init+0xa8>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000d7a:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <MX_CAN_Init+0xa8>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000d80:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <MX_CAN_Init+0xa8>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000d86:	4815      	ldr	r0, [pc, #84]	; (8000ddc <MX_CAN_Init+0xa8>)
 8000d88:	f000 fc60 	bl	800164c <HAL_CAN_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_CAN_Init+0x62>
  {
    Error_Handler();
 8000d92:	f000 f957 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000d96:	2301      	movs	r3, #1
 8000d98:	623b      	str	r3, [r7, #32]
  sFilterConfig.FilterBank = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000da6:	2301      	movs	r3, #1
 8000da8:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000daa:	2300      	movs	r3, #0
 8000dac:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000dae:	2300      	movs	r3, #0
 8000db0:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000db2:	2300      	movs	r3, #0
 8000db4:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
  //sFilterConfig.SlaveStartFilterBank = 10;
  if(HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK){
 8000dba:	463b      	mov	r3, r7
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4807      	ldr	r0, [pc, #28]	; (8000ddc <MX_CAN_Init+0xa8>)
 8000dc0:	f000 fd3f 	bl	8001842 <HAL_CAN_ConfigFilter>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_CAN_Init+0x9a>
      Error_Handler();
 8000dca:	f000 f93b 	bl	8001044 <Error_Handler>
  }

  set_SPI_Header(&Tx_SPI_Header);
 8000dce:	4805      	ldr	r0, [pc, #20]	; (8000de4 <MX_CAN_Init+0xb0>)
 8000dd0:	f7ff ff16 	bl	8000c00 <set_SPI_Header>

  /* USER CODE END CAN_Init 2 */

}
 8000dd4:	bf00      	nop
 8000dd6:	3728      	adds	r7, #40	; 0x28
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	200000fc 	.word	0x200000fc
 8000de0:	40006400 	.word	0x40006400
 8000de4:	200000c8 	.word	0x200000c8

08000de8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <MX_CRC_Init+0x20>)
 8000dee:	4a07      	ldr	r2, [pc, #28]	; (8000e0c <MX_CRC_Init+0x24>)
 8000df0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000df2:	4805      	ldr	r0, [pc, #20]	; (8000e08 <MX_CRC_Init+0x20>)
 8000df4:	f001 facf 	bl	8002396 <HAL_CRC_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000dfe:	f000 f921 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000124 	.word	0x20000124
 8000e0c:	40023000 	.word	0x40023000

08000e10 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e14:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <MX_I2C1_Init+0x50>)
 8000e16:	4a13      	ldr	r2, [pc, #76]	; (8000e64 <MX_I2C1_Init+0x54>)
 8000e18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <MX_I2C1_Init+0x50>)
 8000e1c:	4a12      	ldr	r2, [pc, #72]	; (8000e68 <MX_I2C1_Init+0x58>)
 8000e1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e20:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <MX_I2C1_Init+0x50>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 36;
 8000e26:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <MX_I2C1_Init+0x50>)
 8000e28:	2224      	movs	r2, #36	; 0x24
 8000e2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <MX_I2C1_Init+0x50>)
 8000e2e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e32:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e34:	4b0a      	ldr	r3, [pc, #40]	; (8000e60 <MX_I2C1_Init+0x50>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <MX_I2C1_Init+0x50>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e40:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <MX_I2C1_Init+0x50>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <MX_I2C1_Init+0x50>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e4c:	4804      	ldr	r0, [pc, #16]	; (8000e60 <MX_I2C1_Init+0x50>)
 8000e4e:	f001 ff17 	bl	8002c80 <HAL_I2C_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e58:	f000 f8f4 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e5c:	bf00      	nop
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	2000012c 	.word	0x2000012c
 8000e64:	40005400 	.word	0x40005400
 8000e68:	000186a0 	.word	0x000186a0

08000e6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e70:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <MX_SPI1_Init+0x64>)
 8000e72:	4a18      	ldr	r2, [pc, #96]	; (8000ed4 <MX_SPI1_Init+0x68>)
 8000e74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e76:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <MX_SPI1_Init+0x64>)
 8000e78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e7e:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <MX_SPI1_Init+0x64>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <MX_SPI1_Init+0x64>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e8a:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <MX_SPI1_Init+0x64>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e90:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <MX_SPI1_Init+0x64>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <MX_SPI1_Init+0x64>)
 8000e98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e9c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <MX_SPI1_Init+0x64>)
 8000ea0:	2208      	movs	r2, #8
 8000ea2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	; (8000ed0 <MX_SPI1_Init+0x64>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <MX_SPI1_Init+0x64>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000eb0:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <MX_SPI1_Init+0x64>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <MX_SPI1_Init+0x64>)
 8000eb8:	220a      	movs	r2, #10
 8000eba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ebc:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <MX_SPI1_Init+0x64>)
 8000ebe:	f004 f931 	bl	8005124 <HAL_SPI_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ec8:	f000 f8bc 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000180 	.word	0x20000180
 8000ed4:	40013000 	.word	0x40013000

08000ed8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <MX_USART1_UART_Init+0x4c>)
 8000ede:	4a12      	ldr	r2, [pc, #72]	; (8000f28 <MX_USART1_UART_Init+0x50>)
 8000ee0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <MX_USART1_UART_Init+0x4c>)
 8000ee4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ee8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eea:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <MX_USART1_UART_Init+0x4c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <MX_USART1_UART_Init+0x4c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <MX_USART1_UART_Init+0x4c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8000efc:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <MX_USART1_UART_Init+0x4c>)
 8000efe:	2208      	movs	r2, #8
 8000f00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8000f02:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <MX_USART1_UART_Init+0x4c>)
 8000f04:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000f08:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <MX_USART1_UART_Init+0x4c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f10:	4804      	ldr	r0, [pc, #16]	; (8000f24 <MX_USART1_UART_Init+0x4c>)
 8000f12:	f004 fe9b 	bl	8005c4c <HAL_UART_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8000f1c:	f000 f892 	bl	8001044 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	200001d8 	.word	0x200001d8
 8000f28:	40013800 	.word	0x40013800

08000f2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <MX_DMA_Init+0x38>)
 8000f34:	695b      	ldr	r3, [r3, #20]
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <MX_DMA_Init+0x38>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6153      	str	r3, [r2, #20]
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <MX_DMA_Init+0x38>)
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	200e      	movs	r0, #14
 8000f50:	f001 f9eb 	bl	800232a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000f54:	200e      	movs	r0, #14
 8000f56:	f001 fa04 	bl	8002362 <HAL_NVIC_EnableIRQ>

}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40021000 	.word	0x40021000

08000f68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b088      	sub	sp, #32
 8000f6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6e:	f107 0310 	add.w	r3, r7, #16
 8000f72:	2200      	movs	r2, #0
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	605a      	str	r2, [r3, #4]
 8000f78:	609a      	str	r2, [r3, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f7c:	4b2e      	ldr	r3, [pc, #184]	; (8001038 <MX_GPIO_Init+0xd0>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	4a2d      	ldr	r2, [pc, #180]	; (8001038 <MX_GPIO_Init+0xd0>)
 8000f82:	f043 0310 	orr.w	r3, r3, #16
 8000f86:	6193      	str	r3, [r2, #24]
 8000f88:	4b2b      	ldr	r3, [pc, #172]	; (8001038 <MX_GPIO_Init+0xd0>)
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	f003 0310 	and.w	r3, r3, #16
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f94:	4b28      	ldr	r3, [pc, #160]	; (8001038 <MX_GPIO_Init+0xd0>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	4a27      	ldr	r2, [pc, #156]	; (8001038 <MX_GPIO_Init+0xd0>)
 8000f9a:	f043 0320 	orr.w	r3, r3, #32
 8000f9e:	6193      	str	r3, [r2, #24]
 8000fa0:	4b25      	ldr	r3, [pc, #148]	; (8001038 <MX_GPIO_Init+0xd0>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	f003 0320 	and.w	r3, r3, #32
 8000fa8:	60bb      	str	r3, [r7, #8]
 8000faa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fac:	4b22      	ldr	r3, [pc, #136]	; (8001038 <MX_GPIO_Init+0xd0>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	4a21      	ldr	r2, [pc, #132]	; (8001038 <MX_GPIO_Init+0xd0>)
 8000fb2:	f043 0304 	orr.w	r3, r3, #4
 8000fb6:	6193      	str	r3, [r2, #24]
 8000fb8:	4b1f      	ldr	r3, [pc, #124]	; (8001038 <MX_GPIO_Init+0xd0>)
 8000fba:	699b      	ldr	r3, [r3, #24]
 8000fbc:	f003 0304 	and.w	r3, r3, #4
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc4:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <MX_GPIO_Init+0xd0>)
 8000fc6:	699b      	ldr	r3, [r3, #24]
 8000fc8:	4a1b      	ldr	r2, [pc, #108]	; (8001038 <MX_GPIO_Init+0xd0>)
 8000fca:	f043 0308 	orr.w	r3, r3, #8
 8000fce:	6193      	str	r3, [r2, #24]
 8000fd0:	4b19      	ldr	r3, [pc, #100]	; (8001038 <MX_GPIO_Init+0xd0>)
 8000fd2:	699b      	ldr	r3, [r3, #24]
 8000fd4:	f003 0308 	and.w	r3, r3, #8
 8000fd8:	603b      	str	r3, [r7, #0]
 8000fda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fe2:	4816      	ldr	r0, [pc, #88]	; (800103c <MX_GPIO_Init+0xd4>)
 8000fe4:	f001 fe1a 	bl	8002c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fee:	4814      	ldr	r0, [pc, #80]	; (8001040 <MX_GPIO_Init+0xd8>)
 8000ff0:	f001 fe14 	bl	8002c1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ff4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ff8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2302      	movs	r3, #2
 8001004:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001006:	f107 0310 	add.w	r3, r7, #16
 800100a:	4619      	mov	r1, r3
 800100c:	480b      	ldr	r0, [pc, #44]	; (800103c <MX_GPIO_Init+0xd4>)
 800100e:	f001 fc81 	bl	8002914 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001012:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001016:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001018:	2301      	movs	r3, #1
 800101a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2302      	movs	r3, #2
 8001022:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	4619      	mov	r1, r3
 800102a:	4805      	ldr	r0, [pc, #20]	; (8001040 <MX_GPIO_Init+0xd8>)
 800102c:	f001 fc72 	bl	8002914 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001030:	bf00      	nop
 8001032:	3720      	adds	r7, #32
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40021000 	.word	0x40021000
 800103c:	40011000 	.word	0x40011000
 8001040:	40010800 	.word	0x40010800

08001044 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001048:	b672      	cpsid	i
}
 800104a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800104c:	e7fe      	b.n	800104c <Error_Handler+0x8>
	...

08001050 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <HAL_MspInit+0x5c>)
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	4a14      	ldr	r2, [pc, #80]	; (80010ac <HAL_MspInit+0x5c>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6193      	str	r3, [r2, #24]
 8001062:	4b12      	ldr	r3, [pc, #72]	; (80010ac <HAL_MspInit+0x5c>)
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <HAL_MspInit+0x5c>)
 8001070:	69db      	ldr	r3, [r3, #28]
 8001072:	4a0e      	ldr	r2, [pc, #56]	; (80010ac <HAL_MspInit+0x5c>)
 8001074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001078:	61d3      	str	r3, [r2, #28]
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <HAL_MspInit+0x5c>)
 800107c:	69db      	ldr	r3, [r3, #28]
 800107e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001082:	607b      	str	r3, [r7, #4]
 8001084:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001086:	4b0a      	ldr	r3, [pc, #40]	; (80010b0 <HAL_MspInit+0x60>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <HAL_MspInit+0x60>)
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010a2:	bf00      	nop
 80010a4:	3714      	adds	r7, #20
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bc80      	pop	{r7}
 80010aa:	4770      	bx	lr
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40010000 	.word	0x40010000

080010b4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	; 0x28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a2d      	ldr	r2, [pc, #180]	; (8001184 <HAL_CAN_MspInit+0xd0>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d153      	bne.n	800117c <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80010d4:	4b2c      	ldr	r3, [pc, #176]	; (8001188 <HAL_CAN_MspInit+0xd4>)
 80010d6:	69db      	ldr	r3, [r3, #28]
 80010d8:	4a2b      	ldr	r2, [pc, #172]	; (8001188 <HAL_CAN_MspInit+0xd4>)
 80010da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010de:	61d3      	str	r3, [r2, #28]
 80010e0:	4b29      	ldr	r3, [pc, #164]	; (8001188 <HAL_CAN_MspInit+0xd4>)
 80010e2:	69db      	ldr	r3, [r3, #28]
 80010e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ec:	4b26      	ldr	r3, [pc, #152]	; (8001188 <HAL_CAN_MspInit+0xd4>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a25      	ldr	r2, [pc, #148]	; (8001188 <HAL_CAN_MspInit+0xd4>)
 80010f2:	f043 0308 	orr.w	r3, r3, #8
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b23      	ldr	r3, [pc, #140]	; (8001188 <HAL_CAN_MspInit+0xd4>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f003 0308 	and.w	r3, r3, #8
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001104:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	4619      	mov	r1, r3
 8001118:	481c      	ldr	r0, [pc, #112]	; (800118c <HAL_CAN_MspInit+0xd8>)
 800111a:	f001 fbfb 	bl	8002914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800111e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001122:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001124:	2302      	movs	r3, #2
 8001126:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001128:	2303      	movs	r3, #3
 800112a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	4816      	ldr	r0, [pc, #88]	; (800118c <HAL_CAN_MspInit+0xd8>)
 8001134:	f001 fbee 	bl	8002914 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001138:	4b15      	ldr	r3, [pc, #84]	; (8001190 <HAL_CAN_MspInit+0xdc>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
 800113e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001140:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001144:	627b      	str	r3, [r7, #36]	; 0x24
 8001146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001148:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
 800114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001150:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
 8001156:	4a0e      	ldr	r2, [pc, #56]	; (8001190 <HAL_CAN_MspInit+0xdc>)
 8001158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115a:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 2, 0);
 800115c:	2200      	movs	r2, #0
 800115e:	2102      	movs	r1, #2
 8001160:	2014      	movs	r0, #20
 8001162:	f001 f8e2 	bl	800232a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8001166:	2014      	movs	r0, #20
 8001168:	f001 f8fb 	bl	8002362 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 3, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	2103      	movs	r1, #3
 8001170:	2016      	movs	r0, #22
 8001172:	f001 f8da 	bl	800232a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001176:	2016      	movs	r0, #22
 8001178:	f001 f8f3 	bl	8002362 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800117c:	bf00      	nop
 800117e:	3728      	adds	r7, #40	; 0x28
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40006400 	.word	0x40006400
 8001188:	40021000 	.word	0x40021000
 800118c:	40010c00 	.word	0x40010c00
 8001190:	40010000 	.word	0x40010000

08001194 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a09      	ldr	r2, [pc, #36]	; (80011c8 <HAL_CRC_MspInit+0x34>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d10b      	bne.n	80011be <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <HAL_CRC_MspInit+0x38>)
 80011a8:	695b      	ldr	r3, [r3, #20]
 80011aa:	4a08      	ldr	r2, [pc, #32]	; (80011cc <HAL_CRC_MspInit+0x38>)
 80011ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011b0:	6153      	str	r3, [r2, #20]
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <HAL_CRC_MspInit+0x38>)
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80011be:	bf00      	nop
 80011c0:	3714      	adds	r7, #20
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr
 80011c8:	40023000 	.word	0x40023000
 80011cc:	40021000 	.word	0x40021000

080011d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 0310 	add.w	r3, r7, #16
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a15      	ldr	r2, [pc, #84]	; (8001240 <HAL_I2C_MspInit+0x70>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d123      	bne.n	8001238 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f0:	4b14      	ldr	r3, [pc, #80]	; (8001244 <HAL_I2C_MspInit+0x74>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	4a13      	ldr	r2, [pc, #76]	; (8001244 <HAL_I2C_MspInit+0x74>)
 80011f6:	f043 0308 	orr.w	r3, r3, #8
 80011fa:	6193      	str	r3, [r2, #24]
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <HAL_I2C_MspInit+0x74>)
 80011fe:	699b      	ldr	r3, [r3, #24]
 8001200:	f003 0308 	and.w	r3, r3, #8
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001208:	23c0      	movs	r3, #192	; 0xc0
 800120a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800120c:	2312      	movs	r3, #18
 800120e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001210:	2303      	movs	r3, #3
 8001212:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001214:	f107 0310 	add.w	r3, r7, #16
 8001218:	4619      	mov	r1, r3
 800121a:	480b      	ldr	r0, [pc, #44]	; (8001248 <HAL_I2C_MspInit+0x78>)
 800121c:	f001 fb7a 	bl	8002914 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <HAL_I2C_MspInit+0x74>)
 8001222:	69db      	ldr	r3, [r3, #28]
 8001224:	4a07      	ldr	r2, [pc, #28]	; (8001244 <HAL_I2C_MspInit+0x74>)
 8001226:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800122a:	61d3      	str	r3, [r2, #28]
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <HAL_I2C_MspInit+0x74>)
 800122e:	69db      	ldr	r3, [r3, #28]
 8001230:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001234:	60bb      	str	r3, [r7, #8]
 8001236:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001238:	bf00      	nop
 800123a:	3720      	adds	r7, #32
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40005400 	.word	0x40005400
 8001244:	40021000 	.word	0x40021000
 8001248:	40010c00 	.word	0x40010c00

0800124c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b088      	sub	sp, #32
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001254:	f107 0310 	add.w	r3, r7, #16
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a1b      	ldr	r2, [pc, #108]	; (80012d4 <HAL_SPI_MspInit+0x88>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d12f      	bne.n	80012cc <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800126c:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <HAL_SPI_MspInit+0x8c>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	4a19      	ldr	r2, [pc, #100]	; (80012d8 <HAL_SPI_MspInit+0x8c>)
 8001272:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001276:	6193      	str	r3, [r2, #24]
 8001278:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <HAL_SPI_MspInit+0x8c>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001280:	60fb      	str	r3, [r7, #12]
 8001282:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001284:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <HAL_SPI_MspInit+0x8c>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	4a13      	ldr	r2, [pc, #76]	; (80012d8 <HAL_SPI_MspInit+0x8c>)
 800128a:	f043 0304 	orr.w	r3, r3, #4
 800128e:	6193      	str	r3, [r2, #24]
 8001290:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <HAL_SPI_MspInit+0x8c>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	f003 0304 	and.w	r3, r3, #4
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800129c:	23a0      	movs	r3, #160	; 0xa0
 800129e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a0:	2302      	movs	r3, #2
 80012a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a4:	2303      	movs	r3, #3
 80012a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012a8:	f107 0310 	add.w	r3, r7, #16
 80012ac:	4619      	mov	r1, r3
 80012ae:	480b      	ldr	r0, [pc, #44]	; (80012dc <HAL_SPI_MspInit+0x90>)
 80012b0:	f001 fb30 	bl	8002914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012b4:	2340      	movs	r3, #64	; 0x40
 80012b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012bc:	2300      	movs	r3, #0
 80012be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	f107 0310 	add.w	r3, r7, #16
 80012c4:	4619      	mov	r1, r3
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <HAL_SPI_MspInit+0x90>)
 80012c8:	f001 fb24 	bl	8002914 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012cc:	bf00      	nop
 80012ce:	3720      	adds	r7, #32
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40013000 	.word	0x40013000
 80012d8:	40021000 	.word	0x40021000
 80012dc:	40010800 	.word	0x40010800

080012e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b088      	sub	sp, #32
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 0310 	add.w	r3, r7, #16
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a33      	ldr	r2, [pc, #204]	; (80013c8 <HAL_UART_MspInit+0xe8>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d15f      	bne.n	80013c0 <HAL_UART_MspInit+0xe0>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001300:	4b32      	ldr	r3, [pc, #200]	; (80013cc <HAL_UART_MspInit+0xec>)
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	4a31      	ldr	r2, [pc, #196]	; (80013cc <HAL_UART_MspInit+0xec>)
 8001306:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800130a:	6193      	str	r3, [r2, #24]
 800130c:	4b2f      	ldr	r3, [pc, #188]	; (80013cc <HAL_UART_MspInit+0xec>)
 800130e:	699b      	ldr	r3, [r3, #24]
 8001310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001318:	4b2c      	ldr	r3, [pc, #176]	; (80013cc <HAL_UART_MspInit+0xec>)
 800131a:	699b      	ldr	r3, [r3, #24]
 800131c:	4a2b      	ldr	r2, [pc, #172]	; (80013cc <HAL_UART_MspInit+0xec>)
 800131e:	f043 0304 	orr.w	r3, r3, #4
 8001322:	6193      	str	r3, [r2, #24]
 8001324:	4b29      	ldr	r3, [pc, #164]	; (80013cc <HAL_UART_MspInit+0xec>)
 8001326:	699b      	ldr	r3, [r3, #24]
 8001328:	f003 0304 	and.w	r3, r3, #4
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	68bb      	ldr	r3, [r7, #8]
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    PA11     ------> USART1_CTS
    PA12     ------> USART1_RTS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_12;
 8001330:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8001334:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800133a:	2303      	movs	r3, #3
 800133c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133e:	f107 0310 	add.w	r3, r7, #16
 8001342:	4619      	mov	r1, r3
 8001344:	4822      	ldr	r0, [pc, #136]	; (80013d0 <HAL_UART_MspInit+0xf0>)
 8001346:	f001 fae5 	bl	8002914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800134a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800134e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	4619      	mov	r1, r3
 800135e:	481c      	ldr	r0, [pc, #112]	; (80013d0 <HAL_UART_MspInit+0xf0>)
 8001360:	f001 fad8 	bl	8002914 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001364:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <HAL_UART_MspInit+0xf4>)
 8001366:	4a1c      	ldr	r2, [pc, #112]	; (80013d8 <HAL_UART_MspInit+0xf8>)
 8001368:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800136a:	4b1a      	ldr	r3, [pc, #104]	; (80013d4 <HAL_UART_MspInit+0xf4>)
 800136c:	2210      	movs	r2, #16
 800136e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001370:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <HAL_UART_MspInit+0xf4>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001376:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <HAL_UART_MspInit+0xf4>)
 8001378:	2280      	movs	r2, #128	; 0x80
 800137a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800137c:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <HAL_UART_MspInit+0xf4>)
 800137e:	2200      	movs	r2, #0
 8001380:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001382:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <HAL_UART_MspInit+0xf4>)
 8001384:	2200      	movs	r2, #0
 8001386:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001388:	4b12      	ldr	r3, [pc, #72]	; (80013d4 <HAL_UART_MspInit+0xf4>)
 800138a:	2200      	movs	r2, #0
 800138c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800138e:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <HAL_UART_MspInit+0xf4>)
 8001390:	2200      	movs	r2, #0
 8001392:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001394:	480f      	ldr	r0, [pc, #60]	; (80013d4 <HAL_UART_MspInit+0xf4>)
 8001396:	f001 f81b 	bl	80023d0 <HAL_DMA_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80013a0:	f7ff fe50 	bl	8001044 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a0b      	ldr	r2, [pc, #44]	; (80013d4 <HAL_UART_MspInit+0xf4>)
 80013a8:	639a      	str	r2, [r3, #56]	; 0x38
 80013aa:	4a0a      	ldr	r2, [pc, #40]	; (80013d4 <HAL_UART_MspInit+0xf4>)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2100      	movs	r1, #0
 80013b4:	2025      	movs	r0, #37	; 0x25
 80013b6:	f000 ffb8 	bl	800232a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013ba:	2025      	movs	r0, #37	; 0x25
 80013bc:	f000 ffd1 	bl	8002362 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013c0:	bf00      	nop
 80013c2:	3720      	adds	r7, #32
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40013800 	.word	0x40013800
 80013cc:	40021000 	.word	0x40021000
 80013d0:	40010800 	.word	0x40010800
 80013d4:	20000220 	.word	0x20000220
 80013d8:	40020044 	.word	0x40020044

080013dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <NMI_Handler+0x4>

080013e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e6:	e7fe      	b.n	80013e6 <HardFault_Handler+0x4>

080013e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ec:	e7fe      	b.n	80013ec <MemManage_Handler+0x4>

080013ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f2:	e7fe      	b.n	80013f2 <BusFault_Handler+0x4>

080013f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <UsageFault_Handler+0x4>

080013fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr

08001406 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr

08001412 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	bc80      	pop	{r7}
 800141c:	4770      	bx	lr

0800141e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001422:	f000 f8d3 	bl	80015cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001430:	4802      	ldr	r0, [pc, #8]	; (800143c <DMA1_Channel4_IRQHandler+0x10>)
 8001432:	f001 f93b 	bl	80026ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000220 	.word	0x20000220

08001440 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001444:	4802      	ldr	r0, [pc, #8]	; (8001450 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001446:	f000 fc4f 	bl	8001ce8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200000fc 	.word	0x200000fc

08001454 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001458:	4802      	ldr	r0, [pc, #8]	; (8001464 <CAN1_SCE_IRQHandler+0x10>)
 800145a:	f000 fc45 	bl	8001ce8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	200000fc 	.word	0x200000fc

08001468 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <USART1_IRQHandler+0x10>)
 800146e:	f004 fcad 	bl	8005dcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200001d8 	.word	0x200001d8

0800147c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001484:	4a14      	ldr	r2, [pc, #80]	; (80014d8 <_sbrk+0x5c>)
 8001486:	4b15      	ldr	r3, [pc, #84]	; (80014dc <_sbrk+0x60>)
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001490:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <_sbrk+0x64>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d102      	bne.n	800149e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <_sbrk+0x64>)
 800149a:	4a12      	ldr	r2, [pc, #72]	; (80014e4 <_sbrk+0x68>)
 800149c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800149e:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <_sbrk+0x64>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d207      	bcs.n	80014bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014ac:	f005 fa32 	bl	8006914 <__errno>
 80014b0:	4603      	mov	r3, r0
 80014b2:	220c      	movs	r2, #12
 80014b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ba:	e009      	b.n	80014d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014bc:	4b08      	ldr	r3, [pc, #32]	; (80014e0 <_sbrk+0x64>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014c2:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <_sbrk+0x64>)
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	4a05      	ldr	r2, [pc, #20]	; (80014e0 <_sbrk+0x64>)
 80014cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ce:	68fb      	ldr	r3, [r7, #12]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20005000 	.word	0x20005000
 80014dc:	00000400 	.word	0x00000400
 80014e0:	2000026c 	.word	0x2000026c
 80014e4:	20000288 	.word	0x20000288

080014e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr

080014f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014f4:	f7ff fff8 	bl	80014e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014f8:	480b      	ldr	r0, [pc, #44]	; (8001528 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014fa:	490c      	ldr	r1, [pc, #48]	; (800152c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014fc:	4a0c      	ldr	r2, [pc, #48]	; (8001530 <LoopFillZerobss+0x16>)
  movs r3, #0
 80014fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001500:	e002      	b.n	8001508 <LoopCopyDataInit>

08001502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001506:	3304      	adds	r3, #4

08001508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800150a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800150c:	d3f9      	bcc.n	8001502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150e:	4a09      	ldr	r2, [pc, #36]	; (8001534 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001510:	4c09      	ldr	r4, [pc, #36]	; (8001538 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001514:	e001      	b.n	800151a <LoopFillZerobss>

08001516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001518:	3204      	adds	r2, #4

0800151a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800151a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800151c:	d3fb      	bcc.n	8001516 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800151e:	f005 f9ff 	bl	8006920 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001522:	f7ff fb89 	bl	8000c38 <main>
  bx lr
 8001526:	4770      	bx	lr
  ldr r0, =_sdata
 8001528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800152c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001530:	08007310 	.word	0x08007310
  ldr r2, =_sbss
 8001534:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001538:	20000284 	.word	0x20000284

0800153c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800153c:	e7fe      	b.n	800153c <ADC1_2_IRQHandler>
	...

08001540 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001544:	4b08      	ldr	r3, [pc, #32]	; (8001568 <HAL_Init+0x28>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a07      	ldr	r2, [pc, #28]	; (8001568 <HAL_Init+0x28>)
 800154a:	f043 0310 	orr.w	r3, r3, #16
 800154e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001550:	2003      	movs	r0, #3
 8001552:	f000 fedf 	bl	8002314 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001556:	200f      	movs	r0, #15
 8001558:	f000 f808 	bl	800156c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800155c:	f7ff fd78 	bl	8001050 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40022000 	.word	0x40022000

0800156c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001574:	4b12      	ldr	r3, [pc, #72]	; (80015c0 <HAL_InitTick+0x54>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4b12      	ldr	r3, [pc, #72]	; (80015c4 <HAL_InitTick+0x58>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4619      	mov	r1, r3
 800157e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001582:	fbb3 f3f1 	udiv	r3, r3, r1
 8001586:	fbb2 f3f3 	udiv	r3, r2, r3
 800158a:	4618      	mov	r0, r3
 800158c:	f000 fef7 	bl	800237e <HAL_SYSTICK_Config>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e00e      	b.n	80015b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2b0f      	cmp	r3, #15
 800159e:	d80a      	bhi.n	80015b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a0:	2200      	movs	r2, #0
 80015a2:	6879      	ldr	r1, [r7, #4]
 80015a4:	f04f 30ff 	mov.w	r0, #4294967295
 80015a8:	f000 febf 	bl	800232a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015ac:	4a06      	ldr	r2, [pc, #24]	; (80015c8 <HAL_InitTick+0x5c>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	e000      	b.n	80015b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000004 	.word	0x20000004
 80015c4:	2000000c 	.word	0x2000000c
 80015c8:	20000008 	.word	0x20000008

080015cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d0:	4b05      	ldr	r3, [pc, #20]	; (80015e8 <HAL_IncTick+0x1c>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	461a      	mov	r2, r3
 80015d6:	4b05      	ldr	r3, [pc, #20]	; (80015ec <HAL_IncTick+0x20>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4413      	add	r3, r2
 80015dc:	4a03      	ldr	r2, [pc, #12]	; (80015ec <HAL_IncTick+0x20>)
 80015de:	6013      	str	r3, [r2, #0]
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr
 80015e8:	2000000c 	.word	0x2000000c
 80015ec:	20000270 	.word	0x20000270

080015f0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return uwTick;
 80015f4:	4b02      	ldr	r3, [pc, #8]	; (8001600 <HAL_GetTick+0x10>)
 80015f6:	681b      	ldr	r3, [r3, #0]
}
 80015f8:	4618      	mov	r0, r3
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr
 8001600:	20000270 	.word	0x20000270

08001604 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800160c:	f7ff fff0 	bl	80015f0 <HAL_GetTick>
 8001610:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800161c:	d005      	beq.n	800162a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800161e:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <HAL_Delay+0x44>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	461a      	mov	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	4413      	add	r3, r2
 8001628:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800162a:	bf00      	nop
 800162c:	f7ff ffe0 	bl	80015f0 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	429a      	cmp	r2, r3
 800163a:	d8f7      	bhi.n	800162c <HAL_Delay+0x28>
  {
  }
}
 800163c:	bf00      	nop
 800163e:	bf00      	nop
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	2000000c 	.word	0x2000000c

0800164c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e0ed      	b.n	800183a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001664:	b2db      	uxtb	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d102      	bne.n	8001670 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff fd22 	bl	80010b4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f042 0201 	orr.w	r2, r2, #1
 800167e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001680:	f7ff ffb6 	bl	80015f0 <HAL_GetTick>
 8001684:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001686:	e012      	b.n	80016ae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001688:	f7ff ffb2 	bl	80015f0 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b0a      	cmp	r3, #10
 8001694:	d90b      	bls.n	80016ae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800169a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2205      	movs	r2, #5
 80016a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e0c5      	b.n	800183a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 0301 	and.w	r3, r3, #1
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0e5      	beq.n	8001688 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 0202 	bic.w	r2, r2, #2
 80016ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016cc:	f7ff ff90 	bl	80015f0 <HAL_GetTick>
 80016d0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016d2:	e012      	b.n	80016fa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016d4:	f7ff ff8c 	bl	80015f0 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b0a      	cmp	r3, #10
 80016e0:	d90b      	bls.n	80016fa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2205      	movs	r2, #5
 80016f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e09f      	b.n	800183a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1e5      	bne.n	80016d4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	7e1b      	ldrb	r3, [r3, #24]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d108      	bne.n	8001722 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	e007      	b.n	8001732 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001730:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	7e5b      	ldrb	r3, [r3, #25]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d108      	bne.n	800174c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	e007      	b.n	800175c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800175a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	7e9b      	ldrb	r3, [r3, #26]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d108      	bne.n	8001776 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681a      	ldr	r2, [r3, #0]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f042 0220 	orr.w	r2, r2, #32
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	e007      	b.n	8001786 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 0220 	bic.w	r2, r2, #32
 8001784:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	7edb      	ldrb	r3, [r3, #27]
 800178a:	2b01      	cmp	r3, #1
 800178c:	d108      	bne.n	80017a0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f022 0210 	bic.w	r2, r2, #16
 800179c:	601a      	str	r2, [r3, #0]
 800179e:	e007      	b.n	80017b0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f042 0210 	orr.w	r2, r2, #16
 80017ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	7f1b      	ldrb	r3, [r3, #28]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d108      	bne.n	80017ca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f042 0208 	orr.w	r2, r2, #8
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	e007      	b.n	80017da <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 0208 	bic.w	r2, r2, #8
 80017d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	7f5b      	ldrb	r3, [r3, #29]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d108      	bne.n	80017f4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f042 0204 	orr.w	r2, r2, #4
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	e007      	b.n	8001804 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f022 0204 	bic.w	r2, r2, #4
 8001802:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	431a      	orrs	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	695b      	ldr	r3, [r3, #20]
 8001818:	ea42 0103 	orr.w	r1, r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	1e5a      	subs	r2, r3, #1
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	430a      	orrs	r2, r1
 8001828:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001842:	b480      	push	{r7}
 8001844:	b087      	sub	sp, #28
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001858:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800185a:	7cfb      	ldrb	r3, [r7, #19]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d003      	beq.n	8001868 <HAL_CAN_ConfigFilter+0x26>
 8001860:	7cfb      	ldrb	r3, [r7, #19]
 8001862:	2b02      	cmp	r3, #2
 8001864:	f040 80aa 	bne.w	80019bc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800186e:	f043 0201 	orr.w	r2, r3, #1
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	f003 031f 	and.w	r3, r3, #31
 8001880:	2201      	movs	r2, #1
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	43db      	mvns	r3, r3
 8001892:	401a      	ands	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d123      	bne.n	80018ea <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	43db      	mvns	r3, r3
 80018ac:	401a      	ands	r2, r3
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018c4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	3248      	adds	r2, #72	; 0x48
 80018ca:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018de:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018e0:	6979      	ldr	r1, [r7, #20]
 80018e2:	3348      	adds	r3, #72	; 0x48
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	440b      	add	r3, r1
 80018e8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	2b01      	cmp	r3, #1
 80018f0:	d122      	bne.n	8001938 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	431a      	orrs	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001912:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	3248      	adds	r2, #72	; 0x48
 8001918:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	68db      	ldr	r3, [r3, #12]
 8001926:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800192c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800192e:	6979      	ldr	r1, [r7, #20]
 8001930:	3348      	adds	r3, #72	; 0x48
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	440b      	add	r3, r1
 8001936:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d109      	bne.n	8001954 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	43db      	mvns	r3, r3
 800194a:	401a      	ands	r2, r3
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001952:	e007      	b.n	8001964 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	431a      	orrs	r2, r3
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d109      	bne.n	8001980 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	43db      	mvns	r3, r3
 8001976:	401a      	ands	r2, r3
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800197e:	e007      	b.n	8001990 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	431a      	orrs	r2, r3
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	6a1b      	ldr	r3, [r3, #32]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d107      	bne.n	80019a8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	431a      	orrs	r2, r3
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019ae:	f023 0201 	bic.w	r2, r3, #1
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80019b8:	2300      	movs	r3, #0
 80019ba:	e006      	b.n	80019ca <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
  }
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	371c      	adds	r7, #28
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr

080019d4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d12e      	bne.n	8001a46 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2202      	movs	r2, #2
 80019ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f022 0201 	bic.w	r2, r2, #1
 80019fe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a00:	f7ff fdf6 	bl	80015f0 <HAL_GetTick>
 8001a04:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a06:	e012      	b.n	8001a2e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a08:	f7ff fdf2 	bl	80015f0 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b0a      	cmp	r3, #10
 8001a14:	d90b      	bls.n	8001a2e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2205      	movs	r2, #5
 8001a26:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e012      	b.n	8001a54 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d1e5      	bne.n	8001a08 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001a42:	2300      	movs	r3, #0
 8001a44:	e006      	b.n	8001a54 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
  }
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b087      	sub	sp, #28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
 8001a68:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a70:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a72:	7dfb      	ldrb	r3, [r7, #23]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d003      	beq.n	8001a80 <HAL_CAN_GetRxMessage+0x24>
 8001a78:	7dfb      	ldrb	r3, [r7, #23]
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	f040 8103 	bne.w	8001c86 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10e      	bne.n	8001aa4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	f003 0303 	and.w	r3, r3, #3
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d116      	bne.n	8001ac2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a98:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e0f7      	b.n	8001c94 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d107      	bne.n	8001ac2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e0e8      	b.n	8001c94 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	331b      	adds	r3, #27
 8001aca:	011b      	lsls	r3, r3, #4
 8001acc:	4413      	add	r3, r2
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0204 	and.w	r2, r3, #4
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d10c      	bne.n	8001afa <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	331b      	adds	r3, #27
 8001ae8:	011b      	lsls	r3, r3, #4
 8001aea:	4413      	add	r3, r2
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	0d5b      	lsrs	r3, r3, #21
 8001af0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	e00b      	b.n	8001b12 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	331b      	adds	r3, #27
 8001b02:	011b      	lsls	r3, r3, #4
 8001b04:	4413      	add	r3, r2
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	08db      	lsrs	r3, r3, #3
 8001b0a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	331b      	adds	r3, #27
 8001b1a:	011b      	lsls	r3, r3, #4
 8001b1c:	4413      	add	r3, r2
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0202 	and.w	r2, r3, #2
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	331b      	adds	r3, #27
 8001b30:	011b      	lsls	r3, r3, #4
 8001b32:	4413      	add	r3, r2
 8001b34:	3304      	adds	r3, #4
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0308 	and.w	r3, r3, #8
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d003      	beq.n	8001b48 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2208      	movs	r2, #8
 8001b44:	611a      	str	r2, [r3, #16]
 8001b46:	e00b      	b.n	8001b60 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	331b      	adds	r3, #27
 8001b50:	011b      	lsls	r3, r3, #4
 8001b52:	4413      	add	r3, r2
 8001b54:	3304      	adds	r3, #4
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 020f 	and.w	r2, r3, #15
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	331b      	adds	r3, #27
 8001b68:	011b      	lsls	r3, r3, #4
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	0a1b      	lsrs	r3, r3, #8
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	331b      	adds	r3, #27
 8001b80:	011b      	lsls	r3, r3, #4
 8001b82:	4413      	add	r3, r2
 8001b84:	3304      	adds	r3, #4
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	0c1b      	lsrs	r3, r3, #16
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	011b      	lsls	r3, r3, #4
 8001b98:	4413      	add	r3, r2
 8001b9a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	011b      	lsls	r3, r3, #4
 8001bae:	4413      	add	r3, r2
 8001bb0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	0a1a      	lsrs	r2, r3, #8
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	011b      	lsls	r3, r3, #4
 8001bc8:	4413      	add	r3, r2
 8001bca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	0c1a      	lsrs	r2, r3, #16
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	3302      	adds	r3, #2
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	011b      	lsls	r3, r3, #4
 8001be2:	4413      	add	r3, r2
 8001be4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	0e1a      	lsrs	r2, r3, #24
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	3303      	adds	r3, #3
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	011b      	lsls	r3, r3, #4
 8001bfc:	4413      	add	r3, r2
 8001bfe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	3304      	adds	r3, #4
 8001c08:	b2d2      	uxtb	r2, r2
 8001c0a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	011b      	lsls	r3, r3, #4
 8001c14:	4413      	add	r3, r2
 8001c16:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	0a1a      	lsrs	r2, r3, #8
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	3305      	adds	r3, #5
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	011b      	lsls	r3, r3, #4
 8001c2e:	4413      	add	r3, r2
 8001c30:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	0c1a      	lsrs	r2, r3, #16
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	3306      	adds	r3, #6
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	011b      	lsls	r3, r3, #4
 8001c48:	4413      	add	r3, r2
 8001c4a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	0e1a      	lsrs	r2, r3, #24
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	3307      	adds	r3, #7
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d108      	bne.n	8001c72 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	68da      	ldr	r2, [r3, #12]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f042 0220 	orr.w	r2, r2, #32
 8001c6e:	60da      	str	r2, [r3, #12]
 8001c70:	e007      	b.n	8001c82 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	691a      	ldr	r2, [r3, #16]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f042 0220 	orr.w	r2, r2, #32
 8001c80:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001c82:	2300      	movs	r3, #0
 8001c84:	e006      	b.n	8001c94 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
  }
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	371c      	adds	r7, #28
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr

08001c9e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b085      	sub	sp, #20
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cae:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001cb0:	7bfb      	ldrb	r3, [r7, #15]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d002      	beq.n	8001cbc <HAL_CAN_ActivateNotification+0x1e>
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d109      	bne.n	8001cd0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	6959      	ldr	r1, [r3, #20]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	683a      	ldr	r2, [r7, #0]
 8001cc8:	430a      	orrs	r2, r1
 8001cca:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	e006      	b.n	8001cde <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
  }
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08a      	sub	sp, #40	; 0x28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	695b      	ldr	r3, [r3, #20]
 8001cfa:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001d24:	6a3b      	ldr	r3, [r7, #32]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d07c      	beq.n	8001e28 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d023      	beq.n	8001d80 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d003      	beq.n	8001d52 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f983 	bl	8002056 <HAL_CAN_TxMailbox0CompleteCallback>
 8001d50:	e016      	b.n	8001d80 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	f003 0304 	and.w	r3, r3, #4
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d004      	beq.n	8001d66 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24
 8001d64:	e00c      	b.n	8001d80 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	f003 0308 	and.w	r3, r3, #8
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d004      	beq.n	8001d7a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
 8001d78:	e002      	b.n	8001d80 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f986 	bl	800208c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d024      	beq.n	8001dd4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d92:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f962 	bl	8002068 <HAL_CAN_TxMailbox1CompleteCallback>
 8001da4:	e016      	b.n	8001dd4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d004      	beq.n	8001dba <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
 8001db8:	e00c      	b.n	8001dd4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d004      	beq.n	8001dce <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
 8001dcc:	e002      	b.n	8001dd4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f965 	bl	800209e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d024      	beq.n	8001e28 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001de6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f941 	bl	800207a <HAL_CAN_TxMailbox2CompleteCallback>
 8001df8:	e016      	b.n	8001e28 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d004      	beq.n	8001e0e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e0c:	e00c      	b.n	8001e28 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d004      	beq.n	8001e22 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8001e20:	e002      	b.n	8001e28 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f944 	bl	80020b0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001e28:	6a3b      	ldr	r3, [r7, #32]
 8001e2a:	f003 0308 	and.w	r3, r3, #8
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00c      	beq.n	8001e4c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	f003 0310 	and.w	r3, r3, #16
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d007      	beq.n	8001e4c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2210      	movs	r2, #16
 8001e4a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001e4c:	6a3b      	ldr	r3, [r7, #32]
 8001e4e:	f003 0304 	and.w	r3, r3, #4
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00b      	beq.n	8001e6e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f003 0308 	and.w	r3, r3, #8
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d006      	beq.n	8001e6e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2208      	movs	r2, #8
 8001e66:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 f92a 	bl	80020c2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001e6e:	6a3b      	ldr	r3, [r7, #32]
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d009      	beq.n	8001e8c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d002      	beq.n	8001e8c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7fe fe88 	bl	8000b9c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001e8c:	6a3b      	ldr	r3, [r7, #32]
 8001e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00c      	beq.n	8001eb0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	f003 0310 	and.w	r3, r3, #16
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d007      	beq.n	8001eb0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ea6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2210      	movs	r2, #16
 8001eae:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001eb0:	6a3b      	ldr	r3, [r7, #32]
 8001eb2:	f003 0320 	and.w	r3, r3, #32
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00b      	beq.n	8001ed2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d006      	beq.n	8001ed2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2208      	movs	r2, #8
 8001eca:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 f90a 	bl	80020e6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001ed2:	6a3b      	ldr	r3, [r7, #32]
 8001ed4:	f003 0310 	and.w	r3, r3, #16
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d009      	beq.n	8001ef0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d002      	beq.n	8001ef0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f000 f8f2 	bl	80020d4 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001ef0:	6a3b      	ldr	r3, [r7, #32]
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d00b      	beq.n	8001f12 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	f003 0310 	and.w	r3, r3, #16
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d006      	beq.n	8001f12 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2210      	movs	r2, #16
 8001f0a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f8f3 	bl	80020f8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001f12:	6a3b      	ldr	r3, [r7, #32]
 8001f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00b      	beq.n	8001f34 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f003 0308 	and.w	r3, r3, #8
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d006      	beq.n	8001f34 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2208      	movs	r2, #8
 8001f2c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f8eb 	bl	800210a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001f34:	6a3b      	ldr	r3, [r7, #32]
 8001f36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d07b      	beq.n	8002036 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d072      	beq.n	800202e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f48:	6a3b      	ldr	r3, [r7, #32]
 8001f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d008      	beq.n	8001f64 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f64:	6a3b      	ldr	r3, [r7, #32]
 8001f66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d008      	beq.n	8001f80 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	f043 0302 	orr.w	r3, r3, #2
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f80:	6a3b      	ldr	r3, [r7, #32]
 8001f82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d008      	beq.n	8001f9c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d003      	beq.n	8001f9c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	f043 0304 	orr.w	r3, r3, #4
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001f9c:	6a3b      	ldr	r3, [r7, #32]
 8001f9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d043      	beq.n	800202e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d03e      	beq.n	800202e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001fb6:	2b60      	cmp	r3, #96	; 0x60
 8001fb8:	d02b      	beq.n	8002012 <HAL_CAN_IRQHandler+0x32a>
 8001fba:	2b60      	cmp	r3, #96	; 0x60
 8001fbc:	d82e      	bhi.n	800201c <HAL_CAN_IRQHandler+0x334>
 8001fbe:	2b50      	cmp	r3, #80	; 0x50
 8001fc0:	d022      	beq.n	8002008 <HAL_CAN_IRQHandler+0x320>
 8001fc2:	2b50      	cmp	r3, #80	; 0x50
 8001fc4:	d82a      	bhi.n	800201c <HAL_CAN_IRQHandler+0x334>
 8001fc6:	2b40      	cmp	r3, #64	; 0x40
 8001fc8:	d019      	beq.n	8001ffe <HAL_CAN_IRQHandler+0x316>
 8001fca:	2b40      	cmp	r3, #64	; 0x40
 8001fcc:	d826      	bhi.n	800201c <HAL_CAN_IRQHandler+0x334>
 8001fce:	2b30      	cmp	r3, #48	; 0x30
 8001fd0:	d010      	beq.n	8001ff4 <HAL_CAN_IRQHandler+0x30c>
 8001fd2:	2b30      	cmp	r3, #48	; 0x30
 8001fd4:	d822      	bhi.n	800201c <HAL_CAN_IRQHandler+0x334>
 8001fd6:	2b10      	cmp	r3, #16
 8001fd8:	d002      	beq.n	8001fe0 <HAL_CAN_IRQHandler+0x2f8>
 8001fda:	2b20      	cmp	r3, #32
 8001fdc:	d005      	beq.n	8001fea <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001fde:	e01d      	b.n	800201c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	f043 0308 	orr.w	r3, r3, #8
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001fe8:	e019      	b.n	800201e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fec:	f043 0310 	orr.w	r3, r3, #16
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ff2:	e014      	b.n	800201e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	f043 0320 	orr.w	r3, r3, #32
 8001ffa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ffc:	e00f      	b.n	800201e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002000:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002006:	e00a      	b.n	800201e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002010:	e005      	b.n	800201e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800201a:	e000      	b.n	800201e <HAL_CAN_IRQHandler+0x336>
            break;
 800201c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	699a      	ldr	r2, [r3, #24]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800202c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2204      	movs	r2, #4
 8002034:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	2b00      	cmp	r3, #0
 800203a:	d008      	beq.n	800204e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 f867 	bl	800211c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800204e:	bf00      	nop
 8002050:	3728      	adds	r7, #40	; 0x28
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002056:	b480      	push	{r7}
 8002058:	b083      	sub	sp, #12
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800205e:	bf00      	nop
 8002060:	370c      	adds	r7, #12
 8002062:	46bd      	mov	sp, r7
 8002064:	bc80      	pop	{r7}
 8002066:	4770      	bx	lr

08002068 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	bc80      	pop	{r7}
 8002078:	4770      	bx	lr

0800207a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002082:	bf00      	nop
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr

0800208c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	bc80      	pop	{r7}
 800209c:	4770      	bx	lr

0800209e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800209e:	b480      	push	{r7}
 80020a0:	b083      	sub	sp, #12
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr

080020b0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b083      	sub	sp, #12
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc80      	pop	{r7}
 80020c0:	4770      	bx	lr

080020c2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80020c2:	b480      	push	{r7}
 80020c4:	b083      	sub	sp, #12
 80020c6:	af00      	add	r7, sp, #0
 80020c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr

080020d4 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80020dc:	bf00      	nop
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc80      	pop	{r7}
 80020e4:	4770      	bx	lr

080020e6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr

080020f8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	bc80      	pop	{r7}
 8002108:	4770      	bx	lr

0800210a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800210a:	b480      	push	{r7}
 800210c:	b083      	sub	sp, #12
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr

0800211c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr

0800212e <HAL_CAN_GetState>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL state
  */
HAL_CAN_StateTypeDef HAL_CAN_GetState(const CAN_HandleTypeDef *hcan)
{
 800212e:	b480      	push	{r7}
 8002130:	b085      	sub	sp, #20
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 3020 	ldrb.w	r3, [r3, #32]
 800213c:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_CAN_STATE_READY) ||
 800213e:	7bfb      	ldrb	r3, [r7, #15]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d002      	beq.n	800214a <HAL_CAN_GetState+0x1c>
 8002144:	7bfb      	ldrb	r3, [r7, #15]
 8002146:	2b02      	cmp	r3, #2
 8002148:	d112      	bne.n	8002170 <HAL_CAN_GetState+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check sleep mode acknowledge flag */
    if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d002      	beq.n	800215e <HAL_CAN_GetState+0x30>
    {
      /* Sleep mode is active */
      state = HAL_CAN_STATE_SLEEP_ACTIVE;
 8002158:	2304      	movs	r3, #4
 800215a:	73fb      	strb	r3, [r7, #15]
 800215c:	e008      	b.n	8002170 <HAL_CAN_GetState+0x42>
    }
    /* Check sleep mode request flag */
    else if ((hcan->Instance->MCR & CAN_MCR_SLEEP) != 0U)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0302 	and.w	r3, r3, #2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <HAL_CAN_GetState+0x42>
    {
      /* Sleep mode request is pending */
      state = HAL_CAN_STATE_SLEEP_PENDING;
 800216c:	2303      	movs	r3, #3
 800216e:	73fb      	strb	r3, [r7, #15]
      /* Neither sleep mode request nor sleep mode acknowledge */
    }
  }

  /* Return CAN state */
  return state;
 8002170:	7bfb      	ldrb	r3, [r7, #15]
}
 8002172:	4618      	mov	r0, r3
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr

0800217c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800217c:	b480      	push	{r7}
 800217e:	b085      	sub	sp, #20
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <__NVIC_SetPriorityGrouping+0x44>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002198:	4013      	ands	r3, r2
 800219a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ae:	4a04      	ldr	r2, [pc, #16]	; (80021c0 <__NVIC_SetPriorityGrouping+0x44>)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	60d3      	str	r3, [r2, #12]
}
 80021b4:	bf00      	nop
 80021b6:	3714      	adds	r7, #20
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc80      	pop	{r7}
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	e000ed00 	.word	0xe000ed00

080021c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021c8:	4b04      	ldr	r3, [pc, #16]	; (80021dc <__NVIC_GetPriorityGrouping+0x18>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	0a1b      	lsrs	r3, r3, #8
 80021ce:	f003 0307 	and.w	r3, r3, #7
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	e000ed00 	.word	0xe000ed00

080021e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	db0b      	blt.n	800220a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021f2:	79fb      	ldrb	r3, [r7, #7]
 80021f4:	f003 021f 	and.w	r2, r3, #31
 80021f8:	4906      	ldr	r1, [pc, #24]	; (8002214 <__NVIC_EnableIRQ+0x34>)
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	095b      	lsrs	r3, r3, #5
 8002200:	2001      	movs	r0, #1
 8002202:	fa00 f202 	lsl.w	r2, r0, r2
 8002206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	bc80      	pop	{r7}
 8002212:	4770      	bx	lr
 8002214:	e000e100 	.word	0xe000e100

08002218 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	6039      	str	r1, [r7, #0]
 8002222:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002224:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002228:	2b00      	cmp	r3, #0
 800222a:	db0a      	blt.n	8002242 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	b2da      	uxtb	r2, r3
 8002230:	490c      	ldr	r1, [pc, #48]	; (8002264 <__NVIC_SetPriority+0x4c>)
 8002232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002236:	0112      	lsls	r2, r2, #4
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	440b      	add	r3, r1
 800223c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002240:	e00a      	b.n	8002258 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	b2da      	uxtb	r2, r3
 8002246:	4908      	ldr	r1, [pc, #32]	; (8002268 <__NVIC_SetPriority+0x50>)
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	3b04      	subs	r3, #4
 8002250:	0112      	lsls	r2, r2, #4
 8002252:	b2d2      	uxtb	r2, r2
 8002254:	440b      	add	r3, r1
 8002256:	761a      	strb	r2, [r3, #24]
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	bc80      	pop	{r7}
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	e000e100 	.word	0xe000e100
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800226c:	b480      	push	{r7}
 800226e:	b089      	sub	sp, #36	; 0x24
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f1c3 0307 	rsb	r3, r3, #7
 8002286:	2b04      	cmp	r3, #4
 8002288:	bf28      	it	cs
 800228a:	2304      	movcs	r3, #4
 800228c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	3304      	adds	r3, #4
 8002292:	2b06      	cmp	r3, #6
 8002294:	d902      	bls.n	800229c <NVIC_EncodePriority+0x30>
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	3b03      	subs	r3, #3
 800229a:	e000      	b.n	800229e <NVIC_EncodePriority+0x32>
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a0:	f04f 32ff 	mov.w	r2, #4294967295
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43da      	mvns	r2, r3
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	401a      	ands	r2, r3
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022b4:	f04f 31ff 	mov.w	r1, #4294967295
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	fa01 f303 	lsl.w	r3, r1, r3
 80022be:	43d9      	mvns	r1, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c4:	4313      	orrs	r3, r2
         );
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3724      	adds	r7, #36	; 0x24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bc80      	pop	{r7}
 80022ce:	4770      	bx	lr

080022d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3b01      	subs	r3, #1
 80022dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022e0:	d301      	bcc.n	80022e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022e2:	2301      	movs	r3, #1
 80022e4:	e00f      	b.n	8002306 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022e6:	4a0a      	ldr	r2, [pc, #40]	; (8002310 <SysTick_Config+0x40>)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022ee:	210f      	movs	r1, #15
 80022f0:	f04f 30ff 	mov.w	r0, #4294967295
 80022f4:	f7ff ff90 	bl	8002218 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022f8:	4b05      	ldr	r3, [pc, #20]	; (8002310 <SysTick_Config+0x40>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022fe:	4b04      	ldr	r3, [pc, #16]	; (8002310 <SysTick_Config+0x40>)
 8002300:	2207      	movs	r2, #7
 8002302:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	e000e010 	.word	0xe000e010

08002314 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7ff ff2d 	bl	800217c <__NVIC_SetPriorityGrouping>
}
 8002322:	bf00      	nop
 8002324:	3708      	adds	r7, #8
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800232a:	b580      	push	{r7, lr}
 800232c:	b086      	sub	sp, #24
 800232e:	af00      	add	r7, sp, #0
 8002330:	4603      	mov	r3, r0
 8002332:	60b9      	str	r1, [r7, #8]
 8002334:	607a      	str	r2, [r7, #4]
 8002336:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800233c:	f7ff ff42 	bl	80021c4 <__NVIC_GetPriorityGrouping>
 8002340:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	68b9      	ldr	r1, [r7, #8]
 8002346:	6978      	ldr	r0, [r7, #20]
 8002348:	f7ff ff90 	bl	800226c <NVIC_EncodePriority>
 800234c:	4602      	mov	r2, r0
 800234e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002352:	4611      	mov	r1, r2
 8002354:	4618      	mov	r0, r3
 8002356:	f7ff ff5f 	bl	8002218 <__NVIC_SetPriority>
}
 800235a:	bf00      	nop
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}

08002362 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002362:	b580      	push	{r7, lr}
 8002364:	b082      	sub	sp, #8
 8002366:	af00      	add	r7, sp, #0
 8002368:	4603      	mov	r3, r0
 800236a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800236c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002370:	4618      	mov	r0, r3
 8002372:	f7ff ff35 	bl	80021e0 <__NVIC_EnableIRQ>
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b082      	sub	sp, #8
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7ff ffa2 	bl	80022d0 <SysTick_Config>
 800238c:	4603      	mov	r3, r0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}

08002396 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b082      	sub	sp, #8
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e00e      	b.n	80023c6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	795b      	ldrb	r3, [r3, #5]
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d105      	bne.n	80023be <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7fe feeb 	bl	8001194 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
	...

080023d0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e043      	b.n	800246e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	461a      	mov	r2, r3
 80023ec:	4b22      	ldr	r3, [pc, #136]	; (8002478 <HAL_DMA_Init+0xa8>)
 80023ee:	4413      	add	r3, r2
 80023f0:	4a22      	ldr	r2, [pc, #136]	; (800247c <HAL_DMA_Init+0xac>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	091b      	lsrs	r3, r3, #4
 80023f8:	009a      	lsls	r2, r3, #2
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a1f      	ldr	r2, [pc, #124]	; (8002480 <HAL_DMA_Init+0xb0>)
 8002402:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2202      	movs	r2, #2
 8002408:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800241a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800241e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002428:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002434:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002440:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002448:	68fa      	ldr	r2, [r7, #12]
 800244a:	4313      	orrs	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2200      	movs	r2, #0
 8002468:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	bc80      	pop	{r7}
 8002476:	4770      	bx	lr
 8002478:	bffdfff8 	.word	0xbffdfff8
 800247c:	cccccccd 	.word	0xcccccccd
 8002480:	40020000 	.word	0x40020000

08002484 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
 8002490:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f893 3020 	ldrb.w	r3, [r3, #32]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d101      	bne.n	80024a4 <HAL_DMA_Start_IT+0x20>
 80024a0:	2302      	movs	r3, #2
 80024a2:	e04b      	b.n	800253c <HAL_DMA_Start_IT+0xb8>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2201      	movs	r2, #1
 80024a8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d13a      	bne.n	800252e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2202      	movs	r2, #2
 80024bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0201 	bic.w	r2, r2, #1
 80024d4:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	68b9      	ldr	r1, [r7, #8]
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f000 f9eb 	bl	80028b8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d008      	beq.n	80024fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f042 020e 	orr.w	r2, r2, #14
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	e00f      	b.n	800251c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 0204 	bic.w	r2, r2, #4
 800250a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f042 020a 	orr.w	r2, r2, #10
 800251a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f042 0201 	orr.w	r2, r2, #1
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	e005      	b.n	800253a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002536:	2302      	movs	r3, #2
 8002538:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800253a:	7dfb      	ldrb	r3, [r7, #23]
}
 800253c:	4618      	mov	r0, r3
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800254c:	2300      	movs	r3, #0
 800254e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d008      	beq.n	800256e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2204      	movs	r2, #4
 8002560:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e020      	b.n	80025b0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f022 020e 	bic.w	r2, r2, #14
 800257c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 0201 	bic.w	r2, r2, #1
 800258c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002596:	2101      	movs	r1, #1
 8002598:	fa01 f202 	lsl.w	r2, r1, r2
 800259c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr
	...

080025bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025c4:	2300      	movs	r3, #0
 80025c6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d005      	beq.n	80025e0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2204      	movs	r2, #4
 80025d8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	73fb      	strb	r3, [r7, #15]
 80025de:	e051      	b.n	8002684 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 020e 	bic.w	r2, r2, #14
 80025ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f022 0201 	bic.w	r2, r2, #1
 80025fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a22      	ldr	r2, [pc, #136]	; (8002690 <HAL_DMA_Abort_IT+0xd4>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d029      	beq.n	800265e <HAL_DMA_Abort_IT+0xa2>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a21      	ldr	r2, [pc, #132]	; (8002694 <HAL_DMA_Abort_IT+0xd8>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d022      	beq.n	800265a <HAL_DMA_Abort_IT+0x9e>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a1f      	ldr	r2, [pc, #124]	; (8002698 <HAL_DMA_Abort_IT+0xdc>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d01a      	beq.n	8002654 <HAL_DMA_Abort_IT+0x98>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a1e      	ldr	r2, [pc, #120]	; (800269c <HAL_DMA_Abort_IT+0xe0>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d012      	beq.n	800264e <HAL_DMA_Abort_IT+0x92>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a1c      	ldr	r2, [pc, #112]	; (80026a0 <HAL_DMA_Abort_IT+0xe4>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d00a      	beq.n	8002648 <HAL_DMA_Abort_IT+0x8c>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a1b      	ldr	r2, [pc, #108]	; (80026a4 <HAL_DMA_Abort_IT+0xe8>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d102      	bne.n	8002642 <HAL_DMA_Abort_IT+0x86>
 800263c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002640:	e00e      	b.n	8002660 <HAL_DMA_Abort_IT+0xa4>
 8002642:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002646:	e00b      	b.n	8002660 <HAL_DMA_Abort_IT+0xa4>
 8002648:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800264c:	e008      	b.n	8002660 <HAL_DMA_Abort_IT+0xa4>
 800264e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002652:	e005      	b.n	8002660 <HAL_DMA_Abort_IT+0xa4>
 8002654:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002658:	e002      	b.n	8002660 <HAL_DMA_Abort_IT+0xa4>
 800265a:	2310      	movs	r3, #16
 800265c:	e000      	b.n	8002660 <HAL_DMA_Abort_IT+0xa4>
 800265e:	2301      	movs	r3, #1
 8002660:	4a11      	ldr	r2, [pc, #68]	; (80026a8 <HAL_DMA_Abort_IT+0xec>)
 8002662:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002678:	2b00      	cmp	r3, #0
 800267a:	d003      	beq.n	8002684 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	4798      	blx	r3
    } 
  }
  return status;
 8002684:	7bfb      	ldrb	r3, [r7, #15]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40020008 	.word	0x40020008
 8002694:	4002001c 	.word	0x4002001c
 8002698:	40020030 	.word	0x40020030
 800269c:	40020044 	.word	0x40020044
 80026a0:	40020058 	.word	0x40020058
 80026a4:	4002006c 	.word	0x4002006c
 80026a8:	40020000 	.word	0x40020000

080026ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c8:	2204      	movs	r2, #4
 80026ca:	409a      	lsls	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	4013      	ands	r3, r2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d04f      	beq.n	8002774 <HAL_DMA_IRQHandler+0xc8>
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	f003 0304 	and.w	r3, r3, #4
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d04a      	beq.n	8002774 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0320 	and.w	r3, r3, #32
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d107      	bne.n	80026fc <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f022 0204 	bic.w	r2, r2, #4
 80026fa:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a66      	ldr	r2, [pc, #408]	; (800289c <HAL_DMA_IRQHandler+0x1f0>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d029      	beq.n	800275a <HAL_DMA_IRQHandler+0xae>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a65      	ldr	r2, [pc, #404]	; (80028a0 <HAL_DMA_IRQHandler+0x1f4>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d022      	beq.n	8002756 <HAL_DMA_IRQHandler+0xaa>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a63      	ldr	r2, [pc, #396]	; (80028a4 <HAL_DMA_IRQHandler+0x1f8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d01a      	beq.n	8002750 <HAL_DMA_IRQHandler+0xa4>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a62      	ldr	r2, [pc, #392]	; (80028a8 <HAL_DMA_IRQHandler+0x1fc>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d012      	beq.n	800274a <HAL_DMA_IRQHandler+0x9e>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a60      	ldr	r2, [pc, #384]	; (80028ac <HAL_DMA_IRQHandler+0x200>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d00a      	beq.n	8002744 <HAL_DMA_IRQHandler+0x98>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a5f      	ldr	r2, [pc, #380]	; (80028b0 <HAL_DMA_IRQHandler+0x204>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d102      	bne.n	800273e <HAL_DMA_IRQHandler+0x92>
 8002738:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800273c:	e00e      	b.n	800275c <HAL_DMA_IRQHandler+0xb0>
 800273e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002742:	e00b      	b.n	800275c <HAL_DMA_IRQHandler+0xb0>
 8002744:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002748:	e008      	b.n	800275c <HAL_DMA_IRQHandler+0xb0>
 800274a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800274e:	e005      	b.n	800275c <HAL_DMA_IRQHandler+0xb0>
 8002750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002754:	e002      	b.n	800275c <HAL_DMA_IRQHandler+0xb0>
 8002756:	2340      	movs	r3, #64	; 0x40
 8002758:	e000      	b.n	800275c <HAL_DMA_IRQHandler+0xb0>
 800275a:	2304      	movs	r3, #4
 800275c:	4a55      	ldr	r2, [pc, #340]	; (80028b4 <HAL_DMA_IRQHandler+0x208>)
 800275e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002764:	2b00      	cmp	r3, #0
 8002766:	f000 8094 	beq.w	8002892 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002772:	e08e      	b.n	8002892 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	2202      	movs	r2, #2
 800277a:	409a      	lsls	r2, r3
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	4013      	ands	r3, r2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d056      	beq.n	8002832 <HAL_DMA_IRQHandler+0x186>
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d051      	beq.n	8002832 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0320 	and.w	r3, r3, #32
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10b      	bne.n	80027b4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 020a 	bic.w	r2, r2, #10
 80027aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a38      	ldr	r2, [pc, #224]	; (800289c <HAL_DMA_IRQHandler+0x1f0>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d029      	beq.n	8002812 <HAL_DMA_IRQHandler+0x166>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a37      	ldr	r2, [pc, #220]	; (80028a0 <HAL_DMA_IRQHandler+0x1f4>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d022      	beq.n	800280e <HAL_DMA_IRQHandler+0x162>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a35      	ldr	r2, [pc, #212]	; (80028a4 <HAL_DMA_IRQHandler+0x1f8>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d01a      	beq.n	8002808 <HAL_DMA_IRQHandler+0x15c>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a34      	ldr	r2, [pc, #208]	; (80028a8 <HAL_DMA_IRQHandler+0x1fc>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d012      	beq.n	8002802 <HAL_DMA_IRQHandler+0x156>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a32      	ldr	r2, [pc, #200]	; (80028ac <HAL_DMA_IRQHandler+0x200>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d00a      	beq.n	80027fc <HAL_DMA_IRQHandler+0x150>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a31      	ldr	r2, [pc, #196]	; (80028b0 <HAL_DMA_IRQHandler+0x204>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d102      	bne.n	80027f6 <HAL_DMA_IRQHandler+0x14a>
 80027f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027f4:	e00e      	b.n	8002814 <HAL_DMA_IRQHandler+0x168>
 80027f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027fa:	e00b      	b.n	8002814 <HAL_DMA_IRQHandler+0x168>
 80027fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002800:	e008      	b.n	8002814 <HAL_DMA_IRQHandler+0x168>
 8002802:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002806:	e005      	b.n	8002814 <HAL_DMA_IRQHandler+0x168>
 8002808:	f44f 7300 	mov.w	r3, #512	; 0x200
 800280c:	e002      	b.n	8002814 <HAL_DMA_IRQHandler+0x168>
 800280e:	2320      	movs	r3, #32
 8002810:	e000      	b.n	8002814 <HAL_DMA_IRQHandler+0x168>
 8002812:	2302      	movs	r3, #2
 8002814:	4a27      	ldr	r2, [pc, #156]	; (80028b4 <HAL_DMA_IRQHandler+0x208>)
 8002816:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002824:	2b00      	cmp	r3, #0
 8002826:	d034      	beq.n	8002892 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002830:	e02f      	b.n	8002892 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002836:	2208      	movs	r2, #8
 8002838:	409a      	lsls	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	4013      	ands	r3, r2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d028      	beq.n	8002894 <HAL_DMA_IRQHandler+0x1e8>
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	2b00      	cmp	r3, #0
 800284a:	d023      	beq.n	8002894 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 020e 	bic.w	r2, r2, #14
 800285a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002864:	2101      	movs	r1, #1
 8002866:	fa01 f202 	lsl.w	r2, r1, r2
 800286a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	2b00      	cmp	r3, #0
 8002888:	d004      	beq.n	8002894 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	4798      	blx	r3
    }
  }
  return;
 8002892:	bf00      	nop
 8002894:	bf00      	nop
}
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40020008 	.word	0x40020008
 80028a0:	4002001c 	.word	0x4002001c
 80028a4:	40020030 	.word	0x40020030
 80028a8:	40020044 	.word	0x40020044
 80028ac:	40020058 	.word	0x40020058
 80028b0:	4002006c 	.word	0x4002006c
 80028b4:	40020000 	.word	0x40020000

080028b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b085      	sub	sp, #20
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
 80028c4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028ce:	2101      	movs	r1, #1
 80028d0:	fa01 f202 	lsl.w	r2, r1, r2
 80028d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2b10      	cmp	r3, #16
 80028e4:	d108      	bne.n	80028f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80028f6:	e007      	b.n	8002908 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68ba      	ldr	r2, [r7, #8]
 80028fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	60da      	str	r2, [r3, #12]
}
 8002908:	bf00      	nop
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	bc80      	pop	{r7}
 8002910:	4770      	bx	lr
	...

08002914 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002914:	b480      	push	{r7}
 8002916:	b08b      	sub	sp, #44	; 0x2c
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800291e:	2300      	movs	r3, #0
 8002920:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002922:	2300      	movs	r3, #0
 8002924:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002926:	e169      	b.n	8002bfc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002928:	2201      	movs	r2, #1
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	69fa      	ldr	r2, [r7, #28]
 8002938:	4013      	ands	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	429a      	cmp	r2, r3
 8002942:	f040 8158 	bne.w	8002bf6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	4a9a      	ldr	r2, [pc, #616]	; (8002bb4 <HAL_GPIO_Init+0x2a0>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d05e      	beq.n	8002a0e <HAL_GPIO_Init+0xfa>
 8002950:	4a98      	ldr	r2, [pc, #608]	; (8002bb4 <HAL_GPIO_Init+0x2a0>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d875      	bhi.n	8002a42 <HAL_GPIO_Init+0x12e>
 8002956:	4a98      	ldr	r2, [pc, #608]	; (8002bb8 <HAL_GPIO_Init+0x2a4>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d058      	beq.n	8002a0e <HAL_GPIO_Init+0xfa>
 800295c:	4a96      	ldr	r2, [pc, #600]	; (8002bb8 <HAL_GPIO_Init+0x2a4>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d86f      	bhi.n	8002a42 <HAL_GPIO_Init+0x12e>
 8002962:	4a96      	ldr	r2, [pc, #600]	; (8002bbc <HAL_GPIO_Init+0x2a8>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d052      	beq.n	8002a0e <HAL_GPIO_Init+0xfa>
 8002968:	4a94      	ldr	r2, [pc, #592]	; (8002bbc <HAL_GPIO_Init+0x2a8>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d869      	bhi.n	8002a42 <HAL_GPIO_Init+0x12e>
 800296e:	4a94      	ldr	r2, [pc, #592]	; (8002bc0 <HAL_GPIO_Init+0x2ac>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d04c      	beq.n	8002a0e <HAL_GPIO_Init+0xfa>
 8002974:	4a92      	ldr	r2, [pc, #584]	; (8002bc0 <HAL_GPIO_Init+0x2ac>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d863      	bhi.n	8002a42 <HAL_GPIO_Init+0x12e>
 800297a:	4a92      	ldr	r2, [pc, #584]	; (8002bc4 <HAL_GPIO_Init+0x2b0>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d046      	beq.n	8002a0e <HAL_GPIO_Init+0xfa>
 8002980:	4a90      	ldr	r2, [pc, #576]	; (8002bc4 <HAL_GPIO_Init+0x2b0>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d85d      	bhi.n	8002a42 <HAL_GPIO_Init+0x12e>
 8002986:	2b12      	cmp	r3, #18
 8002988:	d82a      	bhi.n	80029e0 <HAL_GPIO_Init+0xcc>
 800298a:	2b12      	cmp	r3, #18
 800298c:	d859      	bhi.n	8002a42 <HAL_GPIO_Init+0x12e>
 800298e:	a201      	add	r2, pc, #4	; (adr r2, 8002994 <HAL_GPIO_Init+0x80>)
 8002990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002994:	08002a0f 	.word	0x08002a0f
 8002998:	080029e9 	.word	0x080029e9
 800299c:	080029fb 	.word	0x080029fb
 80029a0:	08002a3d 	.word	0x08002a3d
 80029a4:	08002a43 	.word	0x08002a43
 80029a8:	08002a43 	.word	0x08002a43
 80029ac:	08002a43 	.word	0x08002a43
 80029b0:	08002a43 	.word	0x08002a43
 80029b4:	08002a43 	.word	0x08002a43
 80029b8:	08002a43 	.word	0x08002a43
 80029bc:	08002a43 	.word	0x08002a43
 80029c0:	08002a43 	.word	0x08002a43
 80029c4:	08002a43 	.word	0x08002a43
 80029c8:	08002a43 	.word	0x08002a43
 80029cc:	08002a43 	.word	0x08002a43
 80029d0:	08002a43 	.word	0x08002a43
 80029d4:	08002a43 	.word	0x08002a43
 80029d8:	080029f1 	.word	0x080029f1
 80029dc:	08002a05 	.word	0x08002a05
 80029e0:	4a79      	ldr	r2, [pc, #484]	; (8002bc8 <HAL_GPIO_Init+0x2b4>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d013      	beq.n	8002a0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80029e6:	e02c      	b.n	8002a42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	623b      	str	r3, [r7, #32]
          break;
 80029ee:	e029      	b.n	8002a44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	3304      	adds	r3, #4
 80029f6:	623b      	str	r3, [r7, #32]
          break;
 80029f8:	e024      	b.n	8002a44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	3308      	adds	r3, #8
 8002a00:	623b      	str	r3, [r7, #32]
          break;
 8002a02:	e01f      	b.n	8002a44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	330c      	adds	r3, #12
 8002a0a:	623b      	str	r3, [r7, #32]
          break;
 8002a0c:	e01a      	b.n	8002a44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d102      	bne.n	8002a1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002a16:	2304      	movs	r3, #4
 8002a18:	623b      	str	r3, [r7, #32]
          break;
 8002a1a:	e013      	b.n	8002a44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d105      	bne.n	8002a30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a24:	2308      	movs	r3, #8
 8002a26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	69fa      	ldr	r2, [r7, #28]
 8002a2c:	611a      	str	r2, [r3, #16]
          break;
 8002a2e:	e009      	b.n	8002a44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a30:	2308      	movs	r3, #8
 8002a32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	69fa      	ldr	r2, [r7, #28]
 8002a38:	615a      	str	r2, [r3, #20]
          break;
 8002a3a:	e003      	b.n	8002a44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	623b      	str	r3, [r7, #32]
          break;
 8002a40:	e000      	b.n	8002a44 <HAL_GPIO_Init+0x130>
          break;
 8002a42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	2bff      	cmp	r3, #255	; 0xff
 8002a48:	d801      	bhi.n	8002a4e <HAL_GPIO_Init+0x13a>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	e001      	b.n	8002a52 <HAL_GPIO_Init+0x13e>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	3304      	adds	r3, #4
 8002a52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	2bff      	cmp	r3, #255	; 0xff
 8002a58:	d802      	bhi.n	8002a60 <HAL_GPIO_Init+0x14c>
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	e002      	b.n	8002a66 <HAL_GPIO_Init+0x152>
 8002a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a62:	3b08      	subs	r3, #8
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	210f      	movs	r1, #15
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	fa01 f303 	lsl.w	r3, r1, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	401a      	ands	r2, r3
 8002a78:	6a39      	ldr	r1, [r7, #32]
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a80:	431a      	orrs	r2, r3
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f000 80b1 	beq.w	8002bf6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a94:	4b4d      	ldr	r3, [pc, #308]	; (8002bcc <HAL_GPIO_Init+0x2b8>)
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	4a4c      	ldr	r2, [pc, #304]	; (8002bcc <HAL_GPIO_Init+0x2b8>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	6193      	str	r3, [r2, #24]
 8002aa0:	4b4a      	ldr	r3, [pc, #296]	; (8002bcc <HAL_GPIO_Init+0x2b8>)
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002aac:	4a48      	ldr	r2, [pc, #288]	; (8002bd0 <HAL_GPIO_Init+0x2bc>)
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	089b      	lsrs	r3, r3, #2
 8002ab2:	3302      	adds	r3, #2
 8002ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ab8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abc:	f003 0303 	and.w	r3, r3, #3
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	220f      	movs	r2, #15
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	4013      	ands	r3, r2
 8002ace:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a40      	ldr	r2, [pc, #256]	; (8002bd4 <HAL_GPIO_Init+0x2c0>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d013      	beq.n	8002b00 <HAL_GPIO_Init+0x1ec>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a3f      	ldr	r2, [pc, #252]	; (8002bd8 <HAL_GPIO_Init+0x2c4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d00d      	beq.n	8002afc <HAL_GPIO_Init+0x1e8>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a3e      	ldr	r2, [pc, #248]	; (8002bdc <HAL_GPIO_Init+0x2c8>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d007      	beq.n	8002af8 <HAL_GPIO_Init+0x1e4>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	4a3d      	ldr	r2, [pc, #244]	; (8002be0 <HAL_GPIO_Init+0x2cc>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d101      	bne.n	8002af4 <HAL_GPIO_Init+0x1e0>
 8002af0:	2303      	movs	r3, #3
 8002af2:	e006      	b.n	8002b02 <HAL_GPIO_Init+0x1ee>
 8002af4:	2304      	movs	r3, #4
 8002af6:	e004      	b.n	8002b02 <HAL_GPIO_Init+0x1ee>
 8002af8:	2302      	movs	r3, #2
 8002afa:	e002      	b.n	8002b02 <HAL_GPIO_Init+0x1ee>
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <HAL_GPIO_Init+0x1ee>
 8002b00:	2300      	movs	r3, #0
 8002b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b04:	f002 0203 	and.w	r2, r2, #3
 8002b08:	0092      	lsls	r2, r2, #2
 8002b0a:	4093      	lsls	r3, r2
 8002b0c:	68fa      	ldr	r2, [r7, #12]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002b12:	492f      	ldr	r1, [pc, #188]	; (8002bd0 <HAL_GPIO_Init+0x2bc>)
 8002b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b16:	089b      	lsrs	r3, r3, #2
 8002b18:	3302      	adds	r3, #2
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d006      	beq.n	8002b3a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b2c:	4b2d      	ldr	r3, [pc, #180]	; (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	492c      	ldr	r1, [pc, #176]	; (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	608b      	str	r3, [r1, #8]
 8002b38:	e006      	b.n	8002b48 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b3a:	4b2a      	ldr	r3, [pc, #168]	; (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	43db      	mvns	r3, r3
 8002b42:	4928      	ldr	r1, [pc, #160]	; (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d006      	beq.n	8002b62 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b54:	4b23      	ldr	r3, [pc, #140]	; (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b56:	68da      	ldr	r2, [r3, #12]
 8002b58:	4922      	ldr	r1, [pc, #136]	; (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	60cb      	str	r3, [r1, #12]
 8002b60:	e006      	b.n	8002b70 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b62:	4b20      	ldr	r3, [pc, #128]	; (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	491e      	ldr	r1, [pc, #120]	; (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d006      	beq.n	8002b8a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b7c:	4b19      	ldr	r3, [pc, #100]	; (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	4918      	ldr	r1, [pc, #96]	; (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	604b      	str	r3, [r1, #4]
 8002b88:	e006      	b.n	8002b98 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b8a:	4b16      	ldr	r3, [pc, #88]	; (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	43db      	mvns	r3, r3
 8002b92:	4914      	ldr	r1, [pc, #80]	; (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002b94:	4013      	ands	r3, r2
 8002b96:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d021      	beq.n	8002be8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ba4:	4b0f      	ldr	r3, [pc, #60]	; (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	490e      	ldr	r1, [pc, #56]	; (8002be4 <HAL_GPIO_Init+0x2d0>)
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	600b      	str	r3, [r1, #0]
 8002bb0:	e021      	b.n	8002bf6 <HAL_GPIO_Init+0x2e2>
 8002bb2:	bf00      	nop
 8002bb4:	10320000 	.word	0x10320000
 8002bb8:	10310000 	.word	0x10310000
 8002bbc:	10220000 	.word	0x10220000
 8002bc0:	10210000 	.word	0x10210000
 8002bc4:	10120000 	.word	0x10120000
 8002bc8:	10110000 	.word	0x10110000
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	40010000 	.word	0x40010000
 8002bd4:	40010800 	.word	0x40010800
 8002bd8:	40010c00 	.word	0x40010c00
 8002bdc:	40011000 	.word	0x40011000
 8002be0:	40011400 	.word	0x40011400
 8002be4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002be8:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <HAL_GPIO_Init+0x304>)
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	4909      	ldr	r1, [pc, #36]	; (8002c18 <HAL_GPIO_Init+0x304>)
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c02:	fa22 f303 	lsr.w	r3, r2, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f47f ae8e 	bne.w	8002928 <HAL_GPIO_Init+0x14>
  }
}
 8002c0c:	bf00      	nop
 8002c0e:	bf00      	nop
 8002c10:	372c      	adds	r7, #44	; 0x2c
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr
 8002c18:	40010400 	.word	0x40010400

08002c1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	807b      	strh	r3, [r7, #2]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002c2c:	787b      	ldrb	r3, [r7, #1]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c32:	887a      	ldrh	r2, [r7, #2]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002c38:	e003      	b.n	8002c42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c3a:	887b      	ldrh	r3, [r7, #2]
 8002c3c:	041a      	lsls	r2, r3, #16
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	611a      	str	r2, [r3, #16]
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bc80      	pop	{r7}
 8002c4a:	4770      	bx	lr

08002c4c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	460b      	mov	r3, r1
 8002c56:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c5e:	887a      	ldrh	r2, [r7, #2]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	4013      	ands	r3, r2
 8002c64:	041a      	lsls	r2, r3, #16
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	43d9      	mvns	r1, r3
 8002c6a:	887b      	ldrh	r3, [r7, #2]
 8002c6c:	400b      	ands	r3, r1
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	611a      	str	r2, [r3, #16]
}
 8002c74:	bf00      	nop
 8002c76:	3714      	adds	r7, #20
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr
	...

08002c80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e12b      	b.n	8002eea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d106      	bne.n	8002cac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7fe fa92 	bl	80011d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2224      	movs	r2, #36	; 0x24
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f022 0201 	bic.w	r2, r2, #1
 8002cc2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cd2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ce2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ce4:	f002 f9d8 	bl	8005098 <HAL_RCC_GetPCLK1Freq>
 8002ce8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	4a81      	ldr	r2, [pc, #516]	; (8002ef4 <HAL_I2C_Init+0x274>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d807      	bhi.n	8002d04 <HAL_I2C_Init+0x84>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4a80      	ldr	r2, [pc, #512]	; (8002ef8 <HAL_I2C_Init+0x278>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	bf94      	ite	ls
 8002cfc:	2301      	movls	r3, #1
 8002cfe:	2300      	movhi	r3, #0
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	e006      	b.n	8002d12 <HAL_I2C_Init+0x92>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4a7d      	ldr	r2, [pc, #500]	; (8002efc <HAL_I2C_Init+0x27c>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	bf94      	ite	ls
 8002d0c:	2301      	movls	r3, #1
 8002d0e:	2300      	movhi	r3, #0
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d001      	beq.n	8002d1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e0e7      	b.n	8002eea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	4a78      	ldr	r2, [pc, #480]	; (8002f00 <HAL_I2C_Init+0x280>)
 8002d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d22:	0c9b      	lsrs	r3, r3, #18
 8002d24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	4a6a      	ldr	r2, [pc, #424]	; (8002ef4 <HAL_I2C_Init+0x274>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d802      	bhi.n	8002d54 <HAL_I2C_Init+0xd4>
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	3301      	adds	r3, #1
 8002d52:	e009      	b.n	8002d68 <HAL_I2C_Init+0xe8>
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002d5a:	fb02 f303 	mul.w	r3, r2, r3
 8002d5e:	4a69      	ldr	r2, [pc, #420]	; (8002f04 <HAL_I2C_Init+0x284>)
 8002d60:	fba2 2303 	umull	r2, r3, r2, r3
 8002d64:	099b      	lsrs	r3, r3, #6
 8002d66:	3301      	adds	r3, #1
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6812      	ldr	r2, [r2, #0]
 8002d6c:	430b      	orrs	r3, r1
 8002d6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	495c      	ldr	r1, [pc, #368]	; (8002ef4 <HAL_I2C_Init+0x274>)
 8002d84:	428b      	cmp	r3, r1
 8002d86:	d819      	bhi.n	8002dbc <HAL_I2C_Init+0x13c>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	1e59      	subs	r1, r3, #1
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d96:	1c59      	adds	r1, r3, #1
 8002d98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d9c:	400b      	ands	r3, r1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00a      	beq.n	8002db8 <HAL_I2C_Init+0x138>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	1e59      	subs	r1, r3, #1
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	fbb1 f3f3 	udiv	r3, r1, r3
 8002db0:	3301      	adds	r3, #1
 8002db2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db6:	e051      	b.n	8002e5c <HAL_I2C_Init+0x1dc>
 8002db8:	2304      	movs	r3, #4
 8002dba:	e04f      	b.n	8002e5c <HAL_I2C_Init+0x1dc>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d111      	bne.n	8002de8 <HAL_I2C_Init+0x168>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	1e58      	subs	r0, r3, #1
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6859      	ldr	r1, [r3, #4]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	440b      	add	r3, r1
 8002dd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	bf0c      	ite	eq
 8002de0:	2301      	moveq	r3, #1
 8002de2:	2300      	movne	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	e012      	b.n	8002e0e <HAL_I2C_Init+0x18e>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	1e58      	subs	r0, r3, #1
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6859      	ldr	r1, [r3, #4]
 8002df0:	460b      	mov	r3, r1
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	440b      	add	r3, r1
 8002df6:	0099      	lsls	r1, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dfe:	3301      	adds	r3, #1
 8002e00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	bf0c      	ite	eq
 8002e08:	2301      	moveq	r3, #1
 8002e0a:	2300      	movne	r3, #0
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_I2C_Init+0x196>
 8002e12:	2301      	movs	r3, #1
 8002e14:	e022      	b.n	8002e5c <HAL_I2C_Init+0x1dc>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d10e      	bne.n	8002e3c <HAL_I2C_Init+0x1bc>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	1e58      	subs	r0, r3, #1
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6859      	ldr	r1, [r3, #4]
 8002e26:	460b      	mov	r3, r1
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	440b      	add	r3, r1
 8002e2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e30:	3301      	adds	r3, #1
 8002e32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e3a:	e00f      	b.n	8002e5c <HAL_I2C_Init+0x1dc>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	1e58      	subs	r0, r3, #1
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6859      	ldr	r1, [r3, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	440b      	add	r3, r1
 8002e4a:	0099      	lsls	r1, r3, #2
 8002e4c:	440b      	add	r3, r1
 8002e4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e52:	3301      	adds	r3, #1
 8002e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	6809      	ldr	r1, [r1, #0]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69da      	ldr	r2, [r3, #28]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6911      	ldr	r1, [r2, #16]
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	68d2      	ldr	r2, [r2, #12]
 8002e96:	4311      	orrs	r1, r2
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6812      	ldr	r2, [r2, #0]
 8002e9c:	430b      	orrs	r3, r1
 8002e9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	695a      	ldr	r2, [r3, #20]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	699b      	ldr	r3, [r3, #24]
 8002eb2:	431a      	orrs	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0201 	orr.w	r2, r2, #1
 8002eca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	000186a0 	.word	0x000186a0
 8002ef8:	001e847f 	.word	0x001e847f
 8002efc:	003d08ff 	.word	0x003d08ff
 8002f00:	431bde83 	.word	0x431bde83
 8002f04:	10624dd3 	.word	0x10624dd3

08002f08 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b088      	sub	sp, #32
 8002f0c:	af02      	add	r7, sp, #8
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	607a      	str	r2, [r7, #4]
 8002f12:	461a      	mov	r2, r3
 8002f14:	460b      	mov	r3, r1
 8002f16:	817b      	strh	r3, [r7, #10]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f1c:	f7fe fb68 	bl	80015f0 <HAL_GetTick>
 8002f20:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b20      	cmp	r3, #32
 8002f2c:	f040 80e0 	bne.w	80030f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	2319      	movs	r3, #25
 8002f36:	2201      	movs	r2, #1
 8002f38:	4970      	ldr	r1, [pc, #448]	; (80030fc <HAL_I2C_Master_Transmit+0x1f4>)
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f001 faac 	bl	8004498 <I2C_WaitOnFlagUntilTimeout>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f46:	2302      	movs	r3, #2
 8002f48:	e0d3      	b.n	80030f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_I2C_Master_Transmit+0x50>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e0cc      	b.n	80030f2 <HAL_I2C_Master_Transmit+0x1ea>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0301 	and.w	r3, r3, #1
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d007      	beq.n	8002f7e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f042 0201 	orr.w	r2, r2, #1
 8002f7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f8c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2221      	movs	r2, #33	; 0x21
 8002f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2210      	movs	r2, #16
 8002f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	893a      	ldrh	r2, [r7, #8]
 8002fae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	4a50      	ldr	r2, [pc, #320]	; (8003100 <HAL_I2C_Master_Transmit+0x1f8>)
 8002fbe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002fc0:	8979      	ldrh	r1, [r7, #10]
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	6a3a      	ldr	r2, [r7, #32]
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 ff98 	bl	8003efc <I2C_MasterRequestWrite>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e08d      	b.n	80030f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695b      	ldr	r3, [r3, #20]
 8002fe0:	613b      	str	r3, [r7, #16]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	613b      	str	r3, [r7, #16]
 8002fea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002fec:	e066      	b.n	80030bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	6a39      	ldr	r1, [r7, #32]
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f001 fb6a 	bl	80046cc <I2C_WaitOnTXEFlagUntilTimeout>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00d      	beq.n	800301a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	2b04      	cmp	r3, #4
 8003004:	d107      	bne.n	8003016 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003014:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e06b      	b.n	80030f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301e:	781a      	ldrb	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003034:	b29b      	uxth	r3, r3
 8003036:	3b01      	subs	r3, #1
 8003038:	b29a      	uxth	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003042:	3b01      	subs	r3, #1
 8003044:	b29a      	uxth	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b04      	cmp	r3, #4
 8003056:	d11b      	bne.n	8003090 <HAL_I2C_Master_Transmit+0x188>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800305c:	2b00      	cmp	r3, #0
 800305e:	d017      	beq.n	8003090 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003064:	781a      	ldrb	r2, [r3, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307a:	b29b      	uxth	r3, r3
 800307c:	3b01      	subs	r3, #1
 800307e:	b29a      	uxth	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003088:	3b01      	subs	r3, #1
 800308a:	b29a      	uxth	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	6a39      	ldr	r1, [r7, #32]
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f001 fb61 	bl	800475c <I2C_WaitOnBTFFlagUntilTimeout>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00d      	beq.n	80030bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a4:	2b04      	cmp	r3, #4
 80030a6:	d107      	bne.n	80030b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e01a      	b.n	80030f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d194      	bne.n	8002fee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2220      	movs	r2, #32
 80030d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030ec:	2300      	movs	r3, #0
 80030ee:	e000      	b.n	80030f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80030f0:	2302      	movs	r3, #2
  }
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3718      	adds	r7, #24
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	00100002 	.word	0x00100002
 8003100:	ffff0000 	.word	0xffff0000

08003104 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b08c      	sub	sp, #48	; 0x30
 8003108:	af02      	add	r7, sp, #8
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	607a      	str	r2, [r7, #4]
 800310e:	461a      	mov	r2, r3
 8003110:	460b      	mov	r3, r1
 8003112:	817b      	strh	r3, [r7, #10]
 8003114:	4613      	mov	r3, r2
 8003116:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800311c:	f7fe fa68 	bl	80015f0 <HAL_GetTick>
 8003120:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b20      	cmp	r3, #32
 800312c:	f040 824b 	bne.w	80035c6 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	2319      	movs	r3, #25
 8003136:	2201      	movs	r2, #1
 8003138:	497f      	ldr	r1, [pc, #508]	; (8003338 <HAL_I2C_Master_Receive+0x234>)
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f001 f9ac 	bl	8004498 <I2C_WaitOnFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003146:	2302      	movs	r3, #2
 8003148:	e23e      	b.n	80035c8 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003150:	2b01      	cmp	r3, #1
 8003152:	d101      	bne.n	8003158 <HAL_I2C_Master_Receive+0x54>
 8003154:	2302      	movs	r3, #2
 8003156:	e237      	b.n	80035c8 <HAL_I2C_Master_Receive+0x4c4>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b01      	cmp	r3, #1
 800316c:	d007      	beq.n	800317e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f042 0201 	orr.w	r2, r2, #1
 800317c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800318c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2222      	movs	r2, #34	; 0x22
 8003192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2210      	movs	r2, #16
 800319a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	893a      	ldrh	r2, [r7, #8]
 80031ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	4a5f      	ldr	r2, [pc, #380]	; (800333c <HAL_I2C_Master_Receive+0x238>)
 80031be:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031c0:	8979      	ldrh	r1, [r7, #10]
 80031c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 ff1a 	bl	8004000 <I2C_MasterRequestRead>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e1f8      	b.n	80035c8 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d113      	bne.n	8003206 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031de:	2300      	movs	r3, #0
 80031e0:	61fb      	str	r3, [r7, #28]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	61fb      	str	r3, [r7, #28]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	61fb      	str	r3, [r7, #28]
 80031f2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	e1cc      	b.n	80035a0 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320a:	2b01      	cmp	r3, #1
 800320c:	d11e      	bne.n	800324c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800321c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800321e:	b672      	cpsid	i
}
 8003220:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003222:	2300      	movs	r3, #0
 8003224:	61bb      	str	r3, [r7, #24]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	61bb      	str	r3, [r7, #24]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	61bb      	str	r3, [r7, #24]
 8003236:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003246:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003248:	b662      	cpsie	i
}
 800324a:	e035      	b.n	80032b8 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003250:	2b02      	cmp	r3, #2
 8003252:	d11e      	bne.n	8003292 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003262:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003264:	b672      	cpsid	i
}
 8003266:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003268:	2300      	movs	r3, #0
 800326a:	617b      	str	r3, [r7, #20]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	617b      	str	r3, [r7, #20]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	617b      	str	r3, [r7, #20]
 800327c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800328c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800328e:	b662      	cpsie	i
}
 8003290:	e012      	b.n	80032b8 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032a2:	2300      	movs	r3, #0
 80032a4:	613b      	str	r3, [r7, #16]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	613b      	str	r3, [r7, #16]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	613b      	str	r3, [r7, #16]
 80032b6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80032b8:	e172      	b.n	80035a0 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032be:	2b03      	cmp	r3, #3
 80032c0:	f200 811f 	bhi.w	8003502 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d123      	bne.n	8003314 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f001 fa8b 	bl	80047ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e173      	b.n	80035c8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	691a      	ldr	r2, [r3, #16]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ea:	b2d2      	uxtb	r2, r2
 80032ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	1c5a      	adds	r2, r3, #1
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fc:	3b01      	subs	r3, #1
 80032fe:	b29a      	uxth	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003308:	b29b      	uxth	r3, r3
 800330a:	3b01      	subs	r3, #1
 800330c:	b29a      	uxth	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003312:	e145      	b.n	80035a0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003318:	2b02      	cmp	r3, #2
 800331a:	d152      	bne.n	80033c2 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	9300      	str	r3, [sp, #0]
 8003320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003322:	2200      	movs	r2, #0
 8003324:	4906      	ldr	r1, [pc, #24]	; (8003340 <HAL_I2C_Master_Receive+0x23c>)
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f001 f8b6 	bl	8004498 <I2C_WaitOnFlagUntilTimeout>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d008      	beq.n	8003344 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e148      	b.n	80035c8 <HAL_I2C_Master_Receive+0x4c4>
 8003336:	bf00      	nop
 8003338:	00100002 	.word	0x00100002
 800333c:	ffff0000 	.word	0xffff0000
 8003340:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003344:	b672      	cpsid	i
}
 8003346:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003356:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	691a      	ldr	r2, [r3, #16]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	1c5a      	adds	r2, r3, #1
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003374:	3b01      	subs	r3, #1
 8003376:	b29a      	uxth	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003380:	b29b      	uxth	r3, r3
 8003382:	3b01      	subs	r3, #1
 8003384:	b29a      	uxth	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800338a:	b662      	cpsie	i
}
 800338c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	691a      	ldr	r2, [r3, #16]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003398:	b2d2      	uxtb	r2, r2
 800339a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	1c5a      	adds	r2, r3, #1
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033aa:	3b01      	subs	r3, #1
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033c0:	e0ee      	b.n	80035a0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c4:	9300      	str	r3, [sp, #0]
 80033c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c8:	2200      	movs	r2, #0
 80033ca:	4981      	ldr	r1, [pc, #516]	; (80035d0 <HAL_I2C_Master_Receive+0x4cc>)
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f001 f863 	bl	8004498 <I2C_WaitOnFlagUntilTimeout>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d001      	beq.n	80033dc <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e0f5      	b.n	80035c8 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033ea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80033ec:	b672      	cpsid	i
}
 80033ee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	691a      	ldr	r2, [r3, #16]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003402:	1c5a      	adds	r2, r3, #1
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340c:	3b01      	subs	r3, #1
 800340e:	b29a      	uxth	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003418:	b29b      	uxth	r3, r3
 800341a:	3b01      	subs	r3, #1
 800341c:	b29a      	uxth	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003422:	4b6c      	ldr	r3, [pc, #432]	; (80035d4 <HAL_I2C_Master_Receive+0x4d0>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	08db      	lsrs	r3, r3, #3
 8003428:	4a6b      	ldr	r2, [pc, #428]	; (80035d8 <HAL_I2C_Master_Receive+0x4d4>)
 800342a:	fba2 2303 	umull	r2, r3, r2, r3
 800342e:	0a1a      	lsrs	r2, r3, #8
 8003430:	4613      	mov	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4413      	add	r3, r2
 8003436:	00da      	lsls	r2, r3, #3
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800343c:	6a3b      	ldr	r3, [r7, #32]
 800343e:	3b01      	subs	r3, #1
 8003440:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d118      	bne.n	800347a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2220      	movs	r2, #32
 8003452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003462:	f043 0220 	orr.w	r2, r3, #32
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800346a:	b662      	cpsie	i
}
 800346c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003476:	2301      	movs	r3, #1
 8003478:	e0a6      	b.n	80035c8 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	2b04      	cmp	r3, #4
 8003486:	d1d9      	bne.n	800343c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003496:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	691a      	ldr	r2, [r3, #16]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	1c5a      	adds	r2, r3, #1
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b4:	3b01      	subs	r3, #1
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	3b01      	subs	r3, #1
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80034ca:	b662      	cpsie	i
}
 80034cc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	691a      	ldr	r2, [r3, #16]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	1c5a      	adds	r2, r3, #1
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ea:	3b01      	subs	r3, #1
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	3b01      	subs	r3, #1
 80034fa:	b29a      	uxth	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003500:	e04e      	b.n	80035a0 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003504:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f001 f970 	bl	80047ec <I2C_WaitOnRXNEFlagUntilTimeout>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e058      	b.n	80035c8 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	691a      	ldr	r2, [r3, #16]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	b2d2      	uxtb	r2, r2
 8003522:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003532:	3b01      	subs	r3, #1
 8003534:	b29a      	uxth	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353e:	b29b      	uxth	r3, r3
 8003540:	3b01      	subs	r3, #1
 8003542:	b29a      	uxth	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	f003 0304 	and.w	r3, r3, #4
 8003552:	2b04      	cmp	r3, #4
 8003554:	d124      	bne.n	80035a0 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355a:	2b03      	cmp	r3, #3
 800355c:	d107      	bne.n	800356e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800356c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	691a      	ldr	r2, [r3, #16]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800358a:	3b01      	subs	r3, #1
 800358c:	b29a      	uxth	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003596:	b29b      	uxth	r3, r3
 8003598:	3b01      	subs	r3, #1
 800359a:	b29a      	uxth	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f47f ae88 	bne.w	80032ba <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2220      	movs	r2, #32
 80035ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80035c2:	2300      	movs	r3, #0
 80035c4:	e000      	b.n	80035c8 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 80035c6:	2302      	movs	r3, #2
  }
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3728      	adds	r7, #40	; 0x28
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	00010004 	.word	0x00010004
 80035d4:	20000004 	.word	0x20000004
 80035d8:	14f8b589 	.word	0x14f8b589

080035dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b088      	sub	sp, #32
 80035e0:	af02      	add	r7, sp, #8
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	4608      	mov	r0, r1
 80035e6:	4611      	mov	r1, r2
 80035e8:	461a      	mov	r2, r3
 80035ea:	4603      	mov	r3, r0
 80035ec:	817b      	strh	r3, [r7, #10]
 80035ee:	460b      	mov	r3, r1
 80035f0:	813b      	strh	r3, [r7, #8]
 80035f2:	4613      	mov	r3, r2
 80035f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035f6:	f7fd fffb 	bl	80015f0 <HAL_GetTick>
 80035fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b20      	cmp	r3, #32
 8003606:	f040 80d9 	bne.w	80037bc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	2319      	movs	r3, #25
 8003610:	2201      	movs	r2, #1
 8003612:	496d      	ldr	r1, [pc, #436]	; (80037c8 <HAL_I2C_Mem_Write+0x1ec>)
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 ff3f 	bl	8004498 <I2C_WaitOnFlagUntilTimeout>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003620:	2302      	movs	r3, #2
 8003622:	e0cc      	b.n	80037be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800362a:	2b01      	cmp	r3, #1
 800362c:	d101      	bne.n	8003632 <HAL_I2C_Mem_Write+0x56>
 800362e:	2302      	movs	r3, #2
 8003630:	e0c5      	b.n	80037be <HAL_I2C_Mem_Write+0x1e2>
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2201      	movs	r2, #1
 8003636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0301 	and.w	r3, r3, #1
 8003644:	2b01      	cmp	r3, #1
 8003646:	d007      	beq.n	8003658 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 0201 	orr.w	r2, r2, #1
 8003656:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003666:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2221      	movs	r2, #33	; 0x21
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2240      	movs	r2, #64	; 0x40
 8003674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6a3a      	ldr	r2, [r7, #32]
 8003682:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003688:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368e:	b29a      	uxth	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4a4d      	ldr	r2, [pc, #308]	; (80037cc <HAL_I2C_Mem_Write+0x1f0>)
 8003698:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800369a:	88f8      	ldrh	r0, [r7, #6]
 800369c:	893a      	ldrh	r2, [r7, #8]
 800369e:	8979      	ldrh	r1, [r7, #10]
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	9301      	str	r3, [sp, #4]
 80036a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	4603      	mov	r3, r0
 80036aa:	68f8      	ldr	r0, [r7, #12]
 80036ac:	f000 fd76 	bl	800419c <I2C_RequestMemoryWrite>
 80036b0:	4603      	mov	r3, r0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d052      	beq.n	800375c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e081      	b.n	80037be <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f001 f804 	bl	80046cc <I2C_WaitOnTXEFlagUntilTimeout>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00d      	beq.n	80036e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	d107      	bne.n	80036e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e06b      	b.n	80037be <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ea:	781a      	ldrb	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003700:	3b01      	subs	r3, #1
 8003702:	b29a      	uxth	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370c:	b29b      	uxth	r3, r3
 800370e:	3b01      	subs	r3, #1
 8003710:	b29a      	uxth	r2, r3
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	695b      	ldr	r3, [r3, #20]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b04      	cmp	r3, #4
 8003722:	d11b      	bne.n	800375c <HAL_I2C_Mem_Write+0x180>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003728:	2b00      	cmp	r3, #0
 800372a:	d017      	beq.n	800375c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003730:	781a      	ldrb	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800373c:	1c5a      	adds	r2, r3, #1
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003746:	3b01      	subs	r3, #1
 8003748:	b29a      	uxth	r2, r3
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003752:	b29b      	uxth	r3, r3
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003760:	2b00      	cmp	r3, #0
 8003762:	d1aa      	bne.n	80036ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 fff7 	bl	800475c <I2C_WaitOnBTFFlagUntilTimeout>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00d      	beq.n	8003790 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	2b04      	cmp	r3, #4
 800377a:	d107      	bne.n	800378c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800378a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e016      	b.n	80037be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800379e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80037b8:	2300      	movs	r3, #0
 80037ba:	e000      	b.n	80037be <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80037bc:	2302      	movs	r3, #2
  }
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3718      	adds	r7, #24
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	00100002 	.word	0x00100002
 80037cc:	ffff0000 	.word	0xffff0000

080037d0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b08c      	sub	sp, #48	; 0x30
 80037d4:	af02      	add	r7, sp, #8
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	4608      	mov	r0, r1
 80037da:	4611      	mov	r1, r2
 80037dc:	461a      	mov	r2, r3
 80037de:	4603      	mov	r3, r0
 80037e0:	817b      	strh	r3, [r7, #10]
 80037e2:	460b      	mov	r3, r1
 80037e4:	813b      	strh	r3, [r7, #8]
 80037e6:	4613      	mov	r3, r2
 80037e8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037ee:	f7fd feff 	bl	80015f0 <HAL_GetTick>
 80037f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b20      	cmp	r3, #32
 80037fe:	f040 8244 	bne.w	8003c8a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003804:	9300      	str	r3, [sp, #0]
 8003806:	2319      	movs	r3, #25
 8003808:	2201      	movs	r2, #1
 800380a:	4982      	ldr	r1, [pc, #520]	; (8003a14 <HAL_I2C_Mem_Read+0x244>)
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 fe43 	bl	8004498 <I2C_WaitOnFlagUntilTimeout>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003818:	2302      	movs	r3, #2
 800381a:	e237      	b.n	8003c8c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003822:	2b01      	cmp	r3, #1
 8003824:	d101      	bne.n	800382a <HAL_I2C_Mem_Read+0x5a>
 8003826:	2302      	movs	r3, #2
 8003828:	e230      	b.n	8003c8c <HAL_I2C_Mem_Read+0x4bc>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b01      	cmp	r3, #1
 800383e:	d007      	beq.n	8003850 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f042 0201 	orr.w	r2, r2, #1
 800384e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800385e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2222      	movs	r2, #34	; 0x22
 8003864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2240      	movs	r2, #64	; 0x40
 800386c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2200      	movs	r2, #0
 8003874:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800387a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003880:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003886:	b29a      	uxth	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4a62      	ldr	r2, [pc, #392]	; (8003a18 <HAL_I2C_Mem_Read+0x248>)
 8003890:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003892:	88f8      	ldrh	r0, [r7, #6]
 8003894:	893a      	ldrh	r2, [r7, #8]
 8003896:	8979      	ldrh	r1, [r7, #10]
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	9301      	str	r3, [sp, #4]
 800389c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	4603      	mov	r3, r0
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 fd10 	bl	80042c8 <I2C_RequestMemoryRead>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e1ec      	b.n	8003c8c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d113      	bne.n	80038e2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038ba:	2300      	movs	r3, #0
 80038bc:	61fb      	str	r3, [r7, #28]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	695b      	ldr	r3, [r3, #20]
 80038c4:	61fb      	str	r3, [r7, #28]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	699b      	ldr	r3, [r3, #24]
 80038cc:	61fb      	str	r3, [r7, #28]
 80038ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	681a      	ldr	r2, [r3, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038de:	601a      	str	r2, [r3, #0]
 80038e0:	e1c0      	b.n	8003c64 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d11e      	bne.n	8003928 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80038fa:	b672      	cpsid	i
}
 80038fc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038fe:	2300      	movs	r3, #0
 8003900:	61bb      	str	r3, [r7, #24]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	695b      	ldr	r3, [r3, #20]
 8003908:	61bb      	str	r3, [r7, #24]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	61bb      	str	r3, [r7, #24]
 8003912:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003922:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003924:	b662      	cpsie	i
}
 8003926:	e035      	b.n	8003994 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392c:	2b02      	cmp	r3, #2
 800392e:	d11e      	bne.n	800396e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800393e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003940:	b672      	cpsid	i
}
 8003942:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003944:	2300      	movs	r3, #0
 8003946:	617b      	str	r3, [r7, #20]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003968:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800396a:	b662      	cpsie	i
}
 800396c:	e012      	b.n	8003994 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800397c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800397e:	2300      	movs	r3, #0
 8003980:	613b      	str	r3, [r7, #16]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	613b      	str	r3, [r7, #16]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	613b      	str	r3, [r7, #16]
 8003992:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003994:	e166      	b.n	8003c64 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800399a:	2b03      	cmp	r3, #3
 800399c:	f200 811f 	bhi.w	8003bde <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d123      	bne.n	80039f0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 ff1d 	bl	80047ec <I2C_WaitOnRXNEFlagUntilTimeout>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e167      	b.n	8003c8c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	691a      	ldr	r2, [r3, #16]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ce:	1c5a      	adds	r2, r3, #1
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d8:	3b01      	subs	r3, #1
 80039da:	b29a      	uxth	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	3b01      	subs	r3, #1
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039ee:	e139      	b.n	8003c64 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d152      	bne.n	8003a9e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fe:	2200      	movs	r2, #0
 8003a00:	4906      	ldr	r1, [pc, #24]	; (8003a1c <HAL_I2C_Mem_Read+0x24c>)
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f000 fd48 	bl	8004498 <I2C_WaitOnFlagUntilTimeout>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d008      	beq.n	8003a20 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e13c      	b.n	8003c8c <HAL_I2C_Mem_Read+0x4bc>
 8003a12:	bf00      	nop
 8003a14:	00100002 	.word	0x00100002
 8003a18:	ffff0000 	.word	0xffff0000
 8003a1c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003a20:	b672      	cpsid	i
}
 8003a22:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	691a      	ldr	r2, [r3, #16]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	b2d2      	uxtb	r2, r2
 8003a40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a50:	3b01      	subs	r3, #1
 8003a52:	b29a      	uxth	r2, r3
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003a66:	b662      	cpsie	i
}
 8003a68:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	691a      	ldr	r2, [r3, #16]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a74:	b2d2      	uxtb	r2, r2
 8003a76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a9c:	e0e2      	b.n	8003c64 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	9300      	str	r3, [sp, #0]
 8003aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	497b      	ldr	r1, [pc, #492]	; (8003c94 <HAL_I2C_Mem_Read+0x4c4>)
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 fcf5 	bl	8004498 <I2C_WaitOnFlagUntilTimeout>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e0e9      	b.n	8003c8c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ac6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ac8:	b672      	cpsid	i
}
 8003aca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	691a      	ldr	r2, [r3, #16]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	1c5a      	adds	r2, r3, #1
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	3b01      	subs	r3, #1
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003afe:	4b66      	ldr	r3, [pc, #408]	; (8003c98 <HAL_I2C_Mem_Read+0x4c8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	08db      	lsrs	r3, r3, #3
 8003b04:	4a65      	ldr	r2, [pc, #404]	; (8003c9c <HAL_I2C_Mem_Read+0x4cc>)
 8003b06:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0a:	0a1a      	lsrs	r2, r3, #8
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4413      	add	r3, r2
 8003b12:	00da      	lsls	r2, r3, #3
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003b18:	6a3b      	ldr	r3, [r7, #32]
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d118      	bne.n	8003b56 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2200      	movs	r2, #0
 8003b28:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f043 0220 	orr.w	r2, r3, #32
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003b46:	b662      	cpsie	i
}
 8003b48:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e09a      	b.n	8003c8c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	d1d9      	bne.n	8003b18 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	691a      	ldr	r2, [r3, #16]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7e:	b2d2      	uxtb	r2, r2
 8003b80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	1c5a      	adds	r2, r3, #1
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b90:	3b01      	subs	r3, #1
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003ba6:	b662      	cpsie	i
}
 8003ba8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	691a      	ldr	r2, [r3, #16]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	b2d2      	uxtb	r2, r2
 8003bb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	1c5a      	adds	r2, r3, #1
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	3b01      	subs	r3, #1
 8003bd6:	b29a      	uxth	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bdc:	e042      	b.n	8003c64 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f000 fe02 	bl	80047ec <I2C_WaitOnRXNEFlagUntilTimeout>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d001      	beq.n	8003bf2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e04c      	b.n	8003c8c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	691a      	ldr	r2, [r3, #16]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	b2d2      	uxtb	r2, r2
 8003bfe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	1c5a      	adds	r2, r3, #1
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	f003 0304 	and.w	r3, r3, #4
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	d118      	bne.n	8003c64 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	691a      	ldr	r2, [r3, #16]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	b2d2      	uxtb	r2, r2
 8003c3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	1c5a      	adds	r2, r3, #1
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	f47f ae94 	bne.w	8003996 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c86:	2300      	movs	r3, #0
 8003c88:	e000      	b.n	8003c8c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003c8a:	2302      	movs	r3, #2
  }
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3728      	adds	r7, #40	; 0x28
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	00010004 	.word	0x00010004
 8003c98:	20000004 	.word	0x20000004
 8003c9c:	14f8b589 	.word	0x14f8b589

08003ca0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b08a      	sub	sp, #40	; 0x28
 8003ca4:	af02      	add	r7, sp, #8
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	607a      	str	r2, [r7, #4]
 8003caa:	603b      	str	r3, [r7, #0]
 8003cac:	460b      	mov	r3, r1
 8003cae:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003cb0:	f7fd fc9e 	bl	80015f0 <HAL_GetTick>
 8003cb4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b20      	cmp	r3, #32
 8003cc4:	f040 8111 	bne.w	8003eea <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	2319      	movs	r3, #25
 8003cce:	2201      	movs	r2, #1
 8003cd0:	4988      	ldr	r1, [pc, #544]	; (8003ef4 <HAL_I2C_IsDeviceReady+0x254>)
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 fbe0 	bl	8004498 <I2C_WaitOnFlagUntilTimeout>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d001      	beq.n	8003ce2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003cde:	2302      	movs	r3, #2
 8003ce0:	e104      	b.n	8003eec <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d101      	bne.n	8003cf0 <HAL_I2C_IsDeviceReady+0x50>
 8003cec:	2302      	movs	r3, #2
 8003cee:	e0fd      	b.n	8003eec <HAL_I2C_IsDeviceReady+0x24c>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d007      	beq.n	8003d16 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f042 0201 	orr.w	r2, r2, #1
 8003d14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2224      	movs	r2, #36	; 0x24
 8003d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4a70      	ldr	r2, [pc, #448]	; (8003ef8 <HAL_I2C_IsDeviceReady+0x258>)
 8003d38:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d48:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f000 fb9e 	bl	8004498 <I2C_WaitOnFlagUntilTimeout>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d00d      	beq.n	8003d7e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d70:	d103      	bne.n	8003d7a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d78:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e0b6      	b.n	8003eec <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d7e:	897b      	ldrh	r3, [r7, #10]
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	461a      	mov	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d8c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003d8e:	f7fd fc2f 	bl	80015f0 <HAL_GetTick>
 8003d92:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	bf0c      	ite	eq
 8003da2:	2301      	moveq	r3, #1
 8003da4:	2300      	movne	r3, #0
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003db8:	bf0c      	ite	eq
 8003dba:	2301      	moveq	r3, #1
 8003dbc:	2300      	movne	r3, #0
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003dc2:	e025      	b.n	8003e10 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003dc4:	f7fd fc14 	bl	80015f0 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	683a      	ldr	r2, [r7, #0]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d302      	bcc.n	8003dda <HAL_I2C_IsDeviceReady+0x13a>
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d103      	bne.n	8003de2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	22a0      	movs	r2, #160	; 0xa0
 8003dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	bf0c      	ite	eq
 8003df0:	2301      	moveq	r3, #1
 8003df2:	2300      	movne	r3, #0
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e06:	bf0c      	ite	eq
 8003e08:	2301      	moveq	r3, #1
 8003e0a:	2300      	movne	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2ba0      	cmp	r3, #160	; 0xa0
 8003e1a:	d005      	beq.n	8003e28 <HAL_I2C_IsDeviceReady+0x188>
 8003e1c:	7dfb      	ldrb	r3, [r7, #23]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d102      	bne.n	8003e28 <HAL_I2C_IsDeviceReady+0x188>
 8003e22:	7dbb      	ldrb	r3, [r7, #22]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d0cd      	beq.n	8003dc4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d129      	bne.n	8003e92 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e4c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e4e:	2300      	movs	r3, #0
 8003e50:	613b      	str	r3, [r7, #16]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	613b      	str	r3, [r7, #16]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	613b      	str	r3, [r7, #16]
 8003e62:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	2319      	movs	r3, #25
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	4921      	ldr	r1, [pc, #132]	; (8003ef4 <HAL_I2C_IsDeviceReady+0x254>)
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 fb12 	bl	8004498 <I2C_WaitOnFlagUntilTimeout>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e036      	b.n	8003eec <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2220      	movs	r2, #32
 8003e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	e02c      	b.n	8003eec <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ea0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003eaa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	2319      	movs	r3, #25
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	490f      	ldr	r1, [pc, #60]	; (8003ef4 <HAL_I2C_IsDeviceReady+0x254>)
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 faee 	bl	8004498 <I2C_WaitOnFlagUntilTimeout>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e012      	b.n	8003eec <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	f4ff af32 	bcc.w	8003d3a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2220      	movs	r2, #32
 8003eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e000      	b.n	8003eec <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003eea:	2302      	movs	r3, #2
  }
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3720      	adds	r7, #32
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	00100002 	.word	0x00100002
 8003ef8:	ffff0000 	.word	0xffff0000

08003efc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b088      	sub	sp, #32
 8003f00:	af02      	add	r7, sp, #8
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	607a      	str	r2, [r7, #4]
 8003f06:	603b      	str	r3, [r7, #0]
 8003f08:	460b      	mov	r3, r1
 8003f0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f10:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	d006      	beq.n	8003f26 <I2C_MasterRequestWrite+0x2a>
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d003      	beq.n	8003f26 <I2C_MasterRequestWrite+0x2a>
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f24:	d108      	bne.n	8003f38 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f34:	601a      	str	r2, [r3, #0]
 8003f36:	e00b      	b.n	8003f50 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3c:	2b12      	cmp	r3, #18
 8003f3e:	d107      	bne.n	8003f50 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	9300      	str	r3, [sp, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f000 fa9b 	bl	8004498 <I2C_WaitOnFlagUntilTimeout>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00d      	beq.n	8003f84 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f76:	d103      	bne.n	8003f80 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e035      	b.n	8003ff0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f8c:	d108      	bne.n	8003fa0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f8e:	897b      	ldrh	r3, [r7, #10]
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	461a      	mov	r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f9c:	611a      	str	r2, [r3, #16]
 8003f9e:	e01b      	b.n	8003fd8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003fa0:	897b      	ldrh	r3, [r7, #10]
 8003fa2:	11db      	asrs	r3, r3, #7
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	f003 0306 	and.w	r3, r3, #6
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	f063 030f 	orn	r3, r3, #15
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	490e      	ldr	r1, [pc, #56]	; (8003ff8 <I2C_MasterRequestWrite+0xfc>)
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 fae4 	bl	800458c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e010      	b.n	8003ff0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003fce:	897b      	ldrh	r3, [r7, #10]
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	4907      	ldr	r1, [pc, #28]	; (8003ffc <I2C_MasterRequestWrite+0x100>)
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 fad4 	bl	800458c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e000      	b.n	8003ff0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3718      	adds	r7, #24
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	00010008 	.word	0x00010008
 8003ffc:	00010002 	.word	0x00010002

08004000 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b088      	sub	sp, #32
 8004004:	af02      	add	r7, sp, #8
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	607a      	str	r2, [r7, #4]
 800400a:	603b      	str	r3, [r7, #0]
 800400c:	460b      	mov	r3, r1
 800400e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004014:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004024:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	2b08      	cmp	r3, #8
 800402a:	d006      	beq.n	800403a <I2C_MasterRequestRead+0x3a>
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d003      	beq.n	800403a <I2C_MasterRequestRead+0x3a>
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004038:	d108      	bne.n	800404c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	e00b      	b.n	8004064 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004050:	2b11      	cmp	r3, #17
 8004052:	d107      	bne.n	8004064 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004062:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 fa11 	bl	8004498 <I2C_WaitOnFlagUntilTimeout>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00d      	beq.n	8004098 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800408a:	d103      	bne.n	8004094 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004092:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e079      	b.n	800418c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040a0:	d108      	bne.n	80040b4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80040a2:	897b      	ldrh	r3, [r7, #10]
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	f043 0301 	orr.w	r3, r3, #1
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	611a      	str	r2, [r3, #16]
 80040b2:	e05f      	b.n	8004174 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80040b4:	897b      	ldrh	r3, [r7, #10]
 80040b6:	11db      	asrs	r3, r3, #7
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	f003 0306 	and.w	r3, r3, #6
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	f063 030f 	orn	r3, r3, #15
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	4930      	ldr	r1, [pc, #192]	; (8004194 <I2C_MasterRequestRead+0x194>)
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f000 fa5a 	bl	800458c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040d8:	4603      	mov	r3, r0
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d001      	beq.n	80040e2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e054      	b.n	800418c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040e2:	897b      	ldrh	r3, [r7, #10]
 80040e4:	b2da      	uxtb	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	4929      	ldr	r1, [pc, #164]	; (8004198 <I2C_MasterRequestRead+0x198>)
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f000 fa4a 	bl	800458c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e044      	b.n	800418c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004102:	2300      	movs	r3, #0
 8004104:	613b      	str	r3, [r7, #16]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	613b      	str	r3, [r7, #16]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	613b      	str	r3, [r7, #16]
 8004116:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004126:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f000 f9af 	bl	8004498 <I2C_WaitOnFlagUntilTimeout>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00d      	beq.n	800415c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800414e:	d103      	bne.n	8004158 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004156:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e017      	b.n	800418c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800415c:	897b      	ldrh	r3, [r7, #10]
 800415e:	11db      	asrs	r3, r3, #7
 8004160:	b2db      	uxtb	r3, r3
 8004162:	f003 0306 	and.w	r3, r3, #6
 8004166:	b2db      	uxtb	r3, r3
 8004168:	f063 030e 	orn	r3, r3, #14
 800416c:	b2da      	uxtb	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	4907      	ldr	r1, [pc, #28]	; (8004198 <I2C_MasterRequestRead+0x198>)
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 fa06 	bl	800458c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e000      	b.n	800418c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800418a:	2300      	movs	r3, #0
}
 800418c:	4618      	mov	r0, r3
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	00010008 	.word	0x00010008
 8004198:	00010002 	.word	0x00010002

0800419c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b088      	sub	sp, #32
 80041a0:	af02      	add	r7, sp, #8
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	4608      	mov	r0, r1
 80041a6:	4611      	mov	r1, r2
 80041a8:	461a      	mov	r2, r3
 80041aa:	4603      	mov	r3, r0
 80041ac:	817b      	strh	r3, [r7, #10]
 80041ae:	460b      	mov	r3, r1
 80041b0:	813b      	strh	r3, [r7, #8]
 80041b2:	4613      	mov	r3, r2
 80041b4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041c4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041d2:	68f8      	ldr	r0, [r7, #12]
 80041d4:	f000 f960 	bl	8004498 <I2C_WaitOnFlagUntilTimeout>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00d      	beq.n	80041fa <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ec:	d103      	bne.n	80041f6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041f4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e05f      	b.n	80042ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041fa:	897b      	ldrh	r3, [r7, #10]
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	461a      	mov	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004208:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	6a3a      	ldr	r2, [r7, #32]
 800420e:	492d      	ldr	r1, [pc, #180]	; (80042c4 <I2C_RequestMemoryWrite+0x128>)
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f000 f9bb 	bl	800458c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e04c      	b.n	80042ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004220:	2300      	movs	r3, #0
 8004222:	617b      	str	r3, [r7, #20]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	617b      	str	r3, [r7, #20]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	617b      	str	r3, [r7, #20]
 8004234:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004238:	6a39      	ldr	r1, [r7, #32]
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f000 fa46 	bl	80046cc <I2C_WaitOnTXEFlagUntilTimeout>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00d      	beq.n	8004262 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	2b04      	cmp	r3, #4
 800424c:	d107      	bne.n	800425e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800425c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e02b      	b.n	80042ba <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004262:	88fb      	ldrh	r3, [r7, #6]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d105      	bne.n	8004274 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004268:	893b      	ldrh	r3, [r7, #8]
 800426a:	b2da      	uxtb	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	611a      	str	r2, [r3, #16]
 8004272:	e021      	b.n	80042b8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004274:	893b      	ldrh	r3, [r7, #8]
 8004276:	0a1b      	lsrs	r3, r3, #8
 8004278:	b29b      	uxth	r3, r3
 800427a:	b2da      	uxtb	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004282:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004284:	6a39      	ldr	r1, [r7, #32]
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f000 fa20 	bl	80046cc <I2C_WaitOnTXEFlagUntilTimeout>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00d      	beq.n	80042ae <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004296:	2b04      	cmp	r3, #4
 8004298:	d107      	bne.n	80042aa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042a8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e005      	b.n	80042ba <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042ae:	893b      	ldrh	r3, [r7, #8]
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3718      	adds	r7, #24
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	00010002 	.word	0x00010002

080042c8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b088      	sub	sp, #32
 80042cc:	af02      	add	r7, sp, #8
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	4608      	mov	r0, r1
 80042d2:	4611      	mov	r1, r2
 80042d4:	461a      	mov	r2, r3
 80042d6:	4603      	mov	r3, r0
 80042d8:	817b      	strh	r3, [r7, #10]
 80042da:	460b      	mov	r3, r1
 80042dc:	813b      	strh	r3, [r7, #8]
 80042de:	4613      	mov	r3, r2
 80042e0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042f0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004300:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	6a3b      	ldr	r3, [r7, #32]
 8004308:	2200      	movs	r2, #0
 800430a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800430e:	68f8      	ldr	r0, [r7, #12]
 8004310:	f000 f8c2 	bl	8004498 <I2C_WaitOnFlagUntilTimeout>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00d      	beq.n	8004336 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004328:	d103      	bne.n	8004332 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004330:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e0aa      	b.n	800448c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004336:	897b      	ldrh	r3, [r7, #10]
 8004338:	b2db      	uxtb	r3, r3
 800433a:	461a      	mov	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004344:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004348:	6a3a      	ldr	r2, [r7, #32]
 800434a:	4952      	ldr	r1, [pc, #328]	; (8004494 <I2C_RequestMemoryRead+0x1cc>)
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f000 f91d 	bl	800458c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d001      	beq.n	800435c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e097      	b.n	800448c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800435c:	2300      	movs	r3, #0
 800435e:	617b      	str	r3, [r7, #20]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	695b      	ldr	r3, [r3, #20]
 8004366:	617b      	str	r3, [r7, #20]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	617b      	str	r3, [r7, #20]
 8004370:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004374:	6a39      	ldr	r1, [r7, #32]
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f000 f9a8 	bl	80046cc <I2C_WaitOnTXEFlagUntilTimeout>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00d      	beq.n	800439e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	2b04      	cmp	r3, #4
 8004388:	d107      	bne.n	800439a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004398:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e076      	b.n	800448c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800439e:	88fb      	ldrh	r3, [r7, #6]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d105      	bne.n	80043b0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043a4:	893b      	ldrh	r3, [r7, #8]
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	611a      	str	r2, [r3, #16]
 80043ae:	e021      	b.n	80043f4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80043b0:	893b      	ldrh	r3, [r7, #8]
 80043b2:	0a1b      	lsrs	r3, r3, #8
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	b2da      	uxtb	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c0:	6a39      	ldr	r1, [r7, #32]
 80043c2:	68f8      	ldr	r0, [r7, #12]
 80043c4:	f000 f982 	bl	80046cc <I2C_WaitOnTXEFlagUntilTimeout>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00d      	beq.n	80043ea <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d2:	2b04      	cmp	r3, #4
 80043d4:	d107      	bne.n	80043e6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e050      	b.n	800448c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043ea:	893b      	ldrh	r3, [r7, #8]
 80043ec:	b2da      	uxtb	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043f6:	6a39      	ldr	r1, [r7, #32]
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f000 f967 	bl	80046cc <I2C_WaitOnTXEFlagUntilTimeout>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00d      	beq.n	8004420 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	2b04      	cmp	r3, #4
 800440a:	d107      	bne.n	800441c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800441a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e035      	b.n	800448c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800442e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004432:	9300      	str	r3, [sp, #0]
 8004434:	6a3b      	ldr	r3, [r7, #32]
 8004436:	2200      	movs	r2, #0
 8004438:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 f82b 	bl	8004498 <I2C_WaitOnFlagUntilTimeout>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d00d      	beq.n	8004464 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004456:	d103      	bne.n	8004460 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800445e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e013      	b.n	800448c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004464:	897b      	ldrh	r3, [r7, #10]
 8004466:	b2db      	uxtb	r3, r3
 8004468:	f043 0301 	orr.w	r3, r3, #1
 800446c:	b2da      	uxtb	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	6a3a      	ldr	r2, [r7, #32]
 8004478:	4906      	ldr	r1, [pc, #24]	; (8004494 <I2C_RequestMemoryRead+0x1cc>)
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 f886 	bl	800458c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e000      	b.n	800448c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3718      	adds	r7, #24
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}
 8004494:	00010002 	.word	0x00010002

08004498 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b084      	sub	sp, #16
 800449c:	af00      	add	r7, sp, #0
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	603b      	str	r3, [r7, #0]
 80044a4:	4613      	mov	r3, r2
 80044a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044a8:	e048      	b.n	800453c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b0:	d044      	beq.n	800453c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044b2:	f7fd f89d 	bl	80015f0 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d302      	bcc.n	80044c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d139      	bne.n	800453c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	0c1b      	lsrs	r3, r3, #16
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d10d      	bne.n	80044ee <I2C_WaitOnFlagUntilTimeout+0x56>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	43da      	mvns	r2, r3
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	4013      	ands	r3, r2
 80044de:	b29b      	uxth	r3, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	bf0c      	ite	eq
 80044e4:	2301      	moveq	r3, #1
 80044e6:	2300      	movne	r3, #0
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	461a      	mov	r2, r3
 80044ec:	e00c      	b.n	8004508 <I2C_WaitOnFlagUntilTimeout+0x70>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	43da      	mvns	r2, r3
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	4013      	ands	r3, r2
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	bf0c      	ite	eq
 8004500:	2301      	moveq	r3, #1
 8004502:	2300      	movne	r3, #0
 8004504:	b2db      	uxtb	r3, r3
 8004506:	461a      	mov	r2, r3
 8004508:	79fb      	ldrb	r3, [r7, #7]
 800450a:	429a      	cmp	r2, r3
 800450c:	d116      	bne.n	800453c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2220      	movs	r2, #32
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004528:	f043 0220 	orr.w	r2, r3, #32
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e023      	b.n	8004584 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	0c1b      	lsrs	r3, r3, #16
 8004540:	b2db      	uxtb	r3, r3
 8004542:	2b01      	cmp	r3, #1
 8004544:	d10d      	bne.n	8004562 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	43da      	mvns	r2, r3
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	4013      	ands	r3, r2
 8004552:	b29b      	uxth	r3, r3
 8004554:	2b00      	cmp	r3, #0
 8004556:	bf0c      	ite	eq
 8004558:	2301      	moveq	r3, #1
 800455a:	2300      	movne	r3, #0
 800455c:	b2db      	uxtb	r3, r3
 800455e:	461a      	mov	r2, r3
 8004560:	e00c      	b.n	800457c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	43da      	mvns	r2, r3
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	4013      	ands	r3, r2
 800456e:	b29b      	uxth	r3, r3
 8004570:	2b00      	cmp	r3, #0
 8004572:	bf0c      	ite	eq
 8004574:	2301      	moveq	r3, #1
 8004576:	2300      	movne	r3, #0
 8004578:	b2db      	uxtb	r3, r3
 800457a:	461a      	mov	r2, r3
 800457c:	79fb      	ldrb	r3, [r7, #7]
 800457e:	429a      	cmp	r2, r3
 8004580:	d093      	beq.n	80044aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
 8004598:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800459a:	e071      	b.n	8004680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045aa:	d123      	bne.n	80045f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045ba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2220      	movs	r2, #32
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e0:	f043 0204 	orr.w	r2, r3, #4
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e067      	b.n	80046c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fa:	d041      	beq.n	8004680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045fc:	f7fc fff8 	bl	80015f0 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	429a      	cmp	r2, r3
 800460a:	d302      	bcc.n	8004612 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d136      	bne.n	8004680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	0c1b      	lsrs	r3, r3, #16
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b01      	cmp	r3, #1
 800461a:	d10c      	bne.n	8004636 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	43da      	mvns	r2, r3
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	4013      	ands	r3, r2
 8004628:	b29b      	uxth	r3, r3
 800462a:	2b00      	cmp	r3, #0
 800462c:	bf14      	ite	ne
 800462e:	2301      	movne	r3, #1
 8004630:	2300      	moveq	r3, #0
 8004632:	b2db      	uxtb	r3, r3
 8004634:	e00b      	b.n	800464e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	699b      	ldr	r3, [r3, #24]
 800463c:	43da      	mvns	r2, r3
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	4013      	ands	r3, r2
 8004642:	b29b      	uxth	r3, r3
 8004644:	2b00      	cmp	r3, #0
 8004646:	bf14      	ite	ne
 8004648:	2301      	movne	r3, #1
 800464a:	2300      	moveq	r3, #0
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d016      	beq.n	8004680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2220      	movs	r2, #32
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466c:	f043 0220 	orr.w	r2, r3, #32
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	e021      	b.n	80046c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	0c1b      	lsrs	r3, r3, #16
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b01      	cmp	r3, #1
 8004688:	d10c      	bne.n	80046a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	43da      	mvns	r2, r3
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	4013      	ands	r3, r2
 8004696:	b29b      	uxth	r3, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	bf14      	ite	ne
 800469c:	2301      	movne	r3, #1
 800469e:	2300      	moveq	r3, #0
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	e00b      	b.n	80046bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	43da      	mvns	r2, r3
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	4013      	ands	r3, r2
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	bf14      	ite	ne
 80046b6:	2301      	movne	r3, #1
 80046b8:	2300      	moveq	r3, #0
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f47f af6d 	bne.w	800459c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046d8:	e034      	b.n	8004744 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f000 f8e3 	bl	80048a6 <I2C_IsAcknowledgeFailed>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e034      	b.n	8004754 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f0:	d028      	beq.n	8004744 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046f2:	f7fc ff7d 	bl	80015f0 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	68ba      	ldr	r2, [r7, #8]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d302      	bcc.n	8004708 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d11d      	bne.n	8004744 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004712:	2b80      	cmp	r3, #128	; 0x80
 8004714:	d016      	beq.n	8004744 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2220      	movs	r2, #32
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004730:	f043 0220 	orr.w	r2, r3, #32
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e007      	b.n	8004754 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800474e:	2b80      	cmp	r3, #128	; 0x80
 8004750:	d1c3      	bne.n	80046da <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004752:	2300      	movs	r3, #0
}
 8004754:	4618      	mov	r0, r3
 8004756:	3710      	adds	r7, #16
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}

0800475c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004768:	e034      	b.n	80047d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f000 f89b 	bl	80048a6 <I2C_IsAcknowledgeFailed>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e034      	b.n	80047e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004780:	d028      	beq.n	80047d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004782:	f7fc ff35 	bl	80015f0 <HAL_GetTick>
 8004786:	4602      	mov	r2, r0
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	1ad3      	subs	r3, r2, r3
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	429a      	cmp	r2, r3
 8004790:	d302      	bcc.n	8004798 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d11d      	bne.n	80047d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	f003 0304 	and.w	r3, r3, #4
 80047a2:	2b04      	cmp	r3, #4
 80047a4:	d016      	beq.n	80047d4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2220      	movs	r2, #32
 80047b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c0:	f043 0220 	orr.w	r2, r3, #32
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e007      	b.n	80047e4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	f003 0304 	and.w	r3, r3, #4
 80047de:	2b04      	cmp	r3, #4
 80047e0:	d1c3      	bne.n	800476a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047f8:	e049      	b.n	800488e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	695b      	ldr	r3, [r3, #20]
 8004800:	f003 0310 	and.w	r3, r3, #16
 8004804:	2b10      	cmp	r3, #16
 8004806:	d119      	bne.n	800483c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f06f 0210 	mvn.w	r2, #16
 8004810:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2220      	movs	r2, #32
 800481c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e030      	b.n	800489e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800483c:	f7fc fed8 	bl	80015f0 <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	68ba      	ldr	r2, [r7, #8]
 8004848:	429a      	cmp	r2, r3
 800484a:	d302      	bcc.n	8004852 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d11d      	bne.n	800488e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485c:	2b40      	cmp	r3, #64	; 0x40
 800485e:	d016      	beq.n	800488e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2220      	movs	r2, #32
 800486a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	f043 0220 	orr.w	r2, r3, #32
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e007      	b.n	800489e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004898:	2b40      	cmp	r3, #64	; 0x40
 800489a:	d1ae      	bne.n	80047fa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}

080048a6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	695b      	ldr	r3, [r3, #20]
 80048b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048bc:	d11b      	bne.n	80048f6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048c6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2220      	movs	r2, #32
 80048d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	f043 0204 	orr.w	r2, r3, #4
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e000      	b.n	80048f8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bc80      	pop	{r7}
 8004900:	4770      	bx	lr
	...

08004904 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e272      	b.n	8004dfc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0301 	and.w	r3, r3, #1
 800491e:	2b00      	cmp	r3, #0
 8004920:	f000 8087 	beq.w	8004a32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004924:	4b92      	ldr	r3, [pc, #584]	; (8004b70 <HAL_RCC_OscConfig+0x26c>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f003 030c 	and.w	r3, r3, #12
 800492c:	2b04      	cmp	r3, #4
 800492e:	d00c      	beq.n	800494a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004930:	4b8f      	ldr	r3, [pc, #572]	; (8004b70 <HAL_RCC_OscConfig+0x26c>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f003 030c 	and.w	r3, r3, #12
 8004938:	2b08      	cmp	r3, #8
 800493a:	d112      	bne.n	8004962 <HAL_RCC_OscConfig+0x5e>
 800493c:	4b8c      	ldr	r3, [pc, #560]	; (8004b70 <HAL_RCC_OscConfig+0x26c>)
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004948:	d10b      	bne.n	8004962 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800494a:	4b89      	ldr	r3, [pc, #548]	; (8004b70 <HAL_RCC_OscConfig+0x26c>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d06c      	beq.n	8004a30 <HAL_RCC_OscConfig+0x12c>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d168      	bne.n	8004a30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e24c      	b.n	8004dfc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800496a:	d106      	bne.n	800497a <HAL_RCC_OscConfig+0x76>
 800496c:	4b80      	ldr	r3, [pc, #512]	; (8004b70 <HAL_RCC_OscConfig+0x26c>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a7f      	ldr	r2, [pc, #508]	; (8004b70 <HAL_RCC_OscConfig+0x26c>)
 8004972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004976:	6013      	str	r3, [r2, #0]
 8004978:	e02e      	b.n	80049d8 <HAL_RCC_OscConfig+0xd4>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10c      	bne.n	800499c <HAL_RCC_OscConfig+0x98>
 8004982:	4b7b      	ldr	r3, [pc, #492]	; (8004b70 <HAL_RCC_OscConfig+0x26c>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a7a      	ldr	r2, [pc, #488]	; (8004b70 <HAL_RCC_OscConfig+0x26c>)
 8004988:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800498c:	6013      	str	r3, [r2, #0]
 800498e:	4b78      	ldr	r3, [pc, #480]	; (8004b70 <HAL_RCC_OscConfig+0x26c>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a77      	ldr	r2, [pc, #476]	; (8004b70 <HAL_RCC_OscConfig+0x26c>)
 8004994:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004998:	6013      	str	r3, [r2, #0]
 800499a:	e01d      	b.n	80049d8 <HAL_RCC_OscConfig+0xd4>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049a4:	d10c      	bne.n	80049c0 <HAL_RCC_OscConfig+0xbc>
 80049a6:	4b72      	ldr	r3, [pc, #456]	; (8004b70 <HAL_RCC_OscConfig+0x26c>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a71      	ldr	r2, [pc, #452]	; (8004b70 <HAL_RCC_OscConfig+0x26c>)
 80049ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049b0:	6013      	str	r3, [r2, #0]
 80049b2:	4b6f      	ldr	r3, [pc, #444]	; (8004b70 <HAL_RCC_OscConfig+0x26c>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a6e      	ldr	r2, [pc, #440]	; (8004b70 <HAL_RCC_OscConfig+0x26c>)
 80049b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049bc:	6013      	str	r3, [r2, #0]
 80049be:	e00b      	b.n	80049d8 <HAL_RCC_OscConfig+0xd4>
 80049c0:	4b6b      	ldr	r3, [pc, #428]	; (8004b70 <HAL_RCC_OscConfig+0x26c>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a6a      	ldr	r2, [pc, #424]	; (8004b70 <HAL_RCC_OscConfig+0x26c>)
 80049c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ca:	6013      	str	r3, [r2, #0]
 80049cc:	4b68      	ldr	r3, [pc, #416]	; (8004b70 <HAL_RCC_OscConfig+0x26c>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a67      	ldr	r2, [pc, #412]	; (8004b70 <HAL_RCC_OscConfig+0x26c>)
 80049d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049d6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d013      	beq.n	8004a08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e0:	f7fc fe06 	bl	80015f0 <HAL_GetTick>
 80049e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049e6:	e008      	b.n	80049fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049e8:	f7fc fe02 	bl	80015f0 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b64      	cmp	r3, #100	; 0x64
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e200      	b.n	8004dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049fa:	4b5d      	ldr	r3, [pc, #372]	; (8004b70 <HAL_RCC_OscConfig+0x26c>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d0f0      	beq.n	80049e8 <HAL_RCC_OscConfig+0xe4>
 8004a06:	e014      	b.n	8004a32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a08:	f7fc fdf2 	bl	80015f0 <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a0e:	e008      	b.n	8004a22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a10:	f7fc fdee 	bl	80015f0 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	2b64      	cmp	r3, #100	; 0x64
 8004a1c:	d901      	bls.n	8004a22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004a1e:	2303      	movs	r3, #3
 8004a20:	e1ec      	b.n	8004dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a22:	4b53      	ldr	r3, [pc, #332]	; (8004b70 <HAL_RCC_OscConfig+0x26c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1f0      	bne.n	8004a10 <HAL_RCC_OscConfig+0x10c>
 8004a2e:	e000      	b.n	8004a32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0302 	and.w	r3, r3, #2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d063      	beq.n	8004b06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a3e:	4b4c      	ldr	r3, [pc, #304]	; (8004b70 <HAL_RCC_OscConfig+0x26c>)
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f003 030c 	and.w	r3, r3, #12
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00b      	beq.n	8004a62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004a4a:	4b49      	ldr	r3, [pc, #292]	; (8004b70 <HAL_RCC_OscConfig+0x26c>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f003 030c 	and.w	r3, r3, #12
 8004a52:	2b08      	cmp	r3, #8
 8004a54:	d11c      	bne.n	8004a90 <HAL_RCC_OscConfig+0x18c>
 8004a56:	4b46      	ldr	r3, [pc, #280]	; (8004b70 <HAL_RCC_OscConfig+0x26c>)
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d116      	bne.n	8004a90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a62:	4b43      	ldr	r3, [pc, #268]	; (8004b70 <HAL_RCC_OscConfig+0x26c>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0302 	and.w	r3, r3, #2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d005      	beq.n	8004a7a <HAL_RCC_OscConfig+0x176>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d001      	beq.n	8004a7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e1c0      	b.n	8004dfc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a7a:	4b3d      	ldr	r3, [pc, #244]	; (8004b70 <HAL_RCC_OscConfig+0x26c>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	4939      	ldr	r1, [pc, #228]	; (8004b70 <HAL_RCC_OscConfig+0x26c>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a8e:	e03a      	b.n	8004b06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	691b      	ldr	r3, [r3, #16]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d020      	beq.n	8004ada <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a98:	4b36      	ldr	r3, [pc, #216]	; (8004b74 <HAL_RCC_OscConfig+0x270>)
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a9e:	f7fc fda7 	bl	80015f0 <HAL_GetTick>
 8004aa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aa4:	e008      	b.n	8004ab8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aa6:	f7fc fda3 	bl	80015f0 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d901      	bls.n	8004ab8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e1a1      	b.n	8004dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ab8:	4b2d      	ldr	r3, [pc, #180]	; (8004b70 <HAL_RCC_OscConfig+0x26c>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d0f0      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ac4:	4b2a      	ldr	r3, [pc, #168]	; (8004b70 <HAL_RCC_OscConfig+0x26c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	00db      	lsls	r3, r3, #3
 8004ad2:	4927      	ldr	r1, [pc, #156]	; (8004b70 <HAL_RCC_OscConfig+0x26c>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	600b      	str	r3, [r1, #0]
 8004ad8:	e015      	b.n	8004b06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ada:	4b26      	ldr	r3, [pc, #152]	; (8004b74 <HAL_RCC_OscConfig+0x270>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae0:	f7fc fd86 	bl	80015f0 <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ae8:	f7fc fd82 	bl	80015f0 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e180      	b.n	8004dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004afa:	4b1d      	ldr	r3, [pc, #116]	; (8004b70 <HAL_RCC_OscConfig+0x26c>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1f0      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0308 	and.w	r3, r3, #8
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d03a      	beq.n	8004b88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d019      	beq.n	8004b4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b1a:	4b17      	ldr	r3, [pc, #92]	; (8004b78 <HAL_RCC_OscConfig+0x274>)
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b20:	f7fc fd66 	bl	80015f0 <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b26:	e008      	b.n	8004b3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b28:	f7fc fd62 	bl	80015f0 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e160      	b.n	8004dfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b3a:	4b0d      	ldr	r3, [pc, #52]	; (8004b70 <HAL_RCC_OscConfig+0x26c>)
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d0f0      	beq.n	8004b28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004b46:	2001      	movs	r0, #1
 8004b48:	f000 face 	bl	80050e8 <RCC_Delay>
 8004b4c:	e01c      	b.n	8004b88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b4e:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <HAL_RCC_OscConfig+0x274>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b54:	f7fc fd4c 	bl	80015f0 <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b5a:	e00f      	b.n	8004b7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b5c:	f7fc fd48 	bl	80015f0 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d908      	bls.n	8004b7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e146      	b.n	8004dfc <HAL_RCC_OscConfig+0x4f8>
 8004b6e:	bf00      	nop
 8004b70:	40021000 	.word	0x40021000
 8004b74:	42420000 	.word	0x42420000
 8004b78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b7c:	4b92      	ldr	r3, [pc, #584]	; (8004dc8 <HAL_RCC_OscConfig+0x4c4>)
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1e9      	bne.n	8004b5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0304 	and.w	r3, r3, #4
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 80a6 	beq.w	8004ce2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b96:	2300      	movs	r3, #0
 8004b98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b9a:	4b8b      	ldr	r3, [pc, #556]	; (8004dc8 <HAL_RCC_OscConfig+0x4c4>)
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10d      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ba6:	4b88      	ldr	r3, [pc, #544]	; (8004dc8 <HAL_RCC_OscConfig+0x4c4>)
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	4a87      	ldr	r2, [pc, #540]	; (8004dc8 <HAL_RCC_OscConfig+0x4c4>)
 8004bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bb0:	61d3      	str	r3, [r2, #28]
 8004bb2:	4b85      	ldr	r3, [pc, #532]	; (8004dc8 <HAL_RCC_OscConfig+0x4c4>)
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bba:	60bb      	str	r3, [r7, #8]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bc2:	4b82      	ldr	r3, [pc, #520]	; (8004dcc <HAL_RCC_OscConfig+0x4c8>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d118      	bne.n	8004c00 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bce:	4b7f      	ldr	r3, [pc, #508]	; (8004dcc <HAL_RCC_OscConfig+0x4c8>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a7e      	ldr	r2, [pc, #504]	; (8004dcc <HAL_RCC_OscConfig+0x4c8>)
 8004bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bda:	f7fc fd09 	bl	80015f0 <HAL_GetTick>
 8004bde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be0:	e008      	b.n	8004bf4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004be2:	f7fc fd05 	bl	80015f0 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	2b64      	cmp	r3, #100	; 0x64
 8004bee:	d901      	bls.n	8004bf4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e103      	b.n	8004dfc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bf4:	4b75      	ldr	r3, [pc, #468]	; (8004dcc <HAL_RCC_OscConfig+0x4c8>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d0f0      	beq.n	8004be2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	2b01      	cmp	r3, #1
 8004c06:	d106      	bne.n	8004c16 <HAL_RCC_OscConfig+0x312>
 8004c08:	4b6f      	ldr	r3, [pc, #444]	; (8004dc8 <HAL_RCC_OscConfig+0x4c4>)
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	4a6e      	ldr	r2, [pc, #440]	; (8004dc8 <HAL_RCC_OscConfig+0x4c4>)
 8004c0e:	f043 0301 	orr.w	r3, r3, #1
 8004c12:	6213      	str	r3, [r2, #32]
 8004c14:	e02d      	b.n	8004c72 <HAL_RCC_OscConfig+0x36e>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10c      	bne.n	8004c38 <HAL_RCC_OscConfig+0x334>
 8004c1e:	4b6a      	ldr	r3, [pc, #424]	; (8004dc8 <HAL_RCC_OscConfig+0x4c4>)
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	4a69      	ldr	r2, [pc, #420]	; (8004dc8 <HAL_RCC_OscConfig+0x4c4>)
 8004c24:	f023 0301 	bic.w	r3, r3, #1
 8004c28:	6213      	str	r3, [r2, #32]
 8004c2a:	4b67      	ldr	r3, [pc, #412]	; (8004dc8 <HAL_RCC_OscConfig+0x4c4>)
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	4a66      	ldr	r2, [pc, #408]	; (8004dc8 <HAL_RCC_OscConfig+0x4c4>)
 8004c30:	f023 0304 	bic.w	r3, r3, #4
 8004c34:	6213      	str	r3, [r2, #32]
 8004c36:	e01c      	b.n	8004c72 <HAL_RCC_OscConfig+0x36e>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	2b05      	cmp	r3, #5
 8004c3e:	d10c      	bne.n	8004c5a <HAL_RCC_OscConfig+0x356>
 8004c40:	4b61      	ldr	r3, [pc, #388]	; (8004dc8 <HAL_RCC_OscConfig+0x4c4>)
 8004c42:	6a1b      	ldr	r3, [r3, #32]
 8004c44:	4a60      	ldr	r2, [pc, #384]	; (8004dc8 <HAL_RCC_OscConfig+0x4c4>)
 8004c46:	f043 0304 	orr.w	r3, r3, #4
 8004c4a:	6213      	str	r3, [r2, #32]
 8004c4c:	4b5e      	ldr	r3, [pc, #376]	; (8004dc8 <HAL_RCC_OscConfig+0x4c4>)
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	4a5d      	ldr	r2, [pc, #372]	; (8004dc8 <HAL_RCC_OscConfig+0x4c4>)
 8004c52:	f043 0301 	orr.w	r3, r3, #1
 8004c56:	6213      	str	r3, [r2, #32]
 8004c58:	e00b      	b.n	8004c72 <HAL_RCC_OscConfig+0x36e>
 8004c5a:	4b5b      	ldr	r3, [pc, #364]	; (8004dc8 <HAL_RCC_OscConfig+0x4c4>)
 8004c5c:	6a1b      	ldr	r3, [r3, #32]
 8004c5e:	4a5a      	ldr	r2, [pc, #360]	; (8004dc8 <HAL_RCC_OscConfig+0x4c4>)
 8004c60:	f023 0301 	bic.w	r3, r3, #1
 8004c64:	6213      	str	r3, [r2, #32]
 8004c66:	4b58      	ldr	r3, [pc, #352]	; (8004dc8 <HAL_RCC_OscConfig+0x4c4>)
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	4a57      	ldr	r2, [pc, #348]	; (8004dc8 <HAL_RCC_OscConfig+0x4c4>)
 8004c6c:	f023 0304 	bic.w	r3, r3, #4
 8004c70:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d015      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c7a:	f7fc fcb9 	bl	80015f0 <HAL_GetTick>
 8004c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c80:	e00a      	b.n	8004c98 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c82:	f7fc fcb5 	bl	80015f0 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d901      	bls.n	8004c98 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e0b1      	b.n	8004dfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c98:	4b4b      	ldr	r3, [pc, #300]	; (8004dc8 <HAL_RCC_OscConfig+0x4c4>)
 8004c9a:	6a1b      	ldr	r3, [r3, #32]
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d0ee      	beq.n	8004c82 <HAL_RCC_OscConfig+0x37e>
 8004ca4:	e014      	b.n	8004cd0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ca6:	f7fc fca3 	bl	80015f0 <HAL_GetTick>
 8004caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cac:	e00a      	b.n	8004cc4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cae:	f7fc fc9f 	bl	80015f0 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d901      	bls.n	8004cc4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e09b      	b.n	8004dfc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cc4:	4b40      	ldr	r3, [pc, #256]	; (8004dc8 <HAL_RCC_OscConfig+0x4c4>)
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1ee      	bne.n	8004cae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004cd0:	7dfb      	ldrb	r3, [r7, #23]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d105      	bne.n	8004ce2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cd6:	4b3c      	ldr	r3, [pc, #240]	; (8004dc8 <HAL_RCC_OscConfig+0x4c4>)
 8004cd8:	69db      	ldr	r3, [r3, #28]
 8004cda:	4a3b      	ldr	r2, [pc, #236]	; (8004dc8 <HAL_RCC_OscConfig+0x4c4>)
 8004cdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ce0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	69db      	ldr	r3, [r3, #28]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f000 8087 	beq.w	8004dfa <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cec:	4b36      	ldr	r3, [pc, #216]	; (8004dc8 <HAL_RCC_OscConfig+0x4c4>)
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f003 030c 	and.w	r3, r3, #12
 8004cf4:	2b08      	cmp	r3, #8
 8004cf6:	d061      	beq.n	8004dbc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	69db      	ldr	r3, [r3, #28]
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d146      	bne.n	8004d8e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d00:	4b33      	ldr	r3, [pc, #204]	; (8004dd0 <HAL_RCC_OscConfig+0x4cc>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d06:	f7fc fc73 	bl	80015f0 <HAL_GetTick>
 8004d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d0c:	e008      	b.n	8004d20 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d0e:	f7fc fc6f 	bl	80015f0 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d901      	bls.n	8004d20 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e06d      	b.n	8004dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d20:	4b29      	ldr	r3, [pc, #164]	; (8004dc8 <HAL_RCC_OscConfig+0x4c4>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1f0      	bne.n	8004d0e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d34:	d108      	bne.n	8004d48 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004d36:	4b24      	ldr	r3, [pc, #144]	; (8004dc8 <HAL_RCC_OscConfig+0x4c4>)
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	4921      	ldr	r1, [pc, #132]	; (8004dc8 <HAL_RCC_OscConfig+0x4c4>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d48:	4b1f      	ldr	r3, [pc, #124]	; (8004dc8 <HAL_RCC_OscConfig+0x4c4>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a19      	ldr	r1, [r3, #32]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d58:	430b      	orrs	r3, r1
 8004d5a:	491b      	ldr	r1, [pc, #108]	; (8004dc8 <HAL_RCC_OscConfig+0x4c4>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d60:	4b1b      	ldr	r3, [pc, #108]	; (8004dd0 <HAL_RCC_OscConfig+0x4cc>)
 8004d62:	2201      	movs	r2, #1
 8004d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d66:	f7fc fc43 	bl	80015f0 <HAL_GetTick>
 8004d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d6c:	e008      	b.n	8004d80 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d6e:	f7fc fc3f 	bl	80015f0 <HAL_GetTick>
 8004d72:	4602      	mov	r2, r0
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	1ad3      	subs	r3, r2, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d901      	bls.n	8004d80 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e03d      	b.n	8004dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d80:	4b11      	ldr	r3, [pc, #68]	; (8004dc8 <HAL_RCC_OscConfig+0x4c4>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d0f0      	beq.n	8004d6e <HAL_RCC_OscConfig+0x46a>
 8004d8c:	e035      	b.n	8004dfa <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d8e:	4b10      	ldr	r3, [pc, #64]	; (8004dd0 <HAL_RCC_OscConfig+0x4cc>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d94:	f7fc fc2c 	bl	80015f0 <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d9a:	e008      	b.n	8004dae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d9c:	f7fc fc28 	bl	80015f0 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e026      	b.n	8004dfc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004dae:	4b06      	ldr	r3, [pc, #24]	; (8004dc8 <HAL_RCC_OscConfig+0x4c4>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1f0      	bne.n	8004d9c <HAL_RCC_OscConfig+0x498>
 8004dba:	e01e      	b.n	8004dfa <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	69db      	ldr	r3, [r3, #28]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d107      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e019      	b.n	8004dfc <HAL_RCC_OscConfig+0x4f8>
 8004dc8:	40021000 	.word	0x40021000
 8004dcc:	40007000 	.word	0x40007000
 8004dd0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004dd4:	4b0b      	ldr	r3, [pc, #44]	; (8004e04 <HAL_RCC_OscConfig+0x500>)
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d106      	bne.n	8004df6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d001      	beq.n	8004dfa <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e000      	b.n	8004dfc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3718      	adds	r7, #24
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	40021000 	.word	0x40021000

08004e08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d101      	bne.n	8004e1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e0d0      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e1c:	4b6a      	ldr	r3, [pc, #424]	; (8004fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d910      	bls.n	8004e4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e2a:	4b67      	ldr	r3, [pc, #412]	; (8004fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f023 0207 	bic.w	r2, r3, #7
 8004e32:	4965      	ldr	r1, [pc, #404]	; (8004fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e3a:	4b63      	ldr	r3, [pc, #396]	; (8004fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0307 	and.w	r3, r3, #7
 8004e42:	683a      	ldr	r2, [r7, #0]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d001      	beq.n	8004e4c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e0b8      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0302 	and.w	r3, r3, #2
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d020      	beq.n	8004e9a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d005      	beq.n	8004e70 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e64:	4b59      	ldr	r3, [pc, #356]	; (8004fcc <HAL_RCC_ClockConfig+0x1c4>)
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	4a58      	ldr	r2, [pc, #352]	; (8004fcc <HAL_RCC_ClockConfig+0x1c4>)
 8004e6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004e6e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0308 	and.w	r3, r3, #8
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d005      	beq.n	8004e88 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e7c:	4b53      	ldr	r3, [pc, #332]	; (8004fcc <HAL_RCC_ClockConfig+0x1c4>)
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	4a52      	ldr	r2, [pc, #328]	; (8004fcc <HAL_RCC_ClockConfig+0x1c4>)
 8004e82:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004e86:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e88:	4b50      	ldr	r3, [pc, #320]	; (8004fcc <HAL_RCC_ClockConfig+0x1c4>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	494d      	ldr	r1, [pc, #308]	; (8004fcc <HAL_RCC_ClockConfig+0x1c4>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d040      	beq.n	8004f28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d107      	bne.n	8004ebe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eae:	4b47      	ldr	r3, [pc, #284]	; (8004fcc <HAL_RCC_ClockConfig+0x1c4>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d115      	bne.n	8004ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e07f      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d107      	bne.n	8004ed6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ec6:	4b41      	ldr	r3, [pc, #260]	; (8004fcc <HAL_RCC_ClockConfig+0x1c4>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d109      	bne.n	8004ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e073      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ed6:	4b3d      	ldr	r3, [pc, #244]	; (8004fcc <HAL_RCC_ClockConfig+0x1c4>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0302 	and.w	r3, r3, #2
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d101      	bne.n	8004ee6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e06b      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ee6:	4b39      	ldr	r3, [pc, #228]	; (8004fcc <HAL_RCC_ClockConfig+0x1c4>)
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f023 0203 	bic.w	r2, r3, #3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	4936      	ldr	r1, [pc, #216]	; (8004fcc <HAL_RCC_ClockConfig+0x1c4>)
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ef8:	f7fc fb7a 	bl	80015f0 <HAL_GetTick>
 8004efc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004efe:	e00a      	b.n	8004f16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f00:	f7fc fb76 	bl	80015f0 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e053      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f16:	4b2d      	ldr	r3, [pc, #180]	; (8004fcc <HAL_RCC_ClockConfig+0x1c4>)
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	f003 020c 	and.w	r2, r3, #12
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	429a      	cmp	r2, r3
 8004f26:	d1eb      	bne.n	8004f00 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f28:	4b27      	ldr	r3, [pc, #156]	; (8004fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0307 	and.w	r3, r3, #7
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d210      	bcs.n	8004f58 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f36:	4b24      	ldr	r3, [pc, #144]	; (8004fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f023 0207 	bic.w	r2, r3, #7
 8004f3e:	4922      	ldr	r1, [pc, #136]	; (8004fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f46:	4b20      	ldr	r3, [pc, #128]	; (8004fc8 <HAL_RCC_ClockConfig+0x1c0>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0307 	and.w	r3, r3, #7
 8004f4e:	683a      	ldr	r2, [r7, #0]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d001      	beq.n	8004f58 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e032      	b.n	8004fbe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0304 	and.w	r3, r3, #4
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d008      	beq.n	8004f76 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f64:	4b19      	ldr	r3, [pc, #100]	; (8004fcc <HAL_RCC_ClockConfig+0x1c4>)
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	4916      	ldr	r1, [pc, #88]	; (8004fcc <HAL_RCC_ClockConfig+0x1c4>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0308 	and.w	r3, r3, #8
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d009      	beq.n	8004f96 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f82:	4b12      	ldr	r3, [pc, #72]	; (8004fcc <HAL_RCC_ClockConfig+0x1c4>)
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	00db      	lsls	r3, r3, #3
 8004f90:	490e      	ldr	r1, [pc, #56]	; (8004fcc <HAL_RCC_ClockConfig+0x1c4>)
 8004f92:	4313      	orrs	r3, r2
 8004f94:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f96:	f000 f821 	bl	8004fdc <HAL_RCC_GetSysClockFreq>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	4b0b      	ldr	r3, [pc, #44]	; (8004fcc <HAL_RCC_ClockConfig+0x1c4>)
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	091b      	lsrs	r3, r3, #4
 8004fa2:	f003 030f 	and.w	r3, r3, #15
 8004fa6:	490a      	ldr	r1, [pc, #40]	; (8004fd0 <HAL_RCC_ClockConfig+0x1c8>)
 8004fa8:	5ccb      	ldrb	r3, [r1, r3]
 8004faa:	fa22 f303 	lsr.w	r3, r2, r3
 8004fae:	4a09      	ldr	r2, [pc, #36]	; (8004fd4 <HAL_RCC_ClockConfig+0x1cc>)
 8004fb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004fb2:	4b09      	ldr	r3, [pc, #36]	; (8004fd8 <HAL_RCC_ClockConfig+0x1d0>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7fc fad8 	bl	800156c <HAL_InitTick>

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3710      	adds	r7, #16
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	40022000 	.word	0x40022000
 8004fcc:	40021000 	.word	0x40021000
 8004fd0:	080072a8 	.word	0x080072a8
 8004fd4:	20000004 	.word	0x20000004
 8004fd8:	20000008 	.word	0x20000008

08004fdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	60fb      	str	r3, [r7, #12]
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60bb      	str	r3, [r7, #8]
 8004fea:	2300      	movs	r3, #0
 8004fec:	617b      	str	r3, [r7, #20]
 8004fee:	2300      	movs	r3, #0
 8004ff0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004ff6:	4b1e      	ldr	r3, [pc, #120]	; (8005070 <HAL_RCC_GetSysClockFreq+0x94>)
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f003 030c 	and.w	r3, r3, #12
 8005002:	2b04      	cmp	r3, #4
 8005004:	d002      	beq.n	800500c <HAL_RCC_GetSysClockFreq+0x30>
 8005006:	2b08      	cmp	r3, #8
 8005008:	d003      	beq.n	8005012 <HAL_RCC_GetSysClockFreq+0x36>
 800500a:	e027      	b.n	800505c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800500c:	4b19      	ldr	r3, [pc, #100]	; (8005074 <HAL_RCC_GetSysClockFreq+0x98>)
 800500e:	613b      	str	r3, [r7, #16]
      break;
 8005010:	e027      	b.n	8005062 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	0c9b      	lsrs	r3, r3, #18
 8005016:	f003 030f 	and.w	r3, r3, #15
 800501a:	4a17      	ldr	r2, [pc, #92]	; (8005078 <HAL_RCC_GetSysClockFreq+0x9c>)
 800501c:	5cd3      	ldrb	r3, [r2, r3]
 800501e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d010      	beq.n	800504c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800502a:	4b11      	ldr	r3, [pc, #68]	; (8005070 <HAL_RCC_GetSysClockFreq+0x94>)
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	0c5b      	lsrs	r3, r3, #17
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	4a11      	ldr	r2, [pc, #68]	; (800507c <HAL_RCC_GetSysClockFreq+0xa0>)
 8005036:	5cd3      	ldrb	r3, [r2, r3]
 8005038:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a0d      	ldr	r2, [pc, #52]	; (8005074 <HAL_RCC_GetSysClockFreq+0x98>)
 800503e:	fb03 f202 	mul.w	r2, r3, r2
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	fbb2 f3f3 	udiv	r3, r2, r3
 8005048:	617b      	str	r3, [r7, #20]
 800504a:	e004      	b.n	8005056 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a0c      	ldr	r2, [pc, #48]	; (8005080 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005050:	fb02 f303 	mul.w	r3, r2, r3
 8005054:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	613b      	str	r3, [r7, #16]
      break;
 800505a:	e002      	b.n	8005062 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800505c:	4b05      	ldr	r3, [pc, #20]	; (8005074 <HAL_RCC_GetSysClockFreq+0x98>)
 800505e:	613b      	str	r3, [r7, #16]
      break;
 8005060:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005062:	693b      	ldr	r3, [r7, #16]
}
 8005064:	4618      	mov	r0, r3
 8005066:	371c      	adds	r7, #28
 8005068:	46bd      	mov	sp, r7
 800506a:	bc80      	pop	{r7}
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	40021000 	.word	0x40021000
 8005074:	007a1200 	.word	0x007a1200
 8005078:	080072c0 	.word	0x080072c0
 800507c:	080072d0 	.word	0x080072d0
 8005080:	003d0900 	.word	0x003d0900

08005084 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005084:	b480      	push	{r7}
 8005086:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005088:	4b02      	ldr	r3, [pc, #8]	; (8005094 <HAL_RCC_GetHCLKFreq+0x10>)
 800508a:	681b      	ldr	r3, [r3, #0]
}
 800508c:	4618      	mov	r0, r3
 800508e:	46bd      	mov	sp, r7
 8005090:	bc80      	pop	{r7}
 8005092:	4770      	bx	lr
 8005094:	20000004 	.word	0x20000004

08005098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800509c:	f7ff fff2 	bl	8005084 <HAL_RCC_GetHCLKFreq>
 80050a0:	4602      	mov	r2, r0
 80050a2:	4b05      	ldr	r3, [pc, #20]	; (80050b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	0a1b      	lsrs	r3, r3, #8
 80050a8:	f003 0307 	and.w	r3, r3, #7
 80050ac:	4903      	ldr	r1, [pc, #12]	; (80050bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80050ae:	5ccb      	ldrb	r3, [r1, r3]
 80050b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	bd80      	pop	{r7, pc}
 80050b8:	40021000 	.word	0x40021000
 80050bc:	080072b8 	.word	0x080072b8

080050c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80050c4:	f7ff ffde 	bl	8005084 <HAL_RCC_GetHCLKFreq>
 80050c8:	4602      	mov	r2, r0
 80050ca:	4b05      	ldr	r3, [pc, #20]	; (80050e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	0adb      	lsrs	r3, r3, #11
 80050d0:	f003 0307 	and.w	r3, r3, #7
 80050d4:	4903      	ldr	r1, [pc, #12]	; (80050e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80050d6:	5ccb      	ldrb	r3, [r1, r3]
 80050d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050dc:	4618      	mov	r0, r3
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	40021000 	.word	0x40021000
 80050e4:	080072b8 	.word	0x080072b8

080050e8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80050f0:	4b0a      	ldr	r3, [pc, #40]	; (800511c <RCC_Delay+0x34>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a0a      	ldr	r2, [pc, #40]	; (8005120 <RCC_Delay+0x38>)
 80050f6:	fba2 2303 	umull	r2, r3, r2, r3
 80050fa:	0a5b      	lsrs	r3, r3, #9
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	fb02 f303 	mul.w	r3, r2, r3
 8005102:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005104:	bf00      	nop
  }
  while (Delay --);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	1e5a      	subs	r2, r3, #1
 800510a:	60fa      	str	r2, [r7, #12]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1f9      	bne.n	8005104 <RCC_Delay+0x1c>
}
 8005110:	bf00      	nop
 8005112:	bf00      	nop
 8005114:	3714      	adds	r7, #20
 8005116:	46bd      	mov	sp, r7
 8005118:	bc80      	pop	{r7}
 800511a:	4770      	bx	lr
 800511c:	20000004 	.word	0x20000004
 8005120:	10624dd3 	.word	0x10624dd3

08005124 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d101      	bne.n	8005136 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e076      	b.n	8005224 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	2b00      	cmp	r3, #0
 800513c:	d108      	bne.n	8005150 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005146:	d009      	beq.n	800515c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	61da      	str	r2, [r3, #28]
 800514e:	e005      	b.n	800515c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d106      	bne.n	800517c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f7fc f868 	bl	800124c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2202      	movs	r2, #2
 8005180:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005192:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80051a4:	431a      	orrs	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051ae:	431a      	orrs	r2, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	f003 0302 	and.w	r3, r3, #2
 80051b8:	431a      	orrs	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	f003 0301 	and.w	r3, r3, #1
 80051c2:	431a      	orrs	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	699b      	ldr	r3, [r3, #24]
 80051c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051cc:	431a      	orrs	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	69db      	ldr	r3, [r3, #28]
 80051d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051d6:	431a      	orrs	r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a1b      	ldr	r3, [r3, #32]
 80051dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e0:	ea42 0103 	orr.w	r1, r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	699b      	ldr	r3, [r3, #24]
 80051f8:	0c1a      	lsrs	r2, r3, #16
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f002 0204 	and.w	r2, r2, #4
 8005202:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	69da      	ldr	r2, [r3, #28]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005212:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005222:	2300      	movs	r3, #0
}
 8005224:	4618      	mov	r0, r3
 8005226:	3708      	adds	r7, #8
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b088      	sub	sp, #32
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	603b      	str	r3, [r7, #0]
 8005238:	4613      	mov	r3, r2
 800523a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800523c:	2300      	movs	r3, #0
 800523e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005246:	2b01      	cmp	r3, #1
 8005248:	d101      	bne.n	800524e <HAL_SPI_Transmit+0x22>
 800524a:	2302      	movs	r3, #2
 800524c:	e12d      	b.n	80054aa <HAL_SPI_Transmit+0x27e>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005256:	f7fc f9cb 	bl	80015f0 <HAL_GetTick>
 800525a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800525c:	88fb      	ldrh	r3, [r7, #6]
 800525e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b01      	cmp	r3, #1
 800526a:	d002      	beq.n	8005272 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800526c:	2302      	movs	r3, #2
 800526e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005270:	e116      	b.n	80054a0 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d002      	beq.n	800527e <HAL_SPI_Transmit+0x52>
 8005278:	88fb      	ldrh	r3, [r7, #6]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d102      	bne.n	8005284 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005282:	e10d      	b.n	80054a0 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2203      	movs	r2, #3
 8005288:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	88fa      	ldrh	r2, [r7, #6]
 800529c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	88fa      	ldrh	r2, [r7, #6]
 80052a2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052ca:	d10f      	bne.n	80052ec <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052da:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052ea:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f6:	2b40      	cmp	r3, #64	; 0x40
 80052f8:	d007      	beq.n	800530a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005308:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005312:	d14f      	bne.n	80053b4 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d002      	beq.n	8005322 <HAL_SPI_Transmit+0xf6>
 800531c:	8afb      	ldrh	r3, [r7, #22]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d142      	bne.n	80053a8 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005326:	881a      	ldrh	r2, [r3, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005332:	1c9a      	adds	r2, r3, #2
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800533c:	b29b      	uxth	r3, r3
 800533e:	3b01      	subs	r3, #1
 8005340:	b29a      	uxth	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005346:	e02f      	b.n	80053a8 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b02      	cmp	r3, #2
 8005354:	d112      	bne.n	800537c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535a:	881a      	ldrh	r2, [r3, #0]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005366:	1c9a      	adds	r2, r3, #2
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005370:	b29b      	uxth	r3, r3
 8005372:	3b01      	subs	r3, #1
 8005374:	b29a      	uxth	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	86da      	strh	r2, [r3, #54]	; 0x36
 800537a:	e015      	b.n	80053a8 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800537c:	f7fc f938 	bl	80015f0 <HAL_GetTick>
 8005380:	4602      	mov	r2, r0
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	1ad3      	subs	r3, r2, r3
 8005386:	683a      	ldr	r2, [r7, #0]
 8005388:	429a      	cmp	r2, r3
 800538a:	d803      	bhi.n	8005394 <HAL_SPI_Transmit+0x168>
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005392:	d102      	bne.n	800539a <HAL_SPI_Transmit+0x16e>
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d106      	bne.n	80053a8 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80053a6:	e07b      	b.n	80054a0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053ac:	b29b      	uxth	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d1ca      	bne.n	8005348 <HAL_SPI_Transmit+0x11c>
 80053b2:	e050      	b.n	8005456 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d002      	beq.n	80053c2 <HAL_SPI_Transmit+0x196>
 80053bc:	8afb      	ldrh	r3, [r7, #22]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d144      	bne.n	800544c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	330c      	adds	r3, #12
 80053cc:	7812      	ldrb	r2, [r2, #0]
 80053ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d4:	1c5a      	adds	r2, r3, #1
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053de:	b29b      	uxth	r3, r3
 80053e0:	3b01      	subs	r3, #1
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80053e8:	e030      	b.n	800544c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f003 0302 	and.w	r3, r3, #2
 80053f4:	2b02      	cmp	r3, #2
 80053f6:	d113      	bne.n	8005420 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	330c      	adds	r3, #12
 8005402:	7812      	ldrb	r2, [r2, #0]
 8005404:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540a:	1c5a      	adds	r2, r3, #1
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005414:	b29b      	uxth	r3, r3
 8005416:	3b01      	subs	r3, #1
 8005418:	b29a      	uxth	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	86da      	strh	r2, [r3, #54]	; 0x36
 800541e:	e015      	b.n	800544c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005420:	f7fc f8e6 	bl	80015f0 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	683a      	ldr	r2, [r7, #0]
 800542c:	429a      	cmp	r2, r3
 800542e:	d803      	bhi.n	8005438 <HAL_SPI_Transmit+0x20c>
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005436:	d102      	bne.n	800543e <HAL_SPI_Transmit+0x212>
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d106      	bne.n	800544c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2201      	movs	r2, #1
 8005446:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800544a:	e029      	b.n	80054a0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005450:	b29b      	uxth	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1c9      	bne.n	80053ea <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	6839      	ldr	r1, [r7, #0]
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f000 fbd8 	bl	8005c10 <SPI_EndRxTxTransaction>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d002      	beq.n	800546c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2220      	movs	r2, #32
 800546a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d10a      	bne.n	800548a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005474:	2300      	movs	r3, #0
 8005476:	613b      	str	r3, [r7, #16]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	613b      	str	r3, [r7, #16]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	613b      	str	r3, [r7, #16]
 8005488:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800548e:	2b00      	cmp	r3, #0
 8005490:	d002      	beq.n	8005498 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	77fb      	strb	r3, [r7, #31]
 8005496:	e003      	b.n	80054a0 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80054a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3720      	adds	r7, #32
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b088      	sub	sp, #32
 80054b6:	af02      	add	r7, sp, #8
 80054b8:	60f8      	str	r0, [r7, #12]
 80054ba:	60b9      	str	r1, [r7, #8]
 80054bc:	603b      	str	r3, [r7, #0]
 80054be:	4613      	mov	r3, r2
 80054c0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054c2:	2300      	movs	r3, #0
 80054c4:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b01      	cmp	r3, #1
 80054d0:	d002      	beq.n	80054d8 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80054d2:	2302      	movs	r3, #2
 80054d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80054d6:	e0fb      	b.n	80056d0 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054e0:	d112      	bne.n	8005508 <HAL_SPI_Receive+0x56>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10e      	bne.n	8005508 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2204      	movs	r2, #4
 80054ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80054f2:	88fa      	ldrh	r2, [r7, #6]
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	4613      	mov	r3, r2
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	68b9      	ldr	r1, [r7, #8]
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f000 f8ef 	bl	80056e2 <HAL_SPI_TransmitReceive>
 8005504:	4603      	mov	r3, r0
 8005506:	e0e8      	b.n	80056da <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800550e:	2b01      	cmp	r3, #1
 8005510:	d101      	bne.n	8005516 <HAL_SPI_Receive+0x64>
 8005512:	2302      	movs	r3, #2
 8005514:	e0e1      	b.n	80056da <HAL_SPI_Receive+0x228>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800551e:	f7fc f867 	bl	80015f0 <HAL_GetTick>
 8005522:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d002      	beq.n	8005530 <HAL_SPI_Receive+0x7e>
 800552a:	88fb      	ldrh	r3, [r7, #6]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d102      	bne.n	8005536 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005530:	2301      	movs	r3, #1
 8005532:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005534:	e0cc      	b.n	80056d0 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2204      	movs	r2, #4
 800553a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2200      	movs	r2, #0
 8005542:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	88fa      	ldrh	r2, [r7, #6]
 800554e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	88fa      	ldrh	r2, [r7, #6]
 8005554:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2200      	movs	r2, #0
 800555a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2200      	movs	r2, #0
 8005560:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800557c:	d10f      	bne.n	800559e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800558c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800559c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a8:	2b40      	cmp	r3, #64	; 0x40
 80055aa:	d007      	beq.n	80055bc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055ba:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d16a      	bne.n	800569a <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80055c4:	e032      	b.n	800562c <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f003 0301 	and.w	r3, r3, #1
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d115      	bne.n	8005600 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f103 020c 	add.w	r2, r3, #12
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e0:	7812      	ldrb	r2, [r2, #0]
 80055e2:	b2d2      	uxtb	r2, r2
 80055e4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ea:	1c5a      	adds	r2, r3, #1
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	3b01      	subs	r3, #1
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80055fe:	e015      	b.n	800562c <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005600:	f7fb fff6 	bl	80015f0 <HAL_GetTick>
 8005604:	4602      	mov	r2, r0
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	429a      	cmp	r2, r3
 800560e:	d803      	bhi.n	8005618 <HAL_SPI_Receive+0x166>
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005616:	d102      	bne.n	800561e <HAL_SPI_Receive+0x16c>
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d106      	bne.n	800562c <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800561e:	2303      	movs	r3, #3
 8005620:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2201      	movs	r2, #1
 8005626:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 800562a:	e051      	b.n	80056d0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005630:	b29b      	uxth	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1c7      	bne.n	80055c6 <HAL_SPI_Receive+0x114>
 8005636:	e035      	b.n	80056a4 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	2b01      	cmp	r3, #1
 8005644:	d113      	bne.n	800566e <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68da      	ldr	r2, [r3, #12]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005650:	b292      	uxth	r2, r2
 8005652:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005658:	1c9a      	adds	r2, r3, #2
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005662:	b29b      	uxth	r3, r3
 8005664:	3b01      	subs	r3, #1
 8005666:	b29a      	uxth	r2, r3
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800566c:	e015      	b.n	800569a <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800566e:	f7fb ffbf 	bl	80015f0 <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	683a      	ldr	r2, [r7, #0]
 800567a:	429a      	cmp	r2, r3
 800567c:	d803      	bhi.n	8005686 <HAL_SPI_Receive+0x1d4>
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005684:	d102      	bne.n	800568c <HAL_SPI_Receive+0x1da>
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d106      	bne.n	800569a <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8005698:	e01a      	b.n	80056d0 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800569e:	b29b      	uxth	r3, r3
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1c9      	bne.n	8005638 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	6839      	ldr	r1, [r7, #0]
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f000 fa5f 	bl	8005b6c <SPI_EndRxTransaction>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d002      	beq.n	80056ba <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2220      	movs	r2, #32
 80056b8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d002      	beq.n	80056c8 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	75fb      	strb	r3, [r7, #23]
 80056c6:	e003      	b.n	80056d0 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80056d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3718      	adds	r7, #24
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b08c      	sub	sp, #48	; 0x30
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	60f8      	str	r0, [r7, #12]
 80056ea:	60b9      	str	r1, [r7, #8]
 80056ec:	607a      	str	r2, [r7, #4]
 80056ee:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80056f0:	2301      	movs	r3, #1
 80056f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80056f4:	2300      	movs	r3, #0
 80056f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005700:	2b01      	cmp	r3, #1
 8005702:	d101      	bne.n	8005708 <HAL_SPI_TransmitReceive+0x26>
 8005704:	2302      	movs	r3, #2
 8005706:	e198      	b.n	8005a3a <HAL_SPI_TransmitReceive+0x358>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005710:	f7fb ff6e 	bl	80015f0 <HAL_GetTick>
 8005714:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800571c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005726:	887b      	ldrh	r3, [r7, #2]
 8005728:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800572a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800572e:	2b01      	cmp	r3, #1
 8005730:	d00f      	beq.n	8005752 <HAL_SPI_TransmitReceive+0x70>
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005738:	d107      	bne.n	800574a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d103      	bne.n	800574a <HAL_SPI_TransmitReceive+0x68>
 8005742:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005746:	2b04      	cmp	r3, #4
 8005748:	d003      	beq.n	8005752 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800574a:	2302      	movs	r3, #2
 800574c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005750:	e16d      	b.n	8005a2e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d005      	beq.n	8005764 <HAL_SPI_TransmitReceive+0x82>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d002      	beq.n	8005764 <HAL_SPI_TransmitReceive+0x82>
 800575e:	887b      	ldrh	r3, [r7, #2]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d103      	bne.n	800576c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800576a:	e160      	b.n	8005a2e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b04      	cmp	r3, #4
 8005776:	d003      	beq.n	8005780 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2205      	movs	r2, #5
 800577c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	887a      	ldrh	r2, [r7, #2]
 8005790:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	887a      	ldrh	r2, [r7, #2]
 8005796:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	887a      	ldrh	r2, [r7, #2]
 80057a2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	887a      	ldrh	r2, [r7, #2]
 80057a8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c0:	2b40      	cmp	r3, #64	; 0x40
 80057c2:	d007      	beq.n	80057d4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057dc:	d17c      	bne.n	80058d8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d002      	beq.n	80057ec <HAL_SPI_TransmitReceive+0x10a>
 80057e6:	8b7b      	ldrh	r3, [r7, #26]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d16a      	bne.n	80058c2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f0:	881a      	ldrh	r2, [r3, #0]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fc:	1c9a      	adds	r2, r3, #2
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005806:	b29b      	uxth	r3, r3
 8005808:	3b01      	subs	r3, #1
 800580a:	b29a      	uxth	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005810:	e057      	b.n	80058c2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	2b02      	cmp	r3, #2
 800581e:	d11b      	bne.n	8005858 <HAL_SPI_TransmitReceive+0x176>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005824:	b29b      	uxth	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d016      	beq.n	8005858 <HAL_SPI_TransmitReceive+0x176>
 800582a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582c:	2b01      	cmp	r3, #1
 800582e:	d113      	bne.n	8005858 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005834:	881a      	ldrh	r2, [r3, #0]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005840:	1c9a      	adds	r2, r3, #2
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800584a:	b29b      	uxth	r3, r3
 800584c:	3b01      	subs	r3, #1
 800584e:	b29a      	uxth	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005854:	2300      	movs	r3, #0
 8005856:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b01      	cmp	r3, #1
 8005864:	d119      	bne.n	800589a <HAL_SPI_TransmitReceive+0x1b8>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800586a:	b29b      	uxth	r3, r3
 800586c:	2b00      	cmp	r3, #0
 800586e:	d014      	beq.n	800589a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68da      	ldr	r2, [r3, #12]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587a:	b292      	uxth	r2, r2
 800587c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005882:	1c9a      	adds	r2, r3, #2
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800588c:	b29b      	uxth	r3, r3
 800588e:	3b01      	subs	r3, #1
 8005890:	b29a      	uxth	r2, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005896:	2301      	movs	r3, #1
 8005898:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800589a:	f7fb fea9 	bl	80015f0 <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d80b      	bhi.n	80058c2 <HAL_SPI_TransmitReceive+0x1e0>
 80058aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058b0:	d007      	beq.n	80058c2 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80058c0:	e0b5      	b.n	8005a2e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1a2      	bne.n	8005812 <HAL_SPI_TransmitReceive+0x130>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d19d      	bne.n	8005812 <HAL_SPI_TransmitReceive+0x130>
 80058d6:	e080      	b.n	80059da <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d002      	beq.n	80058e6 <HAL_SPI_TransmitReceive+0x204>
 80058e0:	8b7b      	ldrh	r3, [r7, #26]
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d16f      	bne.n	80059c6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	330c      	adds	r3, #12
 80058f0:	7812      	ldrb	r2, [r2, #0]
 80058f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f8:	1c5a      	adds	r2, r3, #1
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005902:	b29b      	uxth	r3, r3
 8005904:	3b01      	subs	r3, #1
 8005906:	b29a      	uxth	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800590c:	e05b      	b.n	80059c6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f003 0302 	and.w	r3, r3, #2
 8005918:	2b02      	cmp	r3, #2
 800591a:	d11c      	bne.n	8005956 <HAL_SPI_TransmitReceive+0x274>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005920:	b29b      	uxth	r3, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d017      	beq.n	8005956 <HAL_SPI_TransmitReceive+0x274>
 8005926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005928:	2b01      	cmp	r3, #1
 800592a:	d114      	bne.n	8005956 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	330c      	adds	r3, #12
 8005936:	7812      	ldrb	r2, [r2, #0]
 8005938:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593e:	1c5a      	adds	r2, r3, #1
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005948:	b29b      	uxth	r3, r3
 800594a:	3b01      	subs	r3, #1
 800594c:	b29a      	uxth	r2, r3
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005952:	2300      	movs	r3, #0
 8005954:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f003 0301 	and.w	r3, r3, #1
 8005960:	2b01      	cmp	r3, #1
 8005962:	d119      	bne.n	8005998 <HAL_SPI_TransmitReceive+0x2b6>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005968:	b29b      	uxth	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d014      	beq.n	8005998 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68da      	ldr	r2, [r3, #12]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005978:	b2d2      	uxtb	r2, r2
 800597a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005980:	1c5a      	adds	r2, r3, #1
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800598a:	b29b      	uxth	r3, r3
 800598c:	3b01      	subs	r3, #1
 800598e:	b29a      	uxth	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005994:	2301      	movs	r3, #1
 8005996:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005998:	f7fb fe2a 	bl	80015f0 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d803      	bhi.n	80059b0 <HAL_SPI_TransmitReceive+0x2ce>
 80059a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ae:	d102      	bne.n	80059b6 <HAL_SPI_TransmitReceive+0x2d4>
 80059b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d107      	bne.n	80059c6 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80059c4:	e033      	b.n	8005a2e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d19e      	bne.n	800590e <HAL_SPI_TransmitReceive+0x22c>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059d4:	b29b      	uxth	r3, r3
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d199      	bne.n	800590e <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80059de:	68f8      	ldr	r0, [r7, #12]
 80059e0:	f000 f916 	bl	8005c10 <SPI_EndRxTxTransaction>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d006      	beq.n	80059f8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2220      	movs	r2, #32
 80059f4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80059f6:	e01a      	b.n	8005a2e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10a      	bne.n	8005a16 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a00:	2300      	movs	r3, #0
 8005a02:	617b      	str	r3, [r7, #20]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	617b      	str	r3, [r7, #20]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	617b      	str	r3, [r7, #20]
 8005a14:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d003      	beq.n	8005a26 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a24:	e003      	b.n	8005a2e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3730      	adds	r7, #48	; 0x30
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8005a42:	b480      	push	{r7}
 8005a44:	b083      	sub	sp, #12
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a50:	b2db      	uxtb	r3, r3
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	370c      	adds	r7, #12
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bc80      	pop	{r7}
 8005a5a:	4770      	bx	lr

08005a5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b088      	sub	sp, #32
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	603b      	str	r3, [r7, #0]
 8005a68:	4613      	mov	r3, r2
 8005a6a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005a6c:	f7fb fdc0 	bl	80015f0 <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a74:	1a9b      	subs	r3, r3, r2
 8005a76:	683a      	ldr	r2, [r7, #0]
 8005a78:	4413      	add	r3, r2
 8005a7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005a7c:	f7fb fdb8 	bl	80015f0 <HAL_GetTick>
 8005a80:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005a82:	4b39      	ldr	r3, [pc, #228]	; (8005b68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	015b      	lsls	r3, r3, #5
 8005a88:	0d1b      	lsrs	r3, r3, #20
 8005a8a:	69fa      	ldr	r2, [r7, #28]
 8005a8c:	fb02 f303 	mul.w	r3, r2, r3
 8005a90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a92:	e054      	b.n	8005b3e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a9a:	d050      	beq.n	8005b3e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a9c:	f7fb fda8 	bl	80015f0 <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	69fa      	ldr	r2, [r7, #28]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d902      	bls.n	8005ab2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d13d      	bne.n	8005b2e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	685a      	ldr	r2, [r3, #4]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ac0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005aca:	d111      	bne.n	8005af0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	689b      	ldr	r3, [r3, #8]
 8005ad0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ad4:	d004      	beq.n	8005ae0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ade:	d107      	bne.n	8005af0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005af8:	d10f      	bne.n	8005b1a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b08:	601a      	str	r2, [r3, #0]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e017      	b.n	8005b5e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d101      	bne.n	8005b38 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005b34:	2300      	movs	r3, #0
 8005b36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	689a      	ldr	r2, [r3, #8]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	4013      	ands	r3, r2
 8005b48:	68ba      	ldr	r2, [r7, #8]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	bf0c      	ite	eq
 8005b4e:	2301      	moveq	r3, #1
 8005b50:	2300      	movne	r3, #0
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	461a      	mov	r2, r3
 8005b56:	79fb      	ldrb	r3, [r7, #7]
 8005b58:	429a      	cmp	r2, r3
 8005b5a:	d19b      	bne.n	8005a94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005b5c:	2300      	movs	r3, #0
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3720      	adds	r7, #32
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	bf00      	nop
 8005b68:	20000004 	.word	0x20000004

08005b6c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af02      	add	r7, sp, #8
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b80:	d111      	bne.n	8005ba6 <SPI_EndRxTransaction+0x3a>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b8a:	d004      	beq.n	8005b96 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b94:	d107      	bne.n	8005ba6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ba4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bae:	d117      	bne.n	8005be0 <SPI_EndRxTransaction+0x74>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bb8:	d112      	bne.n	8005be0 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	2101      	movs	r1, #1
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f7ff ff49 	bl	8005a5c <SPI_WaitFlagStateUntilTimeout>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d01a      	beq.n	8005c06 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd4:	f043 0220 	orr.w	r2, r3, #32
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005bdc:	2303      	movs	r3, #3
 8005bde:	e013      	b.n	8005c08 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	2200      	movs	r2, #0
 8005be8:	2180      	movs	r1, #128	; 0x80
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f7ff ff36 	bl	8005a5c <SPI_WaitFlagStateUntilTimeout>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d007      	beq.n	8005c06 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bfa:	f043 0220 	orr.w	r2, r3, #32
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e000      	b.n	8005c08 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005c06:	2300      	movs	r3, #0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3710      	adds	r7, #16
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af02      	add	r7, sp, #8
 8005c16:	60f8      	str	r0, [r7, #12]
 8005c18:	60b9      	str	r1, [r7, #8]
 8005c1a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	9300      	str	r3, [sp, #0]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	2200      	movs	r2, #0
 8005c24:	2180      	movs	r1, #128	; 0x80
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	f7ff ff18 	bl	8005a5c <SPI_WaitFlagStateUntilTimeout>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d007      	beq.n	8005c42 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c36:	f043 0220 	orr.w	r2, r3, #32
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e000      	b.n	8005c44 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e042      	b.n	8005ce4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d106      	bne.n	8005c78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f7fb fb34 	bl	80012e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2224      	movs	r2, #36	; 0x24
 8005c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68da      	ldr	r2, [r3, #12]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 fdb1 	bl	80067f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	691a      	ldr	r2, [r3, #16]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ca4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	695a      	ldr	r2, [r3, #20]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68da      	ldr	r2, [r3, #12]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2220      	movs	r2, #32
 8005cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005ce2:	2300      	movs	r3, #0
}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	3708      	adds	r7, #8
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b08c      	sub	sp, #48	; 0x30
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	60b9      	str	r1, [r7, #8]
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	2b20      	cmp	r3, #32
 8005d04:	d156      	bne.n	8005db4 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d002      	beq.n	8005d12 <HAL_UART_Transmit_DMA+0x26>
 8005d0c:	88fb      	ldrh	r3, [r7, #6]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e04f      	b.n	8005db6 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8005d16:	68ba      	ldr	r2, [r7, #8]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	88fa      	ldrh	r2, [r7, #6]
 8005d20:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	88fa      	ldrh	r2, [r7, #6]
 8005d26:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2221      	movs	r2, #33	; 0x21
 8005d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3a:	4a21      	ldr	r2, [pc, #132]	; (8005dc0 <HAL_UART_Transmit_DMA+0xd4>)
 8005d3c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d42:	4a20      	ldr	r2, [pc, #128]	; (8005dc4 <HAL_UART_Transmit_DMA+0xd8>)
 8005d44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4a:	4a1f      	ldr	r2, [pc, #124]	; (8005dc8 <HAL_UART_Transmit_DMA+0xdc>)
 8005d4c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d52:	2200      	movs	r2, #0
 8005d54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8005d56:	f107 0308 	add.w	r3, r7, #8
 8005d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d62:	6819      	ldr	r1, [r3, #0]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	3304      	adds	r3, #4
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	88fb      	ldrh	r3, [r7, #6]
 8005d6e:	f7fc fb89 	bl	8002484 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d7a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	3314      	adds	r3, #20
 8005d82:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	e853 3f00 	ldrex	r3, [r3]
 8005d8a:	617b      	str	r3, [r7, #20]
   return(result);
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d92:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	3314      	adds	r3, #20
 8005d9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d9c:	627a      	str	r2, [r7, #36]	; 0x24
 8005d9e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da0:	6a39      	ldr	r1, [r7, #32]
 8005da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005da4:	e841 2300 	strex	r3, r2, [r1]
 8005da8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005daa:	69fb      	ldr	r3, [r7, #28]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d1e5      	bne.n	8005d7c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8005db0:	2300      	movs	r3, #0
 8005db2:	e000      	b.n	8005db6 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005db4:	2302      	movs	r3, #2
  }
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3730      	adds	r7, #48	; 0x30
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	0800632b 	.word	0x0800632b
 8005dc4:	080063c5 	.word	0x080063c5
 8005dc8:	080063e1 	.word	0x080063e1

08005dcc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b0ba      	sub	sp, #232	; 0xe8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005df2:	2300      	movs	r3, #0
 8005df4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e02:	f003 030f 	and.w	r3, r3, #15
 8005e06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005e0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10f      	bne.n	8005e32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e16:	f003 0320 	and.w	r3, r3, #32
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d009      	beq.n	8005e32 <HAL_UART_IRQHandler+0x66>
 8005e1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e22:	f003 0320 	and.w	r3, r3, #32
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 fc26 	bl	800667c <UART_Receive_IT>
      return;
 8005e30:	e25b      	b.n	80062ea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	f000 80de 	beq.w	8005ff8 <HAL_UART_IRQHandler+0x22c>
 8005e3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e40:	f003 0301 	and.w	r3, r3, #1
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d106      	bne.n	8005e56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e4c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f000 80d1 	beq.w	8005ff8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00b      	beq.n	8005e7a <HAL_UART_IRQHandler+0xae>
 8005e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d005      	beq.n	8005e7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e72:	f043 0201 	orr.w	r2, r3, #1
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e7e:	f003 0304 	and.w	r3, r3, #4
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00b      	beq.n	8005e9e <HAL_UART_IRQHandler+0xd2>
 8005e86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e8a:	f003 0301 	and.w	r3, r3, #1
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d005      	beq.n	8005e9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e96:	f043 0202 	orr.w	r2, r3, #2
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ea2:	f003 0302 	and.w	r3, r3, #2
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00b      	beq.n	8005ec2 <HAL_UART_IRQHandler+0xf6>
 8005eaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eae:	f003 0301 	and.w	r3, r3, #1
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d005      	beq.n	8005ec2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eba:	f043 0204 	orr.w	r2, r3, #4
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005ec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ec6:	f003 0308 	and.w	r3, r3, #8
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d011      	beq.n	8005ef2 <HAL_UART_IRQHandler+0x126>
 8005ece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ed2:	f003 0320 	and.w	r3, r3, #32
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d105      	bne.n	8005ee6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005eda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d005      	beq.n	8005ef2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eea:	f043 0208 	orr.w	r2, r3, #8
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	f000 81f2 	beq.w	80062e0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f00:	f003 0320 	and.w	r3, r3, #32
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d008      	beq.n	8005f1a <HAL_UART_IRQHandler+0x14e>
 8005f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f0c:	f003 0320 	and.w	r3, r3, #32
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d002      	beq.n	8005f1a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 fbb1 	bl	800667c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	bf14      	ite	ne
 8005f28:	2301      	movne	r3, #1
 8005f2a:	2300      	moveq	r3, #0
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f36:	f003 0308 	and.w	r3, r3, #8
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d103      	bne.n	8005f46 <HAL_UART_IRQHandler+0x17a>
 8005f3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d04f      	beq.n	8005fe6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fabb 	bl	80064c2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d041      	beq.n	8005fde <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	3314      	adds	r3, #20
 8005f60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f68:	e853 3f00 	ldrex	r3, [r3]
 8005f6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005f70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	3314      	adds	r3, #20
 8005f82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005f86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005f8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005f92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005f96:	e841 2300 	strex	r3, r2, [r1]
 8005f9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005f9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1d9      	bne.n	8005f5a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d013      	beq.n	8005fd6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb2:	4a7e      	ldr	r2, [pc, #504]	; (80061ac <HAL_UART_IRQHandler+0x3e0>)
 8005fb4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f7fc fafe 	bl	80025bc <HAL_DMA_Abort_IT>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d016      	beq.n	8005ff4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005fd0:	4610      	mov	r0, r2
 8005fd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd4:	e00e      	b.n	8005ff4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 f993 	bl	8006302 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fdc:	e00a      	b.n	8005ff4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f98f 	bl	8006302 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fe4:	e006      	b.n	8005ff4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f98b 	bl	8006302 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005ff2:	e175      	b.n	80062e0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ff4:	bf00      	nop
    return;
 8005ff6:	e173      	b.n	80062e0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	f040 814f 	bne.w	80062a0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006006:	f003 0310 	and.w	r3, r3, #16
 800600a:	2b00      	cmp	r3, #0
 800600c:	f000 8148 	beq.w	80062a0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006014:	f003 0310 	and.w	r3, r3, #16
 8006018:	2b00      	cmp	r3, #0
 800601a:	f000 8141 	beq.w	80062a0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800601e:	2300      	movs	r3, #0
 8006020:	60bb      	str	r3, [r7, #8]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	60bb      	str	r3, [r7, #8]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	60bb      	str	r3, [r7, #8]
 8006032:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603e:	2b00      	cmp	r3, #0
 8006040:	f000 80b6 	beq.w	80061b0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006050:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006054:	2b00      	cmp	r3, #0
 8006056:	f000 8145 	beq.w	80062e4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800605e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006062:	429a      	cmp	r2, r3
 8006064:	f080 813e 	bcs.w	80062e4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800606e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006074:	699b      	ldr	r3, [r3, #24]
 8006076:	2b20      	cmp	r3, #32
 8006078:	f000 8088 	beq.w	800618c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	330c      	adds	r3, #12
 8006082:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006086:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800608a:	e853 3f00 	ldrex	r3, [r3]
 800608e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006092:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006096:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800609a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	330c      	adds	r3, #12
 80060a4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80060a8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80060ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80060b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80060b8:	e841 2300 	strex	r3, r2, [r1]
 80060bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80060c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1d9      	bne.n	800607c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	3314      	adds	r3, #20
 80060ce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060d2:	e853 3f00 	ldrex	r3, [r3]
 80060d6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80060d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060da:	f023 0301 	bic.w	r3, r3, #1
 80060de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	3314      	adds	r3, #20
 80060e8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80060ec:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80060f0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80060f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80060f8:	e841 2300 	strex	r3, r2, [r1]
 80060fc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80060fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006100:	2b00      	cmp	r3, #0
 8006102:	d1e1      	bne.n	80060c8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	3314      	adds	r3, #20
 800610a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800610e:	e853 3f00 	ldrex	r3, [r3]
 8006112:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006114:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006116:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800611a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	3314      	adds	r3, #20
 8006124:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006128:	66fa      	str	r2, [r7, #108]	; 0x6c
 800612a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800612e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006130:	e841 2300 	strex	r3, r2, [r1]
 8006134:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006136:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1e3      	bne.n	8006104 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2220      	movs	r2, #32
 8006140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	330c      	adds	r3, #12
 8006150:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006154:	e853 3f00 	ldrex	r3, [r3]
 8006158:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800615a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800615c:	f023 0310 	bic.w	r3, r3, #16
 8006160:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	330c      	adds	r3, #12
 800616a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800616e:	65ba      	str	r2, [r7, #88]	; 0x58
 8006170:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006172:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006174:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006176:	e841 2300 	strex	r3, r2, [r1]
 800617a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800617c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1e3      	bne.n	800614a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006186:	4618      	mov	r0, r3
 8006188:	f7fc f9dc 	bl	8002544 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2202      	movs	r2, #2
 8006190:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800619a:	b29b      	uxth	r3, r3
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	b29b      	uxth	r3, r3
 80061a0:	4619      	mov	r1, r3
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f8b6 	bl	8006314 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80061a8:	e09c      	b.n	80062e4 <HAL_UART_IRQHandler+0x518>
 80061aa:	bf00      	nop
 80061ac:	08006587 	.word	0x08006587
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f000 808e 	beq.w	80062e8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80061cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f000 8089 	beq.w	80062e8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	330c      	adds	r3, #12
 80061dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e0:	e853 3f00 	ldrex	r3, [r3]
 80061e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80061e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	330c      	adds	r3, #12
 80061f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80061fa:	647a      	str	r2, [r7, #68]	; 0x44
 80061fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006200:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006202:	e841 2300 	strex	r3, r2, [r1]
 8006206:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1e3      	bne.n	80061d6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	3314      	adds	r3, #20
 8006214:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	e853 3f00 	ldrex	r3, [r3]
 800621c:	623b      	str	r3, [r7, #32]
   return(result);
 800621e:	6a3b      	ldr	r3, [r7, #32]
 8006220:	f023 0301 	bic.w	r3, r3, #1
 8006224:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	3314      	adds	r3, #20
 800622e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006232:	633a      	str	r2, [r7, #48]	; 0x30
 8006234:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006236:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800623a:	e841 2300 	strex	r3, r2, [r1]
 800623e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006242:	2b00      	cmp	r3, #0
 8006244:	d1e3      	bne.n	800620e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2220      	movs	r2, #32
 800624a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	330c      	adds	r3, #12
 800625a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	e853 3f00 	ldrex	r3, [r3]
 8006262:	60fb      	str	r3, [r7, #12]
   return(result);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f023 0310 	bic.w	r3, r3, #16
 800626a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	330c      	adds	r3, #12
 8006274:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006278:	61fa      	str	r2, [r7, #28]
 800627a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627c:	69b9      	ldr	r1, [r7, #24]
 800627e:	69fa      	ldr	r2, [r7, #28]
 8006280:	e841 2300 	strex	r3, r2, [r1]
 8006284:	617b      	str	r3, [r7, #20]
   return(result);
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1e3      	bne.n	8006254 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2202      	movs	r2, #2
 8006290:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006292:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006296:	4619      	mov	r1, r3
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 f83b 	bl	8006314 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800629e:	e023      	b.n	80062e8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80062a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d009      	beq.n	80062c0 <HAL_UART_IRQHandler+0x4f4>
 80062ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d003      	beq.n	80062c0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 f978 	bl	80065ae <UART_Transmit_IT>
    return;
 80062be:	e014      	b.n	80062ea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80062c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00e      	beq.n	80062ea <HAL_UART_IRQHandler+0x51e>
 80062cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d008      	beq.n	80062ea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 f9b7 	bl	800664c <UART_EndTransmit_IT>
    return;
 80062de:	e004      	b.n	80062ea <HAL_UART_IRQHandler+0x51e>
    return;
 80062e0:	bf00      	nop
 80062e2:	e002      	b.n	80062ea <HAL_UART_IRQHandler+0x51e>
      return;
 80062e4:	bf00      	nop
 80062e6:	e000      	b.n	80062ea <HAL_UART_IRQHandler+0x51e>
      return;
 80062e8:	bf00      	nop
  }
}
 80062ea:	37e8      	adds	r7, #232	; 0xe8
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80062f8:	bf00      	nop
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bc80      	pop	{r7}
 8006300:	4770      	bx	lr

08006302 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006302:	b480      	push	{r7}
 8006304:	b083      	sub	sp, #12
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800630a:	bf00      	nop
 800630c:	370c      	adds	r7, #12
 800630e:	46bd      	mov	sp, r7
 8006310:	bc80      	pop	{r7}
 8006312:	4770      	bx	lr

08006314 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	460b      	mov	r3, r1
 800631e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006320:	bf00      	nop
 8006322:	370c      	adds	r7, #12
 8006324:	46bd      	mov	sp, r7
 8006326:	bc80      	pop	{r7}
 8006328:	4770      	bx	lr

0800632a <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b090      	sub	sp, #64	; 0x40
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006336:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 0320 	and.w	r3, r3, #32
 8006342:	2b00      	cmp	r3, #0
 8006344:	d137      	bne.n	80063b6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006348:	2200      	movs	r2, #0
 800634a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800634c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	3314      	adds	r3, #20
 8006352:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006356:	e853 3f00 	ldrex	r3, [r3]
 800635a:	623b      	str	r3, [r7, #32]
   return(result);
 800635c:	6a3b      	ldr	r3, [r7, #32]
 800635e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006362:	63bb      	str	r3, [r7, #56]	; 0x38
 8006364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	3314      	adds	r3, #20
 800636a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800636c:	633a      	str	r2, [r7, #48]	; 0x30
 800636e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006370:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006372:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006374:	e841 2300 	strex	r3, r2, [r1]
 8006378:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800637a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637c:	2b00      	cmp	r3, #0
 800637e:	d1e5      	bne.n	800634c <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	330c      	adds	r3, #12
 8006386:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	e853 3f00 	ldrex	r3, [r3]
 800638e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006396:	637b      	str	r3, [r7, #52]	; 0x34
 8006398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	330c      	adds	r3, #12
 800639e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063a0:	61fa      	str	r2, [r7, #28]
 80063a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a4:	69b9      	ldr	r1, [r7, #24]
 80063a6:	69fa      	ldr	r2, [r7, #28]
 80063a8:	e841 2300 	strex	r3, r2, [r1]
 80063ac:	617b      	str	r3, [r7, #20]
   return(result);
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1e5      	bne.n	8006380 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80063b4:	e002      	b.n	80063bc <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80063b6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80063b8:	f7fa fb7a 	bl	8000ab0 <HAL_UART_TxCpltCallback>
}
 80063bc:	bf00      	nop
 80063be:	3740      	adds	r7, #64	; 0x40
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	f7fa fb7e 	bl	8000ad4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063d8:	bf00      	nop
 80063da:	3710      	adds	r7, #16
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b084      	sub	sp, #16
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80063e8:	2300      	movs	r3, #0
 80063ea:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	695b      	ldr	r3, [r3, #20]
 80063f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	bf14      	ite	ne
 8006400:	2301      	movne	r3, #1
 8006402:	2300      	moveq	r3, #0
 8006404:	b2db      	uxtb	r3, r3
 8006406:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800640e:	b2db      	uxtb	r3, r3
 8006410:	2b21      	cmp	r3, #33	; 0x21
 8006412:	d108      	bne.n	8006426 <UART_DMAError+0x46>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d005      	beq.n	8006426 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	2200      	movs	r2, #0
 800641e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006420:	68b8      	ldr	r0, [r7, #8]
 8006422:	f000 f827 	bl	8006474 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	695b      	ldr	r3, [r3, #20]
 800642c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006430:	2b00      	cmp	r3, #0
 8006432:	bf14      	ite	ne
 8006434:	2301      	movne	r3, #1
 8006436:	2300      	moveq	r3, #0
 8006438:	b2db      	uxtb	r3, r3
 800643a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006442:	b2db      	uxtb	r3, r3
 8006444:	2b22      	cmp	r3, #34	; 0x22
 8006446:	d108      	bne.n	800645a <UART_DMAError+0x7a>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d005      	beq.n	800645a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	2200      	movs	r2, #0
 8006452:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006454:	68b8      	ldr	r0, [r7, #8]
 8006456:	f000 f834 	bl	80064c2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800645e:	f043 0210 	orr.w	r2, r3, #16
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006466:	68b8      	ldr	r0, [r7, #8]
 8006468:	f7ff ff4b 	bl	8006302 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800646c:	bf00      	nop
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006474:	b480      	push	{r7}
 8006476:	b089      	sub	sp, #36	; 0x24
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	330c      	adds	r3, #12
 8006482:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	e853 3f00 	ldrex	r3, [r3]
 800648a:	60bb      	str	r3, [r7, #8]
   return(result);
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006492:	61fb      	str	r3, [r7, #28]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	330c      	adds	r3, #12
 800649a:	69fa      	ldr	r2, [r7, #28]
 800649c:	61ba      	str	r2, [r7, #24]
 800649e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064a0:	6979      	ldr	r1, [r7, #20]
 80064a2:	69ba      	ldr	r2, [r7, #24]
 80064a4:	e841 2300 	strex	r3, r2, [r1]
 80064a8:	613b      	str	r3, [r7, #16]
   return(result);
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1e5      	bne.n	800647c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2220      	movs	r2, #32
 80064b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80064b8:	bf00      	nop
 80064ba:	3724      	adds	r7, #36	; 0x24
 80064bc:	46bd      	mov	sp, r7
 80064be:	bc80      	pop	{r7}
 80064c0:	4770      	bx	lr

080064c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b095      	sub	sp, #84	; 0x54
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	330c      	adds	r3, #12
 80064d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064d4:	e853 3f00 	ldrex	r3, [r3]
 80064d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80064da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064dc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	330c      	adds	r3, #12
 80064e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064ea:	643a      	str	r2, [r7, #64]	; 0x40
 80064ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80064f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80064f2:	e841 2300 	strex	r3, r2, [r1]
 80064f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80064f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1e5      	bne.n	80064ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	3314      	adds	r3, #20
 8006504:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006506:	6a3b      	ldr	r3, [r7, #32]
 8006508:	e853 3f00 	ldrex	r3, [r3]
 800650c:	61fb      	str	r3, [r7, #28]
   return(result);
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	f023 0301 	bic.w	r3, r3, #1
 8006514:	64bb      	str	r3, [r7, #72]	; 0x48
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	3314      	adds	r3, #20
 800651c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800651e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006520:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006522:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006524:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006526:	e841 2300 	strex	r3, r2, [r1]
 800652a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800652c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652e:	2b00      	cmp	r3, #0
 8006530:	d1e5      	bne.n	80064fe <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006536:	2b01      	cmp	r3, #1
 8006538:	d119      	bne.n	800656e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	330c      	adds	r3, #12
 8006540:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	e853 3f00 	ldrex	r3, [r3]
 8006548:	60bb      	str	r3, [r7, #8]
   return(result);
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	f023 0310 	bic.w	r3, r3, #16
 8006550:	647b      	str	r3, [r7, #68]	; 0x44
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	330c      	adds	r3, #12
 8006558:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800655a:	61ba      	str	r2, [r7, #24]
 800655c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800655e:	6979      	ldr	r1, [r7, #20]
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	e841 2300 	strex	r3, r2, [r1]
 8006566:	613b      	str	r3, [r7, #16]
   return(result);
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1e5      	bne.n	800653a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2220      	movs	r2, #32
 8006572:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800657c:	bf00      	nop
 800657e:	3754      	adds	r7, #84	; 0x54
 8006580:	46bd      	mov	sp, r7
 8006582:	bc80      	pop	{r7}
 8006584:	4770      	bx	lr

08006586 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b084      	sub	sp, #16
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006592:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f7ff feae 	bl	8006302 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065a6:	bf00      	nop
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80065ae:	b480      	push	{r7}
 80065b0:	b085      	sub	sp, #20
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	2b21      	cmp	r3, #33	; 0x21
 80065c0:	d13e      	bne.n	8006640 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065ca:	d114      	bne.n	80065f6 <UART_Transmit_IT+0x48>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d110      	bne.n	80065f6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a1b      	ldr	r3, [r3, #32]
 80065d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	881b      	ldrh	r3, [r3, #0]
 80065de:	461a      	mov	r2, r3
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80065e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	1c9a      	adds	r2, r3, #2
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	621a      	str	r2, [r3, #32]
 80065f4:	e008      	b.n	8006608 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	1c59      	adds	r1, r3, #1
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	6211      	str	r1, [r2, #32]
 8006600:	781a      	ldrb	r2, [r3, #0]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800660c:	b29b      	uxth	r3, r3
 800660e:	3b01      	subs	r3, #1
 8006610:	b29b      	uxth	r3, r3
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	4619      	mov	r1, r3
 8006616:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10f      	bne.n	800663c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68da      	ldr	r2, [r3, #12]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800662a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68da      	ldr	r2, [r3, #12]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800663a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800663c:	2300      	movs	r3, #0
 800663e:	e000      	b.n	8006642 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006640:	2302      	movs	r3, #2
  }
}
 8006642:	4618      	mov	r0, r3
 8006644:	3714      	adds	r7, #20
 8006646:	46bd      	mov	sp, r7
 8006648:	bc80      	pop	{r7}
 800664a:	4770      	bx	lr

0800664c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68da      	ldr	r2, [r3, #12]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006662:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2220      	movs	r2, #32
 8006668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f7fa fa1f 	bl	8000ab0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	3708      	adds	r7, #8
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b08c      	sub	sp, #48	; 0x30
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800668a:	b2db      	uxtb	r3, r3
 800668c:	2b22      	cmp	r3, #34	; 0x22
 800668e:	f040 80ae 	bne.w	80067ee <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800669a:	d117      	bne.n	80066cc <UART_Receive_IT+0x50>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	691b      	ldr	r3, [r3, #16]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d113      	bne.n	80066cc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80066a4:	2300      	movs	r3, #0
 80066a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ac:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066be:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c4:	1c9a      	adds	r2, r3, #2
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	629a      	str	r2, [r3, #40]	; 0x28
 80066ca:	e026      	b.n	800671a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80066d2:	2300      	movs	r3, #0
 80066d4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066de:	d007      	beq.n	80066f0 <UART_Receive_IT+0x74>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d10a      	bne.n	80066fe <UART_Receive_IT+0x82>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d106      	bne.n	80066fe <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fa:	701a      	strb	r2, [r3, #0]
 80066fc:	e008      	b.n	8006710 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	b2db      	uxtb	r3, r3
 8006706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800670a:	b2da      	uxtb	r2, r3
 800670c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006714:	1c5a      	adds	r2, r3, #1
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800671e:	b29b      	uxth	r3, r3
 8006720:	3b01      	subs	r3, #1
 8006722:	b29b      	uxth	r3, r3
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	4619      	mov	r1, r3
 8006728:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800672a:	2b00      	cmp	r3, #0
 800672c:	d15d      	bne.n	80067ea <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	68da      	ldr	r2, [r3, #12]
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f022 0220 	bic.w	r2, r2, #32
 800673c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68da      	ldr	r2, [r3, #12]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800674c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	695a      	ldr	r2, [r3, #20]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f022 0201 	bic.w	r2, r2, #1
 800675c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2220      	movs	r2, #32
 8006762:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006770:	2b01      	cmp	r3, #1
 8006772:	d135      	bne.n	80067e0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	330c      	adds	r3, #12
 8006780:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	e853 3f00 	ldrex	r3, [r3]
 8006788:	613b      	str	r3, [r7, #16]
   return(result);
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	f023 0310 	bic.w	r3, r3, #16
 8006790:	627b      	str	r3, [r7, #36]	; 0x24
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	330c      	adds	r3, #12
 8006798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800679a:	623a      	str	r2, [r7, #32]
 800679c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679e:	69f9      	ldr	r1, [r7, #28]
 80067a0:	6a3a      	ldr	r2, [r7, #32]
 80067a2:	e841 2300 	strex	r3, r2, [r1]
 80067a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1e5      	bne.n	800677a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0310 	and.w	r3, r3, #16
 80067b8:	2b10      	cmp	r3, #16
 80067ba:	d10a      	bne.n	80067d2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80067bc:	2300      	movs	r3, #0
 80067be:	60fb      	str	r3, [r7, #12]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	60fb      	str	r3, [r7, #12]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	60fb      	str	r3, [r7, #12]
 80067d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80067d6:	4619      	mov	r1, r3
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f7ff fd9b 	bl	8006314 <HAL_UARTEx_RxEventCallback>
 80067de:	e002      	b.n	80067e6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f7ff fd85 	bl	80062f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80067e6:	2300      	movs	r3, #0
 80067e8:	e002      	b.n	80067f0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80067ea:	2300      	movs	r3, #0
 80067ec:	e000      	b.n	80067f0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80067ee:	2302      	movs	r3, #2
  }
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3730      	adds	r7, #48	; 0x30
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	68da      	ldr	r2, [r3, #12]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	430a      	orrs	r2, r1
 8006814:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	689a      	ldr	r2, [r3, #8]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	431a      	orrs	r2, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	695b      	ldr	r3, [r3, #20]
 8006824:	4313      	orrs	r3, r2
 8006826:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006832:	f023 030c 	bic.w	r3, r3, #12
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	6812      	ldr	r2, [r2, #0]
 800683a:	68b9      	ldr	r1, [r7, #8]
 800683c:	430b      	orrs	r3, r1
 800683e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	699a      	ldr	r2, [r3, #24]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	430a      	orrs	r2, r1
 8006854:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a2c      	ldr	r2, [pc, #176]	; (800690c <UART_SetConfig+0x114>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d103      	bne.n	8006868 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006860:	f7fe fc2e 	bl	80050c0 <HAL_RCC_GetPCLK2Freq>
 8006864:	60f8      	str	r0, [r7, #12]
 8006866:	e002      	b.n	800686e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006868:	f7fe fc16 	bl	8005098 <HAL_RCC_GetPCLK1Freq>
 800686c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800686e:	68fa      	ldr	r2, [r7, #12]
 8006870:	4613      	mov	r3, r2
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	4413      	add	r3, r2
 8006876:	009a      	lsls	r2, r3, #2
 8006878:	441a      	add	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	fbb2 f3f3 	udiv	r3, r2, r3
 8006884:	4a22      	ldr	r2, [pc, #136]	; (8006910 <UART_SetConfig+0x118>)
 8006886:	fba2 2303 	umull	r2, r3, r2, r3
 800688a:	095b      	lsrs	r3, r3, #5
 800688c:	0119      	lsls	r1, r3, #4
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	4613      	mov	r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4413      	add	r3, r2
 8006896:	009a      	lsls	r2, r3, #2
 8006898:	441a      	add	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80068a4:	4b1a      	ldr	r3, [pc, #104]	; (8006910 <UART_SetConfig+0x118>)
 80068a6:	fba3 0302 	umull	r0, r3, r3, r2
 80068aa:	095b      	lsrs	r3, r3, #5
 80068ac:	2064      	movs	r0, #100	; 0x64
 80068ae:	fb00 f303 	mul.w	r3, r0, r3
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	011b      	lsls	r3, r3, #4
 80068b6:	3332      	adds	r3, #50	; 0x32
 80068b8:	4a15      	ldr	r2, [pc, #84]	; (8006910 <UART_SetConfig+0x118>)
 80068ba:	fba2 2303 	umull	r2, r3, r2, r3
 80068be:	095b      	lsrs	r3, r3, #5
 80068c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068c4:	4419      	add	r1, r3
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	4613      	mov	r3, r2
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	4413      	add	r3, r2
 80068ce:	009a      	lsls	r2, r3, #2
 80068d0:	441a      	add	r2, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80068dc:	4b0c      	ldr	r3, [pc, #48]	; (8006910 <UART_SetConfig+0x118>)
 80068de:	fba3 0302 	umull	r0, r3, r3, r2
 80068e2:	095b      	lsrs	r3, r3, #5
 80068e4:	2064      	movs	r0, #100	; 0x64
 80068e6:	fb00 f303 	mul.w	r3, r0, r3
 80068ea:	1ad3      	subs	r3, r2, r3
 80068ec:	011b      	lsls	r3, r3, #4
 80068ee:	3332      	adds	r3, #50	; 0x32
 80068f0:	4a07      	ldr	r2, [pc, #28]	; (8006910 <UART_SetConfig+0x118>)
 80068f2:	fba2 2303 	umull	r2, r3, r2, r3
 80068f6:	095b      	lsrs	r3, r3, #5
 80068f8:	f003 020f 	and.w	r2, r3, #15
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	440a      	add	r2, r1
 8006902:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006904:	bf00      	nop
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	40013800 	.word	0x40013800
 8006910:	51eb851f 	.word	0x51eb851f

08006914 <__errno>:
 8006914:	4b01      	ldr	r3, [pc, #4]	; (800691c <__errno+0x8>)
 8006916:	6818      	ldr	r0, [r3, #0]
 8006918:	4770      	bx	lr
 800691a:	bf00      	nop
 800691c:	20000010 	.word	0x20000010

08006920 <__libc_init_array>:
 8006920:	b570      	push	{r4, r5, r6, lr}
 8006922:	2600      	movs	r6, #0
 8006924:	4d0c      	ldr	r5, [pc, #48]	; (8006958 <__libc_init_array+0x38>)
 8006926:	4c0d      	ldr	r4, [pc, #52]	; (800695c <__libc_init_array+0x3c>)
 8006928:	1b64      	subs	r4, r4, r5
 800692a:	10a4      	asrs	r4, r4, #2
 800692c:	42a6      	cmp	r6, r4
 800692e:	d109      	bne.n	8006944 <__libc_init_array+0x24>
 8006930:	f000 fc9c 	bl	800726c <_init>
 8006934:	2600      	movs	r6, #0
 8006936:	4d0a      	ldr	r5, [pc, #40]	; (8006960 <__libc_init_array+0x40>)
 8006938:	4c0a      	ldr	r4, [pc, #40]	; (8006964 <__libc_init_array+0x44>)
 800693a:	1b64      	subs	r4, r4, r5
 800693c:	10a4      	asrs	r4, r4, #2
 800693e:	42a6      	cmp	r6, r4
 8006940:	d105      	bne.n	800694e <__libc_init_array+0x2e>
 8006942:	bd70      	pop	{r4, r5, r6, pc}
 8006944:	f855 3b04 	ldr.w	r3, [r5], #4
 8006948:	4798      	blx	r3
 800694a:	3601      	adds	r6, #1
 800694c:	e7ee      	b.n	800692c <__libc_init_array+0xc>
 800694e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006952:	4798      	blx	r3
 8006954:	3601      	adds	r6, #1
 8006956:	e7f2      	b.n	800693e <__libc_init_array+0x1e>
 8006958:	08007308 	.word	0x08007308
 800695c:	08007308 	.word	0x08007308
 8006960:	08007308 	.word	0x08007308
 8006964:	0800730c 	.word	0x0800730c

08006968 <memset>:
 8006968:	4603      	mov	r3, r0
 800696a:	4402      	add	r2, r0
 800696c:	4293      	cmp	r3, r2
 800696e:	d100      	bne.n	8006972 <memset+0xa>
 8006970:	4770      	bx	lr
 8006972:	f803 1b01 	strb.w	r1, [r3], #1
 8006976:	e7f9      	b.n	800696c <memset+0x4>

08006978 <siprintf>:
 8006978:	b40e      	push	{r1, r2, r3}
 800697a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800697e:	b500      	push	{lr}
 8006980:	b09c      	sub	sp, #112	; 0x70
 8006982:	ab1d      	add	r3, sp, #116	; 0x74
 8006984:	9002      	str	r0, [sp, #8]
 8006986:	9006      	str	r0, [sp, #24]
 8006988:	9107      	str	r1, [sp, #28]
 800698a:	9104      	str	r1, [sp, #16]
 800698c:	4808      	ldr	r0, [pc, #32]	; (80069b0 <siprintf+0x38>)
 800698e:	4909      	ldr	r1, [pc, #36]	; (80069b4 <siprintf+0x3c>)
 8006990:	f853 2b04 	ldr.w	r2, [r3], #4
 8006994:	9105      	str	r1, [sp, #20]
 8006996:	6800      	ldr	r0, [r0, #0]
 8006998:	a902      	add	r1, sp, #8
 800699a:	9301      	str	r3, [sp, #4]
 800699c:	f000 f868 	bl	8006a70 <_svfiprintf_r>
 80069a0:	2200      	movs	r2, #0
 80069a2:	9b02      	ldr	r3, [sp, #8]
 80069a4:	701a      	strb	r2, [r3, #0]
 80069a6:	b01c      	add	sp, #112	; 0x70
 80069a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80069ac:	b003      	add	sp, #12
 80069ae:	4770      	bx	lr
 80069b0:	20000010 	.word	0x20000010
 80069b4:	ffff0208 	.word	0xffff0208

080069b8 <__ssputs_r>:
 80069b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069bc:	688e      	ldr	r6, [r1, #8]
 80069be:	4682      	mov	sl, r0
 80069c0:	429e      	cmp	r6, r3
 80069c2:	460c      	mov	r4, r1
 80069c4:	4690      	mov	r8, r2
 80069c6:	461f      	mov	r7, r3
 80069c8:	d838      	bhi.n	8006a3c <__ssputs_r+0x84>
 80069ca:	898a      	ldrh	r2, [r1, #12]
 80069cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80069d0:	d032      	beq.n	8006a38 <__ssputs_r+0x80>
 80069d2:	6825      	ldr	r5, [r4, #0]
 80069d4:	6909      	ldr	r1, [r1, #16]
 80069d6:	3301      	adds	r3, #1
 80069d8:	eba5 0901 	sub.w	r9, r5, r1
 80069dc:	6965      	ldr	r5, [r4, #20]
 80069de:	444b      	add	r3, r9
 80069e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80069e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80069e8:	106d      	asrs	r5, r5, #1
 80069ea:	429d      	cmp	r5, r3
 80069ec:	bf38      	it	cc
 80069ee:	461d      	movcc	r5, r3
 80069f0:	0553      	lsls	r3, r2, #21
 80069f2:	d531      	bpl.n	8006a58 <__ssputs_r+0xa0>
 80069f4:	4629      	mov	r1, r5
 80069f6:	f000 fb6f 	bl	80070d8 <_malloc_r>
 80069fa:	4606      	mov	r6, r0
 80069fc:	b950      	cbnz	r0, 8006a14 <__ssputs_r+0x5c>
 80069fe:	230c      	movs	r3, #12
 8006a00:	f04f 30ff 	mov.w	r0, #4294967295
 8006a04:	f8ca 3000 	str.w	r3, [sl]
 8006a08:	89a3      	ldrh	r3, [r4, #12]
 8006a0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a0e:	81a3      	strh	r3, [r4, #12]
 8006a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a14:	464a      	mov	r2, r9
 8006a16:	6921      	ldr	r1, [r4, #16]
 8006a18:	f000 face 	bl	8006fb8 <memcpy>
 8006a1c:	89a3      	ldrh	r3, [r4, #12]
 8006a1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a26:	81a3      	strh	r3, [r4, #12]
 8006a28:	6126      	str	r6, [r4, #16]
 8006a2a:	444e      	add	r6, r9
 8006a2c:	6026      	str	r6, [r4, #0]
 8006a2e:	463e      	mov	r6, r7
 8006a30:	6165      	str	r5, [r4, #20]
 8006a32:	eba5 0509 	sub.w	r5, r5, r9
 8006a36:	60a5      	str	r5, [r4, #8]
 8006a38:	42be      	cmp	r6, r7
 8006a3a:	d900      	bls.n	8006a3e <__ssputs_r+0x86>
 8006a3c:	463e      	mov	r6, r7
 8006a3e:	4632      	mov	r2, r6
 8006a40:	4641      	mov	r1, r8
 8006a42:	6820      	ldr	r0, [r4, #0]
 8006a44:	f000 fac6 	bl	8006fd4 <memmove>
 8006a48:	68a3      	ldr	r3, [r4, #8]
 8006a4a:	2000      	movs	r0, #0
 8006a4c:	1b9b      	subs	r3, r3, r6
 8006a4e:	60a3      	str	r3, [r4, #8]
 8006a50:	6823      	ldr	r3, [r4, #0]
 8006a52:	4433      	add	r3, r6
 8006a54:	6023      	str	r3, [r4, #0]
 8006a56:	e7db      	b.n	8006a10 <__ssputs_r+0x58>
 8006a58:	462a      	mov	r2, r5
 8006a5a:	f000 fbb1 	bl	80071c0 <_realloc_r>
 8006a5e:	4606      	mov	r6, r0
 8006a60:	2800      	cmp	r0, #0
 8006a62:	d1e1      	bne.n	8006a28 <__ssputs_r+0x70>
 8006a64:	4650      	mov	r0, sl
 8006a66:	6921      	ldr	r1, [r4, #16]
 8006a68:	f000 face 	bl	8007008 <_free_r>
 8006a6c:	e7c7      	b.n	80069fe <__ssputs_r+0x46>
	...

08006a70 <_svfiprintf_r>:
 8006a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a74:	4698      	mov	r8, r3
 8006a76:	898b      	ldrh	r3, [r1, #12]
 8006a78:	4607      	mov	r7, r0
 8006a7a:	061b      	lsls	r3, r3, #24
 8006a7c:	460d      	mov	r5, r1
 8006a7e:	4614      	mov	r4, r2
 8006a80:	b09d      	sub	sp, #116	; 0x74
 8006a82:	d50e      	bpl.n	8006aa2 <_svfiprintf_r+0x32>
 8006a84:	690b      	ldr	r3, [r1, #16]
 8006a86:	b963      	cbnz	r3, 8006aa2 <_svfiprintf_r+0x32>
 8006a88:	2140      	movs	r1, #64	; 0x40
 8006a8a:	f000 fb25 	bl	80070d8 <_malloc_r>
 8006a8e:	6028      	str	r0, [r5, #0]
 8006a90:	6128      	str	r0, [r5, #16]
 8006a92:	b920      	cbnz	r0, 8006a9e <_svfiprintf_r+0x2e>
 8006a94:	230c      	movs	r3, #12
 8006a96:	603b      	str	r3, [r7, #0]
 8006a98:	f04f 30ff 	mov.w	r0, #4294967295
 8006a9c:	e0d1      	b.n	8006c42 <_svfiprintf_r+0x1d2>
 8006a9e:	2340      	movs	r3, #64	; 0x40
 8006aa0:	616b      	str	r3, [r5, #20]
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	9309      	str	r3, [sp, #36]	; 0x24
 8006aa6:	2320      	movs	r3, #32
 8006aa8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006aac:	2330      	movs	r3, #48	; 0x30
 8006aae:	f04f 0901 	mov.w	r9, #1
 8006ab2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ab6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006c5c <_svfiprintf_r+0x1ec>
 8006aba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006abe:	4623      	mov	r3, r4
 8006ac0:	469a      	mov	sl, r3
 8006ac2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ac6:	b10a      	cbz	r2, 8006acc <_svfiprintf_r+0x5c>
 8006ac8:	2a25      	cmp	r2, #37	; 0x25
 8006aca:	d1f9      	bne.n	8006ac0 <_svfiprintf_r+0x50>
 8006acc:	ebba 0b04 	subs.w	fp, sl, r4
 8006ad0:	d00b      	beq.n	8006aea <_svfiprintf_r+0x7a>
 8006ad2:	465b      	mov	r3, fp
 8006ad4:	4622      	mov	r2, r4
 8006ad6:	4629      	mov	r1, r5
 8006ad8:	4638      	mov	r0, r7
 8006ada:	f7ff ff6d 	bl	80069b8 <__ssputs_r>
 8006ade:	3001      	adds	r0, #1
 8006ae0:	f000 80aa 	beq.w	8006c38 <_svfiprintf_r+0x1c8>
 8006ae4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ae6:	445a      	add	r2, fp
 8006ae8:	9209      	str	r2, [sp, #36]	; 0x24
 8006aea:	f89a 3000 	ldrb.w	r3, [sl]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	f000 80a2 	beq.w	8006c38 <_svfiprintf_r+0x1c8>
 8006af4:	2300      	movs	r3, #0
 8006af6:	f04f 32ff 	mov.w	r2, #4294967295
 8006afa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006afe:	f10a 0a01 	add.w	sl, sl, #1
 8006b02:	9304      	str	r3, [sp, #16]
 8006b04:	9307      	str	r3, [sp, #28]
 8006b06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b0a:	931a      	str	r3, [sp, #104]	; 0x68
 8006b0c:	4654      	mov	r4, sl
 8006b0e:	2205      	movs	r2, #5
 8006b10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b14:	4851      	ldr	r0, [pc, #324]	; (8006c5c <_svfiprintf_r+0x1ec>)
 8006b16:	f000 fa41 	bl	8006f9c <memchr>
 8006b1a:	9a04      	ldr	r2, [sp, #16]
 8006b1c:	b9d8      	cbnz	r0, 8006b56 <_svfiprintf_r+0xe6>
 8006b1e:	06d0      	lsls	r0, r2, #27
 8006b20:	bf44      	itt	mi
 8006b22:	2320      	movmi	r3, #32
 8006b24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b28:	0711      	lsls	r1, r2, #28
 8006b2a:	bf44      	itt	mi
 8006b2c:	232b      	movmi	r3, #43	; 0x2b
 8006b2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b32:	f89a 3000 	ldrb.w	r3, [sl]
 8006b36:	2b2a      	cmp	r3, #42	; 0x2a
 8006b38:	d015      	beq.n	8006b66 <_svfiprintf_r+0xf6>
 8006b3a:	4654      	mov	r4, sl
 8006b3c:	2000      	movs	r0, #0
 8006b3e:	f04f 0c0a 	mov.w	ip, #10
 8006b42:	9a07      	ldr	r2, [sp, #28]
 8006b44:	4621      	mov	r1, r4
 8006b46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b4a:	3b30      	subs	r3, #48	; 0x30
 8006b4c:	2b09      	cmp	r3, #9
 8006b4e:	d94e      	bls.n	8006bee <_svfiprintf_r+0x17e>
 8006b50:	b1b0      	cbz	r0, 8006b80 <_svfiprintf_r+0x110>
 8006b52:	9207      	str	r2, [sp, #28]
 8006b54:	e014      	b.n	8006b80 <_svfiprintf_r+0x110>
 8006b56:	eba0 0308 	sub.w	r3, r0, r8
 8006b5a:	fa09 f303 	lsl.w	r3, r9, r3
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	46a2      	mov	sl, r4
 8006b62:	9304      	str	r3, [sp, #16]
 8006b64:	e7d2      	b.n	8006b0c <_svfiprintf_r+0x9c>
 8006b66:	9b03      	ldr	r3, [sp, #12]
 8006b68:	1d19      	adds	r1, r3, #4
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	9103      	str	r1, [sp, #12]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	bfbb      	ittet	lt
 8006b72:	425b      	neglt	r3, r3
 8006b74:	f042 0202 	orrlt.w	r2, r2, #2
 8006b78:	9307      	strge	r3, [sp, #28]
 8006b7a:	9307      	strlt	r3, [sp, #28]
 8006b7c:	bfb8      	it	lt
 8006b7e:	9204      	strlt	r2, [sp, #16]
 8006b80:	7823      	ldrb	r3, [r4, #0]
 8006b82:	2b2e      	cmp	r3, #46	; 0x2e
 8006b84:	d10c      	bne.n	8006ba0 <_svfiprintf_r+0x130>
 8006b86:	7863      	ldrb	r3, [r4, #1]
 8006b88:	2b2a      	cmp	r3, #42	; 0x2a
 8006b8a:	d135      	bne.n	8006bf8 <_svfiprintf_r+0x188>
 8006b8c:	9b03      	ldr	r3, [sp, #12]
 8006b8e:	3402      	adds	r4, #2
 8006b90:	1d1a      	adds	r2, r3, #4
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	9203      	str	r2, [sp, #12]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	bfb8      	it	lt
 8006b9a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b9e:	9305      	str	r3, [sp, #20]
 8006ba0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006c60 <_svfiprintf_r+0x1f0>
 8006ba4:	2203      	movs	r2, #3
 8006ba6:	4650      	mov	r0, sl
 8006ba8:	7821      	ldrb	r1, [r4, #0]
 8006baa:	f000 f9f7 	bl	8006f9c <memchr>
 8006bae:	b140      	cbz	r0, 8006bc2 <_svfiprintf_r+0x152>
 8006bb0:	2340      	movs	r3, #64	; 0x40
 8006bb2:	eba0 000a 	sub.w	r0, r0, sl
 8006bb6:	fa03 f000 	lsl.w	r0, r3, r0
 8006bba:	9b04      	ldr	r3, [sp, #16]
 8006bbc:	3401      	adds	r4, #1
 8006bbe:	4303      	orrs	r3, r0
 8006bc0:	9304      	str	r3, [sp, #16]
 8006bc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bc6:	2206      	movs	r2, #6
 8006bc8:	4826      	ldr	r0, [pc, #152]	; (8006c64 <_svfiprintf_r+0x1f4>)
 8006bca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006bce:	f000 f9e5 	bl	8006f9c <memchr>
 8006bd2:	2800      	cmp	r0, #0
 8006bd4:	d038      	beq.n	8006c48 <_svfiprintf_r+0x1d8>
 8006bd6:	4b24      	ldr	r3, [pc, #144]	; (8006c68 <_svfiprintf_r+0x1f8>)
 8006bd8:	bb1b      	cbnz	r3, 8006c22 <_svfiprintf_r+0x1b2>
 8006bda:	9b03      	ldr	r3, [sp, #12]
 8006bdc:	3307      	adds	r3, #7
 8006bde:	f023 0307 	bic.w	r3, r3, #7
 8006be2:	3308      	adds	r3, #8
 8006be4:	9303      	str	r3, [sp, #12]
 8006be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006be8:	4433      	add	r3, r6
 8006bea:	9309      	str	r3, [sp, #36]	; 0x24
 8006bec:	e767      	b.n	8006abe <_svfiprintf_r+0x4e>
 8006bee:	460c      	mov	r4, r1
 8006bf0:	2001      	movs	r0, #1
 8006bf2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006bf6:	e7a5      	b.n	8006b44 <_svfiprintf_r+0xd4>
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	f04f 0c0a 	mov.w	ip, #10
 8006bfe:	4619      	mov	r1, r3
 8006c00:	3401      	adds	r4, #1
 8006c02:	9305      	str	r3, [sp, #20]
 8006c04:	4620      	mov	r0, r4
 8006c06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c0a:	3a30      	subs	r2, #48	; 0x30
 8006c0c:	2a09      	cmp	r2, #9
 8006c0e:	d903      	bls.n	8006c18 <_svfiprintf_r+0x1a8>
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d0c5      	beq.n	8006ba0 <_svfiprintf_r+0x130>
 8006c14:	9105      	str	r1, [sp, #20]
 8006c16:	e7c3      	b.n	8006ba0 <_svfiprintf_r+0x130>
 8006c18:	4604      	mov	r4, r0
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c20:	e7f0      	b.n	8006c04 <_svfiprintf_r+0x194>
 8006c22:	ab03      	add	r3, sp, #12
 8006c24:	9300      	str	r3, [sp, #0]
 8006c26:	462a      	mov	r2, r5
 8006c28:	4638      	mov	r0, r7
 8006c2a:	4b10      	ldr	r3, [pc, #64]	; (8006c6c <_svfiprintf_r+0x1fc>)
 8006c2c:	a904      	add	r1, sp, #16
 8006c2e:	f3af 8000 	nop.w
 8006c32:	1c42      	adds	r2, r0, #1
 8006c34:	4606      	mov	r6, r0
 8006c36:	d1d6      	bne.n	8006be6 <_svfiprintf_r+0x176>
 8006c38:	89ab      	ldrh	r3, [r5, #12]
 8006c3a:	065b      	lsls	r3, r3, #25
 8006c3c:	f53f af2c 	bmi.w	8006a98 <_svfiprintf_r+0x28>
 8006c40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c42:	b01d      	add	sp, #116	; 0x74
 8006c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c48:	ab03      	add	r3, sp, #12
 8006c4a:	9300      	str	r3, [sp, #0]
 8006c4c:	462a      	mov	r2, r5
 8006c4e:	4638      	mov	r0, r7
 8006c50:	4b06      	ldr	r3, [pc, #24]	; (8006c6c <_svfiprintf_r+0x1fc>)
 8006c52:	a904      	add	r1, sp, #16
 8006c54:	f000 f87c 	bl	8006d50 <_printf_i>
 8006c58:	e7eb      	b.n	8006c32 <_svfiprintf_r+0x1c2>
 8006c5a:	bf00      	nop
 8006c5c:	080072d2 	.word	0x080072d2
 8006c60:	080072d8 	.word	0x080072d8
 8006c64:	080072dc 	.word	0x080072dc
 8006c68:	00000000 	.word	0x00000000
 8006c6c:	080069b9 	.word	0x080069b9

08006c70 <_printf_common>:
 8006c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c74:	4616      	mov	r6, r2
 8006c76:	4699      	mov	r9, r3
 8006c78:	688a      	ldr	r2, [r1, #8]
 8006c7a:	690b      	ldr	r3, [r1, #16]
 8006c7c:	4607      	mov	r7, r0
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	bfb8      	it	lt
 8006c82:	4613      	movlt	r3, r2
 8006c84:	6033      	str	r3, [r6, #0]
 8006c86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c8a:	460c      	mov	r4, r1
 8006c8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c90:	b10a      	cbz	r2, 8006c96 <_printf_common+0x26>
 8006c92:	3301      	adds	r3, #1
 8006c94:	6033      	str	r3, [r6, #0]
 8006c96:	6823      	ldr	r3, [r4, #0]
 8006c98:	0699      	lsls	r1, r3, #26
 8006c9a:	bf42      	ittt	mi
 8006c9c:	6833      	ldrmi	r3, [r6, #0]
 8006c9e:	3302      	addmi	r3, #2
 8006ca0:	6033      	strmi	r3, [r6, #0]
 8006ca2:	6825      	ldr	r5, [r4, #0]
 8006ca4:	f015 0506 	ands.w	r5, r5, #6
 8006ca8:	d106      	bne.n	8006cb8 <_printf_common+0x48>
 8006caa:	f104 0a19 	add.w	sl, r4, #25
 8006cae:	68e3      	ldr	r3, [r4, #12]
 8006cb0:	6832      	ldr	r2, [r6, #0]
 8006cb2:	1a9b      	subs	r3, r3, r2
 8006cb4:	42ab      	cmp	r3, r5
 8006cb6:	dc28      	bgt.n	8006d0a <_printf_common+0x9a>
 8006cb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006cbc:	1e13      	subs	r3, r2, #0
 8006cbe:	6822      	ldr	r2, [r4, #0]
 8006cc0:	bf18      	it	ne
 8006cc2:	2301      	movne	r3, #1
 8006cc4:	0692      	lsls	r2, r2, #26
 8006cc6:	d42d      	bmi.n	8006d24 <_printf_common+0xb4>
 8006cc8:	4649      	mov	r1, r9
 8006cca:	4638      	mov	r0, r7
 8006ccc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006cd0:	47c0      	blx	r8
 8006cd2:	3001      	adds	r0, #1
 8006cd4:	d020      	beq.n	8006d18 <_printf_common+0xa8>
 8006cd6:	6823      	ldr	r3, [r4, #0]
 8006cd8:	68e5      	ldr	r5, [r4, #12]
 8006cda:	f003 0306 	and.w	r3, r3, #6
 8006cde:	2b04      	cmp	r3, #4
 8006ce0:	bf18      	it	ne
 8006ce2:	2500      	movne	r5, #0
 8006ce4:	6832      	ldr	r2, [r6, #0]
 8006ce6:	f04f 0600 	mov.w	r6, #0
 8006cea:	68a3      	ldr	r3, [r4, #8]
 8006cec:	bf08      	it	eq
 8006cee:	1aad      	subeq	r5, r5, r2
 8006cf0:	6922      	ldr	r2, [r4, #16]
 8006cf2:	bf08      	it	eq
 8006cf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	bfc4      	itt	gt
 8006cfc:	1a9b      	subgt	r3, r3, r2
 8006cfe:	18ed      	addgt	r5, r5, r3
 8006d00:	341a      	adds	r4, #26
 8006d02:	42b5      	cmp	r5, r6
 8006d04:	d11a      	bne.n	8006d3c <_printf_common+0xcc>
 8006d06:	2000      	movs	r0, #0
 8006d08:	e008      	b.n	8006d1c <_printf_common+0xac>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	4652      	mov	r2, sl
 8006d0e:	4649      	mov	r1, r9
 8006d10:	4638      	mov	r0, r7
 8006d12:	47c0      	blx	r8
 8006d14:	3001      	adds	r0, #1
 8006d16:	d103      	bne.n	8006d20 <_printf_common+0xb0>
 8006d18:	f04f 30ff 	mov.w	r0, #4294967295
 8006d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d20:	3501      	adds	r5, #1
 8006d22:	e7c4      	b.n	8006cae <_printf_common+0x3e>
 8006d24:	2030      	movs	r0, #48	; 0x30
 8006d26:	18e1      	adds	r1, r4, r3
 8006d28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d2c:	1c5a      	adds	r2, r3, #1
 8006d2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d32:	4422      	add	r2, r4
 8006d34:	3302      	adds	r3, #2
 8006d36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d3a:	e7c5      	b.n	8006cc8 <_printf_common+0x58>
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	4622      	mov	r2, r4
 8006d40:	4649      	mov	r1, r9
 8006d42:	4638      	mov	r0, r7
 8006d44:	47c0      	blx	r8
 8006d46:	3001      	adds	r0, #1
 8006d48:	d0e6      	beq.n	8006d18 <_printf_common+0xa8>
 8006d4a:	3601      	adds	r6, #1
 8006d4c:	e7d9      	b.n	8006d02 <_printf_common+0x92>
	...

08006d50 <_printf_i>:
 8006d50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d54:	7e0f      	ldrb	r7, [r1, #24]
 8006d56:	4691      	mov	r9, r2
 8006d58:	2f78      	cmp	r7, #120	; 0x78
 8006d5a:	4680      	mov	r8, r0
 8006d5c:	460c      	mov	r4, r1
 8006d5e:	469a      	mov	sl, r3
 8006d60:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d66:	d807      	bhi.n	8006d78 <_printf_i+0x28>
 8006d68:	2f62      	cmp	r7, #98	; 0x62
 8006d6a:	d80a      	bhi.n	8006d82 <_printf_i+0x32>
 8006d6c:	2f00      	cmp	r7, #0
 8006d6e:	f000 80d9 	beq.w	8006f24 <_printf_i+0x1d4>
 8006d72:	2f58      	cmp	r7, #88	; 0x58
 8006d74:	f000 80a4 	beq.w	8006ec0 <_printf_i+0x170>
 8006d78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d80:	e03a      	b.n	8006df8 <_printf_i+0xa8>
 8006d82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d86:	2b15      	cmp	r3, #21
 8006d88:	d8f6      	bhi.n	8006d78 <_printf_i+0x28>
 8006d8a:	a101      	add	r1, pc, #4	; (adr r1, 8006d90 <_printf_i+0x40>)
 8006d8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d90:	08006de9 	.word	0x08006de9
 8006d94:	08006dfd 	.word	0x08006dfd
 8006d98:	08006d79 	.word	0x08006d79
 8006d9c:	08006d79 	.word	0x08006d79
 8006da0:	08006d79 	.word	0x08006d79
 8006da4:	08006d79 	.word	0x08006d79
 8006da8:	08006dfd 	.word	0x08006dfd
 8006dac:	08006d79 	.word	0x08006d79
 8006db0:	08006d79 	.word	0x08006d79
 8006db4:	08006d79 	.word	0x08006d79
 8006db8:	08006d79 	.word	0x08006d79
 8006dbc:	08006f0b 	.word	0x08006f0b
 8006dc0:	08006e2d 	.word	0x08006e2d
 8006dc4:	08006eed 	.word	0x08006eed
 8006dc8:	08006d79 	.word	0x08006d79
 8006dcc:	08006d79 	.word	0x08006d79
 8006dd0:	08006f2d 	.word	0x08006f2d
 8006dd4:	08006d79 	.word	0x08006d79
 8006dd8:	08006e2d 	.word	0x08006e2d
 8006ddc:	08006d79 	.word	0x08006d79
 8006de0:	08006d79 	.word	0x08006d79
 8006de4:	08006ef5 	.word	0x08006ef5
 8006de8:	682b      	ldr	r3, [r5, #0]
 8006dea:	1d1a      	adds	r2, r3, #4
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	602a      	str	r2, [r5, #0]
 8006df0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006df4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e0a4      	b.n	8006f46 <_printf_i+0x1f6>
 8006dfc:	6820      	ldr	r0, [r4, #0]
 8006dfe:	6829      	ldr	r1, [r5, #0]
 8006e00:	0606      	lsls	r6, r0, #24
 8006e02:	f101 0304 	add.w	r3, r1, #4
 8006e06:	d50a      	bpl.n	8006e1e <_printf_i+0xce>
 8006e08:	680e      	ldr	r6, [r1, #0]
 8006e0a:	602b      	str	r3, [r5, #0]
 8006e0c:	2e00      	cmp	r6, #0
 8006e0e:	da03      	bge.n	8006e18 <_printf_i+0xc8>
 8006e10:	232d      	movs	r3, #45	; 0x2d
 8006e12:	4276      	negs	r6, r6
 8006e14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e18:	230a      	movs	r3, #10
 8006e1a:	485e      	ldr	r0, [pc, #376]	; (8006f94 <_printf_i+0x244>)
 8006e1c:	e019      	b.n	8006e52 <_printf_i+0x102>
 8006e1e:	680e      	ldr	r6, [r1, #0]
 8006e20:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e24:	602b      	str	r3, [r5, #0]
 8006e26:	bf18      	it	ne
 8006e28:	b236      	sxthne	r6, r6
 8006e2a:	e7ef      	b.n	8006e0c <_printf_i+0xbc>
 8006e2c:	682b      	ldr	r3, [r5, #0]
 8006e2e:	6820      	ldr	r0, [r4, #0]
 8006e30:	1d19      	adds	r1, r3, #4
 8006e32:	6029      	str	r1, [r5, #0]
 8006e34:	0601      	lsls	r1, r0, #24
 8006e36:	d501      	bpl.n	8006e3c <_printf_i+0xec>
 8006e38:	681e      	ldr	r6, [r3, #0]
 8006e3a:	e002      	b.n	8006e42 <_printf_i+0xf2>
 8006e3c:	0646      	lsls	r6, r0, #25
 8006e3e:	d5fb      	bpl.n	8006e38 <_printf_i+0xe8>
 8006e40:	881e      	ldrh	r6, [r3, #0]
 8006e42:	2f6f      	cmp	r7, #111	; 0x6f
 8006e44:	bf0c      	ite	eq
 8006e46:	2308      	moveq	r3, #8
 8006e48:	230a      	movne	r3, #10
 8006e4a:	4852      	ldr	r0, [pc, #328]	; (8006f94 <_printf_i+0x244>)
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e52:	6865      	ldr	r5, [r4, #4]
 8006e54:	2d00      	cmp	r5, #0
 8006e56:	bfa8      	it	ge
 8006e58:	6821      	ldrge	r1, [r4, #0]
 8006e5a:	60a5      	str	r5, [r4, #8]
 8006e5c:	bfa4      	itt	ge
 8006e5e:	f021 0104 	bicge.w	r1, r1, #4
 8006e62:	6021      	strge	r1, [r4, #0]
 8006e64:	b90e      	cbnz	r6, 8006e6a <_printf_i+0x11a>
 8006e66:	2d00      	cmp	r5, #0
 8006e68:	d04d      	beq.n	8006f06 <_printf_i+0x1b6>
 8006e6a:	4615      	mov	r5, r2
 8006e6c:	fbb6 f1f3 	udiv	r1, r6, r3
 8006e70:	fb03 6711 	mls	r7, r3, r1, r6
 8006e74:	5dc7      	ldrb	r7, [r0, r7]
 8006e76:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006e7a:	4637      	mov	r7, r6
 8006e7c:	42bb      	cmp	r3, r7
 8006e7e:	460e      	mov	r6, r1
 8006e80:	d9f4      	bls.n	8006e6c <_printf_i+0x11c>
 8006e82:	2b08      	cmp	r3, #8
 8006e84:	d10b      	bne.n	8006e9e <_printf_i+0x14e>
 8006e86:	6823      	ldr	r3, [r4, #0]
 8006e88:	07de      	lsls	r6, r3, #31
 8006e8a:	d508      	bpl.n	8006e9e <_printf_i+0x14e>
 8006e8c:	6923      	ldr	r3, [r4, #16]
 8006e8e:	6861      	ldr	r1, [r4, #4]
 8006e90:	4299      	cmp	r1, r3
 8006e92:	bfde      	ittt	le
 8006e94:	2330      	movle	r3, #48	; 0x30
 8006e96:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006e9a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006e9e:	1b52      	subs	r2, r2, r5
 8006ea0:	6122      	str	r2, [r4, #16]
 8006ea2:	464b      	mov	r3, r9
 8006ea4:	4621      	mov	r1, r4
 8006ea6:	4640      	mov	r0, r8
 8006ea8:	f8cd a000 	str.w	sl, [sp]
 8006eac:	aa03      	add	r2, sp, #12
 8006eae:	f7ff fedf 	bl	8006c70 <_printf_common>
 8006eb2:	3001      	adds	r0, #1
 8006eb4:	d14c      	bne.n	8006f50 <_printf_i+0x200>
 8006eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8006eba:	b004      	add	sp, #16
 8006ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ec0:	4834      	ldr	r0, [pc, #208]	; (8006f94 <_printf_i+0x244>)
 8006ec2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006ec6:	6829      	ldr	r1, [r5, #0]
 8006ec8:	6823      	ldr	r3, [r4, #0]
 8006eca:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ece:	6029      	str	r1, [r5, #0]
 8006ed0:	061d      	lsls	r5, r3, #24
 8006ed2:	d514      	bpl.n	8006efe <_printf_i+0x1ae>
 8006ed4:	07df      	lsls	r7, r3, #31
 8006ed6:	bf44      	itt	mi
 8006ed8:	f043 0320 	orrmi.w	r3, r3, #32
 8006edc:	6023      	strmi	r3, [r4, #0]
 8006ede:	b91e      	cbnz	r6, 8006ee8 <_printf_i+0x198>
 8006ee0:	6823      	ldr	r3, [r4, #0]
 8006ee2:	f023 0320 	bic.w	r3, r3, #32
 8006ee6:	6023      	str	r3, [r4, #0]
 8006ee8:	2310      	movs	r3, #16
 8006eea:	e7af      	b.n	8006e4c <_printf_i+0xfc>
 8006eec:	6823      	ldr	r3, [r4, #0]
 8006eee:	f043 0320 	orr.w	r3, r3, #32
 8006ef2:	6023      	str	r3, [r4, #0]
 8006ef4:	2378      	movs	r3, #120	; 0x78
 8006ef6:	4828      	ldr	r0, [pc, #160]	; (8006f98 <_printf_i+0x248>)
 8006ef8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006efc:	e7e3      	b.n	8006ec6 <_printf_i+0x176>
 8006efe:	0659      	lsls	r1, r3, #25
 8006f00:	bf48      	it	mi
 8006f02:	b2b6      	uxthmi	r6, r6
 8006f04:	e7e6      	b.n	8006ed4 <_printf_i+0x184>
 8006f06:	4615      	mov	r5, r2
 8006f08:	e7bb      	b.n	8006e82 <_printf_i+0x132>
 8006f0a:	682b      	ldr	r3, [r5, #0]
 8006f0c:	6826      	ldr	r6, [r4, #0]
 8006f0e:	1d18      	adds	r0, r3, #4
 8006f10:	6961      	ldr	r1, [r4, #20]
 8006f12:	6028      	str	r0, [r5, #0]
 8006f14:	0635      	lsls	r5, r6, #24
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	d501      	bpl.n	8006f1e <_printf_i+0x1ce>
 8006f1a:	6019      	str	r1, [r3, #0]
 8006f1c:	e002      	b.n	8006f24 <_printf_i+0x1d4>
 8006f1e:	0670      	lsls	r0, r6, #25
 8006f20:	d5fb      	bpl.n	8006f1a <_printf_i+0x1ca>
 8006f22:	8019      	strh	r1, [r3, #0]
 8006f24:	2300      	movs	r3, #0
 8006f26:	4615      	mov	r5, r2
 8006f28:	6123      	str	r3, [r4, #16]
 8006f2a:	e7ba      	b.n	8006ea2 <_printf_i+0x152>
 8006f2c:	682b      	ldr	r3, [r5, #0]
 8006f2e:	2100      	movs	r1, #0
 8006f30:	1d1a      	adds	r2, r3, #4
 8006f32:	602a      	str	r2, [r5, #0]
 8006f34:	681d      	ldr	r5, [r3, #0]
 8006f36:	6862      	ldr	r2, [r4, #4]
 8006f38:	4628      	mov	r0, r5
 8006f3a:	f000 f82f 	bl	8006f9c <memchr>
 8006f3e:	b108      	cbz	r0, 8006f44 <_printf_i+0x1f4>
 8006f40:	1b40      	subs	r0, r0, r5
 8006f42:	6060      	str	r0, [r4, #4]
 8006f44:	6863      	ldr	r3, [r4, #4]
 8006f46:	6123      	str	r3, [r4, #16]
 8006f48:	2300      	movs	r3, #0
 8006f4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f4e:	e7a8      	b.n	8006ea2 <_printf_i+0x152>
 8006f50:	462a      	mov	r2, r5
 8006f52:	4649      	mov	r1, r9
 8006f54:	4640      	mov	r0, r8
 8006f56:	6923      	ldr	r3, [r4, #16]
 8006f58:	47d0      	blx	sl
 8006f5a:	3001      	adds	r0, #1
 8006f5c:	d0ab      	beq.n	8006eb6 <_printf_i+0x166>
 8006f5e:	6823      	ldr	r3, [r4, #0]
 8006f60:	079b      	lsls	r3, r3, #30
 8006f62:	d413      	bmi.n	8006f8c <_printf_i+0x23c>
 8006f64:	68e0      	ldr	r0, [r4, #12]
 8006f66:	9b03      	ldr	r3, [sp, #12]
 8006f68:	4298      	cmp	r0, r3
 8006f6a:	bfb8      	it	lt
 8006f6c:	4618      	movlt	r0, r3
 8006f6e:	e7a4      	b.n	8006eba <_printf_i+0x16a>
 8006f70:	2301      	movs	r3, #1
 8006f72:	4632      	mov	r2, r6
 8006f74:	4649      	mov	r1, r9
 8006f76:	4640      	mov	r0, r8
 8006f78:	47d0      	blx	sl
 8006f7a:	3001      	adds	r0, #1
 8006f7c:	d09b      	beq.n	8006eb6 <_printf_i+0x166>
 8006f7e:	3501      	adds	r5, #1
 8006f80:	68e3      	ldr	r3, [r4, #12]
 8006f82:	9903      	ldr	r1, [sp, #12]
 8006f84:	1a5b      	subs	r3, r3, r1
 8006f86:	42ab      	cmp	r3, r5
 8006f88:	dcf2      	bgt.n	8006f70 <_printf_i+0x220>
 8006f8a:	e7eb      	b.n	8006f64 <_printf_i+0x214>
 8006f8c:	2500      	movs	r5, #0
 8006f8e:	f104 0619 	add.w	r6, r4, #25
 8006f92:	e7f5      	b.n	8006f80 <_printf_i+0x230>
 8006f94:	080072e3 	.word	0x080072e3
 8006f98:	080072f4 	.word	0x080072f4

08006f9c <memchr>:
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	b510      	push	{r4, lr}
 8006fa0:	b2c9      	uxtb	r1, r1
 8006fa2:	4402      	add	r2, r0
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	d101      	bne.n	8006fae <memchr+0x12>
 8006faa:	2000      	movs	r0, #0
 8006fac:	e003      	b.n	8006fb6 <memchr+0x1a>
 8006fae:	7804      	ldrb	r4, [r0, #0]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	428c      	cmp	r4, r1
 8006fb4:	d1f6      	bne.n	8006fa4 <memchr+0x8>
 8006fb6:	bd10      	pop	{r4, pc}

08006fb8 <memcpy>:
 8006fb8:	440a      	add	r2, r1
 8006fba:	4291      	cmp	r1, r2
 8006fbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fc0:	d100      	bne.n	8006fc4 <memcpy+0xc>
 8006fc2:	4770      	bx	lr
 8006fc4:	b510      	push	{r4, lr}
 8006fc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fca:	4291      	cmp	r1, r2
 8006fcc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fd0:	d1f9      	bne.n	8006fc6 <memcpy+0xe>
 8006fd2:	bd10      	pop	{r4, pc}

08006fd4 <memmove>:
 8006fd4:	4288      	cmp	r0, r1
 8006fd6:	b510      	push	{r4, lr}
 8006fd8:	eb01 0402 	add.w	r4, r1, r2
 8006fdc:	d902      	bls.n	8006fe4 <memmove+0x10>
 8006fde:	4284      	cmp	r4, r0
 8006fe0:	4623      	mov	r3, r4
 8006fe2:	d807      	bhi.n	8006ff4 <memmove+0x20>
 8006fe4:	1e43      	subs	r3, r0, #1
 8006fe6:	42a1      	cmp	r1, r4
 8006fe8:	d008      	beq.n	8006ffc <memmove+0x28>
 8006fea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006fee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ff2:	e7f8      	b.n	8006fe6 <memmove+0x12>
 8006ff4:	4601      	mov	r1, r0
 8006ff6:	4402      	add	r2, r0
 8006ff8:	428a      	cmp	r2, r1
 8006ffa:	d100      	bne.n	8006ffe <memmove+0x2a>
 8006ffc:	bd10      	pop	{r4, pc}
 8006ffe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007002:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007006:	e7f7      	b.n	8006ff8 <memmove+0x24>

08007008 <_free_r>:
 8007008:	b538      	push	{r3, r4, r5, lr}
 800700a:	4605      	mov	r5, r0
 800700c:	2900      	cmp	r1, #0
 800700e:	d040      	beq.n	8007092 <_free_r+0x8a>
 8007010:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007014:	1f0c      	subs	r4, r1, #4
 8007016:	2b00      	cmp	r3, #0
 8007018:	bfb8      	it	lt
 800701a:	18e4      	addlt	r4, r4, r3
 800701c:	f000 f910 	bl	8007240 <__malloc_lock>
 8007020:	4a1c      	ldr	r2, [pc, #112]	; (8007094 <_free_r+0x8c>)
 8007022:	6813      	ldr	r3, [r2, #0]
 8007024:	b933      	cbnz	r3, 8007034 <_free_r+0x2c>
 8007026:	6063      	str	r3, [r4, #4]
 8007028:	6014      	str	r4, [r2, #0]
 800702a:	4628      	mov	r0, r5
 800702c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007030:	f000 b90c 	b.w	800724c <__malloc_unlock>
 8007034:	42a3      	cmp	r3, r4
 8007036:	d908      	bls.n	800704a <_free_r+0x42>
 8007038:	6820      	ldr	r0, [r4, #0]
 800703a:	1821      	adds	r1, r4, r0
 800703c:	428b      	cmp	r3, r1
 800703e:	bf01      	itttt	eq
 8007040:	6819      	ldreq	r1, [r3, #0]
 8007042:	685b      	ldreq	r3, [r3, #4]
 8007044:	1809      	addeq	r1, r1, r0
 8007046:	6021      	streq	r1, [r4, #0]
 8007048:	e7ed      	b.n	8007026 <_free_r+0x1e>
 800704a:	461a      	mov	r2, r3
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	b10b      	cbz	r3, 8007054 <_free_r+0x4c>
 8007050:	42a3      	cmp	r3, r4
 8007052:	d9fa      	bls.n	800704a <_free_r+0x42>
 8007054:	6811      	ldr	r1, [r2, #0]
 8007056:	1850      	adds	r0, r2, r1
 8007058:	42a0      	cmp	r0, r4
 800705a:	d10b      	bne.n	8007074 <_free_r+0x6c>
 800705c:	6820      	ldr	r0, [r4, #0]
 800705e:	4401      	add	r1, r0
 8007060:	1850      	adds	r0, r2, r1
 8007062:	4283      	cmp	r3, r0
 8007064:	6011      	str	r1, [r2, #0]
 8007066:	d1e0      	bne.n	800702a <_free_r+0x22>
 8007068:	6818      	ldr	r0, [r3, #0]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	4401      	add	r1, r0
 800706e:	6011      	str	r1, [r2, #0]
 8007070:	6053      	str	r3, [r2, #4]
 8007072:	e7da      	b.n	800702a <_free_r+0x22>
 8007074:	d902      	bls.n	800707c <_free_r+0x74>
 8007076:	230c      	movs	r3, #12
 8007078:	602b      	str	r3, [r5, #0]
 800707a:	e7d6      	b.n	800702a <_free_r+0x22>
 800707c:	6820      	ldr	r0, [r4, #0]
 800707e:	1821      	adds	r1, r4, r0
 8007080:	428b      	cmp	r3, r1
 8007082:	bf01      	itttt	eq
 8007084:	6819      	ldreq	r1, [r3, #0]
 8007086:	685b      	ldreq	r3, [r3, #4]
 8007088:	1809      	addeq	r1, r1, r0
 800708a:	6021      	streq	r1, [r4, #0]
 800708c:	6063      	str	r3, [r4, #4]
 800708e:	6054      	str	r4, [r2, #4]
 8007090:	e7cb      	b.n	800702a <_free_r+0x22>
 8007092:	bd38      	pop	{r3, r4, r5, pc}
 8007094:	20000274 	.word	0x20000274

08007098 <sbrk_aligned>:
 8007098:	b570      	push	{r4, r5, r6, lr}
 800709a:	4e0e      	ldr	r6, [pc, #56]	; (80070d4 <sbrk_aligned+0x3c>)
 800709c:	460c      	mov	r4, r1
 800709e:	6831      	ldr	r1, [r6, #0]
 80070a0:	4605      	mov	r5, r0
 80070a2:	b911      	cbnz	r1, 80070aa <sbrk_aligned+0x12>
 80070a4:	f000 f8bc 	bl	8007220 <_sbrk_r>
 80070a8:	6030      	str	r0, [r6, #0]
 80070aa:	4621      	mov	r1, r4
 80070ac:	4628      	mov	r0, r5
 80070ae:	f000 f8b7 	bl	8007220 <_sbrk_r>
 80070b2:	1c43      	adds	r3, r0, #1
 80070b4:	d00a      	beq.n	80070cc <sbrk_aligned+0x34>
 80070b6:	1cc4      	adds	r4, r0, #3
 80070b8:	f024 0403 	bic.w	r4, r4, #3
 80070bc:	42a0      	cmp	r0, r4
 80070be:	d007      	beq.n	80070d0 <sbrk_aligned+0x38>
 80070c0:	1a21      	subs	r1, r4, r0
 80070c2:	4628      	mov	r0, r5
 80070c4:	f000 f8ac 	bl	8007220 <_sbrk_r>
 80070c8:	3001      	adds	r0, #1
 80070ca:	d101      	bne.n	80070d0 <sbrk_aligned+0x38>
 80070cc:	f04f 34ff 	mov.w	r4, #4294967295
 80070d0:	4620      	mov	r0, r4
 80070d2:	bd70      	pop	{r4, r5, r6, pc}
 80070d4:	20000278 	.word	0x20000278

080070d8 <_malloc_r>:
 80070d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070dc:	1ccd      	adds	r5, r1, #3
 80070de:	f025 0503 	bic.w	r5, r5, #3
 80070e2:	3508      	adds	r5, #8
 80070e4:	2d0c      	cmp	r5, #12
 80070e6:	bf38      	it	cc
 80070e8:	250c      	movcc	r5, #12
 80070ea:	2d00      	cmp	r5, #0
 80070ec:	4607      	mov	r7, r0
 80070ee:	db01      	blt.n	80070f4 <_malloc_r+0x1c>
 80070f0:	42a9      	cmp	r1, r5
 80070f2:	d905      	bls.n	8007100 <_malloc_r+0x28>
 80070f4:	230c      	movs	r3, #12
 80070f6:	2600      	movs	r6, #0
 80070f8:	603b      	str	r3, [r7, #0]
 80070fa:	4630      	mov	r0, r6
 80070fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007100:	4e2e      	ldr	r6, [pc, #184]	; (80071bc <_malloc_r+0xe4>)
 8007102:	f000 f89d 	bl	8007240 <__malloc_lock>
 8007106:	6833      	ldr	r3, [r6, #0]
 8007108:	461c      	mov	r4, r3
 800710a:	bb34      	cbnz	r4, 800715a <_malloc_r+0x82>
 800710c:	4629      	mov	r1, r5
 800710e:	4638      	mov	r0, r7
 8007110:	f7ff ffc2 	bl	8007098 <sbrk_aligned>
 8007114:	1c43      	adds	r3, r0, #1
 8007116:	4604      	mov	r4, r0
 8007118:	d14d      	bne.n	80071b6 <_malloc_r+0xde>
 800711a:	6834      	ldr	r4, [r6, #0]
 800711c:	4626      	mov	r6, r4
 800711e:	2e00      	cmp	r6, #0
 8007120:	d140      	bne.n	80071a4 <_malloc_r+0xcc>
 8007122:	6823      	ldr	r3, [r4, #0]
 8007124:	4631      	mov	r1, r6
 8007126:	4638      	mov	r0, r7
 8007128:	eb04 0803 	add.w	r8, r4, r3
 800712c:	f000 f878 	bl	8007220 <_sbrk_r>
 8007130:	4580      	cmp	r8, r0
 8007132:	d13a      	bne.n	80071aa <_malloc_r+0xd2>
 8007134:	6821      	ldr	r1, [r4, #0]
 8007136:	3503      	adds	r5, #3
 8007138:	1a6d      	subs	r5, r5, r1
 800713a:	f025 0503 	bic.w	r5, r5, #3
 800713e:	3508      	adds	r5, #8
 8007140:	2d0c      	cmp	r5, #12
 8007142:	bf38      	it	cc
 8007144:	250c      	movcc	r5, #12
 8007146:	4638      	mov	r0, r7
 8007148:	4629      	mov	r1, r5
 800714a:	f7ff ffa5 	bl	8007098 <sbrk_aligned>
 800714e:	3001      	adds	r0, #1
 8007150:	d02b      	beq.n	80071aa <_malloc_r+0xd2>
 8007152:	6823      	ldr	r3, [r4, #0]
 8007154:	442b      	add	r3, r5
 8007156:	6023      	str	r3, [r4, #0]
 8007158:	e00e      	b.n	8007178 <_malloc_r+0xa0>
 800715a:	6822      	ldr	r2, [r4, #0]
 800715c:	1b52      	subs	r2, r2, r5
 800715e:	d41e      	bmi.n	800719e <_malloc_r+0xc6>
 8007160:	2a0b      	cmp	r2, #11
 8007162:	d916      	bls.n	8007192 <_malloc_r+0xba>
 8007164:	1961      	adds	r1, r4, r5
 8007166:	42a3      	cmp	r3, r4
 8007168:	6025      	str	r5, [r4, #0]
 800716a:	bf18      	it	ne
 800716c:	6059      	strne	r1, [r3, #4]
 800716e:	6863      	ldr	r3, [r4, #4]
 8007170:	bf08      	it	eq
 8007172:	6031      	streq	r1, [r6, #0]
 8007174:	5162      	str	r2, [r4, r5]
 8007176:	604b      	str	r3, [r1, #4]
 8007178:	4638      	mov	r0, r7
 800717a:	f104 060b 	add.w	r6, r4, #11
 800717e:	f000 f865 	bl	800724c <__malloc_unlock>
 8007182:	f026 0607 	bic.w	r6, r6, #7
 8007186:	1d23      	adds	r3, r4, #4
 8007188:	1af2      	subs	r2, r6, r3
 800718a:	d0b6      	beq.n	80070fa <_malloc_r+0x22>
 800718c:	1b9b      	subs	r3, r3, r6
 800718e:	50a3      	str	r3, [r4, r2]
 8007190:	e7b3      	b.n	80070fa <_malloc_r+0x22>
 8007192:	6862      	ldr	r2, [r4, #4]
 8007194:	42a3      	cmp	r3, r4
 8007196:	bf0c      	ite	eq
 8007198:	6032      	streq	r2, [r6, #0]
 800719a:	605a      	strne	r2, [r3, #4]
 800719c:	e7ec      	b.n	8007178 <_malloc_r+0xa0>
 800719e:	4623      	mov	r3, r4
 80071a0:	6864      	ldr	r4, [r4, #4]
 80071a2:	e7b2      	b.n	800710a <_malloc_r+0x32>
 80071a4:	4634      	mov	r4, r6
 80071a6:	6876      	ldr	r6, [r6, #4]
 80071a8:	e7b9      	b.n	800711e <_malloc_r+0x46>
 80071aa:	230c      	movs	r3, #12
 80071ac:	4638      	mov	r0, r7
 80071ae:	603b      	str	r3, [r7, #0]
 80071b0:	f000 f84c 	bl	800724c <__malloc_unlock>
 80071b4:	e7a1      	b.n	80070fa <_malloc_r+0x22>
 80071b6:	6025      	str	r5, [r4, #0]
 80071b8:	e7de      	b.n	8007178 <_malloc_r+0xa0>
 80071ba:	bf00      	nop
 80071bc:	20000274 	.word	0x20000274

080071c0 <_realloc_r>:
 80071c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071c4:	4680      	mov	r8, r0
 80071c6:	4614      	mov	r4, r2
 80071c8:	460e      	mov	r6, r1
 80071ca:	b921      	cbnz	r1, 80071d6 <_realloc_r+0x16>
 80071cc:	4611      	mov	r1, r2
 80071ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071d2:	f7ff bf81 	b.w	80070d8 <_malloc_r>
 80071d6:	b92a      	cbnz	r2, 80071e4 <_realloc_r+0x24>
 80071d8:	f7ff ff16 	bl	8007008 <_free_r>
 80071dc:	4625      	mov	r5, r4
 80071de:	4628      	mov	r0, r5
 80071e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071e4:	f000 f838 	bl	8007258 <_malloc_usable_size_r>
 80071e8:	4284      	cmp	r4, r0
 80071ea:	4607      	mov	r7, r0
 80071ec:	d802      	bhi.n	80071f4 <_realloc_r+0x34>
 80071ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80071f2:	d812      	bhi.n	800721a <_realloc_r+0x5a>
 80071f4:	4621      	mov	r1, r4
 80071f6:	4640      	mov	r0, r8
 80071f8:	f7ff ff6e 	bl	80070d8 <_malloc_r>
 80071fc:	4605      	mov	r5, r0
 80071fe:	2800      	cmp	r0, #0
 8007200:	d0ed      	beq.n	80071de <_realloc_r+0x1e>
 8007202:	42bc      	cmp	r4, r7
 8007204:	4622      	mov	r2, r4
 8007206:	4631      	mov	r1, r6
 8007208:	bf28      	it	cs
 800720a:	463a      	movcs	r2, r7
 800720c:	f7ff fed4 	bl	8006fb8 <memcpy>
 8007210:	4631      	mov	r1, r6
 8007212:	4640      	mov	r0, r8
 8007214:	f7ff fef8 	bl	8007008 <_free_r>
 8007218:	e7e1      	b.n	80071de <_realloc_r+0x1e>
 800721a:	4635      	mov	r5, r6
 800721c:	e7df      	b.n	80071de <_realloc_r+0x1e>
	...

08007220 <_sbrk_r>:
 8007220:	b538      	push	{r3, r4, r5, lr}
 8007222:	2300      	movs	r3, #0
 8007224:	4d05      	ldr	r5, [pc, #20]	; (800723c <_sbrk_r+0x1c>)
 8007226:	4604      	mov	r4, r0
 8007228:	4608      	mov	r0, r1
 800722a:	602b      	str	r3, [r5, #0]
 800722c:	f7fa f926 	bl	800147c <_sbrk>
 8007230:	1c43      	adds	r3, r0, #1
 8007232:	d102      	bne.n	800723a <_sbrk_r+0x1a>
 8007234:	682b      	ldr	r3, [r5, #0]
 8007236:	b103      	cbz	r3, 800723a <_sbrk_r+0x1a>
 8007238:	6023      	str	r3, [r4, #0]
 800723a:	bd38      	pop	{r3, r4, r5, pc}
 800723c:	2000027c 	.word	0x2000027c

08007240 <__malloc_lock>:
 8007240:	4801      	ldr	r0, [pc, #4]	; (8007248 <__malloc_lock+0x8>)
 8007242:	f000 b811 	b.w	8007268 <__retarget_lock_acquire_recursive>
 8007246:	bf00      	nop
 8007248:	20000280 	.word	0x20000280

0800724c <__malloc_unlock>:
 800724c:	4801      	ldr	r0, [pc, #4]	; (8007254 <__malloc_unlock+0x8>)
 800724e:	f000 b80c 	b.w	800726a <__retarget_lock_release_recursive>
 8007252:	bf00      	nop
 8007254:	20000280 	.word	0x20000280

08007258 <_malloc_usable_size_r>:
 8007258:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800725c:	1f18      	subs	r0, r3, #4
 800725e:	2b00      	cmp	r3, #0
 8007260:	bfbc      	itt	lt
 8007262:	580b      	ldrlt	r3, [r1, r0]
 8007264:	18c0      	addlt	r0, r0, r3
 8007266:	4770      	bx	lr

08007268 <__retarget_lock_acquire_recursive>:
 8007268:	4770      	bx	lr

0800726a <__retarget_lock_release_recursive>:
 800726a:	4770      	bx	lr

0800726c <_init>:
 800726c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800726e:	bf00      	nop
 8007270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007272:	bc08      	pop	{r3}
 8007274:	469e      	mov	lr, r3
 8007276:	4770      	bx	lr

08007278 <_fini>:
 8007278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800727a:	bf00      	nop
 800727c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800727e:	bc08      	pop	{r3}
 8007280:	469e      	mov	lr, r3
 8007282:	4770      	bx	lr
