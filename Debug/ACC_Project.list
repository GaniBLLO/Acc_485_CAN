
ACC_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060e8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080061f4  080061f4  000161f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006278  08006278  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08006278  08006278  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006278  08006278  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006278  08006278  00016278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800627c  0800627c  0001627c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006280  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000074  080062f4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  080062f4  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010de9  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002601  00000000  00000000  00030e86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  00033488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf8  00000000  00000000  00034250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018822  00000000  00000000  00034f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000106c7  00000000  00000000  0004d76a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a156  00000000  00000000  0005de31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e7f87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d40  00000000  00000000  000e7fd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	080061dc 	.word	0x080061dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	080061dc 	.word	0x080061dc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <update_ACC_data>:

ACC_SETTING	ACC_set = ACC_SETTING_DEFAULT;
OUT_DATA	OUT 	= OUT_DATA_XYZ_DEFAULT;
extern RS_DATA_STRUCT	rs;

void update_ACC_data(I2C_HandleTypeDef *i2c){
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af04      	add	r7, sp, #16
 8000162:	6078      	str	r0, [r7, #4]

	uint8_t		command[1];

	HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_STATUS_REG, 1, &command[0], 1, 10);		//Обнвляем статус регистров
 8000164:	230a      	movs	r3, #10
 8000166:	9302      	str	r3, [sp, #8]
 8000168:	2301      	movs	r3, #1
 800016a:	9301      	str	r3, [sp, #4]
 800016c:	f107 030c 	add.w	r3, r7, #12
 8000170:	9300      	str	r3, [sp, #0]
 8000172:	2301      	movs	r3, #1
 8000174:	2227      	movs	r2, #39	; 0x27
 8000176:	2130      	movs	r1, #48	; 0x30
 8000178:	6878      	ldr	r0, [r7, #4]
 800017a:	f002 ff75 	bl	8003068 <HAL_I2C_Mem_Read>
	ACC_set.STATUS_REG.all = command[0];
 800017e:	7b3a      	ldrb	r2, [r7, #12]
 8000180:	4b0c      	ldr	r3, [pc, #48]	; (80001b4 <update_ACC_data+0x58>)
 8000182:	70da      	strb	r2, [r3, #3]

	if(rs.RS_DataSended && ACC_set.STATUS_REG.bit.ZYXDA){
 8000184:	4b0c      	ldr	r3, [pc, #48]	; (80001b8 <update_ACC_data+0x5c>)
 8000186:	685b      	ldr	r3, [r3, #4]
 8000188:	2b00      	cmp	r3, #0
 800018a:	d00f      	beq.n	80001ac <update_ACC_data+0x50>
 800018c:	4b09      	ldr	r3, [pc, #36]	; (80001b4 <update_ACC_data+0x58>)
 800018e:	78db      	ldrb	r3, [r3, #3]
 8000190:	f003 0308 	and.w	r3, r3, #8
 8000194:	b2db      	uxtb	r3, r3
 8000196:	2b00      	cmp	r3, #0
 8000198:	d008      	beq.n	80001ac <update_ACC_data+0x50>
		read_x_axis(i2c);
 800019a:	6878      	ldr	r0, [r7, #4]
 800019c:	f000 f8d2 	bl	8000344 <read_x_axis>
		read_y_axis(i2c);
 80001a0:	6878      	ldr	r0, [r7, #4]
 80001a2:	f000 f90f 	bl	80003c4 <read_y_axis>
		read_z_axis(i2c);
 80001a6:	6878      	ldr	r0, [r7, #4]
 80001a8:	f000 f94c 	bl	8000444 <read_z_axis>
	}
}
 80001ac:	bf00      	nop
 80001ae:	3710      	adds	r7, #16
 80001b0:	46bd      	mov	sp, r7
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	20000000 	.word	0x20000000
 80001b8:	200000a0 	.word	0x200000a0

080001bc <ACC_init>:

void ACC_init(I2C_HandleTypeDef *i2c){
 80001bc:	b580      	push	{r7, lr}
 80001be:	b082      	sub	sp, #8
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]

    ACC_init_addr(ACC_ADDR, i2c);
 80001c4:	6879      	ldr	r1, [r7, #4]
 80001c6:	2030      	movs	r0, #48	; 0x30
 80001c8:	f000 f80e 	bl	80001e8 <ACC_init_addr>
    ACC_setting(ACC_ADDR, i2c);
 80001cc:	6879      	ldr	r1, [r7, #4]
 80001ce:	2030      	movs	r0, #48	; 0x30
 80001d0:	f000 f854 	bl	800027c <ACC_setting>

    rs.RS_DataSended = 1;
 80001d4:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <ACC_init+0x28>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	605a      	str	r2, [r3, #4]
    //ACC_check_settings(ACC_ADDR, i2c);
}
 80001da:	bf00      	nop
 80001dc:	3708      	adds	r7, #8
 80001de:	46bd      	mov	sp, r7
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	200000a0 	.word	0x200000a0

080001e8 <ACC_init_addr>:

void ACC_init_addr (uint8_t address, I2C_HandleTypeDef *i2c){
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b086      	sub	sp, #24
 80001ec:	af02      	add	r7, sp, #8
 80001ee:	4603      	mov	r3, r0
 80001f0:	6039      	str	r1, [r7, #0]
 80001f2:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef result;

    for(;;){
	result = HAL_I2C_IsDeviceReady(i2c, address, 1, 150);
 80001f4:	79fb      	ldrb	r3, [r7, #7]
 80001f6:	b299      	uxth	r1, r3
 80001f8:	2396      	movs	r3, #150	; 0x96
 80001fa:	2201      	movs	r2, #1
 80001fc:	6838      	ldr	r0, [r7, #0]
 80001fe:	f003 f99b 	bl	8003538 <HAL_I2C_IsDeviceReady>
 8000202:	4603      	mov	r3, r0
 8000204:	73fb      	strb	r3, [r7, #15]
	    if(result == HAL_OK)
 8000206:	7bfb      	ldrb	r3, [r7, #15]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d000      	beq.n	800020e <ACC_init_addr+0x26>
	result = HAL_I2C_IsDeviceReady(i2c, address, 1, 150);
 800020c:	e7f2      	b.n	80001f4 <ACC_init_addr+0xc>
	    	break;
 800020e:	bf00      	nop
	}

    uint8_t command_arr[1];
    uint8_t receive_arr[1];

    command_arr[0] = 0xF;
 8000210:	230f      	movs	r3, #15
 8000212:	733b      	strb	r3, [r7, #12]
    //WHO_AM_I
    HAL_I2C_Master_Transmit(i2c, address, command_arr, sizeof(command_arr), 10);
 8000214:	79fb      	ldrb	r3, [r7, #7]
 8000216:	b299      	uxth	r1, r3
 8000218:	f107 020c 	add.w	r2, r7, #12
 800021c:	230a      	movs	r3, #10
 800021e:	9300      	str	r3, [sp, #0]
 8000220:	2301      	movs	r3, #1
 8000222:	6838      	ldr	r0, [r7, #0]
 8000224:	f002 fabc 	bl	80027a0 <HAL_I2C_Master_Transmit>
    HAL_I2C_Master_Receive(i2c, address, receive_arr, sizeof(receive_arr), 10);
 8000228:	79fb      	ldrb	r3, [r7, #7]
 800022a:	b299      	uxth	r1, r3
 800022c:	f107 0208 	add.w	r2, r7, #8
 8000230:	230a      	movs	r3, #10
 8000232:	9300      	str	r3, [sp, #0]
 8000234:	2301      	movs	r3, #1
 8000236:	6838      	ldr	r0, [r7, #0]
 8000238:	f002 fbb0 	bl	800299c <HAL_I2C_Master_Receive>

    GPIOC->BSRR |= GPIO_BSRR_BS13;
 800023c:	4b0e      	ldr	r3, [pc, #56]	; (8000278 <ACC_init_addr+0x90>)
 800023e:	691b      	ldr	r3, [r3, #16]
 8000240:	4a0d      	ldr	r2, [pc, #52]	; (8000278 <ACC_init_addr+0x90>)
 8000242:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000246:	6113      	str	r3, [r2, #16]
    HAL_Delay(1000);
 8000248:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800024c:	f001 f8ee 	bl	800142c <HAL_Delay>
    GPIOC->BSRR |= GPIO_BSRR_BR13;
 8000250:	4b09      	ldr	r3, [pc, #36]	; (8000278 <ACC_init_addr+0x90>)
 8000252:	691b      	ldr	r3, [r3, #16]
 8000254:	4a08      	ldr	r2, [pc, #32]	; (8000278 <ACC_init_addr+0x90>)
 8000256:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800025a:	6113      	str	r3, [r2, #16]
    HAL_Delay(1000);
 800025c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000260:	f001 f8e4 	bl	800142c <HAL_Delay>
    GPIOC->BSRR |= GPIO_BSRR_BS13;
 8000264:	4b04      	ldr	r3, [pc, #16]	; (8000278 <ACC_init_addr+0x90>)
 8000266:	691b      	ldr	r3, [r3, #16]
 8000268:	4a03      	ldr	r2, [pc, #12]	; (8000278 <ACC_init_addr+0x90>)
 800026a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800026e:	6113      	str	r3, [r2, #16]
}
 8000270:	bf00      	nop
 8000272:	3710      	adds	r7, #16
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	40011000 	.word	0x40011000

0800027c <ACC_setting>:

void ACC_setting(uint8_t address, I2C_HandleTypeDef *i2c){
 800027c:	b580      	push	{r7, lr}
 800027e:	b088      	sub	sp, #32
 8000280:	af04      	add	r7, sp, #16
 8000282:	4603      	mov	r3, r0
 8000284:	6039      	str	r1, [r7, #0]
 8000286:	71fb      	strb	r3, [r7, #7]

    uint8_t 			command_arr[3];

    HAL_I2C_Mem_Write(i2c, address, COMMAND_CTRL_REG1, 1, &ACC_set.CTRL_REG1.all, 1, 10);	//Отправка данных структур (настроек) в память.
 8000288:	79fb      	ldrb	r3, [r7, #7]
 800028a:	b299      	uxth	r1, r3
 800028c:	230a      	movs	r3, #10
 800028e:	9302      	str	r3, [sp, #8]
 8000290:	2301      	movs	r3, #1
 8000292:	9301      	str	r3, [sp, #4]
 8000294:	4b28      	ldr	r3, [pc, #160]	; (8000338 <ACC_setting+0xbc>)
 8000296:	9300      	str	r3, [sp, #0]
 8000298:	2301      	movs	r3, #1
 800029a:	2220      	movs	r2, #32
 800029c:	6838      	ldr	r0, [r7, #0]
 800029e:	f002 fde9 	bl	8002e74 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(i2c, address, COMMAND_CTRL_REG2, 1, &ACC_set.CTRL_REG2.all, 1, 10);
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	b299      	uxth	r1, r3
 80002a6:	230a      	movs	r3, #10
 80002a8:	9302      	str	r3, [sp, #8]
 80002aa:	2301      	movs	r3, #1
 80002ac:	9301      	str	r3, [sp, #4]
 80002ae:	4b23      	ldr	r3, [pc, #140]	; (800033c <ACC_setting+0xc0>)
 80002b0:	9300      	str	r3, [sp, #0]
 80002b2:	2301      	movs	r3, #1
 80002b4:	2221      	movs	r2, #33	; 0x21
 80002b6:	6838      	ldr	r0, [r7, #0]
 80002b8:	f002 fddc 	bl	8002e74 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(i2c, address, COMMAND_CTRL_REG4, 1, &ACC_set.CTRL_REG4.all, 1, 10);
 80002bc:	79fb      	ldrb	r3, [r7, #7]
 80002be:	b299      	uxth	r1, r3
 80002c0:	230a      	movs	r3, #10
 80002c2:	9302      	str	r3, [sp, #8]
 80002c4:	2301      	movs	r3, #1
 80002c6:	9301      	str	r3, [sp, #4]
 80002c8:	4b1d      	ldr	r3, [pc, #116]	; (8000340 <ACC_setting+0xc4>)
 80002ca:	9300      	str	r3, [sp, #0]
 80002cc:	2301      	movs	r3, #1
 80002ce:	2223      	movs	r2, #35	; 0x23
 80002d0:	6838      	ldr	r0, [r7, #0]
 80002d2:	f002 fdcf 	bl	8002e74 <HAL_I2C_Mem_Write>

    HAL_I2C_Mem_Read(i2c, address, COMMAND_CTRL_REG1, 1, &command_arr[0], 1, 50);			//Для проверки, что данные записались верно
 80002d6:	79fb      	ldrb	r3, [r7, #7]
 80002d8:	b299      	uxth	r1, r3
 80002da:	2332      	movs	r3, #50	; 0x32
 80002dc:	9302      	str	r3, [sp, #8]
 80002de:	2301      	movs	r3, #1
 80002e0:	9301      	str	r3, [sp, #4]
 80002e2:	f107 030c 	add.w	r3, r7, #12
 80002e6:	9300      	str	r3, [sp, #0]
 80002e8:	2301      	movs	r3, #1
 80002ea:	2220      	movs	r2, #32
 80002ec:	6838      	ldr	r0, [r7, #0]
 80002ee:	f002 febb 	bl	8003068 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(i2c, address, COMMAND_CTRL_REG2, 1, &command_arr[1], 1, 50);
 80002f2:	79fb      	ldrb	r3, [r7, #7]
 80002f4:	b299      	uxth	r1, r3
 80002f6:	2332      	movs	r3, #50	; 0x32
 80002f8:	9302      	str	r3, [sp, #8]
 80002fa:	2301      	movs	r3, #1
 80002fc:	9301      	str	r3, [sp, #4]
 80002fe:	f107 030c 	add.w	r3, r7, #12
 8000302:	3301      	adds	r3, #1
 8000304:	9300      	str	r3, [sp, #0]
 8000306:	2301      	movs	r3, #1
 8000308:	2221      	movs	r2, #33	; 0x21
 800030a:	6838      	ldr	r0, [r7, #0]
 800030c:	f002 feac 	bl	8003068 <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(i2c, address, COMMAND_CTRL_REG4, 1, &command_arr[2], 1, 50);
 8000310:	79fb      	ldrb	r3, [r7, #7]
 8000312:	b299      	uxth	r1, r3
 8000314:	2332      	movs	r3, #50	; 0x32
 8000316:	9302      	str	r3, [sp, #8]
 8000318:	2301      	movs	r3, #1
 800031a:	9301      	str	r3, [sp, #4]
 800031c:	f107 030c 	add.w	r3, r7, #12
 8000320:	3302      	adds	r3, #2
 8000322:	9300      	str	r3, [sp, #0]
 8000324:	2301      	movs	r3, #1
 8000326:	2223      	movs	r2, #35	; 0x23
 8000328:	6838      	ldr	r0, [r7, #0]
 800032a:	f002 fe9d 	bl	8003068 <HAL_I2C_Mem_Read>
}
 800032e:	bf00      	nop
 8000330:	3710      	adds	r7, #16
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000000 	.word	0x20000000
 800033c:	20000001 	.word	0x20000001
 8000340:	20000002 	.word	0x20000002

08000344 <read_x_axis>:


void read_x_axis(I2C_HandleTypeDef *i2c){
 8000344:	b580      	push	{r7, lr}
 8000346:	b088      	sub	sp, #32
 8000348:	af04      	add	r7, sp, #16
 800034a:	6078      	str	r0, [r7, #4]

    uint8_t data_LO_RX[1], data_HI_RX[1];

    if(ACC_set.STATUS_REG.bit.XOR || ACC_set.STATUS_REG.bit.XDA){
 800034c:	4b1a      	ldr	r3, [pc, #104]	; (80003b8 <read_x_axis+0x74>)
 800034e:	78db      	ldrb	r3, [r3, #3]
 8000350:	f003 0310 	and.w	r3, r3, #16
 8000354:	b2db      	uxtb	r3, r3
 8000356:	2b00      	cmp	r3, #0
 8000358:	d106      	bne.n	8000368 <read_x_axis+0x24>
 800035a:	4b17      	ldr	r3, [pc, #92]	; (80003b8 <read_x_axis+0x74>)
 800035c:	78db      	ldrb	r3, [r3, #3]
 800035e:	f003 0301 	and.w	r3, r3, #1
 8000362:	b2db      	uxtb	r3, r3
 8000364:	2b00      	cmp	r3, #0
 8000366:	d022      	beq.n	80003ae <read_x_axis+0x6a>

	HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_X_HI, 1, &data_HI_RX[0], 1, 10);		//Считали данные с регистра и записали в структуру
 8000368:	230a      	movs	r3, #10
 800036a:	9302      	str	r3, [sp, #8]
 800036c:	2301      	movs	r3, #1
 800036e:	9301      	str	r3, [sp, #4]
 8000370:	f107 0308 	add.w	r3, r7, #8
 8000374:	9300      	str	r3, [sp, #0]
 8000376:	2301      	movs	r3, #1
 8000378:	2229      	movs	r2, #41	; 0x29
 800037a:	2130      	movs	r1, #48	; 0x30
 800037c:	6878      	ldr	r0, [r7, #4]
 800037e:	f002 fe73 	bl	8003068 <HAL_I2C_Mem_Read>
	OUT.X.bit.HI = data_HI_RX[0] & 0xff;
 8000382:	7a3a      	ldrb	r2, [r7, #8]
 8000384:	4b0d      	ldr	r3, [pc, #52]	; (80003bc <read_x_axis+0x78>)
 8000386:	705a      	strb	r2, [r3, #1]


	HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_X_LO, 1, &data_LO_RX[0], 1, 10);
 8000388:	230a      	movs	r3, #10
 800038a:	9302      	str	r3, [sp, #8]
 800038c:	2301      	movs	r3, #1
 800038e:	9301      	str	r3, [sp, #4]
 8000390:	f107 030c 	add.w	r3, r7, #12
 8000394:	9300      	str	r3, [sp, #0]
 8000396:	2301      	movs	r3, #1
 8000398:	2228      	movs	r2, #40	; 0x28
 800039a:	2130      	movs	r1, #48	; 0x30
 800039c:	6878      	ldr	r0, [r7, #4]
 800039e:	f002 fe63 	bl	8003068 <HAL_I2C_Mem_Read>
	OUT.X.bit.LO = data_LO_RX[0] & 0xff;
 80003a2:	7b3a      	ldrb	r2, [r7, #12]
 80003a4:	4b05      	ldr	r3, [pc, #20]	; (80003bc <read_x_axis+0x78>)
 80003a6:	701a      	strb	r2, [r3, #0]

	rs.RS_X_axis_data = 1;									//Данные готовы к отправке
 80003a8:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <read_x_axis+0x7c>)
 80003aa:	2201      	movs	r2, #1
 80003ac:	621a      	str	r2, [r3, #32]
    }
}
 80003ae:	bf00      	nop
 80003b0:	3710      	adds	r7, #16
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	20000000 	.word	0x20000000
 80003bc:	20000090 	.word	0x20000090
 80003c0:	200000a0 	.word	0x200000a0

080003c4 <read_y_axis>:


void read_y_axis(I2C_HandleTypeDef *i2c){
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b088      	sub	sp, #32
 80003c8:	af04      	add	r7, sp, #16
 80003ca:	6078      	str	r0, [r7, #4]

    uint8_t data_LO_RX[1], data_HI_RX[1];

    if(ACC_set.STATUS_REG.bit.YOR || ACC_set.STATUS_REG.bit.YDA){
 80003cc:	4b1a      	ldr	r3, [pc, #104]	; (8000438 <read_y_axis+0x74>)
 80003ce:	78db      	ldrb	r3, [r3, #3]
 80003d0:	f003 0320 	and.w	r3, r3, #32
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d106      	bne.n	80003e8 <read_y_axis+0x24>
 80003da:	4b17      	ldr	r3, [pc, #92]	; (8000438 <read_y_axis+0x74>)
 80003dc:	78db      	ldrb	r3, [r3, #3]
 80003de:	f003 0302 	and.w	r3, r3, #2
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d022      	beq.n	800042e <read_y_axis+0x6a>

	HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_Y_HI, 1, &data_HI_RX[0], 1, 10);
 80003e8:	230a      	movs	r3, #10
 80003ea:	9302      	str	r3, [sp, #8]
 80003ec:	2301      	movs	r3, #1
 80003ee:	9301      	str	r3, [sp, #4]
 80003f0:	f107 0308 	add.w	r3, r7, #8
 80003f4:	9300      	str	r3, [sp, #0]
 80003f6:	2301      	movs	r3, #1
 80003f8:	222b      	movs	r2, #43	; 0x2b
 80003fa:	2130      	movs	r1, #48	; 0x30
 80003fc:	6878      	ldr	r0, [r7, #4]
 80003fe:	f002 fe33 	bl	8003068 <HAL_I2C_Mem_Read>
	OUT.Y.bit.HI = data_HI_RX[0] & 0xff;
 8000402:	7a3a      	ldrb	r2, [r7, #8]
 8000404:	4b0d      	ldr	r3, [pc, #52]	; (800043c <read_y_axis+0x78>)
 8000406:	70da      	strb	r2, [r3, #3]

	HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_Y_LO, 1, &data_LO_RX[0], 1, 10);
 8000408:	230a      	movs	r3, #10
 800040a:	9302      	str	r3, [sp, #8]
 800040c:	2301      	movs	r3, #1
 800040e:	9301      	str	r3, [sp, #4]
 8000410:	f107 030c 	add.w	r3, r7, #12
 8000414:	9300      	str	r3, [sp, #0]
 8000416:	2301      	movs	r3, #1
 8000418:	222a      	movs	r2, #42	; 0x2a
 800041a:	2130      	movs	r1, #48	; 0x30
 800041c:	6878      	ldr	r0, [r7, #4]
 800041e:	f002 fe23 	bl	8003068 <HAL_I2C_Mem_Read>
	OUT.Y.bit.LO = data_LO_RX[0] & 0xff;
 8000422:	7b3a      	ldrb	r2, [r7, #12]
 8000424:	4b05      	ldr	r3, [pc, #20]	; (800043c <read_y_axis+0x78>)
 8000426:	709a      	strb	r2, [r3, #2]

	rs.RS_Y_axis_data = 1;
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <read_y_axis+0x7c>)
 800042a:	2201      	movs	r2, #1
 800042c:	625a      	str	r2, [r3, #36]	; 0x24
    }

}
 800042e:	bf00      	nop
 8000430:	3710      	adds	r7, #16
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	20000000 	.word	0x20000000
 800043c:	20000090 	.word	0x20000090
 8000440:	200000a0 	.word	0x200000a0

08000444 <read_z_axis>:


void read_z_axis(I2C_HandleTypeDef *i2c){
 8000444:	b580      	push	{r7, lr}
 8000446:	b088      	sub	sp, #32
 8000448:	af04      	add	r7, sp, #16
 800044a:	6078      	str	r0, [r7, #4]

    uint8_t data_LO_RX[1], data_HI_RX[1];
    if(ACC_set.STATUS_REG.bit.ZOR || ACC_set.STATUS_REG.bit.ZDA){
 800044c:	4b21      	ldr	r3, [pc, #132]	; (80004d4 <read_z_axis+0x90>)
 800044e:	78db      	ldrb	r3, [r3, #3]
 8000450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000454:	b2db      	uxtb	r3, r3
 8000456:	2b00      	cmp	r3, #0
 8000458:	d106      	bne.n	8000468 <read_z_axis+0x24>
 800045a:	4b1e      	ldr	r3, [pc, #120]	; (80004d4 <read_z_axis+0x90>)
 800045c:	78db      	ldrb	r3, [r3, #3]
 800045e:	f003 0304 	and.w	r3, r3, #4
 8000462:	b2db      	uxtb	r3, r3
 8000464:	2b00      	cmp	r3, #0
 8000466:	d022      	beq.n	80004ae <read_z_axis+0x6a>

	HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_Z_HI, 1, &data_HI_RX[0], 1, 10);
 8000468:	230a      	movs	r3, #10
 800046a:	9302      	str	r3, [sp, #8]
 800046c:	2301      	movs	r3, #1
 800046e:	9301      	str	r3, [sp, #4]
 8000470:	f107 0308 	add.w	r3, r7, #8
 8000474:	9300      	str	r3, [sp, #0]
 8000476:	2301      	movs	r3, #1
 8000478:	222d      	movs	r2, #45	; 0x2d
 800047a:	2130      	movs	r1, #48	; 0x30
 800047c:	6878      	ldr	r0, [r7, #4]
 800047e:	f002 fdf3 	bl	8003068 <HAL_I2C_Mem_Read>
	OUT.Z.bit.HI = data_HI_RX[0] & 0xff;
 8000482:	7a3a      	ldrb	r2, [r7, #8]
 8000484:	4b14      	ldr	r3, [pc, #80]	; (80004d8 <read_z_axis+0x94>)
 8000486:	715a      	strb	r2, [r3, #5]

	HAL_I2C_Mem_Read(i2c, ACC_ADDR, COMMAND_Z_LO, 1, &data_LO_RX[0], 1, 10);
 8000488:	230a      	movs	r3, #10
 800048a:	9302      	str	r3, [sp, #8]
 800048c:	2301      	movs	r3, #1
 800048e:	9301      	str	r3, [sp, #4]
 8000490:	f107 030c 	add.w	r3, r7, #12
 8000494:	9300      	str	r3, [sp, #0]
 8000496:	2301      	movs	r3, #1
 8000498:	222c      	movs	r2, #44	; 0x2c
 800049a:	2130      	movs	r1, #48	; 0x30
 800049c:	6878      	ldr	r0, [r7, #4]
 800049e:	f002 fde3 	bl	8003068 <HAL_I2C_Mem_Read>
	OUT.Z.bit.LO = data_LO_RX[0] & 0xff;
 80004a2:	7b3a      	ldrb	r2, [r7, #12]
 80004a4:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <read_z_axis+0x94>)
 80004a6:	711a      	strb	r2, [r3, #4]

	rs.RS_Z_axis_data = 1;
 80004a8:	4b0c      	ldr	r3, [pc, #48]	; (80004dc <read_z_axis+0x98>)
 80004aa:	2201      	movs	r2, #1
 80004ac:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if(rs.RS_Z_axis_data && rs.RS_X_axis_data && rs.RS_Y_axis_data){
 80004ae:	4b0b      	ldr	r3, [pc, #44]	; (80004dc <read_z_axis+0x98>)
 80004b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d00a      	beq.n	80004cc <read_z_axis+0x88>
 80004b6:	4b09      	ldr	r3, [pc, #36]	; (80004dc <read_z_axis+0x98>)
 80004b8:	6a1b      	ldr	r3, [r3, #32]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d006      	beq.n	80004cc <read_z_axis+0x88>
 80004be:	4b07      	ldr	r3, [pc, #28]	; (80004dc <read_z_axis+0x98>)
 80004c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d002      	beq.n	80004cc <read_z_axis+0x88>
    	rs.RS_DataReady = 1;
 80004c6:	4b05      	ldr	r3, [pc, #20]	; (80004dc <read_z_axis+0x98>)
 80004c8:	2201      	movs	r2, #1
 80004ca:	601a      	str	r2, [r3, #0]
    }
}
 80004cc:	bf00      	nop
 80004ce:	3710      	adds	r7, #16
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	20000000 	.word	0x20000000
 80004d8:	20000090 	.word	0x20000090
 80004dc:	200000a0 	.word	0x200000a0

080004e0 <MCP2515_SetConfigMode>:
}

/* MCP2515 를 설정모드로 전환 */

bool MCP2515_SetConfigMode(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b082      	sub	sp, #8
 80004e4:	af00      	add	r7, sp, #0
  /* CANCTRL Register Configuration */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 80004e6:	2180      	movs	r1, #128	; 0x80
 80004e8:	200f      	movs	r0, #15
 80004ea:	f000 f859 	bl	80005a0 <MCP2515_WriteByte>

  uint8_t loop = 10;
 80004ee:	230a      	movs	r3, #10
 80004f0:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 80004f2:	200e      	movs	r0, #14
 80004f4:	f000 f830 	bl	8000558 <MCP2515_ReadByte>
 80004f8:	4603      	mov	r3, r0
 80004fa:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80004fe:	2b80      	cmp	r3, #128	; 0x80
 8000500:	d101      	bne.n	8000506 <MCP2515_SetConfigMode+0x26>
      return true;
 8000502:	2301      	movs	r3, #1
 8000504:	e006      	b.n	8000514 <MCP2515_SetConfigMode+0x34>

    loop--;
 8000506:	79fb      	ldrb	r3, [r7, #7]
 8000508:	3b01      	subs	r3, #1
 800050a:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 800050c:	79fb      	ldrb	r3, [r7, #7]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d1ef      	bne.n	80004f2 <MCP2515_SetConfigMode+0x12>

  return false;
 8000512:	2300      	movs	r3, #0
}
 8000514:	4618      	mov	r0, r3
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}

0800051c <MCP2515_SetNormalMode>:

/* MCP2515 를 Normal모드로 전환 */


bool MCP2515_SetNormalMode(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
  /* CANCTRL Register Normal 모드 설정 */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8000522:	2100      	movs	r1, #0
 8000524:	200f      	movs	r0, #15
 8000526:	f000 f83b 	bl	80005a0 <MCP2515_WriteByte>

  uint8_t loop = 10;
 800052a:	230a      	movs	r3, #10
 800052c:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 800052e:	200e      	movs	r0, #14
 8000530:	f000 f812 	bl	8000558 <MCP2515_ReadByte>
 8000534:	4603      	mov	r3, r0
 8000536:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d101      	bne.n	8000542 <MCP2515_SetNormalMode+0x26>
      return true;
 800053e:	2301      	movs	r3, #1
 8000540:	e006      	b.n	8000550 <MCP2515_SetNormalMode+0x34>

    loop--;
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	3b01      	subs	r3, #1
 8000546:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d1ef      	bne.n	800052e <MCP2515_SetNormalMode+0x12>

  return false;
 800054e:	2300      	movs	r3, #0
}
 8000550:	4618      	mov	r0, r3
 8000552:	3708      	adds	r7, #8
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}

08000558 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* 1바이트 읽기 */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;

  MCP2515_CS_LOW();
 8000562:	2200      	movs	r2, #0
 8000564:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000568:	480c      	ldr	r0, [pc, #48]	; (800059c <MCP2515_ReadByte+0x44>)
 800056a:	f001 ffa3 	bl	80024b4 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ);
 800056e:	2003      	movs	r0, #3
 8000570:	f000 f8c0 	bl	80006f4 <SPI_Tx>
  SPI_Tx(address);
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	4618      	mov	r0, r3
 8000578:	f000 f8bc 	bl	80006f4 <SPI_Tx>
  retVal = SPI_Rx();
 800057c:	f000 f8e0 	bl	8000740 <SPI_Rx>
 8000580:	4603      	mov	r3, r0
 8000582:	73fb      	strb	r3, [r7, #15]

  MCP2515_CS_HIGH();
 8000584:	2201      	movs	r2, #1
 8000586:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800058a:	4804      	ldr	r0, [pc, #16]	; (800059c <MCP2515_ReadByte+0x44>)
 800058c:	f001 ff92 	bl	80024b4 <HAL_GPIO_WritePin>

  return retVal;
 8000590:	7bfb      	ldrb	r3, [r7, #15]
}
 8000592:	4618      	mov	r0, r3
 8000594:	3710      	adds	r7, #16
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	40010800 	.word	0x40010800

080005a0 <MCP2515_WriteByte>:
  MCP2515_CS_HIGH();
}

/* 1바이트 쓰기 */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	460a      	mov	r2, r1
 80005aa:	71fb      	strb	r3, [r7, #7]
 80005ac:	4613      	mov	r3, r2
 80005ae:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 80005b0:	2200      	movs	r2, #0
 80005b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005b6:	480c      	ldr	r0, [pc, #48]	; (80005e8 <MCP2515_WriteByte+0x48>)
 80005b8:	f001 ff7c 	bl	80024b4 <HAL_GPIO_WritePin>
  SPI_Tx(MCP2515_WRITE);
 80005bc:	2002      	movs	r0, #2
 80005be:	f000 f899 	bl	80006f4 <SPI_Tx>
  SPI_Tx(address);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	4618      	mov	r0, r3
 80005c6:	f000 f895 	bl	80006f4 <SPI_Tx>
  SPI_Tx(data);
 80005ca:	79bb      	ldrb	r3, [r7, #6]
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 f891 	bl	80006f4 <SPI_Tx>
  MCP2515_CS_HIGH();
 80005d2:	2201      	movs	r2, #1
 80005d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005d8:	4803      	ldr	r0, [pc, #12]	; (80005e8 <MCP2515_WriteByte+0x48>)
 80005da:	f001 ff6b 	bl	80024b4 <HAL_GPIO_WritePin>
}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40010800 	.word	0x40010800

080005ec <MCP2515_WriteByteSequence>:

/* Sequential Bytes 쓰기 */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	603a      	str	r2, [r7, #0]
 80005f6:	71fb      	strb	r3, [r7, #7]
 80005f8:	460b      	mov	r3, r1
 80005fa:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 80005fc:	2200      	movs	r2, #0
 80005fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000602:	480f      	ldr	r0, [pc, #60]	; (8000640 <MCP2515_WriteByteSequence+0x54>)
 8000604:	f001 ff56 	bl	80024b4 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8000608:	2002      	movs	r0, #2
 800060a:	f000 f873 	bl	80006f4 <SPI_Tx>
  SPI_Tx(startAddress);
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	4618      	mov	r0, r3
 8000612:	f000 f86f 	bl	80006f4 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 8000616:	79ba      	ldrb	r2, [r7, #6]
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	1ad3      	subs	r3, r2, r3
 800061c:	b2db      	uxtb	r3, r3
 800061e:	3301      	adds	r3, #1
 8000620:	b2db      	uxtb	r3, r3
 8000622:	4619      	mov	r1, r3
 8000624:	6838      	ldr	r0, [r7, #0]
 8000626:	f000 f877 	bl	8000718 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 800062a:	2201      	movs	r2, #1
 800062c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000630:	4803      	ldr	r0, [pc, #12]	; (8000640 <MCP2515_WriteByteSequence+0x54>)
 8000632:	f001 ff3f 	bl	80024b4 <HAL_GPIO_WritePin>
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40010800 	.word	0x40010800

08000644 <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* RTS 명령을 통해서 TxBuffer 전송 */
void MCP2515_RequestToSend(uint8_t instruction)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 800064e:	2200      	movs	r2, #0
 8000650:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000654:	4808      	ldr	r0, [pc, #32]	; (8000678 <MCP2515_RequestToSend+0x34>)
 8000656:	f001 ff2d 	bl	80024b4 <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	4618      	mov	r0, r3
 800065e:	f000 f849 	bl	80006f4 <SPI_Tx>

  MCP2515_CS_HIGH();
 8000662:	2201      	movs	r2, #1
 8000664:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000668:	4803      	ldr	r0, [pc, #12]	; (8000678 <MCP2515_RequestToSend+0x34>)
 800066a:	f001 ff23 	bl	80024b4 <HAL_GPIO_WritePin>
}
 800066e:	bf00      	nop
 8000670:	3708      	adds	r7, #8
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40010800 	.word	0x40010800

0800067c <MCP2515_ReadStatus>:

/* MCP2515 Status 확인 */
uint8_t MCP2515_ReadStatus(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 8000682:	2200      	movs	r2, #0
 8000684:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000688:	480a      	ldr	r0, [pc, #40]	; (80006b4 <MCP2515_ReadStatus+0x38>)
 800068a:	f001 ff13 	bl	80024b4 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ_STATUS);
 800068e:	20a0      	movs	r0, #160	; 0xa0
 8000690:	f000 f830 	bl	80006f4 <SPI_Tx>
  retVal = SPI_Rx();
 8000694:	f000 f854 	bl	8000740 <SPI_Rx>
 8000698:	4603      	mov	r3, r0
 800069a:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 800069c:	2201      	movs	r2, #1
 800069e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006a2:	4804      	ldr	r0, [pc, #16]	; (80006b4 <MCP2515_ReadStatus+0x38>)
 80006a4:	f001 ff06 	bl	80024b4 <HAL_GPIO_WritePin>

  return retVal;
 80006a8:	79fb      	ldrb	r3, [r7, #7]
}
 80006aa:	4618      	mov	r0, r3
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40010800 	.word	0x40010800

080006b8 <MCP2515_GetRxStatus>:

/* MCP2515 RxStatus 레지스터 확인 */
uint8_t MCP2515_GetRxStatus(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 80006be:	2200      	movs	r2, #0
 80006c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006c4:	480a      	ldr	r0, [pc, #40]	; (80006f0 <MCP2515_GetRxStatus+0x38>)
 80006c6:	f001 fef5 	bl	80024b4 <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_RX_STATUS);
 80006ca:	20b0      	movs	r0, #176	; 0xb0
 80006cc:	f000 f812 	bl	80006f4 <SPI_Tx>
  retVal = SPI_Rx();
 80006d0:	f000 f836 	bl	8000740 <SPI_Rx>
 80006d4:	4603      	mov	r3, r0
 80006d6:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 80006d8:	2201      	movs	r2, #1
 80006da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80006de:	4804      	ldr	r0, [pc, #16]	; (80006f0 <MCP2515_GetRxStatus+0x38>)
 80006e0:	f001 fee8 	bl	80024b4 <HAL_GPIO_WritePin>

  return retVal;
 80006e4:	79fb      	ldrb	r3, [r7, #7]
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40010800 	.word	0x40010800

080006f4 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx Wrapper 함수 */
static void SPI_Tx(uint8_t data)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 80006fe:	1df9      	adds	r1, r7, #7
 8000700:	230a      	movs	r3, #10
 8000702:	2201      	movs	r2, #1
 8000704:	4803      	ldr	r0, [pc, #12]	; (8000714 <SPI_Tx+0x20>)
 8000706:	f004 f9dd 	bl	8004ac4 <HAL_SPI_Transmit>
}
 800070a:	bf00      	nop
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	2000016c 	.word	0x2000016c

08000718 <SPI_TxBuffer>:

/* SPI Tx Wrapper 함수 */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	460b      	mov	r3, r1
 8000722:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8000724:	78fb      	ldrb	r3, [r7, #3]
 8000726:	b29a      	uxth	r2, r3
 8000728:	230a      	movs	r3, #10
 800072a:	6879      	ldr	r1, [r7, #4]
 800072c:	4803      	ldr	r0, [pc, #12]	; (800073c <SPI_TxBuffer+0x24>)
 800072e:	f004 f9c9 	bl	8004ac4 <HAL_SPI_Transmit>
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	2000016c 	.word	0x2000016c

08000740 <SPI_Rx>:

/* SPI Rx Wrapper 함수 */
static uint8_t SPI_Rx(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8000746:	1df9      	adds	r1, r7, #7
 8000748:	230a      	movs	r3, #10
 800074a:	2201      	movs	r2, #1
 800074c:	4803      	ldr	r0, [pc, #12]	; (800075c <SPI_Rx+0x1c>)
 800074e:	f004 fafc 	bl	8004d4a <HAL_SPI_Receive>
  return retVal;
 8000752:	79fb      	ldrb	r3, [r7, #7]
}
 8000754:	4618      	mov	r0, r3
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	2000016c 	.word	0x2000016c

08000760 <setting_CNFx>:
{
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
}


void setting_CNFx(){
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0
 * Tbit = SyncSeg + PropSeg + PhSeg1+ PhSeg2 = 16(18)
 * Tbit = 1tq + (7tq + 7tq) + 2tq = 17 => 88.235%
 * BRP = 1
 * SJW = 00 => 1*Tq */

    MCP2515_WriteByte(MCP2515_CNF1, 0x1);		//Настройка тактирования
 8000766:	2101      	movs	r1, #1
 8000768:	202a      	movs	r0, #42	; 0x2a
 800076a:	f7ff ff19 	bl	80005a0 <MCP2515_WriteByte>
    MCP2515_WriteByte(MCP2515_CNF2, 0xFF);
 800076e:	21ff      	movs	r1, #255	; 0xff
 8000770:	2029      	movs	r0, #41	; 0x29
 8000772:	f7ff ff15 	bl	80005a0 <MCP2515_WriteByte>
    MCP2515_WriteByte(MCP2515_CNF3, 0x82);
 8000776:	2182      	movs	r1, #130	; 0x82
 8000778:	2028      	movs	r0, #40	; 0x28
 800077a:	f7ff ff11 	bl	80005a0 <MCP2515_WriteByte>

    MCP2515_WriteByte(MCP2515_TXB0CTRL, 0x0);		//Настройка состояния, приоритетности поступаемых сообщений в буфер
 800077e:	2100      	movs	r1, #0
 8000780:	2030      	movs	r0, #48	; 0x30
 8000782:	f7ff ff0d 	bl	80005a0 <MCP2515_WriteByte>
    MCP2515_WriteByte(MCP2515_TXB1CTRL, 0x0);
 8000786:	2100      	movs	r1, #0
 8000788:	2040      	movs	r0, #64	; 0x40
 800078a:	f7ff ff09 	bl	80005a0 <MCP2515_WriteByte>
    MCP2515_WriteByte(MCP2515_TXB2CTRL, 0x0);
 800078e:	2100      	movs	r1, #0
 8000790:	2050      	movs	r0, #80	; 0x50
 8000792:	f7ff ff05 	bl	80005a0 <MCP2515_WriteByte>

    MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x0);
 8000796:	2100      	movs	r1, #0
 8000798:	2060      	movs	r0, #96	; 0x60
 800079a:	f7ff ff01 	bl	80005a0 <MCP2515_WriteByte>
    MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x0);
 800079e:	2100      	movs	r1, #0
 80007a0:	2070      	movs	r0, #112	; 0x70
 80007a2:	f7ff fefd 	bl	80005a0 <MCP2515_WriteByte>

    MCP2515_WriteByte(MCP2515_CANINTE, 0x0);
 80007a6:	2100      	movs	r1, #0
 80007a8:	202b      	movs	r0, #43	; 0x2b
 80007aa:	f7ff fef9 	bl	80005a0 <MCP2515_WriteByte>
    MCP2515_WriteByte(MCP2515_CANINTF, 0x0);
 80007ae:	2100      	movs	r1, #0
 80007b0:	202c      	movs	r0, #44	; 0x2c
 80007b2:	f7ff fef5 	bl	80005a0 <MCP2515_WriteByte>
    RXF5 RXF5reg;
    RXM0 RXM0reg;
    RXM1 RXM1reg;

    /* Intialize Rx Mask values */
	RXM0reg.RXM0SIDH = 0xF;
 80007b6:	230f      	movs	r3, #15
 80007b8:	713b      	strb	r3, [r7, #4]
	RXM0reg.RXM0SIDL = 0xE3;
 80007ba:	23e3      	movs	r3, #227	; 0xe3
 80007bc:	717b      	strb	r3, [r7, #5]
	RXM0reg.RXM0EID8 = 0xf;
 80007be:	230f      	movs	r3, #15
 80007c0:	71bb      	strb	r3, [r7, #6]
	RXM0reg.RXM0EID0 = 0xf;
 80007c2:	230f      	movs	r3, #15
 80007c4:	71fb      	strb	r3, [r7, #7]

	RXM1reg.RXM1SIDH = 0xF;
 80007c6:	230f      	movs	r3, #15
 80007c8:	703b      	strb	r3, [r7, #0]
	RXM1reg.RXM1SIDL = 0xE3;
 80007ca:	23e3      	movs	r3, #227	; 0xe3
 80007cc:	707b      	strb	r3, [r7, #1]
	RXM1reg.RXM1EID8 = 0xf;
 80007ce:	230f      	movs	r3, #15
 80007d0:	70bb      	strb	r3, [r7, #2]
	RXM1reg.RXM1EID0 = 0xf;
 80007d2:	230f      	movs	r3, #15
 80007d4:	70fb      	strb	r3, [r7, #3]

	/* Intialize Rx Filter values */
	RXF0reg.RXF0SIDH = 0xF;
 80007d6:	230f      	movs	r3, #15
 80007d8:	773b      	strb	r3, [r7, #28]
	RXF0reg.RXF0SIDL = 0xE0;      //Starndard Filter
 80007da:	23e0      	movs	r3, #224	; 0xe0
 80007dc:	777b      	strb	r3, [r7, #29]
	RXF0reg.RXF0EID8 = 0xF;
 80007de:	230f      	movs	r3, #15
 80007e0:	77bb      	strb	r3, [r7, #30]
	RXF0reg.RXF0EID0 = 0xF;
 80007e2:	230f      	movs	r3, #15
 80007e4:	77fb      	strb	r3, [r7, #31]

	RXF1reg.RXF1SIDH = 0xF;
 80007e6:	230f      	movs	r3, #15
 80007e8:	763b      	strb	r3, [r7, #24]
	RXF1reg.RXF1SIDL = 0xE0;      //Exntended Filter
 80007ea:	23e0      	movs	r3, #224	; 0xe0
 80007ec:	767b      	strb	r3, [r7, #25]
	RXF1reg.RXF1EID8 = 0xF;
 80007ee:	230f      	movs	r3, #15
 80007f0:	76bb      	strb	r3, [r7, #26]
	RXF1reg.RXF1EID0 = 0xF;
 80007f2:	230f      	movs	r3, #15
 80007f4:	76fb      	strb	r3, [r7, #27]

	RXF2reg.RXF2SIDH = 0xF;
 80007f6:	230f      	movs	r3, #15
 80007f8:	753b      	strb	r3, [r7, #20]
	RXF2reg.RXF2SIDL = 0xE0;
 80007fa:	23e0      	movs	r3, #224	; 0xe0
 80007fc:	757b      	strb	r3, [r7, #21]
	RXF2reg.RXF2EID8 = 0xF;
 80007fe:	230f      	movs	r3, #15
 8000800:	75bb      	strb	r3, [r7, #22]
	RXF2reg.RXF2EID0 = 0xF;
 8000802:	230f      	movs	r3, #15
 8000804:	75fb      	strb	r3, [r7, #23]

	RXF3reg.RXF3SIDH = 0xF;
 8000806:	230f      	movs	r3, #15
 8000808:	743b      	strb	r3, [r7, #16]
	RXF3reg.RXF3SIDL = 0xE0;
 800080a:	23e0      	movs	r3, #224	; 0xe0
 800080c:	747b      	strb	r3, [r7, #17]
	RXF3reg.RXF3EID8 = 0xF;
 800080e:	230f      	movs	r3, #15
 8000810:	74bb      	strb	r3, [r7, #18]
	RXF3reg.RXF3EID0 = 0xF;
 8000812:	230f      	movs	r3, #15
 8000814:	74fb      	strb	r3, [r7, #19]

	RXF4reg.RXF4SIDH = 0xF;
 8000816:	230f      	movs	r3, #15
 8000818:	733b      	strb	r3, [r7, #12]
	RXF4reg.RXF4SIDL = 0xE0;
 800081a:	23e0      	movs	r3, #224	; 0xe0
 800081c:	737b      	strb	r3, [r7, #13]
	RXF4reg.RXF4EID8 = 0xF;
 800081e:	230f      	movs	r3, #15
 8000820:	73bb      	strb	r3, [r7, #14]
	RXF4reg.RXF4EID0 = 0xF;
 8000822:	230f      	movs	r3, #15
 8000824:	73fb      	strb	r3, [r7, #15]

	RXF5reg.RXF5SIDH = 0xF;
 8000826:	230f      	movs	r3, #15
 8000828:	723b      	strb	r3, [r7, #8]
	RXF5reg.RXF5SIDL = 0xE0;		//08
 800082a:	23e0      	movs	r3, #224	; 0xe0
 800082c:	727b      	strb	r3, [r7, #9]
	RXF5reg.RXF5EID8 = 0xF;
 800082e:	230f      	movs	r3, #15
 8000830:	72bb      	strb	r3, [r7, #10]
	RXF5reg.RXF5EID0 = 0xF;
 8000832:	230f      	movs	r3, #15
 8000834:	72fb      	strb	r3, [r7, #11]

    MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	461a      	mov	r2, r3
 800083a:	2123      	movs	r1, #35	; 0x23
 800083c:	2020      	movs	r0, #32
 800083e:	f7ff fed5 	bl	80005ec <MCP2515_WriteByteSequence>
    MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8000842:	463b      	mov	r3, r7
 8000844:	461a      	mov	r2, r3
 8000846:	2127      	movs	r1, #39	; 0x27
 8000848:	2024      	movs	r0, #36	; 0x24
 800084a:	f7ff fecf 	bl	80005ec <MCP2515_WriteByteSequence>
    MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	461a      	mov	r2, r3
 8000854:	2103      	movs	r1, #3
 8000856:	2000      	movs	r0, #0
 8000858:	f7ff fec8 	bl	80005ec <MCP2515_WriteByteSequence>
    MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 800085c:	f107 0318 	add.w	r3, r7, #24
 8000860:	461a      	mov	r2, r3
 8000862:	2107      	movs	r1, #7
 8000864:	2004      	movs	r0, #4
 8000866:	f7ff fec1 	bl	80005ec <MCP2515_WriteByteSequence>
    MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	461a      	mov	r2, r3
 8000870:	210b      	movs	r1, #11
 8000872:	2008      	movs	r0, #8
 8000874:	f7ff feba 	bl	80005ec <MCP2515_WriteByteSequence>
    MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8000878:	f107 0310 	add.w	r3, r7, #16
 800087c:	461a      	mov	r2, r3
 800087e:	2113      	movs	r1, #19
 8000880:	2010      	movs	r0, #16
 8000882:	f7ff feb3 	bl	80005ec <MCP2515_WriteByteSequence>
    MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 8000886:	f107 030c 	add.w	r3, r7, #12
 800088a:	461a      	mov	r2, r3
 800088c:	2117      	movs	r1, #23
 800088e:	2014      	movs	r0, #20
 8000890:	f7ff feac 	bl	80005ec <MCP2515_WriteByteSequence>
    MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8000894:	f107 0308 	add.w	r3, r7, #8
 8000898:	461a      	mov	r2, r3
 800089a:	211b      	movs	r1, #27
 800089c:	2018      	movs	r0, #24
 800089e:	f7ff fea5 	bl	80005ec <MCP2515_WriteByteSequence>


/*Setting normal mode*/
    while(MCP2515_SetNormalMode() != true);
 80008a2:	bf00      	nop
 80008a4:	f7ff fe3a 	bl	800051c <MCP2515_SetNormalMode>
 80008a8:	4603      	mov	r3, r0
 80008aa:	f083 0301 	eor.w	r3, r3, #1
 80008ae:	b2db      	uxtb	r3, r3
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d1f7      	bne.n	80008a4 <setting_CNFx+0x144>
}
 80008b4:	bf00      	nop
 80008b6:	bf00      	nop
 80008b8:	3720      	adds	r7, #32
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
	...

080008c0 <MCP_settings>:

void MCP_settings(){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0

    HAL_SPI_StateTypeDef	result;

    result = HAL_SPI_GetState(&hspi1);
 80008c6:	4818      	ldr	r0, [pc, #96]	; (8000928 <MCP_settings+0x68>)
 80008c8:	f004 fd07 	bl	80052da <HAL_SPI_GetState>
 80008cc:	4603      	mov	r3, r0
 80008ce:	71fb      	strb	r3, [r7, #7]
     if(result == HAL_SPI_STATE_READY)
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d108      	bne.n	80008e8 <MCP_settings+0x28>
         while(MCP2515_SetConfigMode() != true);
 80008d6:	bf00      	nop
 80008d8:	f7ff fe02 	bl	80004e0 <MCP2515_SetConfigMode>
 80008dc:	4603      	mov	r3, r0
 80008de:	f083 0301 	eor.w	r3, r3, #1
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d1f7      	bne.n	80008d8 <MCP_settings+0x18>

    setting_CNFx();
 80008e8:	f7ff ff3a 	bl	8000760 <setting_CNFx>
    GPIOC->BSRR |= GPIO_BSRR_BS13;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MCP_settings+0x6c>)
 80008ee:	691b      	ldr	r3, [r3, #16]
 80008f0:	4a0e      	ldr	r2, [pc, #56]	; (800092c <MCP_settings+0x6c>)
 80008f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80008f6:	6113      	str	r3, [r2, #16]
    HAL_Delay(1000);
 80008f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008fc:	f000 fd96 	bl	800142c <HAL_Delay>
    GPIOC->BSRR |= GPIO_BSRR_BR13;
 8000900:	4b0a      	ldr	r3, [pc, #40]	; (800092c <MCP_settings+0x6c>)
 8000902:	691b      	ldr	r3, [r3, #16]
 8000904:	4a09      	ldr	r2, [pc, #36]	; (800092c <MCP_settings+0x6c>)
 8000906:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800090a:	6113      	str	r3, [r2, #16]
    HAL_Delay(1000);
 800090c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000910:	f000 fd8c 	bl	800142c <HAL_Delay>
    GPIOC->BSRR |= GPIO_BSRR_BS13;
 8000914:	4b05      	ldr	r3, [pc, #20]	; (800092c <MCP_settings+0x6c>)
 8000916:	691b      	ldr	r3, [r3, #16]
 8000918:	4a04      	ldr	r2, [pc, #16]	; (800092c <MCP_settings+0x6c>)
 800091a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800091e:	6113      	str	r3, [r2, #16]
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	2000016c 	.word	0x2000016c
 800092c:	40011000 	.word	0x40011000

08000930 <SPI_Send>:


void SPI_Send(){
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
    uint8_t	res;
    uCAN_MSG	struct_of_msg;

    ctrl_status.ctrl_status = MCP2515_ReadStatus();
 8000936:	f7ff fea1 	bl	800067c <MCP2515_ReadStatus>
 800093a:	4603      	mov	r3, r0
 800093c:	461a      	mov	r2, r3
 800093e:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <SPI_Send+0xb0>)
 8000940:	701a      	strb	r2, [r3, #0]

    if(ctrl_status.TXB0REQ != 1){
 8000942:	4b27      	ldr	r3, [pc, #156]	; (80009e0 <SPI_Send+0xb0>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	f003 0304 	and.w	r3, r3, #4
 800094a:	b2db      	uxtb	r3, r3
 800094c:	2b00      	cmp	r3, #0
 800094e:	d142      	bne.n	80009d6 <SPI_Send+0xa6>

	res = HAL_SPI_GetState(&hspi1);
 8000950:	4824      	ldr	r0, [pc, #144]	; (80009e4 <SPI_Send+0xb4>)
 8000952:	f004 fcc2 	bl	80052da <HAL_SPI_GetState>
 8000956:	4603      	mov	r3, r0
 8000958:	75fb      	strb	r3, [r7, #23]
	if(res == HAL_SPI_STATE_READY){
 800095a:	7dfb      	ldrb	r3, [r7, #23]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d13a      	bne.n	80009d6 <SPI_Send+0xa6>

	    struct_of_msg.frame.idType = 0x0;
 8000960:	2300      	movs	r3, #0
 8000962:	703b      	strb	r3, [r7, #0]
	    struct_of_msg.frame.id = 0x66 << 4;
 8000964:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 8000968:	607b      	str	r3, [r7, #4]
	    struct_of_msg.frame.dlc = 0x06;
 800096a:	2306      	movs	r3, #6
 800096c:	723b      	strb	r3, [r7, #8]
	    struct_of_msg.frame.data0 = OUT.X.bit.LO;
 800096e:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <SPI_Send+0xb8>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	727b      	strb	r3, [r7, #9]
	    struct_of_msg.frame.data1 = OUT.X.bit.HI;
 8000974:	4b1c      	ldr	r3, [pc, #112]	; (80009e8 <SPI_Send+0xb8>)
 8000976:	785b      	ldrb	r3, [r3, #1]
 8000978:	72bb      	strb	r3, [r7, #10]
	    struct_of_msg.frame.data2 = OUT.Y.bit.LO;
 800097a:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <SPI_Send+0xb8>)
 800097c:	789b      	ldrb	r3, [r3, #2]
 800097e:	72fb      	strb	r3, [r7, #11]
	    struct_of_msg.frame.data3 = OUT.Y.bit.HI;
 8000980:	4b19      	ldr	r3, [pc, #100]	; (80009e8 <SPI_Send+0xb8>)
 8000982:	78db      	ldrb	r3, [r3, #3]
 8000984:	733b      	strb	r3, [r7, #12]
	    struct_of_msg.frame.data4 = OUT.Z.bit.LO;
 8000986:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <SPI_Send+0xb8>)
 8000988:	791b      	ldrb	r3, [r3, #4]
 800098a:	737b      	strb	r3, [r7, #13]
	    struct_of_msg.frame.data5 = OUT.Z.bit.HI;
 800098c:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <SPI_Send+0xb8>)
 800098e:	795b      	ldrb	r3, [r3, #5]
 8000990:	73bb      	strb	r3, [r7, #14]

	    MCP2515_CS_LOW();
 8000992:	2200      	movs	r2, #0
 8000994:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000998:	4814      	ldr	r0, [pc, #80]	; (80009ec <SPI_Send+0xbc>)
 800099a:	f001 fd8b 	bl	80024b4 <HAL_GPIO_WritePin>
	    SPI_Tx(MCP2515_LOAD_TXB0SIDH);
 800099e:	2040      	movs	r0, #64	; 0x40
 80009a0:	f7ff fea8 	bl	80006f4 <SPI_Tx>
	    SPI_TxBuffer( &(struct_of_msg.frame.idType), 4);
 80009a4:	463b      	mov	r3, r7
 80009a6:	2104      	movs	r1, #4
 80009a8:	4618      	mov	r0, r3
 80009aa:	f7ff feb5 	bl	8000718 <SPI_TxBuffer>
	    SPI_Tx(struct_of_msg.frame.dlc);
 80009ae:	7a3b      	ldrb	r3, [r7, #8]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff fe9f 	bl	80006f4 <SPI_Tx>
	    SPI_TxBuffer( &(struct_of_msg.frame.data0), struct_of_msg.frame.dlc);
 80009b6:	7a3a      	ldrb	r2, [r7, #8]
 80009b8:	463b      	mov	r3, r7
 80009ba:	3309      	adds	r3, #9
 80009bc:	4611      	mov	r1, r2
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff feaa 	bl	8000718 <SPI_TxBuffer>
	    MCP2515_CS_HIGH();
 80009c4:	2201      	movs	r2, #1
 80009c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009ca:	4808      	ldr	r0, [pc, #32]	; (80009ec <SPI_Send+0xbc>)
 80009cc:	f001 fd72 	bl	80024b4 <HAL_GPIO_WritePin>

	    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 80009d0:	2081      	movs	r0, #129	; 0x81
 80009d2:	f7ff fe37 	bl	8000644 <MCP2515_RequestToSend>
	}
    }
}
 80009d6:	bf00      	nop
 80009d8:	3718      	adds	r7, #24
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000098 	.word	0x20000098
 80009e4:	2000016c 	.word	0x2000016c
 80009e8:	20000090 	.word	0x20000090
 80009ec:	40010800 	.word	0x40010800

080009f0 <CAN_Recieve>:


void CAN_Recieve(CAN_HandleTypeDef *hcan){
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b096      	sub	sp, #88	; 0x58
 80009f4:	af02      	add	r7, sp, #8
 80009f6:	6078      	str	r0, [r7, #4]
	uint8_t			RX_mailbox[6];
	int16_t			axis_x_data[1], axis_y_data[1], axis_z_data[1];
	char 			buffer[50];
	HAL_StatusTypeDef	status;

	re.ctrl_rx_status = MCP2515_GetRxStatus();
 80009f8:	f7ff fe5e 	bl	80006b8 <MCP2515_GetRxStatus>
 80009fc:	4603      	mov	r3, r0
 80009fe:	461a      	mov	r2, r3
 8000a00:	4b31      	ldr	r3, [pc, #196]	; (8000ac8 <CAN_Recieve+0xd8>)
 8000a02:	701a      	strb	r2, [r3, #0]

	status = HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RX_mailbox);
 8000a04:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000a08:	4a30      	ldr	r2, [pc, #192]	; (8000acc <CAN_Recieve+0xdc>)
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f000 ff39 	bl	8001884 <HAL_CAN_GetRxMessage>
 8000a12:	4603      	mov	r3, r0
 8000a14:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if(status == HAL_OK){
 8000a18:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d14b      	bne.n	8000ab8 <CAN_Recieve+0xc8>
		axis_x_data[0] = (RX_mailbox[0]<<8) | RX_mailbox[1];
 8000a20:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8000a24:	021b      	lsls	r3, r3, #8
 8000a26:	b21a      	sxth	r2, r3
 8000a28:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8000a2c:	b21b      	sxth	r3, r3
 8000a2e:	4313      	orrs	r3, r2
 8000a30:	b21b      	sxth	r3, r3
 8000a32:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
		axis_y_data[0] = (RX_mailbox[2]<<8) | RX_mailbox[3];
 8000a36:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8000a3a:	021b      	lsls	r3, r3, #8
 8000a3c:	b21a      	sxth	r2, r3
 8000a3e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8000a42:	b21b      	sxth	r3, r3
 8000a44:	4313      	orrs	r3, r2
 8000a46:	b21b      	sxth	r3, r3
 8000a48:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		axis_z_data[0] = (RX_mailbox[4]<<8) | RX_mailbox[5];
 8000a4c:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8000a50:	021b      	lsls	r3, r3, #8
 8000a52:	b21a      	sxth	r2, r3
 8000a54:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8000a58:	b21b      	sxth	r3, r3
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	b21b      	sxth	r3, r3
 8000a5e:	87bb      	strh	r3, [r7, #60]	; 0x3c

		sprintf(buffer, "X_axis: %d\tY_axis: %d\tZ_axis: %d\r\n", axis_x_data[0], axis_y_data[0], axis_z_data[0]);
 8000a60:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8000a64:	461a      	mov	r2, r3
 8000a66:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8000a70:	f107 0008 	add.w	r0, r7, #8
 8000a74:	9300      	str	r3, [sp, #0]
 8000a76:	460b      	mov	r3, r1
 8000a78:	4915      	ldr	r1, [pc, #84]	; (8000ad0 <CAN_Recieve+0xe0>)
 8000a7a:	f004 ff35 	bl	80058e8 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), 10);
 8000a7e:	f107 0308 	add.w	r3, r7, #8
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff fb62 	bl	800014c <strlen>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	b29a      	uxth	r2, r3
 8000a8c:	f107 0108 	add.w	r1, r7, #8
 8000a90:	230a      	movs	r3, #10
 8000a92:	4810      	ldr	r0, [pc, #64]	; (8000ad4 <CAN_Recieve+0xe4>)
 8000a94:	f004 fd76 	bl	8005584 <HAL_UART_Transmit>

		rs.RS_X_axis_data = 0;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	; (8000ad8 <CAN_Recieve+0xe8>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	621a      	str	r2, [r3, #32]
		rs.RS_Y_axis_data = 0;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <CAN_Recieve+0xe8>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	625a      	str	r2, [r3, #36]	; 0x24
		rs.RS_Z_axis_data = 0;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <CAN_Recieve+0xe8>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	629a      	str	r2, [r3, #40]	; 0x28

		rs.RS_DataSended = 1;
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <CAN_Recieve+0xe8>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	605a      	str	r2, [r3, #4]
		rs.RS_DataReady = 0;
 8000ab0:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <CAN_Recieve+0xe8>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]

	    }
	else
	    rs.RS_DataSended = 0;
}
 8000ab6:	e002      	b.n	8000abe <CAN_Recieve+0xce>
	    rs.RS_DataSended = 0;
 8000ab8:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <CAN_Recieve+0xe8>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	605a      	str	r2, [r3, #4]
}
 8000abe:	bf00      	nop
 8000ac0:	3750      	adds	r7, #80	; 0x50
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	2000009c 	.word	0x2000009c
 8000acc:	200000cc 	.word	0x200000cc
 8000ad0:	080061f4 	.word	0x080061f4
 8000ad4:	200001c4 	.word	0x200001c4
 8000ad8:	200000a0 	.word	0x200000a0

08000adc <HAL_CAN_RxFifo0MsgPendingCallback>:
uint8_t RxData[8] = {0};
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0MsgPendingCallback (CAN_HandleTypeDef * hcan){
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
 8000ae4:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000ae6:	4a09      	ldr	r2, [pc, #36]	; (8000b0c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000ae8:	2100      	movs	r1, #0
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f000 feca 	bl	8001884 <HAL_CAN_GetRxMessage>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d104      	bne.n	8000b00 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>
    	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000af6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000afa:	4805      	ldr	r0, [pc, #20]	; (8000b10 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000afc:	f001 fcf2 	bl	80024e4 <HAL_GPIO_TogglePin>
    }
}
 8000b00:	bf00      	nop
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	2000020c 	.word	0x2000020c
 8000b0c:	200000cc 	.word	0x200000cc
 8000b10:	40011000 	.word	0x40011000

08000b14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b18:	f000 fc26 	bl	8001368 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b1c:	f000 f81e 	bl	8000b5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b20:	f000 f97c 	bl	8000e1c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b24:	f000 f8ec 	bl	8000d00 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000b28:	f000 f94e 	bl	8000dc8 <MX_USART1_UART_Init>
  MX_CRC_Init();
 8000b2c:	f000 f8d4 	bl	8000cd8 <MX_CRC_Init>
  MX_CAN_Init();
 8000b30:	f000 f85a 	bl	8000be8 <MX_CAN_Init>
  MX_SPI1_Init();
 8000b34:	f000 f912 	bl	8000d5c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  ACC_init(&hi2c1);
 8000b38:	4806      	ldr	r0, [pc, #24]	; (8000b54 <main+0x40>)
 8000b3a:	f7ff fb3f 	bl	80001bc <ACC_init>
  MCP_settings();
 8000b3e:	f7ff febf 	bl	80008c0 <MCP_settings>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    update_ACC_data(&hi2c1);
 8000b42:	4804      	ldr	r0, [pc, #16]	; (8000b54 <main+0x40>)
 8000b44:	f7ff fb0a 	bl	800015c <update_ACC_data>
    SPI_Send();
 8000b48:	f7ff fef2 	bl	8000930 <SPI_Send>
    CAN_Recieve(&hcan);
 8000b4c:	4802      	ldr	r0, [pc, #8]	; (8000b58 <main+0x44>)
 8000b4e:	f7ff ff4f 	bl	80009f0 <CAN_Recieve>
    update_ACC_data(&hi2c1);
 8000b52:	e7f6      	b.n	8000b42 <main+0x2e>
 8000b54:	20000118 	.word	0x20000118
 8000b58:	200000e8 	.word	0x200000e8

08000b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b090      	sub	sp, #64	; 0x40
 8000b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b62:	f107 0318 	add.w	r3, r7, #24
 8000b66:	2228      	movs	r2, #40	; 0x28
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f004 feb4 	bl	80058d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
 8000b7c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b86:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b90:	2302      	movs	r3, #2
 8000b92:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b9a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba0:	f107 0318 	add.w	r3, r7, #24
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f003 faf9 	bl	800419c <HAL_RCC_OscConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000bb0:	f000 f9a2 	bl	8000ef8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb4:	230f      	movs	r3, #15
 8000bb6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	2102      	movs	r1, #2
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f003 fd66 	bl	80046a0 <HAL_RCC_ClockConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000bda:	f000 f98d 	bl	8000ef8 <Error_Handler>
  }
}
 8000bde:	bf00      	nop
 8000be0:	3740      	adds	r7, #64	; 0x40
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	; 0x28
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000bee:	4b38      	ldr	r3, [pc, #224]	; (8000cd0 <MX_CAN_Init+0xe8>)
 8000bf0:	4a38      	ldr	r2, [pc, #224]	; (8000cd4 <MX_CAN_Init+0xec>)
 8000bf2:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 4;
 8000bf4:	4b36      	ldr	r3, [pc, #216]	; (8000cd0 <MX_CAN_Init+0xe8>)
 8000bf6:	2204      	movs	r2, #4
 8000bf8:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_SILENT;
 8000bfa:	4b35      	ldr	r3, [pc, #212]	; (8000cd0 <MX_CAN_Init+0xe8>)
 8000bfc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000c00:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c02:	4b33      	ldr	r3, [pc, #204]	; (8000cd0 <MX_CAN_Init+0xe8>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_15TQ;
 8000c08:	4b31      	ldr	r3, [pc, #196]	; (8000cd0 <MX_CAN_Init+0xe8>)
 8000c0a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000c0e:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000c10:	4b2f      	ldr	r3, [pc, #188]	; (8000cd0 <MX_CAN_Init+0xe8>)
 8000c12:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000c16:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8000c18:	4b2d      	ldr	r3, [pc, #180]	; (8000cd0 <MX_CAN_Init+0xe8>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = ENABLE;
 8000c1e:	4b2c      	ldr	r3, [pc, #176]	; (8000cd0 <MX_CAN_Init+0xe8>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000c24:	4b2a      	ldr	r3, [pc, #168]	; (8000cd0 <MX_CAN_Init+0xe8>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = ENABLE;
 8000c2a:	4b29      	ldr	r3, [pc, #164]	; (8000cd0 <MX_CAN_Init+0xe8>)
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000c30:	4b27      	ldr	r3, [pc, #156]	; (8000cd0 <MX_CAN_Init+0xe8>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = ENABLE;
 8000c36:	4b26      	ldr	r3, [pc, #152]	; (8000cd0 <MX_CAN_Init+0xe8>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000c3c:	4824      	ldr	r0, [pc, #144]	; (8000cd0 <MX_CAN_Init+0xe8>)
 8000c3e:	f000 fc19 	bl	8001474 <HAL_CAN_Init>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_CAN_Init+0x64>
  {
    Error_Handler();
 8000c48:	f000 f956 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  sFilterConfig.FilterActivation = ENABLE;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	623b      	str	r3, [r7, #32]
  sFilterConfig.FilterBank = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0xffff;
 8000c60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c64:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0xffff;
 8000c66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c6a:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0xffff;
 8000c6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c70:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0xffff;
 8000c72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c76:	60fb      	str	r3, [r7, #12]
  sFilterConfig.SlaveStartFilterBank = 10;
 8000c78:	230a      	movs	r3, #10
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
  if(HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK){
 8000c7c:	463b      	mov	r3, r7
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4813      	ldr	r0, [pc, #76]	; (8000cd0 <MX_CAN_Init+0xe8>)
 8000c82:	f000 fcf2 	bl	800166a <HAL_CAN_ConfigFilter>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_CAN_Init+0xa8>
      Error_Handler();
 8000c8c:	f000 f934 	bl	8000ef8 <Error_Handler>
  }


  if(HAL_CAN_Start(&hcan) != HAL_OK){
 8000c90:	480f      	ldr	r0, [pc, #60]	; (8000cd0 <MX_CAN_Init+0xe8>)
 8000c92:	f000 fdb3 	bl	80017fc <HAL_CAN_Start>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_CAN_Init+0xb8>
      Error_Handler();
 8000c9c:	f000 f92c 	bl	8000ef8 <Error_Handler>
   }
  if(HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){
 8000ca0:	2102      	movs	r1, #2
 8000ca2:	480b      	ldr	r0, [pc, #44]	; (8000cd0 <MX_CAN_Init+0xe8>)
 8000ca4:	f000 ff0f 	bl	8001ac6 <HAL_CAN_ActivateNotification>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_CAN_Init+0xca>
	  Error_Handler();
 8000cae:	f000 f923 	bl	8000ef8 <Error_Handler>
  }
  if(HAL_CAN_ActivateNotification(&hcan, CAN_IT_ERROR) != HAL_OK){
 8000cb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cb6:	4806      	ldr	r0, [pc, #24]	; (8000cd0 <MX_CAN_Init+0xe8>)
 8000cb8:	f000 ff05 	bl	8001ac6 <HAL_CAN_ActivateNotification>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_CAN_Init+0xde>
	  Error_Handler();
 8000cc2:	f000 f919 	bl	8000ef8 <Error_Handler>
  }

  //set_TX_Header(&TxHeader);
  /* USER CODE END CAN_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	3728      	adds	r7, #40	; 0x28
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	200000e8 	.word	0x200000e8
 8000cd4:	40006400 	.word	0x40006400

08000cd8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <MX_CRC_Init+0x20>)
 8000cde:	4a07      	ldr	r2, [pc, #28]	; (8000cfc <MX_CRC_Init+0x24>)
 8000ce0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000ce2:	4805      	ldr	r0, [pc, #20]	; (8000cf8 <MX_CRC_Init+0x20>)
 8000ce4:	f001 fa45 	bl	8002172 <HAL_CRC_Init>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000cee:	f000 f903 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	20000110 	.word	0x20000110
 8000cfc:	40023000 	.word	0x40023000

08000d00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <MX_I2C1_Init+0x50>)
 8000d06:	4a13      	ldr	r2, [pc, #76]	; (8000d54 <MX_I2C1_Init+0x54>)
 8000d08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <MX_I2C1_Init+0x50>)
 8000d0c:	4a12      	ldr	r2, [pc, #72]	; (8000d58 <MX_I2C1_Init+0x58>)
 8000d0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d10:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <MX_I2C1_Init+0x50>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 36;
 8000d16:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <MX_I2C1_Init+0x50>)
 8000d18:	2224      	movs	r2, #36	; 0x24
 8000d1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <MX_I2C1_Init+0x50>)
 8000d1e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d24:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <MX_I2C1_Init+0x50>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d2a:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <MX_I2C1_Init+0x50>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <MX_I2C1_Init+0x50>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <MX_I2C1_Init+0x50>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d3c:	4804      	ldr	r0, [pc, #16]	; (8000d50 <MX_I2C1_Init+0x50>)
 8000d3e:	f001 fbeb 	bl	8002518 <HAL_I2C_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d48:	f000 f8d6 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	20000118 	.word	0x20000118
 8000d54:	40005400 	.word	0x40005400
 8000d58:	000186a0 	.word	0x000186a0

08000d5c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d60:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <MX_SPI1_Init+0x64>)
 8000d62:	4a18      	ldr	r2, [pc, #96]	; (8000dc4 <MX_SPI1_Init+0x68>)
 8000d64:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d66:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <MX_SPI1_Init+0x64>)
 8000d68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d6c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d6e:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <MX_SPI1_Init+0x64>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d74:	4b12      	ldr	r3, [pc, #72]	; (8000dc0 <MX_SPI1_Init+0x64>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <MX_SPI1_Init+0x64>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <MX_SPI1_Init+0x64>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <MX_SPI1_Init+0x64>)
 8000d88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d8c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <MX_SPI1_Init+0x64>)
 8000d90:	2208      	movs	r2, #8
 8000d92:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d94:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <MX_SPI1_Init+0x64>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <MX_SPI1_Init+0x64>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000da0:	4b07      	ldr	r3, [pc, #28]	; (8000dc0 <MX_SPI1_Init+0x64>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <MX_SPI1_Init+0x64>)
 8000da8:	220a      	movs	r2, #10
 8000daa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dac:	4804      	ldr	r0, [pc, #16]	; (8000dc0 <MX_SPI1_Init+0x64>)
 8000dae:	f003 fe05 	bl	80049bc <HAL_SPI_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000db8:	f000 f89e 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dbc:	bf00      	nop
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	2000016c 	.word	0x2000016c
 8000dc4:	40013000 	.word	0x40013000

08000dc8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000dcc:	4b11      	ldr	r3, [pc, #68]	; (8000e14 <MX_USART1_UART_Init+0x4c>)
 8000dce:	4a12      	ldr	r2, [pc, #72]	; (8000e18 <MX_USART1_UART_Init+0x50>)
 8000dd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <MX_USART1_UART_Init+0x4c>)
 8000dd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dda:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <MX_USART1_UART_Init+0x4c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <MX_USART1_UART_Init+0x4c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <MX_USART1_UART_Init+0x4c>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dec:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <MX_USART1_UART_Init+0x4c>)
 8000dee:	220c      	movs	r2, #12
 8000df0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000df2:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <MX_USART1_UART_Init+0x4c>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df8:	4b06      	ldr	r3, [pc, #24]	; (8000e14 <MX_USART1_UART_Init+0x4c>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dfe:	4805      	ldr	r0, [pc, #20]	; (8000e14 <MX_USART1_UART_Init+0x4c>)
 8000e00:	f004 fb70 	bl	80054e4 <HAL_UART_Init>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e0a:	f000 f875 	bl	8000ef8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200001c4 	.word	0x200001c4
 8000e18:	40013800 	.word	0x40013800

08000e1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b088      	sub	sp, #32
 8000e20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e22:	f107 0310 	add.w	r3, r7, #16
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e30:	4b2e      	ldr	r3, [pc, #184]	; (8000eec <MX_GPIO_Init+0xd0>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	4a2d      	ldr	r2, [pc, #180]	; (8000eec <MX_GPIO_Init+0xd0>)
 8000e36:	f043 0310 	orr.w	r3, r3, #16
 8000e3a:	6193      	str	r3, [r2, #24]
 8000e3c:	4b2b      	ldr	r3, [pc, #172]	; (8000eec <MX_GPIO_Init+0xd0>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	f003 0310 	and.w	r3, r3, #16
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e48:	4b28      	ldr	r3, [pc, #160]	; (8000eec <MX_GPIO_Init+0xd0>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	4a27      	ldr	r2, [pc, #156]	; (8000eec <MX_GPIO_Init+0xd0>)
 8000e4e:	f043 0320 	orr.w	r3, r3, #32
 8000e52:	6193      	str	r3, [r2, #24]
 8000e54:	4b25      	ldr	r3, [pc, #148]	; (8000eec <MX_GPIO_Init+0xd0>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	f003 0320 	and.w	r3, r3, #32
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e60:	4b22      	ldr	r3, [pc, #136]	; (8000eec <MX_GPIO_Init+0xd0>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	4a21      	ldr	r2, [pc, #132]	; (8000eec <MX_GPIO_Init+0xd0>)
 8000e66:	f043 0304 	orr.w	r3, r3, #4
 8000e6a:	6193      	str	r3, [r2, #24]
 8000e6c:	4b1f      	ldr	r3, [pc, #124]	; (8000eec <MX_GPIO_Init+0xd0>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	f003 0304 	and.w	r3, r3, #4
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e78:	4b1c      	ldr	r3, [pc, #112]	; (8000eec <MX_GPIO_Init+0xd0>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	4a1b      	ldr	r2, [pc, #108]	; (8000eec <MX_GPIO_Init+0xd0>)
 8000e7e:	f043 0308 	orr.w	r3, r3, #8
 8000e82:	6193      	str	r3, [r2, #24]
 8000e84:	4b19      	ldr	r3, [pc, #100]	; (8000eec <MX_GPIO_Init+0xd0>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	f003 0308 	and.w	r3, r3, #8
 8000e8c:	603b      	str	r3, [r7, #0]
 8000e8e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e96:	4816      	ldr	r0, [pc, #88]	; (8000ef0 <MX_GPIO_Init+0xd4>)
 8000e98:	f001 fb0c 	bl	80024b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ea2:	4814      	ldr	r0, [pc, #80]	; (8000ef4 <MX_GPIO_Init+0xd8>)
 8000ea4:	f001 fb06 	bl	80024b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ea8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eba:	f107 0310 	add.w	r3, r7, #16
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	480b      	ldr	r0, [pc, #44]	; (8000ef0 <MX_GPIO_Init+0xd4>)
 8000ec2:	f001 f973 	bl	80021ac <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8000ec6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000eca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000ed8:	f107 0310 	add.w	r3, r7, #16
 8000edc:	4619      	mov	r1, r3
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <MX_GPIO_Init+0xd8>)
 8000ee0:	f001 f964 	bl	80021ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ee4:	bf00      	nop
 8000ee6:	3720      	adds	r7, #32
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40021000 	.word	0x40021000
 8000ef0:	40011000 	.word	0x40011000
 8000ef4:	40010800 	.word	0x40010800

08000ef8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000efc:	b672      	cpsid	i
}
 8000efe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <Error_Handler+0x8>
	...

08000f04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f0a:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <HAL_MspInit+0x5c>)
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	4a14      	ldr	r2, [pc, #80]	; (8000f60 <HAL_MspInit+0x5c>)
 8000f10:	f043 0301 	orr.w	r3, r3, #1
 8000f14:	6193      	str	r3, [r2, #24]
 8000f16:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <HAL_MspInit+0x5c>)
 8000f18:	699b      	ldr	r3, [r3, #24]
 8000f1a:	f003 0301 	and.w	r3, r3, #1
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f22:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <HAL_MspInit+0x5c>)
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <HAL_MspInit+0x5c>)
 8000f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f2c:	61d3      	str	r3, [r2, #28]
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <HAL_MspInit+0x5c>)
 8000f30:	69db      	ldr	r3, [r3, #28]
 8000f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <HAL_MspInit+0x60>)
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <HAL_MspInit+0x60>)
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f56:	bf00      	nop
 8000f58:	3714      	adds	r7, #20
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr
 8000f60:	40021000 	.word	0x40021000
 8000f64:	40010000 	.word	0x40010000

08000f68 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4a2d      	ldr	r2, [pc, #180]	; (8001038 <HAL_CAN_MspInit+0xd0>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d153      	bne.n	8001030 <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f88:	4b2c      	ldr	r3, [pc, #176]	; (800103c <HAL_CAN_MspInit+0xd4>)
 8000f8a:	69db      	ldr	r3, [r3, #28]
 8000f8c:	4a2b      	ldr	r2, [pc, #172]	; (800103c <HAL_CAN_MspInit+0xd4>)
 8000f8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f92:	61d3      	str	r3, [r2, #28]
 8000f94:	4b29      	ldr	r3, [pc, #164]	; (800103c <HAL_CAN_MspInit+0xd4>)
 8000f96:	69db      	ldr	r3, [r3, #28]
 8000f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa0:	4b26      	ldr	r3, [pc, #152]	; (800103c <HAL_CAN_MspInit+0xd4>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	4a25      	ldr	r2, [pc, #148]	; (800103c <HAL_CAN_MspInit+0xd4>)
 8000fa6:	f043 0308 	orr.w	r3, r3, #8
 8000faa:	6193      	str	r3, [r2, #24]
 8000fac:	4b23      	ldr	r3, [pc, #140]	; (800103c <HAL_CAN_MspInit+0xd4>)
 8000fae:	699b      	ldr	r3, [r3, #24]
 8000fb0:	f003 0308 	and.w	r3, r3, #8
 8000fb4:	60fb      	str	r3, [r7, #12]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4619      	mov	r1, r3
 8000fcc:	481c      	ldr	r0, [pc, #112]	; (8001040 <HAL_CAN_MspInit+0xd8>)
 8000fce:	f001 f8ed 	bl	80021ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4816      	ldr	r0, [pc, #88]	; (8001040 <HAL_CAN_MspInit+0xd8>)
 8000fe8:	f001 f8e0 	bl	80021ac <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000fec:	4b15      	ldr	r3, [pc, #84]	; (8001044 <HAL_CAN_MspInit+0xdc>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff4:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8000ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
 8001002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001004:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
 800100a:	4a0e      	ldr	r2, [pc, #56]	; (8001044 <HAL_CAN_MspInit+0xdc>)
 800100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100e:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 1, 0);
 8001010:	2200      	movs	r2, #0
 8001012:	2101      	movs	r1, #1
 8001014:	2014      	movs	r0, #20
 8001016:	f001 f876 	bl	8002106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800101a:	2014      	movs	r0, #20
 800101c:	f001 f88f 	bl	800213e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 2, 0);
 8001020:	2200      	movs	r2, #0
 8001022:	2102      	movs	r1, #2
 8001024:	2016      	movs	r0, #22
 8001026:	f001 f86e 	bl	8002106 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 800102a:	2016      	movs	r0, #22
 800102c:	f001 f887 	bl	800213e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001030:	bf00      	nop
 8001032:	3728      	adds	r7, #40	; 0x28
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	40006400 	.word	0x40006400
 800103c:	40021000 	.word	0x40021000
 8001040:	40010c00 	.word	0x40010c00
 8001044:	40010000 	.word	0x40010000

08001048 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a09      	ldr	r2, [pc, #36]	; (800107c <HAL_CRC_MspInit+0x34>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d10b      	bne.n	8001072 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <HAL_CRC_MspInit+0x38>)
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	4a08      	ldr	r2, [pc, #32]	; (8001080 <HAL_CRC_MspInit+0x38>)
 8001060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001064:	6153      	str	r3, [r2, #20]
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_CRC_MspInit+0x38>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001072:	bf00      	nop
 8001074:	3714      	adds	r7, #20
 8001076:	46bd      	mov	sp, r7
 8001078:	bc80      	pop	{r7}
 800107a:	4770      	bx	lr
 800107c:	40023000 	.word	0x40023000
 8001080:	40021000 	.word	0x40021000

08001084 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b088      	sub	sp, #32
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 0310 	add.w	r3, r7, #16
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a15      	ldr	r2, [pc, #84]	; (80010f4 <HAL_I2C_MspInit+0x70>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d123      	bne.n	80010ec <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a4:	4b14      	ldr	r3, [pc, #80]	; (80010f8 <HAL_I2C_MspInit+0x74>)
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	4a13      	ldr	r2, [pc, #76]	; (80010f8 <HAL_I2C_MspInit+0x74>)
 80010aa:	f043 0308 	orr.w	r3, r3, #8
 80010ae:	6193      	str	r3, [r2, #24]
 80010b0:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <HAL_I2C_MspInit+0x74>)
 80010b2:	699b      	ldr	r3, [r3, #24]
 80010b4:	f003 0308 	and.w	r3, r3, #8
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010bc:	23c0      	movs	r3, #192	; 0xc0
 80010be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c0:	2312      	movs	r3, #18
 80010c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c4:	2303      	movs	r3, #3
 80010c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	4619      	mov	r1, r3
 80010ce:	480b      	ldr	r0, [pc, #44]	; (80010fc <HAL_I2C_MspInit+0x78>)
 80010d0:	f001 f86c 	bl	80021ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <HAL_I2C_MspInit+0x74>)
 80010d6:	69db      	ldr	r3, [r3, #28]
 80010d8:	4a07      	ldr	r2, [pc, #28]	; (80010f8 <HAL_I2C_MspInit+0x74>)
 80010da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010de:	61d3      	str	r3, [r2, #28]
 80010e0:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <HAL_I2C_MspInit+0x74>)
 80010e2:	69db      	ldr	r3, [r3, #28]
 80010e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010ec:	bf00      	nop
 80010ee:	3720      	adds	r7, #32
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40005400 	.word	0x40005400
 80010f8:	40021000 	.word	0x40021000
 80010fc:	40010c00 	.word	0x40010c00

08001100 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b088      	sub	sp, #32
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 0310 	add.w	r3, r7, #16
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a1b      	ldr	r2, [pc, #108]	; (8001188 <HAL_SPI_MspInit+0x88>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d12f      	bne.n	8001180 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001120:	4b1a      	ldr	r3, [pc, #104]	; (800118c <HAL_SPI_MspInit+0x8c>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	4a19      	ldr	r2, [pc, #100]	; (800118c <HAL_SPI_MspInit+0x8c>)
 8001126:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800112a:	6193      	str	r3, [r2, #24]
 800112c:	4b17      	ldr	r3, [pc, #92]	; (800118c <HAL_SPI_MspInit+0x8c>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001138:	4b14      	ldr	r3, [pc, #80]	; (800118c <HAL_SPI_MspInit+0x8c>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	4a13      	ldr	r2, [pc, #76]	; (800118c <HAL_SPI_MspInit+0x8c>)
 800113e:	f043 0304 	orr.w	r3, r3, #4
 8001142:	6193      	str	r3, [r2, #24]
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <HAL_SPI_MspInit+0x8c>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	f003 0304 	and.w	r3, r3, #4
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001150:	23a0      	movs	r3, #160	; 0xa0
 8001152:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001154:	2302      	movs	r3, #2
 8001156:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001158:	2303      	movs	r3, #3
 800115a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800115c:	f107 0310 	add.w	r3, r7, #16
 8001160:	4619      	mov	r1, r3
 8001162:	480b      	ldr	r0, [pc, #44]	; (8001190 <HAL_SPI_MspInit+0x90>)
 8001164:	f001 f822 	bl	80021ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001168:	2340      	movs	r3, #64	; 0x40
 800116a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	4619      	mov	r1, r3
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <HAL_SPI_MspInit+0x90>)
 800117c:	f001 f816 	bl	80021ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001180:	bf00      	nop
 8001182:	3720      	adds	r7, #32
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40013000 	.word	0x40013000
 800118c:	40021000 	.word	0x40021000
 8001190:	40010800 	.word	0x40010800

08001194 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b088      	sub	sp, #32
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119c:	f107 0310 	add.w	r3, r7, #16
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a1c      	ldr	r2, [pc, #112]	; (8001220 <HAL_UART_MspInit+0x8c>)
 80011b0:	4293      	cmp	r3, r2
 80011b2:	d131      	bne.n	8001218 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011b4:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <HAL_UART_MspInit+0x90>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	4a1a      	ldr	r2, [pc, #104]	; (8001224 <HAL_UART_MspInit+0x90>)
 80011ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011be:	6193      	str	r3, [r2, #24]
 80011c0:	4b18      	ldr	r3, [pc, #96]	; (8001224 <HAL_UART_MspInit+0x90>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011cc:	4b15      	ldr	r3, [pc, #84]	; (8001224 <HAL_UART_MspInit+0x90>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	4a14      	ldr	r2, [pc, #80]	; (8001224 <HAL_UART_MspInit+0x90>)
 80011d2:	f043 0304 	orr.w	r3, r3, #4
 80011d6:	6193      	str	r3, [r2, #24]
 80011d8:	4b12      	ldr	r3, [pc, #72]	; (8001224 <HAL_UART_MspInit+0x90>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ea:	2302      	movs	r3, #2
 80011ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ee:	2303      	movs	r3, #3
 80011f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f2:	f107 0310 	add.w	r3, r7, #16
 80011f6:	4619      	mov	r1, r3
 80011f8:	480b      	ldr	r0, [pc, #44]	; (8001228 <HAL_UART_MspInit+0x94>)
 80011fa:	f000 ffd7 	bl	80021ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001202:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	4619      	mov	r1, r3
 8001212:	4805      	ldr	r0, [pc, #20]	; (8001228 <HAL_UART_MspInit+0x94>)
 8001214:	f000 ffca 	bl	80021ac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001218:	bf00      	nop
 800121a:	3720      	adds	r7, #32
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40013800 	.word	0x40013800
 8001224:	40021000 	.word	0x40021000
 8001228:	40010800 	.word	0x40010800

0800122c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001230:	e7fe      	b.n	8001230 <NMI_Handler+0x4>

08001232 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001236:	e7fe      	b.n	8001236 <HardFault_Handler+0x4>

08001238 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800123c:	e7fe      	b.n	800123c <MemManage_Handler+0x4>

0800123e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001242:	e7fe      	b.n	8001242 <BusFault_Handler+0x4>

08001244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <UsageFault_Handler+0x4>

0800124a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr

08001256 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	bc80      	pop	{r7}
 8001260:	4770      	bx	lr

08001262 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001262:	b480      	push	{r7}
 8001264:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr

0800126e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001272:	f000 f8bf 	bl	80013f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001280:	4802      	ldr	r0, [pc, #8]	; (800128c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001282:	f000 fc45 	bl	8001b10 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	200000e8 	.word	0x200000e8

08001290 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001294:	4802      	ldr	r0, [pc, #8]	; (80012a0 <CAN1_SCE_IRQHandler+0x10>)
 8001296:	f000 fc3b 	bl	8001b10 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200000e8 	.word	0x200000e8

080012a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012ac:	4a14      	ldr	r2, [pc, #80]	; (8001300 <_sbrk+0x5c>)
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <_sbrk+0x60>)
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b8:	4b13      	ldr	r3, [pc, #76]	; (8001308 <_sbrk+0x64>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d102      	bne.n	80012c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <_sbrk+0x64>)
 80012c2:	4a12      	ldr	r2, [pc, #72]	; (800130c <_sbrk+0x68>)
 80012c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <_sbrk+0x64>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4413      	add	r3, r2
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d207      	bcs.n	80012e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012d4:	f004 fad6 	bl	8005884 <__errno>
 80012d8:	4603      	mov	r3, r0
 80012da:	220c      	movs	r2, #12
 80012dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012de:	f04f 33ff 	mov.w	r3, #4294967295
 80012e2:	e009      	b.n	80012f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <_sbrk+0x64>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ea:	4b07      	ldr	r3, [pc, #28]	; (8001308 <_sbrk+0x64>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4413      	add	r3, r2
 80012f2:	4a05      	ldr	r2, [pc, #20]	; (8001308 <_sbrk+0x64>)
 80012f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012f6:	68fb      	ldr	r3, [r7, #12]
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3718      	adds	r7, #24
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20005000 	.word	0x20005000
 8001304:	00000400 	.word	0x00000400
 8001308:	20000214 	.word	0x20000214
 800130c:	20000230 	.word	0x20000230

08001310 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr

0800131c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800131c:	f7ff fff8 	bl	8001310 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001320:	480b      	ldr	r0, [pc, #44]	; (8001350 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001322:	490c      	ldr	r1, [pc, #48]	; (8001354 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001324:	4a0c      	ldr	r2, [pc, #48]	; (8001358 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001328:	e002      	b.n	8001330 <LoopCopyDataInit>

0800132a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800132a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800132c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800132e:	3304      	adds	r3, #4

08001330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001334:	d3f9      	bcc.n	800132a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001336:	4a09      	ldr	r2, [pc, #36]	; (800135c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001338:	4c09      	ldr	r4, [pc, #36]	; (8001360 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800133a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800133c:	e001      	b.n	8001342 <LoopFillZerobss>

0800133e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800133e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001340:	3204      	adds	r2, #4

08001342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001344:	d3fb      	bcc.n	800133e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001346:	f004 faa3 	bl	8005890 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800134a:	f7ff fbe3 	bl	8000b14 <main>
  bx lr
 800134e:	4770      	bx	lr
  ldr r0, =_sdata
 8001350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001354:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001358:	08006280 	.word	0x08006280
  ldr r2, =_sbss
 800135c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001360:	2000022c 	.word	0x2000022c

08001364 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001364:	e7fe      	b.n	8001364 <ADC1_2_IRQHandler>
	...

08001368 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800136c:	4b08      	ldr	r3, [pc, #32]	; (8001390 <HAL_Init+0x28>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a07      	ldr	r2, [pc, #28]	; (8001390 <HAL_Init+0x28>)
 8001372:	f043 0310 	orr.w	r3, r3, #16
 8001376:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001378:	2003      	movs	r0, #3
 800137a:	f000 feb9 	bl	80020f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800137e:	200f      	movs	r0, #15
 8001380:	f000 f808 	bl	8001394 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001384:	f7ff fdbe 	bl	8000f04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40022000 	.word	0x40022000

08001394 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <HAL_InitTick+0x54>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_InitTick+0x58>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	4619      	mov	r1, r3
 80013a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b2:	4618      	mov	r0, r3
 80013b4:	f000 fed1 	bl	800215a <HAL_SYSTICK_Config>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e00e      	b.n	80013e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b0f      	cmp	r3, #15
 80013c6:	d80a      	bhi.n	80013de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013c8:	2200      	movs	r2, #0
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	f04f 30ff 	mov.w	r0, #4294967295
 80013d0:	f000 fe99 	bl	8002106 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d4:	4a06      	ldr	r2, [pc, #24]	; (80013f0 <HAL_InitTick+0x5c>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013da:	2300      	movs	r3, #0
 80013dc:	e000      	b.n	80013e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000004 	.word	0x20000004
 80013ec:	2000000c 	.word	0x2000000c
 80013f0:	20000008 	.word	0x20000008

080013f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <HAL_IncTick+0x1c>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b05      	ldr	r3, [pc, #20]	; (8001414 <HAL_IncTick+0x20>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4413      	add	r3, r2
 8001404:	4a03      	ldr	r2, [pc, #12]	; (8001414 <HAL_IncTick+0x20>)
 8001406:	6013      	str	r3, [r2, #0]
}
 8001408:	bf00      	nop
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr
 8001410:	2000000c 	.word	0x2000000c
 8001414:	20000218 	.word	0x20000218

08001418 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return uwTick;
 800141c:	4b02      	ldr	r3, [pc, #8]	; (8001428 <HAL_GetTick+0x10>)
 800141e:	681b      	ldr	r3, [r3, #0]
}
 8001420:	4618      	mov	r0, r3
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	20000218 	.word	0x20000218

0800142c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001434:	f7ff fff0 	bl	8001418 <HAL_GetTick>
 8001438:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001444:	d005      	beq.n	8001452 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001446:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <HAL_Delay+0x44>)
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	461a      	mov	r2, r3
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	4413      	add	r3, r2
 8001450:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001452:	bf00      	nop
 8001454:	f7ff ffe0 	bl	8001418 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	429a      	cmp	r2, r3
 8001462:	d8f7      	bhi.n	8001454 <HAL_Delay+0x28>
  {
  }
}
 8001464:	bf00      	nop
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	2000000c 	.word	0x2000000c

08001474 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e0ed      	b.n	8001662 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 3020 	ldrb.w	r3, [r3, #32]
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d102      	bne.n	8001498 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff fd68 	bl	8000f68 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f042 0201 	orr.w	r2, r2, #1
 80014a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014a8:	f7ff ffb6 	bl	8001418 <HAL_GetTick>
 80014ac:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014ae:	e012      	b.n	80014d6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014b0:	f7ff ffb2 	bl	8001418 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b0a      	cmp	r3, #10
 80014bc:	d90b      	bls.n	80014d6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2205      	movs	r2, #5
 80014ce:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80014d2:	2301      	movs	r3, #1
 80014d4:	e0c5      	b.n	8001662 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f003 0301 	and.w	r3, r3, #1
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0e5      	beq.n	80014b0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0202 	bic.w	r2, r2, #2
 80014f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014f4:	f7ff ff90 	bl	8001418 <HAL_GetTick>
 80014f8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80014fa:	e012      	b.n	8001522 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014fc:	f7ff ff8c 	bl	8001418 <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	2b0a      	cmp	r3, #10
 8001508:	d90b      	bls.n	8001522 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2205      	movs	r2, #5
 800151a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e09f      	b.n	8001662 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1e5      	bne.n	80014fc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	7e1b      	ldrb	r3, [r3, #24]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d108      	bne.n	800154a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	e007      	b.n	800155a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001558:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	7e5b      	ldrb	r3, [r3, #25]
 800155e:	2b01      	cmp	r3, #1
 8001560:	d108      	bne.n	8001574 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	e007      	b.n	8001584 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001582:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	7e9b      	ldrb	r3, [r3, #26]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d108      	bne.n	800159e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f042 0220 	orr.w	r2, r2, #32
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	e007      	b.n	80015ae <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 0220 	bic.w	r2, r2, #32
 80015ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	7edb      	ldrb	r3, [r3, #27]
 80015b2:	2b01      	cmp	r3, #1
 80015b4:	d108      	bne.n	80015c8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f022 0210 	bic.w	r2, r2, #16
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	e007      	b.n	80015d8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f042 0210 	orr.w	r2, r2, #16
 80015d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	7f1b      	ldrb	r3, [r3, #28]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d108      	bne.n	80015f2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f042 0208 	orr.w	r2, r2, #8
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	e007      	b.n	8001602 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f022 0208 	bic.w	r2, r2, #8
 8001600:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	7f5b      	ldrb	r3, [r3, #29]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d108      	bne.n	800161c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f042 0204 	orr.w	r2, r2, #4
 8001618:	601a      	str	r2, [r3, #0]
 800161a:	e007      	b.n	800162c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 0204 	bic.w	r2, r2, #4
 800162a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	431a      	orrs	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	695b      	ldr	r3, [r3, #20]
 8001640:	ea42 0103 	orr.w	r1, r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	1e5a      	subs	r2, r3, #1
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	430a      	orrs	r2, r1
 8001650:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800166a:	b480      	push	{r7}
 800166c:	b087      	sub	sp, #28
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
 8001672:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001680:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001682:	7cfb      	ldrb	r3, [r7, #19]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d003      	beq.n	8001690 <HAL_CAN_ConfigFilter+0x26>
 8001688:	7cfb      	ldrb	r3, [r7, #19]
 800168a:	2b02      	cmp	r3, #2
 800168c:	f040 80aa 	bne.w	80017e4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001696:	f043 0201 	orr.w	r2, r3, #1
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	695b      	ldr	r3, [r3, #20]
 80016a4:	f003 031f 	and.w	r3, r3, #31
 80016a8:	2201      	movs	r2, #1
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	43db      	mvns	r3, r3
 80016ba:	401a      	ands	r2, r3
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d123      	bne.n	8001712 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	401a      	ands	r2, r3
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80016ec:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	3248      	adds	r2, #72	; 0x48
 80016f2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001706:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001708:	6979      	ldr	r1, [r7, #20]
 800170a:	3348      	adds	r3, #72	; 0x48
 800170c:	00db      	lsls	r3, r3, #3
 800170e:	440b      	add	r3, r1
 8001710:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d122      	bne.n	8001760 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	431a      	orrs	r2, r3
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800173a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	3248      	adds	r2, #72	; 0x48
 8001740:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001754:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001756:	6979      	ldr	r1, [r7, #20]
 8001758:	3348      	adds	r3, #72	; 0x48
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	440b      	add	r3, r1
 800175e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d109      	bne.n	800177c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	43db      	mvns	r3, r3
 8001772:	401a      	ands	r2, r3
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800177a:	e007      	b.n	800178c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	431a      	orrs	r2, r3
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	691b      	ldr	r3, [r3, #16]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d109      	bne.n	80017a8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	43db      	mvns	r3, r3
 800179e:	401a      	ands	r2, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80017a6:	e007      	b.n	80017b8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	431a      	orrs	r2, r3
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d107      	bne.n	80017d0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	431a      	orrs	r2, r3
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017d6:	f023 0201 	bic.w	r2, r3, #1
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80017e0:	2300      	movs	r3, #0
 80017e2:	e006      	b.n	80017f2 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
  }
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	371c      	adds	r7, #28
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr

080017fc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f893 3020 	ldrb.w	r3, [r3, #32]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	2b01      	cmp	r3, #1
 800180e:	d12e      	bne.n	800186e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2202      	movs	r2, #2
 8001814:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f022 0201 	bic.w	r2, r2, #1
 8001826:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001828:	f7ff fdf6 	bl	8001418 <HAL_GetTick>
 800182c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800182e:	e012      	b.n	8001856 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001830:	f7ff fdf2 	bl	8001418 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b0a      	cmp	r3, #10
 800183c:	d90b      	bls.n	8001856 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001842:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2205      	movs	r2, #5
 800184e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e012      	b.n	800187c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1e5      	bne.n	8001830 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800186a:	2300      	movs	r3, #0
 800186c:	e006      	b.n	800187c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001872:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
  }
}
 800187c:	4618      	mov	r0, r3
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001884:	b480      	push	{r7}
 8001886:	b087      	sub	sp, #28
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
 8001890:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001898:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800189a:	7dfb      	ldrb	r3, [r7, #23]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d003      	beq.n	80018a8 <HAL_CAN_GetRxMessage+0x24>
 80018a0:	7dfb      	ldrb	r3, [r7, #23]
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	f040 8103 	bne.w	8001aae <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d10e      	bne.n	80018cc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	f003 0303 	and.w	r3, r3, #3
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d116      	bne.n	80018ea <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e0f7      	b.n	8001abc <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d107      	bne.n	80018ea <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e0e8      	b.n	8001abc <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	331b      	adds	r3, #27
 80018f2:	011b      	lsls	r3, r3, #4
 80018f4:	4413      	add	r3, r2
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0204 	and.w	r2, r3, #4
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d10c      	bne.n	8001922 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	331b      	adds	r3, #27
 8001910:	011b      	lsls	r3, r3, #4
 8001912:	4413      	add	r3, r2
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	0d5b      	lsrs	r3, r3, #21
 8001918:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	e00b      	b.n	800193a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	331b      	adds	r3, #27
 800192a:	011b      	lsls	r3, r3, #4
 800192c:	4413      	add	r3, r2
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	08db      	lsrs	r3, r3, #3
 8001932:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	331b      	adds	r3, #27
 8001942:	011b      	lsls	r3, r3, #4
 8001944:	4413      	add	r3, r2
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0202 	and.w	r2, r3, #2
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	331b      	adds	r3, #27
 8001958:	011b      	lsls	r3, r3, #4
 800195a:	4413      	add	r3, r2
 800195c:	3304      	adds	r3, #4
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0308 	and.w	r3, r3, #8
 8001964:	2b00      	cmp	r3, #0
 8001966:	d003      	beq.n	8001970 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2208      	movs	r2, #8
 800196c:	611a      	str	r2, [r3, #16]
 800196e:	e00b      	b.n	8001988 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	331b      	adds	r3, #27
 8001978:	011b      	lsls	r3, r3, #4
 800197a:	4413      	add	r3, r2
 800197c:	3304      	adds	r3, #4
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 020f 	and.w	r2, r3, #15
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	331b      	adds	r3, #27
 8001990:	011b      	lsls	r3, r3, #4
 8001992:	4413      	add	r3, r2
 8001994:	3304      	adds	r3, #4
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	0a1b      	lsrs	r3, r3, #8
 800199a:	b2da      	uxtb	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	331b      	adds	r3, #27
 80019a8:	011b      	lsls	r3, r3, #4
 80019aa:	4413      	add	r3, r2
 80019ac:	3304      	adds	r3, #4
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	0c1b      	lsrs	r3, r3, #16
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	011b      	lsls	r3, r3, #4
 80019c0:	4413      	add	r3, r2
 80019c2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	011b      	lsls	r3, r3, #4
 80019d6:	4413      	add	r3, r2
 80019d8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	0a1a      	lsrs	r2, r3, #8
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	3301      	adds	r3, #1
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	011b      	lsls	r3, r3, #4
 80019f0:	4413      	add	r3, r2
 80019f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	0c1a      	lsrs	r2, r3, #16
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	3302      	adds	r3, #2
 80019fe:	b2d2      	uxtb	r2, r2
 8001a00:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	011b      	lsls	r3, r3, #4
 8001a0a:	4413      	add	r3, r2
 8001a0c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	0e1a      	lsrs	r2, r3, #24
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	3303      	adds	r3, #3
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	011b      	lsls	r3, r3, #4
 8001a24:	4413      	add	r3, r2
 8001a26:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	3304      	adds	r3, #4
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	011b      	lsls	r3, r3, #4
 8001a3c:	4413      	add	r3, r2
 8001a3e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	0a1a      	lsrs	r2, r3, #8
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	3305      	adds	r3, #5
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	011b      	lsls	r3, r3, #4
 8001a56:	4413      	add	r3, r2
 8001a58:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	0c1a      	lsrs	r2, r3, #16
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	3306      	adds	r3, #6
 8001a64:	b2d2      	uxtb	r2, r2
 8001a66:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	011b      	lsls	r3, r3, #4
 8001a70:	4413      	add	r3, r2
 8001a72:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	0e1a      	lsrs	r2, r3, #24
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	3307      	adds	r3, #7
 8001a7e:	b2d2      	uxtb	r2, r2
 8001a80:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d108      	bne.n	8001a9a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	68da      	ldr	r2, [r3, #12]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f042 0220 	orr.w	r2, r2, #32
 8001a96:	60da      	str	r2, [r3, #12]
 8001a98:	e007      	b.n	8001aaa <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	691a      	ldr	r2, [r3, #16]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f042 0220 	orr.w	r2, r2, #32
 8001aa8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	e006      	b.n	8001abc <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
  }
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	371c      	adds	r7, #28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc80      	pop	{r7}
 8001ac4:	4770      	bx	lr

08001ac6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b085      	sub	sp, #20
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
 8001ace:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ad6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d002      	beq.n	8001ae4 <HAL_CAN_ActivateNotification+0x1e>
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d109      	bne.n	8001af8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6959      	ldr	r1, [r3, #20]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	e006      	b.n	8001b06 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
  }
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr

08001b10 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08a      	sub	sp, #40	; 0x28
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	695b      	ldr	r3, [r3, #20]
 8001b22:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	68db      	ldr	r3, [r3, #12]
 8001b3a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001b4c:	6a3b      	ldr	r3, [r7, #32]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d07c      	beq.n	8001c50 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d023      	beq.n	8001ba8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2201      	movs	r2, #1
 8001b66:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001b72:	6878      	ldr	r0, [r7, #4]
 8001b74:	f000 f983 	bl	8001e7e <HAL_CAN_TxMailbox0CompleteCallback>
 8001b78:	e016      	b.n	8001ba8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	f003 0304 	and.w	r3, r3, #4
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d004      	beq.n	8001b8e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b8c:	e00c      	b.n	8001ba8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	f003 0308 	and.w	r3, r3, #8
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d004      	beq.n	8001ba2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba0:	e002      	b.n	8001ba8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f986 	bl	8001eb4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d024      	beq.n	8001bfc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bba:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d003      	beq.n	8001bce <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f962 	bl	8001e90 <HAL_CAN_TxMailbox1CompleteCallback>
 8001bcc:	e016      	b.n	8001bfc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d004      	beq.n	8001be2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bda:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001bde:	627b      	str	r3, [r7, #36]	; 0x24
 8001be0:	e00c      	b.n	8001bfc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d004      	beq.n	8001bf6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf4:	e002      	b.n	8001bfc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f000 f965 	bl	8001ec6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d024      	beq.n	8001c50 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c0e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f941 	bl	8001ea2 <HAL_CAN_TxMailbox2CompleteCallback>
 8001c20:	e016      	b.n	8001c50 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d004      	beq.n	8001c36 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
 8001c34:	e00c      	b.n	8001c50 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d004      	beq.n	8001c4a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
 8001c48:	e002      	b.n	8001c50 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f944 	bl	8001ed8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001c50:	6a3b      	ldr	r3, [r7, #32]
 8001c52:	f003 0308 	and.w	r3, r3, #8
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d00c      	beq.n	8001c74 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	f003 0310 	and.w	r3, r3, #16
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d007      	beq.n	8001c74 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2210      	movs	r2, #16
 8001c72:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001c74:	6a3b      	ldr	r3, [r7, #32]
 8001c76:	f003 0304 	and.w	r3, r3, #4
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d00b      	beq.n	8001c96 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	f003 0308 	and.w	r3, r3, #8
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d006      	beq.n	8001c96 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2208      	movs	r2, #8
 8001c8e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 f92a 	bl	8001eea <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001c96:	6a3b      	ldr	r3, [r7, #32]
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d009      	beq.n	8001cb4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d002      	beq.n	8001cb4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7fe ff14 	bl	8000adc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001cb4:	6a3b      	ldr	r3, [r7, #32]
 8001cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00c      	beq.n	8001cd8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	f003 0310 	and.w	r3, r3, #16
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d007      	beq.n	8001cd8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cce:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2210      	movs	r2, #16
 8001cd6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001cd8:	6a3b      	ldr	r3, [r7, #32]
 8001cda:	f003 0320 	and.w	r3, r3, #32
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00b      	beq.n	8001cfa <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	f003 0308 	and.w	r3, r3, #8
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d006      	beq.n	8001cfa <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2208      	movs	r2, #8
 8001cf2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 f90a 	bl	8001f0e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001cfa:	6a3b      	ldr	r3, [r7, #32]
 8001cfc:	f003 0310 	and.w	r3, r3, #16
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d009      	beq.n	8001d18 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d002      	beq.n	8001d18 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f8f2 	bl	8001efc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001d18:	6a3b      	ldr	r3, [r7, #32]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d00b      	beq.n	8001d3a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	f003 0310 	and.w	r3, r3, #16
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d006      	beq.n	8001d3a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2210      	movs	r2, #16
 8001d32:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f8f3 	bl	8001f20 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001d3a:	6a3b      	ldr	r3, [r7, #32]
 8001d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d00b      	beq.n	8001d5c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d006      	beq.n	8001d5c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2208      	movs	r2, #8
 8001d54:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f000 f8eb 	bl	8001f32 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001d5c:	6a3b      	ldr	r3, [r7, #32]
 8001d5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d07b      	beq.n	8001e5e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d072      	beq.n	8001e56 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d70:	6a3b      	ldr	r3, [r7, #32]
 8001d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d008      	beq.n	8001d8c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d8c:	6a3b      	ldr	r3, [r7, #32]
 8001d8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d008      	beq.n	8001da8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d003      	beq.n	8001da8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da2:	f043 0302 	orr.w	r3, r3, #2
 8001da6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001da8:	6a3b      	ldr	r3, [r7, #32]
 8001daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d008      	beq.n	8001dc4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbe:	f043 0304 	orr.w	r3, r3, #4
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001dc4:	6a3b      	ldr	r3, [r7, #32]
 8001dc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d043      	beq.n	8001e56 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d03e      	beq.n	8001e56 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001dde:	2b60      	cmp	r3, #96	; 0x60
 8001de0:	d02b      	beq.n	8001e3a <HAL_CAN_IRQHandler+0x32a>
 8001de2:	2b60      	cmp	r3, #96	; 0x60
 8001de4:	d82e      	bhi.n	8001e44 <HAL_CAN_IRQHandler+0x334>
 8001de6:	2b50      	cmp	r3, #80	; 0x50
 8001de8:	d022      	beq.n	8001e30 <HAL_CAN_IRQHandler+0x320>
 8001dea:	2b50      	cmp	r3, #80	; 0x50
 8001dec:	d82a      	bhi.n	8001e44 <HAL_CAN_IRQHandler+0x334>
 8001dee:	2b40      	cmp	r3, #64	; 0x40
 8001df0:	d019      	beq.n	8001e26 <HAL_CAN_IRQHandler+0x316>
 8001df2:	2b40      	cmp	r3, #64	; 0x40
 8001df4:	d826      	bhi.n	8001e44 <HAL_CAN_IRQHandler+0x334>
 8001df6:	2b30      	cmp	r3, #48	; 0x30
 8001df8:	d010      	beq.n	8001e1c <HAL_CAN_IRQHandler+0x30c>
 8001dfa:	2b30      	cmp	r3, #48	; 0x30
 8001dfc:	d822      	bhi.n	8001e44 <HAL_CAN_IRQHandler+0x334>
 8001dfe:	2b10      	cmp	r3, #16
 8001e00:	d002      	beq.n	8001e08 <HAL_CAN_IRQHandler+0x2f8>
 8001e02:	2b20      	cmp	r3, #32
 8001e04:	d005      	beq.n	8001e12 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001e06:	e01d      	b.n	8001e44 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0a:	f043 0308 	orr.w	r3, r3, #8
 8001e0e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e10:	e019      	b.n	8001e46 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	f043 0310 	orr.w	r3, r3, #16
 8001e18:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e1a:	e014      	b.n	8001e46 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	f043 0320 	orr.w	r3, r3, #32
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e24:	e00f      	b.n	8001e46 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e2e:	e00a      	b.n	8001e46 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e38:	e005      	b.n	8001e46 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001e42:	e000      	b.n	8001e46 <HAL_CAN_IRQHandler+0x336>
            break;
 8001e44:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	699a      	ldr	r2, [r3, #24]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001e54:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2204      	movs	r2, #4
 8001e5c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d008      	beq.n	8001e76 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 f867 	bl	8001f44 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001e76:	bf00      	nop
 8001e78:	3728      	adds	r7, #40	; 0x28
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr

08001e90 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr

08001ea2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bc80      	pop	{r7}
 8001eb2:	4770      	bx	lr

08001eb4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001ebc:	bf00      	nop
 8001ebe:	370c      	adds	r7, #12
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr

08001ec6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b083      	sub	sp, #12
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bc80      	pop	{r7}
 8001ed6:	4770      	bx	lr

08001ed8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bc80      	pop	{r7}
 8001ee8:	4770      	bx	lr

08001eea <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr

08001efc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bc80      	pop	{r7}
 8001f0c:	4770      	bx	lr

08001f0e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	b083      	sub	sp, #12
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr

08001f20 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr

08001f32 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr

08001f44 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc80      	pop	{r7}
 8001f54:	4770      	bx	lr
	...

08001f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f68:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <__NVIC_SetPriorityGrouping+0x44>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f6e:	68ba      	ldr	r2, [r7, #8]
 8001f70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f74:	4013      	ands	r3, r2
 8001f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f8a:	4a04      	ldr	r2, [pc, #16]	; (8001f9c <__NVIC_SetPriorityGrouping+0x44>)
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	60d3      	str	r3, [r2, #12]
}
 8001f90:	bf00      	nop
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bc80      	pop	{r7}
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	e000ed00 	.word	0xe000ed00

08001fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa4:	4b04      	ldr	r3, [pc, #16]	; (8001fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	0a1b      	lsrs	r3, r3, #8
 8001faa:	f003 0307 	and.w	r3, r3, #7
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	db0b      	blt.n	8001fe6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	f003 021f 	and.w	r2, r3, #31
 8001fd4:	4906      	ldr	r1, [pc, #24]	; (8001ff0 <__NVIC_EnableIRQ+0x34>)
 8001fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fda:	095b      	lsrs	r3, r3, #5
 8001fdc:	2001      	movs	r0, #1
 8001fde:	fa00 f202 	lsl.w	r2, r0, r2
 8001fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr
 8001ff0:	e000e100 	.word	0xe000e100

08001ff4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	6039      	str	r1, [r7, #0]
 8001ffe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002004:	2b00      	cmp	r3, #0
 8002006:	db0a      	blt.n	800201e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	b2da      	uxtb	r2, r3
 800200c:	490c      	ldr	r1, [pc, #48]	; (8002040 <__NVIC_SetPriority+0x4c>)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	0112      	lsls	r2, r2, #4
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	440b      	add	r3, r1
 8002018:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800201c:	e00a      	b.n	8002034 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	b2da      	uxtb	r2, r3
 8002022:	4908      	ldr	r1, [pc, #32]	; (8002044 <__NVIC_SetPriority+0x50>)
 8002024:	79fb      	ldrb	r3, [r7, #7]
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	3b04      	subs	r3, #4
 800202c:	0112      	lsls	r2, r2, #4
 800202e:	b2d2      	uxtb	r2, r2
 8002030:	440b      	add	r3, r1
 8002032:	761a      	strb	r2, [r3, #24]
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	e000e100 	.word	0xe000e100
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002048:	b480      	push	{r7}
 800204a:	b089      	sub	sp, #36	; 0x24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	f1c3 0307 	rsb	r3, r3, #7
 8002062:	2b04      	cmp	r3, #4
 8002064:	bf28      	it	cs
 8002066:	2304      	movcs	r3, #4
 8002068:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	3304      	adds	r3, #4
 800206e:	2b06      	cmp	r3, #6
 8002070:	d902      	bls.n	8002078 <NVIC_EncodePriority+0x30>
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	3b03      	subs	r3, #3
 8002076:	e000      	b.n	800207a <NVIC_EncodePriority+0x32>
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800207c:	f04f 32ff 	mov.w	r2, #4294967295
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43da      	mvns	r2, r3
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	401a      	ands	r2, r3
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002090:	f04f 31ff 	mov.w	r1, #4294967295
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	fa01 f303 	lsl.w	r3, r1, r3
 800209a:	43d9      	mvns	r1, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a0:	4313      	orrs	r3, r2
         );
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3724      	adds	r7, #36	; 0x24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr

080020ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	3b01      	subs	r3, #1
 80020b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020bc:	d301      	bcc.n	80020c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020be:	2301      	movs	r3, #1
 80020c0:	e00f      	b.n	80020e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020c2:	4a0a      	ldr	r2, [pc, #40]	; (80020ec <SysTick_Config+0x40>)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ca:	210f      	movs	r1, #15
 80020cc:	f04f 30ff 	mov.w	r0, #4294967295
 80020d0:	f7ff ff90 	bl	8001ff4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020d4:	4b05      	ldr	r3, [pc, #20]	; (80020ec <SysTick_Config+0x40>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020da:	4b04      	ldr	r3, [pc, #16]	; (80020ec <SysTick_Config+0x40>)
 80020dc:	2207      	movs	r2, #7
 80020de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	e000e010 	.word	0xe000e010

080020f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff ff2d 	bl	8001f58 <__NVIC_SetPriorityGrouping>
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002106:	b580      	push	{r7, lr}
 8002108:	b086      	sub	sp, #24
 800210a:	af00      	add	r7, sp, #0
 800210c:	4603      	mov	r3, r0
 800210e:	60b9      	str	r1, [r7, #8]
 8002110:	607a      	str	r2, [r7, #4]
 8002112:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002114:	2300      	movs	r3, #0
 8002116:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002118:	f7ff ff42 	bl	8001fa0 <__NVIC_GetPriorityGrouping>
 800211c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	68b9      	ldr	r1, [r7, #8]
 8002122:	6978      	ldr	r0, [r7, #20]
 8002124:	f7ff ff90 	bl	8002048 <NVIC_EncodePriority>
 8002128:	4602      	mov	r2, r0
 800212a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800212e:	4611      	mov	r1, r2
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff ff5f 	bl	8001ff4 <__NVIC_SetPriority>
}
 8002136:	bf00      	nop
 8002138:	3718      	adds	r7, #24
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b082      	sub	sp, #8
 8002142:	af00      	add	r7, sp, #0
 8002144:	4603      	mov	r3, r0
 8002146:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff ff35 	bl	8001fbc <__NVIC_EnableIRQ>
}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f7ff ffa2 	bl	80020ac <SysTick_Config>
 8002168:	4603      	mov	r3, r0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e00e      	b.n	80021a2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	795b      	ldrb	r3, [r3, #5]
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d105      	bne.n	800219a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7fe ff57 	bl	8001048 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b08b      	sub	sp, #44	; 0x2c
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021b6:	2300      	movs	r3, #0
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021ba:	2300      	movs	r3, #0
 80021bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021be:	e169      	b.n	8002494 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021c0:	2201      	movs	r2, #1
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	69fa      	ldr	r2, [r7, #28]
 80021d0:	4013      	ands	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	429a      	cmp	r2, r3
 80021da:	f040 8158 	bne.w	800248e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	4a9a      	ldr	r2, [pc, #616]	; (800244c <HAL_GPIO_Init+0x2a0>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d05e      	beq.n	80022a6 <HAL_GPIO_Init+0xfa>
 80021e8:	4a98      	ldr	r2, [pc, #608]	; (800244c <HAL_GPIO_Init+0x2a0>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d875      	bhi.n	80022da <HAL_GPIO_Init+0x12e>
 80021ee:	4a98      	ldr	r2, [pc, #608]	; (8002450 <HAL_GPIO_Init+0x2a4>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d058      	beq.n	80022a6 <HAL_GPIO_Init+0xfa>
 80021f4:	4a96      	ldr	r2, [pc, #600]	; (8002450 <HAL_GPIO_Init+0x2a4>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d86f      	bhi.n	80022da <HAL_GPIO_Init+0x12e>
 80021fa:	4a96      	ldr	r2, [pc, #600]	; (8002454 <HAL_GPIO_Init+0x2a8>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d052      	beq.n	80022a6 <HAL_GPIO_Init+0xfa>
 8002200:	4a94      	ldr	r2, [pc, #592]	; (8002454 <HAL_GPIO_Init+0x2a8>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d869      	bhi.n	80022da <HAL_GPIO_Init+0x12e>
 8002206:	4a94      	ldr	r2, [pc, #592]	; (8002458 <HAL_GPIO_Init+0x2ac>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d04c      	beq.n	80022a6 <HAL_GPIO_Init+0xfa>
 800220c:	4a92      	ldr	r2, [pc, #584]	; (8002458 <HAL_GPIO_Init+0x2ac>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d863      	bhi.n	80022da <HAL_GPIO_Init+0x12e>
 8002212:	4a92      	ldr	r2, [pc, #584]	; (800245c <HAL_GPIO_Init+0x2b0>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d046      	beq.n	80022a6 <HAL_GPIO_Init+0xfa>
 8002218:	4a90      	ldr	r2, [pc, #576]	; (800245c <HAL_GPIO_Init+0x2b0>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d85d      	bhi.n	80022da <HAL_GPIO_Init+0x12e>
 800221e:	2b12      	cmp	r3, #18
 8002220:	d82a      	bhi.n	8002278 <HAL_GPIO_Init+0xcc>
 8002222:	2b12      	cmp	r3, #18
 8002224:	d859      	bhi.n	80022da <HAL_GPIO_Init+0x12e>
 8002226:	a201      	add	r2, pc, #4	; (adr r2, 800222c <HAL_GPIO_Init+0x80>)
 8002228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800222c:	080022a7 	.word	0x080022a7
 8002230:	08002281 	.word	0x08002281
 8002234:	08002293 	.word	0x08002293
 8002238:	080022d5 	.word	0x080022d5
 800223c:	080022db 	.word	0x080022db
 8002240:	080022db 	.word	0x080022db
 8002244:	080022db 	.word	0x080022db
 8002248:	080022db 	.word	0x080022db
 800224c:	080022db 	.word	0x080022db
 8002250:	080022db 	.word	0x080022db
 8002254:	080022db 	.word	0x080022db
 8002258:	080022db 	.word	0x080022db
 800225c:	080022db 	.word	0x080022db
 8002260:	080022db 	.word	0x080022db
 8002264:	080022db 	.word	0x080022db
 8002268:	080022db 	.word	0x080022db
 800226c:	080022db 	.word	0x080022db
 8002270:	08002289 	.word	0x08002289
 8002274:	0800229d 	.word	0x0800229d
 8002278:	4a79      	ldr	r2, [pc, #484]	; (8002460 <HAL_GPIO_Init+0x2b4>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d013      	beq.n	80022a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800227e:	e02c      	b.n	80022da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	623b      	str	r3, [r7, #32]
          break;
 8002286:	e029      	b.n	80022dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	3304      	adds	r3, #4
 800228e:	623b      	str	r3, [r7, #32]
          break;
 8002290:	e024      	b.n	80022dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	3308      	adds	r3, #8
 8002298:	623b      	str	r3, [r7, #32]
          break;
 800229a:	e01f      	b.n	80022dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	330c      	adds	r3, #12
 80022a2:	623b      	str	r3, [r7, #32]
          break;
 80022a4:	e01a      	b.n	80022dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d102      	bne.n	80022b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022ae:	2304      	movs	r3, #4
 80022b0:	623b      	str	r3, [r7, #32]
          break;
 80022b2:	e013      	b.n	80022dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d105      	bne.n	80022c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022bc:	2308      	movs	r3, #8
 80022be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	69fa      	ldr	r2, [r7, #28]
 80022c4:	611a      	str	r2, [r3, #16]
          break;
 80022c6:	e009      	b.n	80022dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022c8:	2308      	movs	r3, #8
 80022ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	69fa      	ldr	r2, [r7, #28]
 80022d0:	615a      	str	r2, [r3, #20]
          break;
 80022d2:	e003      	b.n	80022dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022d4:	2300      	movs	r3, #0
 80022d6:	623b      	str	r3, [r7, #32]
          break;
 80022d8:	e000      	b.n	80022dc <HAL_GPIO_Init+0x130>
          break;
 80022da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	2bff      	cmp	r3, #255	; 0xff
 80022e0:	d801      	bhi.n	80022e6 <HAL_GPIO_Init+0x13a>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	e001      	b.n	80022ea <HAL_GPIO_Init+0x13e>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3304      	adds	r3, #4
 80022ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	2bff      	cmp	r3, #255	; 0xff
 80022f0:	d802      	bhi.n	80022f8 <HAL_GPIO_Init+0x14c>
 80022f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	e002      	b.n	80022fe <HAL_GPIO_Init+0x152>
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	3b08      	subs	r3, #8
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	210f      	movs	r1, #15
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	fa01 f303 	lsl.w	r3, r1, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	401a      	ands	r2, r3
 8002310:	6a39      	ldr	r1, [r7, #32]
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	fa01 f303 	lsl.w	r3, r1, r3
 8002318:	431a      	orrs	r2, r3
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 80b1 	beq.w	800248e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800232c:	4b4d      	ldr	r3, [pc, #308]	; (8002464 <HAL_GPIO_Init+0x2b8>)
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	4a4c      	ldr	r2, [pc, #304]	; (8002464 <HAL_GPIO_Init+0x2b8>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	6193      	str	r3, [r2, #24]
 8002338:	4b4a      	ldr	r3, [pc, #296]	; (8002464 <HAL_GPIO_Init+0x2b8>)
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002344:	4a48      	ldr	r2, [pc, #288]	; (8002468 <HAL_GPIO_Init+0x2bc>)
 8002346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002348:	089b      	lsrs	r3, r3, #2
 800234a:	3302      	adds	r3, #2
 800234c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002350:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	220f      	movs	r2, #15
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	4013      	ands	r3, r2
 8002366:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a40      	ldr	r2, [pc, #256]	; (800246c <HAL_GPIO_Init+0x2c0>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d013      	beq.n	8002398 <HAL_GPIO_Init+0x1ec>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a3f      	ldr	r2, [pc, #252]	; (8002470 <HAL_GPIO_Init+0x2c4>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d00d      	beq.n	8002394 <HAL_GPIO_Init+0x1e8>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a3e      	ldr	r2, [pc, #248]	; (8002474 <HAL_GPIO_Init+0x2c8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d007      	beq.n	8002390 <HAL_GPIO_Init+0x1e4>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a3d      	ldr	r2, [pc, #244]	; (8002478 <HAL_GPIO_Init+0x2cc>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d101      	bne.n	800238c <HAL_GPIO_Init+0x1e0>
 8002388:	2303      	movs	r3, #3
 800238a:	e006      	b.n	800239a <HAL_GPIO_Init+0x1ee>
 800238c:	2304      	movs	r3, #4
 800238e:	e004      	b.n	800239a <HAL_GPIO_Init+0x1ee>
 8002390:	2302      	movs	r3, #2
 8002392:	e002      	b.n	800239a <HAL_GPIO_Init+0x1ee>
 8002394:	2301      	movs	r3, #1
 8002396:	e000      	b.n	800239a <HAL_GPIO_Init+0x1ee>
 8002398:	2300      	movs	r3, #0
 800239a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800239c:	f002 0203 	and.w	r2, r2, #3
 80023a0:	0092      	lsls	r2, r2, #2
 80023a2:	4093      	lsls	r3, r2
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023aa:	492f      	ldr	r1, [pc, #188]	; (8002468 <HAL_GPIO_Init+0x2bc>)
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	089b      	lsrs	r3, r3, #2
 80023b0:	3302      	adds	r3, #2
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d006      	beq.n	80023d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023c4:	4b2d      	ldr	r3, [pc, #180]	; (800247c <HAL_GPIO_Init+0x2d0>)
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	492c      	ldr	r1, [pc, #176]	; (800247c <HAL_GPIO_Init+0x2d0>)
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	608b      	str	r3, [r1, #8]
 80023d0:	e006      	b.n	80023e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023d2:	4b2a      	ldr	r3, [pc, #168]	; (800247c <HAL_GPIO_Init+0x2d0>)
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	43db      	mvns	r3, r3
 80023da:	4928      	ldr	r1, [pc, #160]	; (800247c <HAL_GPIO_Init+0x2d0>)
 80023dc:	4013      	ands	r3, r2
 80023de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d006      	beq.n	80023fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023ec:	4b23      	ldr	r3, [pc, #140]	; (800247c <HAL_GPIO_Init+0x2d0>)
 80023ee:	68da      	ldr	r2, [r3, #12]
 80023f0:	4922      	ldr	r1, [pc, #136]	; (800247c <HAL_GPIO_Init+0x2d0>)
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	60cb      	str	r3, [r1, #12]
 80023f8:	e006      	b.n	8002408 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023fa:	4b20      	ldr	r3, [pc, #128]	; (800247c <HAL_GPIO_Init+0x2d0>)
 80023fc:	68da      	ldr	r2, [r3, #12]
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	43db      	mvns	r3, r3
 8002402:	491e      	ldr	r1, [pc, #120]	; (800247c <HAL_GPIO_Init+0x2d0>)
 8002404:	4013      	ands	r3, r2
 8002406:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d006      	beq.n	8002422 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002414:	4b19      	ldr	r3, [pc, #100]	; (800247c <HAL_GPIO_Init+0x2d0>)
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	4918      	ldr	r1, [pc, #96]	; (800247c <HAL_GPIO_Init+0x2d0>)
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	4313      	orrs	r3, r2
 800241e:	604b      	str	r3, [r1, #4]
 8002420:	e006      	b.n	8002430 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002422:	4b16      	ldr	r3, [pc, #88]	; (800247c <HAL_GPIO_Init+0x2d0>)
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	43db      	mvns	r3, r3
 800242a:	4914      	ldr	r1, [pc, #80]	; (800247c <HAL_GPIO_Init+0x2d0>)
 800242c:	4013      	ands	r3, r2
 800242e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d021      	beq.n	8002480 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800243c:	4b0f      	ldr	r3, [pc, #60]	; (800247c <HAL_GPIO_Init+0x2d0>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	490e      	ldr	r1, [pc, #56]	; (800247c <HAL_GPIO_Init+0x2d0>)
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	4313      	orrs	r3, r2
 8002446:	600b      	str	r3, [r1, #0]
 8002448:	e021      	b.n	800248e <HAL_GPIO_Init+0x2e2>
 800244a:	bf00      	nop
 800244c:	10320000 	.word	0x10320000
 8002450:	10310000 	.word	0x10310000
 8002454:	10220000 	.word	0x10220000
 8002458:	10210000 	.word	0x10210000
 800245c:	10120000 	.word	0x10120000
 8002460:	10110000 	.word	0x10110000
 8002464:	40021000 	.word	0x40021000
 8002468:	40010000 	.word	0x40010000
 800246c:	40010800 	.word	0x40010800
 8002470:	40010c00 	.word	0x40010c00
 8002474:	40011000 	.word	0x40011000
 8002478:	40011400 	.word	0x40011400
 800247c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_GPIO_Init+0x304>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	43db      	mvns	r3, r3
 8002488:	4909      	ldr	r1, [pc, #36]	; (80024b0 <HAL_GPIO_Init+0x304>)
 800248a:	4013      	ands	r3, r2
 800248c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800248e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002490:	3301      	adds	r3, #1
 8002492:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	fa22 f303 	lsr.w	r3, r2, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f47f ae8e 	bne.w	80021c0 <HAL_GPIO_Init+0x14>
  }
}
 80024a4:	bf00      	nop
 80024a6:	bf00      	nop
 80024a8:	372c      	adds	r7, #44	; 0x2c
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr
 80024b0:	40010400 	.word	0x40010400

080024b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	807b      	strh	r3, [r7, #2]
 80024c0:	4613      	mov	r3, r2
 80024c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024c4:	787b      	ldrb	r3, [r7, #1]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024ca:	887a      	ldrh	r2, [r7, #2]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024d0:	e003      	b.n	80024da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80024d2:	887b      	ldrh	r3, [r7, #2]
 80024d4:	041a      	lsls	r2, r3, #16
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	611a      	str	r2, [r3, #16]
}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr

080024e4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	460b      	mov	r3, r1
 80024ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024f6:	887a      	ldrh	r2, [r7, #2]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4013      	ands	r3, r2
 80024fc:	041a      	lsls	r2, r3, #16
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	43d9      	mvns	r1, r3
 8002502:	887b      	ldrh	r3, [r7, #2]
 8002504:	400b      	ands	r3, r1
 8002506:	431a      	orrs	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	611a      	str	r2, [r3, #16]
}
 800250c:	bf00      	nop
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr
	...

08002518 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e12b      	b.n	8002782 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	d106      	bne.n	8002544 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7fe fda0 	bl	8001084 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2224      	movs	r2, #36	; 0x24
 8002548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0201 	bic.w	r2, r2, #1
 800255a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800256a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800257a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800257c:	f002 f9d8 	bl	8004930 <HAL_RCC_GetPCLK1Freq>
 8002580:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	4a81      	ldr	r2, [pc, #516]	; (800278c <HAL_I2C_Init+0x274>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d807      	bhi.n	800259c <HAL_I2C_Init+0x84>
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4a80      	ldr	r2, [pc, #512]	; (8002790 <HAL_I2C_Init+0x278>)
 8002590:	4293      	cmp	r3, r2
 8002592:	bf94      	ite	ls
 8002594:	2301      	movls	r3, #1
 8002596:	2300      	movhi	r3, #0
 8002598:	b2db      	uxtb	r3, r3
 800259a:	e006      	b.n	80025aa <HAL_I2C_Init+0x92>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4a7d      	ldr	r2, [pc, #500]	; (8002794 <HAL_I2C_Init+0x27c>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	bf94      	ite	ls
 80025a4:	2301      	movls	r3, #1
 80025a6:	2300      	movhi	r3, #0
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e0e7      	b.n	8002782 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	4a78      	ldr	r2, [pc, #480]	; (8002798 <HAL_I2C_Init+0x280>)
 80025b6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ba:	0c9b      	lsrs	r3, r3, #18
 80025bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	430a      	orrs	r2, r1
 80025d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	4a6a      	ldr	r2, [pc, #424]	; (800278c <HAL_I2C_Init+0x274>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d802      	bhi.n	80025ec <HAL_I2C_Init+0xd4>
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	3301      	adds	r3, #1
 80025ea:	e009      	b.n	8002600 <HAL_I2C_Init+0xe8>
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025f2:	fb02 f303 	mul.w	r3, r2, r3
 80025f6:	4a69      	ldr	r2, [pc, #420]	; (800279c <HAL_I2C_Init+0x284>)
 80025f8:	fba2 2303 	umull	r2, r3, r2, r3
 80025fc:	099b      	lsrs	r3, r3, #6
 80025fe:	3301      	adds	r3, #1
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6812      	ldr	r2, [r2, #0]
 8002604:	430b      	orrs	r3, r1
 8002606:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002612:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	495c      	ldr	r1, [pc, #368]	; (800278c <HAL_I2C_Init+0x274>)
 800261c:	428b      	cmp	r3, r1
 800261e:	d819      	bhi.n	8002654 <HAL_I2C_Init+0x13c>
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	1e59      	subs	r1, r3, #1
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	fbb1 f3f3 	udiv	r3, r1, r3
 800262e:	1c59      	adds	r1, r3, #1
 8002630:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002634:	400b      	ands	r3, r1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00a      	beq.n	8002650 <HAL_I2C_Init+0x138>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	1e59      	subs	r1, r3, #1
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	005b      	lsls	r3, r3, #1
 8002644:	fbb1 f3f3 	udiv	r3, r1, r3
 8002648:	3301      	adds	r3, #1
 800264a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800264e:	e051      	b.n	80026f4 <HAL_I2C_Init+0x1dc>
 8002650:	2304      	movs	r3, #4
 8002652:	e04f      	b.n	80026f4 <HAL_I2C_Init+0x1dc>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d111      	bne.n	8002680 <HAL_I2C_Init+0x168>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	1e58      	subs	r0, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6859      	ldr	r1, [r3, #4]
 8002664:	460b      	mov	r3, r1
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	440b      	add	r3, r1
 800266a:	fbb0 f3f3 	udiv	r3, r0, r3
 800266e:	3301      	adds	r3, #1
 8002670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002674:	2b00      	cmp	r3, #0
 8002676:	bf0c      	ite	eq
 8002678:	2301      	moveq	r3, #1
 800267a:	2300      	movne	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	e012      	b.n	80026a6 <HAL_I2C_Init+0x18e>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	1e58      	subs	r0, r3, #1
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6859      	ldr	r1, [r3, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	0099      	lsls	r1, r3, #2
 8002690:	440b      	add	r3, r1
 8002692:	fbb0 f3f3 	udiv	r3, r0, r3
 8002696:	3301      	adds	r3, #1
 8002698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800269c:	2b00      	cmp	r3, #0
 800269e:	bf0c      	ite	eq
 80026a0:	2301      	moveq	r3, #1
 80026a2:	2300      	movne	r3, #0
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <HAL_I2C_Init+0x196>
 80026aa:	2301      	movs	r3, #1
 80026ac:	e022      	b.n	80026f4 <HAL_I2C_Init+0x1dc>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d10e      	bne.n	80026d4 <HAL_I2C_Init+0x1bc>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	1e58      	subs	r0, r3, #1
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6859      	ldr	r1, [r3, #4]
 80026be:	460b      	mov	r3, r1
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	440b      	add	r3, r1
 80026c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80026c8:	3301      	adds	r3, #1
 80026ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026d2:	e00f      	b.n	80026f4 <HAL_I2C_Init+0x1dc>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	1e58      	subs	r0, r3, #1
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6859      	ldr	r1, [r3, #4]
 80026dc:	460b      	mov	r3, r1
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	0099      	lsls	r1, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ea:	3301      	adds	r3, #1
 80026ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026f4:	6879      	ldr	r1, [r7, #4]
 80026f6:	6809      	ldr	r1, [r1, #0]
 80026f8:	4313      	orrs	r3, r2
 80026fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69da      	ldr	r2, [r3, #28]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	430a      	orrs	r2, r1
 8002716:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002722:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	6911      	ldr	r1, [r2, #16]
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	68d2      	ldr	r2, [r2, #12]
 800272e:	4311      	orrs	r1, r2
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6812      	ldr	r2, [r2, #0]
 8002734:	430b      	orrs	r3, r1
 8002736:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	695a      	ldr	r2, [r3, #20]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	430a      	orrs	r2, r1
 8002752:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0201 	orr.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2220      	movs	r2, #32
 800276e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3710      	adds	r7, #16
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	000186a0 	.word	0x000186a0
 8002790:	001e847f 	.word	0x001e847f
 8002794:	003d08ff 	.word	0x003d08ff
 8002798:	431bde83 	.word	0x431bde83
 800279c:	10624dd3 	.word	0x10624dd3

080027a0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b088      	sub	sp, #32
 80027a4:	af02      	add	r7, sp, #8
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	607a      	str	r2, [r7, #4]
 80027aa:	461a      	mov	r2, r3
 80027ac:	460b      	mov	r3, r1
 80027ae:	817b      	strh	r3, [r7, #10]
 80027b0:	4613      	mov	r3, r2
 80027b2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027b4:	f7fe fe30 	bl	8001418 <HAL_GetTick>
 80027b8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b20      	cmp	r3, #32
 80027c4:	f040 80e0 	bne.w	8002988 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	2319      	movs	r3, #25
 80027ce:	2201      	movs	r2, #1
 80027d0:	4970      	ldr	r1, [pc, #448]	; (8002994 <HAL_I2C_Master_Transmit+0x1f4>)
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	f001 faac 	bl	8003d30 <I2C_WaitOnFlagUntilTimeout>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80027de:	2302      	movs	r3, #2
 80027e0:	e0d3      	b.n	800298a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d101      	bne.n	80027f0 <HAL_I2C_Master_Transmit+0x50>
 80027ec:	2302      	movs	r3, #2
 80027ee:	e0cc      	b.n	800298a <HAL_I2C_Master_Transmit+0x1ea>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	2b01      	cmp	r3, #1
 8002804:	d007      	beq.n	8002816 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f042 0201 	orr.w	r2, r2, #1
 8002814:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002824:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2221      	movs	r2, #33	; 0x21
 800282a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2210      	movs	r2, #16
 8002832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	2200      	movs	r2, #0
 800283a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	893a      	ldrh	r2, [r7, #8]
 8002846:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284c:	b29a      	uxth	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	4a50      	ldr	r2, [pc, #320]	; (8002998 <HAL_I2C_Master_Transmit+0x1f8>)
 8002856:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002858:	8979      	ldrh	r1, [r7, #10]
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	6a3a      	ldr	r2, [r7, #32]
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f000 ff98 	bl	8003794 <I2C_MasterRequestWrite>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e08d      	b.n	800298a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800286e:	2300      	movs	r3, #0
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	613b      	str	r3, [r7, #16]
 8002882:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002884:	e066      	b.n	8002954 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	6a39      	ldr	r1, [r7, #32]
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f001 fb6a 	bl	8003f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00d      	beq.n	80028b2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	2b04      	cmp	r3, #4
 800289c:	d107      	bne.n	80028ae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e06b      	b.n	800298a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	781a      	ldrb	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	3b01      	subs	r3, #1
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028da:	3b01      	subs	r3, #1
 80028dc:	b29a      	uxth	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b04      	cmp	r3, #4
 80028ee:	d11b      	bne.n	8002928 <HAL_I2C_Master_Transmit+0x188>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d017      	beq.n	8002928 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	781a      	ldrb	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002912:	b29b      	uxth	r3, r3
 8002914:	3b01      	subs	r3, #1
 8002916:	b29a      	uxth	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002920:	3b01      	subs	r3, #1
 8002922:	b29a      	uxth	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	6a39      	ldr	r1, [r7, #32]
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f001 fb61 	bl	8003ff4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00d      	beq.n	8002954 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	2b04      	cmp	r3, #4
 800293e:	d107      	bne.n	8002950 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800294e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e01a      	b.n	800298a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002958:	2b00      	cmp	r3, #0
 800295a:	d194      	bne.n	8002886 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800296a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2220      	movs	r2, #32
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002984:	2300      	movs	r3, #0
 8002986:	e000      	b.n	800298a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002988:	2302      	movs	r3, #2
  }
}
 800298a:	4618      	mov	r0, r3
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	00100002 	.word	0x00100002
 8002998:	ffff0000 	.word	0xffff0000

0800299c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08c      	sub	sp, #48	; 0x30
 80029a0:	af02      	add	r7, sp, #8
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	607a      	str	r2, [r7, #4]
 80029a6:	461a      	mov	r2, r3
 80029a8:	460b      	mov	r3, r1
 80029aa:	817b      	strh	r3, [r7, #10]
 80029ac:	4613      	mov	r3, r2
 80029ae:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029b4:	f7fe fd30 	bl	8001418 <HAL_GetTick>
 80029b8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b20      	cmp	r3, #32
 80029c4:	f040 824b 	bne.w	8002e5e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	2319      	movs	r3, #25
 80029ce:	2201      	movs	r2, #1
 80029d0:	497f      	ldr	r1, [pc, #508]	; (8002bd0 <HAL_I2C_Master_Receive+0x234>)
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f001 f9ac 	bl	8003d30 <I2C_WaitOnFlagUntilTimeout>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80029de:	2302      	movs	r3, #2
 80029e0:	e23e      	b.n	8002e60 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <HAL_I2C_Master_Receive+0x54>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e237      	b.n	8002e60 <HAL_I2C_Master_Receive+0x4c4>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d007      	beq.n	8002a16 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f042 0201 	orr.w	r2, r2, #1
 8002a14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2222      	movs	r2, #34	; 0x22
 8002a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2210      	movs	r2, #16
 8002a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	893a      	ldrh	r2, [r7, #8]
 8002a46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	4a5f      	ldr	r2, [pc, #380]	; (8002bd4 <HAL_I2C_Master_Receive+0x238>)
 8002a56:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a58:	8979      	ldrh	r1, [r7, #10]
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 ff1a 	bl	8003898 <I2C_MasterRequestRead>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e1f8      	b.n	8002e60 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d113      	bne.n	8002a9e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a76:	2300      	movs	r3, #0
 8002a78:	61fb      	str	r3, [r7, #28]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	695b      	ldr	r3, [r3, #20]
 8002a80:	61fb      	str	r3, [r7, #28]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	61fb      	str	r3, [r7, #28]
 8002a8a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	e1cc      	b.n	8002e38 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d11e      	bne.n	8002ae4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ab4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ab6:	b672      	cpsid	i
}
 8002ab8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aba:	2300      	movs	r3, #0
 8002abc:	61bb      	str	r3, [r7, #24]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	61bb      	str	r3, [r7, #24]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	61bb      	str	r3, [r7, #24]
 8002ace:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ade:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ae0:	b662      	cpsie	i
}
 8002ae2:	e035      	b.n	8002b50 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d11e      	bne.n	8002b2a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002afa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002afc:	b672      	cpsid	i
}
 8002afe:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b00:	2300      	movs	r3, #0
 8002b02:	617b      	str	r3, [r7, #20]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	617b      	str	r3, [r7, #20]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b24:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002b26:	b662      	cpsie	i
}
 8002b28:	e012      	b.n	8002b50 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	613b      	str	r3, [r7, #16]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	613b      	str	r3, [r7, #16]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	613b      	str	r3, [r7, #16]
 8002b4e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002b50:	e172      	b.n	8002e38 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	f200 811f 	bhi.w	8002d9a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d123      	bne.n	8002bac <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f001 fa8b 	bl	8004084 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e173      	b.n	8002e60 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	691a      	ldr	r2, [r3, #16]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	1c5a      	adds	r2, r3, #1
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b94:	3b01      	subs	r3, #1
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002baa:	e145      	b.n	8002e38 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d152      	bne.n	8002c5a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bba:	2200      	movs	r2, #0
 8002bbc:	4906      	ldr	r1, [pc, #24]	; (8002bd8 <HAL_I2C_Master_Receive+0x23c>)
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f001 f8b6 	bl	8003d30 <I2C_WaitOnFlagUntilTimeout>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d008      	beq.n	8002bdc <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e148      	b.n	8002e60 <HAL_I2C_Master_Receive+0x4c4>
 8002bce:	bf00      	nop
 8002bd0:	00100002 	.word	0x00100002
 8002bd4:	ffff0000 	.word	0xffff0000
 8002bd8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002bdc:	b672      	cpsid	i
}
 8002bde:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	691a      	ldr	r2, [r3, #16]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	1c5a      	adds	r2, r3, #1
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002c22:	b662      	cpsie	i
}
 8002c24:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	691a      	ldr	r2, [r3, #16]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	1c5a      	adds	r2, r3, #1
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c42:	3b01      	subs	r3, #1
 8002c44:	b29a      	uxth	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	3b01      	subs	r3, #1
 8002c52:	b29a      	uxth	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c58:	e0ee      	b.n	8002e38 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c60:	2200      	movs	r2, #0
 8002c62:	4981      	ldr	r1, [pc, #516]	; (8002e68 <HAL_I2C_Master_Receive+0x4cc>)
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f001 f863 	bl	8003d30 <I2C_WaitOnFlagUntilTimeout>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e0f5      	b.n	8002e60 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c82:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c84:	b672      	cpsid	i
}
 8002c86:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	691a      	ldr	r2, [r3, #16]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	1c5a      	adds	r2, r3, #1
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002cba:	4b6c      	ldr	r3, [pc, #432]	; (8002e6c <HAL_I2C_Master_Receive+0x4d0>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	08db      	lsrs	r3, r3, #3
 8002cc0:	4a6b      	ldr	r2, [pc, #428]	; (8002e70 <HAL_I2C_Master_Receive+0x4d4>)
 8002cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc6:	0a1a      	lsrs	r2, r3, #8
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	00da      	lsls	r2, r3, #3
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002cd4:	6a3b      	ldr	r3, [r7, #32]
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002cda:	6a3b      	ldr	r3, [r7, #32]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d118      	bne.n	8002d12 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2220      	movs	r2, #32
 8002cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfa:	f043 0220 	orr.w	r2, r3, #32
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002d02:	b662      	cpsie	i
}
 8002d04:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e0a6      	b.n	8002e60 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b04      	cmp	r3, #4
 8002d1e:	d1d9      	bne.n	8002cd4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	691a      	ldr	r2, [r3, #16]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	1c5a      	adds	r2, r3, #1
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002d62:	b662      	cpsie	i
}
 8002d64:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	691a      	ldr	r2, [r3, #16]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	1c5a      	adds	r2, r3, #1
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d82:	3b01      	subs	r3, #1
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	3b01      	subs	r3, #1
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d98:	e04e      	b.n	8002e38 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f001 f970 	bl	8004084 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e058      	b.n	8002e60 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	691a      	ldr	r2, [r3, #16]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	b2d2      	uxtb	r2, r2
 8002dba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	1c5a      	adds	r2, r3, #1
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	f003 0304 	and.w	r3, r3, #4
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d124      	bne.n	8002e38 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df2:	2b03      	cmp	r3, #3
 8002df4:	d107      	bne.n	8002e06 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e04:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	1c5a      	adds	r2, r3, #1
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	3b01      	subs	r3, #1
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f47f ae88 	bne.w	8002b52 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2220      	movs	r2, #32
 8002e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	e000      	b.n	8002e60 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002e5e:	2302      	movs	r3, #2
  }
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3728      	adds	r7, #40	; 0x28
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	00010004 	.word	0x00010004
 8002e6c:	20000004 	.word	0x20000004
 8002e70:	14f8b589 	.word	0x14f8b589

08002e74 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b088      	sub	sp, #32
 8002e78:	af02      	add	r7, sp, #8
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	4608      	mov	r0, r1
 8002e7e:	4611      	mov	r1, r2
 8002e80:	461a      	mov	r2, r3
 8002e82:	4603      	mov	r3, r0
 8002e84:	817b      	strh	r3, [r7, #10]
 8002e86:	460b      	mov	r3, r1
 8002e88:	813b      	strh	r3, [r7, #8]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e8e:	f7fe fac3 	bl	8001418 <HAL_GetTick>
 8002e92:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b20      	cmp	r3, #32
 8002e9e:	f040 80d9 	bne.w	8003054 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	2319      	movs	r3, #25
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	496d      	ldr	r1, [pc, #436]	; (8003060 <HAL_I2C_Mem_Write+0x1ec>)
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 ff3f 	bl	8003d30 <I2C_WaitOnFlagUntilTimeout>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002eb8:	2302      	movs	r3, #2
 8002eba:	e0cc      	b.n	8003056 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d101      	bne.n	8002eca <HAL_I2C_Mem_Write+0x56>
 8002ec6:	2302      	movs	r3, #2
 8002ec8:	e0c5      	b.n	8003056 <HAL_I2C_Mem_Write+0x1e2>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2201      	movs	r2, #1
 8002ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d007      	beq.n	8002ef0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0201 	orr.w	r2, r2, #1
 8002eee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002efe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2221      	movs	r2, #33	; 0x21
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2240      	movs	r2, #64	; 0x40
 8002f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6a3a      	ldr	r2, [r7, #32]
 8002f1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	4a4d      	ldr	r2, [pc, #308]	; (8003064 <HAL_I2C_Mem_Write+0x1f0>)
 8002f30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f32:	88f8      	ldrh	r0, [r7, #6]
 8002f34:	893a      	ldrh	r2, [r7, #8]
 8002f36:	8979      	ldrh	r1, [r7, #10]
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	9301      	str	r3, [sp, #4]
 8002f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3e:	9300      	str	r3, [sp, #0]
 8002f40:	4603      	mov	r3, r0
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 fd76 	bl	8003a34 <I2C_RequestMemoryWrite>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d052      	beq.n	8002ff4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e081      	b.n	8003056 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f001 f804 	bl	8003f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00d      	beq.n	8002f7e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	d107      	bne.n	8002f7a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e06b      	b.n	8003056 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f82:	781a      	ldrb	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	1c5a      	adds	r2, r3, #1
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	b29a      	uxth	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	f003 0304 	and.w	r3, r3, #4
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d11b      	bne.n	8002ff4 <HAL_I2C_Mem_Write+0x180>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d017      	beq.n	8002ff4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc8:	781a      	ldrb	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	1c5a      	adds	r2, r3, #1
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	b29a      	uxth	r2, r3
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	3b01      	subs	r3, #1
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1aa      	bne.n	8002f52 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003000:	68f8      	ldr	r0, [r7, #12]
 8003002:	f000 fff7 	bl	8003ff4 <I2C_WaitOnBTFFlagUntilTimeout>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00d      	beq.n	8003028 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003010:	2b04      	cmp	r3, #4
 8003012:	d107      	bne.n	8003024 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003022:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e016      	b.n	8003056 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003036:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2220      	movs	r2, #32
 800303c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003050:	2300      	movs	r3, #0
 8003052:	e000      	b.n	8003056 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003054:	2302      	movs	r3, #2
  }
}
 8003056:	4618      	mov	r0, r3
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	00100002 	.word	0x00100002
 8003064:	ffff0000 	.word	0xffff0000

08003068 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b08c      	sub	sp, #48	; 0x30
 800306c:	af02      	add	r7, sp, #8
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	4608      	mov	r0, r1
 8003072:	4611      	mov	r1, r2
 8003074:	461a      	mov	r2, r3
 8003076:	4603      	mov	r3, r0
 8003078:	817b      	strh	r3, [r7, #10]
 800307a:	460b      	mov	r3, r1
 800307c:	813b      	strh	r3, [r7, #8]
 800307e:	4613      	mov	r3, r2
 8003080:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003086:	f7fe f9c7 	bl	8001418 <HAL_GetTick>
 800308a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b20      	cmp	r3, #32
 8003096:	f040 8244 	bne.w	8003522 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	2319      	movs	r3, #25
 80030a0:	2201      	movs	r2, #1
 80030a2:	4982      	ldr	r1, [pc, #520]	; (80032ac <HAL_I2C_Mem_Read+0x244>)
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 fe43 	bl	8003d30 <I2C_WaitOnFlagUntilTimeout>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80030b0:	2302      	movs	r3, #2
 80030b2:	e237      	b.n	8003524 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d101      	bne.n	80030c2 <HAL_I2C_Mem_Read+0x5a>
 80030be:	2302      	movs	r3, #2
 80030c0:	e230      	b.n	8003524 <HAL_I2C_Mem_Read+0x4bc>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d007      	beq.n	80030e8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0201 	orr.w	r2, r2, #1
 80030e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2222      	movs	r2, #34	; 0x22
 80030fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2240      	movs	r2, #64	; 0x40
 8003104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003112:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003118:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800311e:	b29a      	uxth	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	4a62      	ldr	r2, [pc, #392]	; (80032b0 <HAL_I2C_Mem_Read+0x248>)
 8003128:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800312a:	88f8      	ldrh	r0, [r7, #6]
 800312c:	893a      	ldrh	r2, [r7, #8]
 800312e:	8979      	ldrh	r1, [r7, #10]
 8003130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003132:	9301      	str	r3, [sp, #4]
 8003134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	4603      	mov	r3, r0
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 fd10 	bl	8003b60 <I2C_RequestMemoryRead>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e1ec      	b.n	8003524 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314e:	2b00      	cmp	r3, #0
 8003150:	d113      	bne.n	800317a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003152:	2300      	movs	r3, #0
 8003154:	61fb      	str	r3, [r7, #28]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	61fb      	str	r3, [r7, #28]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	61fb      	str	r3, [r7, #28]
 8003166:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	e1c0      	b.n	80034fc <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800317e:	2b01      	cmp	r3, #1
 8003180:	d11e      	bne.n	80031c0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003190:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003192:	b672      	cpsid	i
}
 8003194:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003196:	2300      	movs	r3, #0
 8003198:	61bb      	str	r3, [r7, #24]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	61bb      	str	r3, [r7, #24]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	61bb      	str	r3, [r7, #24]
 80031aa:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80031bc:	b662      	cpsie	i
}
 80031be:	e035      	b.n	800322c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d11e      	bne.n	8003206 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80031d8:	b672      	cpsid	i
}
 80031da:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031dc:	2300      	movs	r3, #0
 80031de:	617b      	str	r3, [r7, #20]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	617b      	str	r3, [r7, #20]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	617b      	str	r3, [r7, #20]
 80031f0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003200:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003202:	b662      	cpsie	i
}
 8003204:	e012      	b.n	800322c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003214:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003216:	2300      	movs	r3, #0
 8003218:	613b      	str	r3, [r7, #16]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	613b      	str	r3, [r7, #16]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	613b      	str	r3, [r7, #16]
 800322a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800322c:	e166      	b.n	80034fc <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003232:	2b03      	cmp	r3, #3
 8003234:	f200 811f 	bhi.w	8003476 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323c:	2b01      	cmp	r3, #1
 800323e:	d123      	bne.n	8003288 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003242:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f000 ff1d 	bl	8004084 <I2C_WaitOnRXNEFlagUntilTimeout>
 800324a:	4603      	mov	r3, r0
 800324c:	2b00      	cmp	r3, #0
 800324e:	d001      	beq.n	8003254 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003250:	2301      	movs	r3, #1
 8003252:	e167      	b.n	8003524 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	691a      	ldr	r2, [r3, #16]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	b2d2      	uxtb	r2, r2
 8003260:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003270:	3b01      	subs	r3, #1
 8003272:	b29a      	uxth	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800327c:	b29b      	uxth	r3, r3
 800327e:	3b01      	subs	r3, #1
 8003280:	b29a      	uxth	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003286:	e139      	b.n	80034fc <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800328c:	2b02      	cmp	r3, #2
 800328e:	d152      	bne.n	8003336 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003292:	9300      	str	r3, [sp, #0]
 8003294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003296:	2200      	movs	r2, #0
 8003298:	4906      	ldr	r1, [pc, #24]	; (80032b4 <HAL_I2C_Mem_Read+0x24c>)
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f000 fd48 	bl	8003d30 <I2C_WaitOnFlagUntilTimeout>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d008      	beq.n	80032b8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e13c      	b.n	8003524 <HAL_I2C_Mem_Read+0x4bc>
 80032aa:	bf00      	nop
 80032ac:	00100002 	.word	0x00100002
 80032b0:	ffff0000 	.word	0xffff0000
 80032b4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80032b8:	b672      	cpsid	i
}
 80032ba:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	691a      	ldr	r2, [r3, #16]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	b2d2      	uxtb	r2, r2
 80032d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032de:	1c5a      	adds	r2, r3, #1
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e8:	3b01      	subs	r3, #1
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	3b01      	subs	r3, #1
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80032fe:	b662      	cpsie	i
}
 8003300:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	691a      	ldr	r2, [r3, #16]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	b2d2      	uxtb	r2, r2
 800330e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800331e:	3b01      	subs	r3, #1
 8003320:	b29a      	uxth	r2, r3
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332a:	b29b      	uxth	r3, r3
 800332c:	3b01      	subs	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003334:	e0e2      	b.n	80034fc <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800333c:	2200      	movs	r2, #0
 800333e:	497b      	ldr	r1, [pc, #492]	; (800352c <HAL_I2C_Mem_Read+0x4c4>)
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f000 fcf5 	bl	8003d30 <I2C_WaitOnFlagUntilTimeout>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d001      	beq.n	8003350 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e0e9      	b.n	8003524 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800335e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003360:	b672      	cpsid	i
}
 8003362:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	691a      	ldr	r2, [r3, #16]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	b2d2      	uxtb	r2, r2
 8003370:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003376:	1c5a      	adds	r2, r3, #1
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003380:	3b01      	subs	r3, #1
 8003382:	b29a      	uxth	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338c:	b29b      	uxth	r3, r3
 800338e:	3b01      	subs	r3, #1
 8003390:	b29a      	uxth	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003396:	4b66      	ldr	r3, [pc, #408]	; (8003530 <HAL_I2C_Mem_Read+0x4c8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	08db      	lsrs	r3, r3, #3
 800339c:	4a65      	ldr	r2, [pc, #404]	; (8003534 <HAL_I2C_Mem_Read+0x4cc>)
 800339e:	fba2 2303 	umull	r2, r3, r2, r3
 80033a2:	0a1a      	lsrs	r2, r3, #8
 80033a4:	4613      	mov	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	00da      	lsls	r2, r3, #3
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	3b01      	subs	r3, #1
 80033b4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80033b6:	6a3b      	ldr	r3, [r7, #32]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d118      	bne.n	80033ee <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2220      	movs	r2, #32
 80033c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	f043 0220 	orr.w	r2, r3, #32
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80033de:	b662      	cpsie	i
}
 80033e0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e09a      	b.n	8003524 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b04      	cmp	r3, #4
 80033fa:	d1d9      	bne.n	80033b0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800340a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691a      	ldr	r2, [r3, #16]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003428:	3b01      	subs	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003434:	b29b      	uxth	r3, r3
 8003436:	3b01      	subs	r3, #1
 8003438:	b29a      	uxth	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800343e:	b662      	cpsie	i
}
 8003440:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	691a      	ldr	r2, [r3, #16]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	b2d2      	uxtb	r2, r2
 800344e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	1c5a      	adds	r2, r3, #1
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800345e:	3b01      	subs	r3, #1
 8003460:	b29a      	uxth	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346a:	b29b      	uxth	r3, r3
 800346c:	3b01      	subs	r3, #1
 800346e:	b29a      	uxth	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003474:	e042      	b.n	80034fc <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003478:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 fe02 	bl	8004084 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e04c      	b.n	8003524 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	691a      	ldr	r2, [r3, #16]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	b2d2      	uxtb	r2, r2
 8003496:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	1c5a      	adds	r2, r3, #1
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a6:	3b01      	subs	r3, #1
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	3b01      	subs	r3, #1
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d118      	bne.n	80034fc <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	691a      	ldr	r2, [r3, #16]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	1c5a      	adds	r2, r3, #1
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003500:	2b00      	cmp	r3, #0
 8003502:	f47f ae94 	bne.w	800322e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2220      	movs	r2, #32
 800350a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800351e:	2300      	movs	r3, #0
 8003520:	e000      	b.n	8003524 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003522:	2302      	movs	r3, #2
  }
}
 8003524:	4618      	mov	r0, r3
 8003526:	3728      	adds	r7, #40	; 0x28
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	00010004 	.word	0x00010004
 8003530:	20000004 	.word	0x20000004
 8003534:	14f8b589 	.word	0x14f8b589

08003538 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b08a      	sub	sp, #40	; 0x28
 800353c:	af02      	add	r7, sp, #8
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	607a      	str	r2, [r7, #4]
 8003542:	603b      	str	r3, [r7, #0]
 8003544:	460b      	mov	r3, r1
 8003546:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003548:	f7fd ff66 	bl	8001418 <HAL_GetTick>
 800354c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800354e:	2300      	movs	r3, #0
 8003550:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b20      	cmp	r3, #32
 800355c:	f040 8111 	bne.w	8003782 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	2319      	movs	r3, #25
 8003566:	2201      	movs	r2, #1
 8003568:	4988      	ldr	r1, [pc, #544]	; (800378c <HAL_I2C_IsDeviceReady+0x254>)
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f000 fbe0 	bl	8003d30 <I2C_WaitOnFlagUntilTimeout>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003576:	2302      	movs	r3, #2
 8003578:	e104      	b.n	8003784 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003580:	2b01      	cmp	r3, #1
 8003582:	d101      	bne.n	8003588 <HAL_I2C_IsDeviceReady+0x50>
 8003584:	2302      	movs	r3, #2
 8003586:	e0fd      	b.n	8003784 <HAL_I2C_IsDeviceReady+0x24c>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b01      	cmp	r3, #1
 800359c:	d007      	beq.n	80035ae <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f042 0201 	orr.w	r2, r2, #1
 80035ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2224      	movs	r2, #36	; 0x24
 80035c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4a70      	ldr	r2, [pc, #448]	; (8003790 <HAL_I2C_IsDeviceReady+0x258>)
 80035d0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035e0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f000 fb9e 	bl	8003d30 <I2C_WaitOnFlagUntilTimeout>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00d      	beq.n	8003616 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003608:	d103      	bne.n	8003612 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003610:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e0b6      	b.n	8003784 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003616:	897b      	ldrh	r3, [r7, #10]
 8003618:	b2db      	uxtb	r3, r3
 800361a:	461a      	mov	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003624:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003626:	f7fd fef7 	bl	8001418 <HAL_GetTick>
 800362a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b02      	cmp	r3, #2
 8003638:	bf0c      	ite	eq
 800363a:	2301      	moveq	r3, #1
 800363c:	2300      	movne	r3, #0
 800363e:	b2db      	uxtb	r3, r3
 8003640:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800364c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003650:	bf0c      	ite	eq
 8003652:	2301      	moveq	r3, #1
 8003654:	2300      	movne	r3, #0
 8003656:	b2db      	uxtb	r3, r3
 8003658:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800365a:	e025      	b.n	80036a8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800365c:	f7fd fedc 	bl	8001418 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	429a      	cmp	r2, r3
 800366a:	d302      	bcc.n	8003672 <HAL_I2C_IsDeviceReady+0x13a>
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d103      	bne.n	800367a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	22a0      	movs	r2, #160	; 0xa0
 8003676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b02      	cmp	r3, #2
 8003686:	bf0c      	ite	eq
 8003688:	2301      	moveq	r3, #1
 800368a:	2300      	movne	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800369a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800369e:	bf0c      	ite	eq
 80036a0:	2301      	moveq	r3, #1
 80036a2:	2300      	movne	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2ba0      	cmp	r3, #160	; 0xa0
 80036b2:	d005      	beq.n	80036c0 <HAL_I2C_IsDeviceReady+0x188>
 80036b4:	7dfb      	ldrb	r3, [r7, #23]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d102      	bne.n	80036c0 <HAL_I2C_IsDeviceReady+0x188>
 80036ba:	7dbb      	ldrb	r3, [r7, #22]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d0cd      	beq.n	800365c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2220      	movs	r2, #32
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d129      	bne.n	800372a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036e6:	2300      	movs	r3, #0
 80036e8:	613b      	str	r3, [r7, #16]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	613b      	str	r3, [r7, #16]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	613b      	str	r3, [r7, #16]
 80036fa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	9300      	str	r3, [sp, #0]
 8003700:	2319      	movs	r3, #25
 8003702:	2201      	movs	r2, #1
 8003704:	4921      	ldr	r1, [pc, #132]	; (800378c <HAL_I2C_IsDeviceReady+0x254>)
 8003706:	68f8      	ldr	r0, [r7, #12]
 8003708:	f000 fb12 	bl	8003d30 <I2C_WaitOnFlagUntilTimeout>
 800370c:	4603      	mov	r3, r0
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e036      	b.n	8003784 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2220      	movs	r2, #32
 800371a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003726:	2300      	movs	r3, #0
 8003728:	e02c      	b.n	8003784 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003738:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003742:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	2319      	movs	r3, #25
 800374a:	2201      	movs	r2, #1
 800374c:	490f      	ldr	r1, [pc, #60]	; (800378c <HAL_I2C_IsDeviceReady+0x254>)
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 faee 	bl	8003d30 <I2C_WaitOnFlagUntilTimeout>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e012      	b.n	8003784 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	3301      	adds	r3, #1
 8003762:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	429a      	cmp	r2, r3
 800376a:	f4ff af32 	bcc.w	80035d2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2220      	movs	r2, #32
 8003772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e000      	b.n	8003784 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003782:	2302      	movs	r3, #2
  }
}
 8003784:	4618      	mov	r0, r3
 8003786:	3720      	adds	r7, #32
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	00100002 	.word	0x00100002
 8003790:	ffff0000 	.word	0xffff0000

08003794 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b088      	sub	sp, #32
 8003798:	af02      	add	r7, sp, #8
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	607a      	str	r2, [r7, #4]
 800379e:	603b      	str	r3, [r7, #0]
 80037a0:	460b      	mov	r3, r1
 80037a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d006      	beq.n	80037be <I2C_MasterRequestWrite+0x2a>
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d003      	beq.n	80037be <I2C_MasterRequestWrite+0x2a>
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037bc:	d108      	bne.n	80037d0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	e00b      	b.n	80037e8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d4:	2b12      	cmp	r3, #18
 80037d6:	d107      	bne.n	80037e8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f000 fa9b 	bl	8003d30 <I2C_WaitOnFlagUntilTimeout>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00d      	beq.n	800381c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800380e:	d103      	bne.n	8003818 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003816:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e035      	b.n	8003888 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003824:	d108      	bne.n	8003838 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003826:	897b      	ldrh	r3, [r7, #10]
 8003828:	b2db      	uxtb	r3, r3
 800382a:	461a      	mov	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003834:	611a      	str	r2, [r3, #16]
 8003836:	e01b      	b.n	8003870 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003838:	897b      	ldrh	r3, [r7, #10]
 800383a:	11db      	asrs	r3, r3, #7
 800383c:	b2db      	uxtb	r3, r3
 800383e:	f003 0306 	and.w	r3, r3, #6
 8003842:	b2db      	uxtb	r3, r3
 8003844:	f063 030f 	orn	r3, r3, #15
 8003848:	b2da      	uxtb	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	490e      	ldr	r1, [pc, #56]	; (8003890 <I2C_MasterRequestWrite+0xfc>)
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f000 fae4 	bl	8003e24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e010      	b.n	8003888 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003866:	897b      	ldrh	r3, [r7, #10]
 8003868:	b2da      	uxtb	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	4907      	ldr	r1, [pc, #28]	; (8003894 <I2C_MasterRequestWrite+0x100>)
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 fad4 	bl	8003e24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d001      	beq.n	8003886 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e000      	b.n	8003888 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3718      	adds	r7, #24
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}
 8003890:	00010008 	.word	0x00010008
 8003894:	00010002 	.word	0x00010002

08003898 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b088      	sub	sp, #32
 800389c:	af02      	add	r7, sp, #8
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	607a      	str	r2, [r7, #4]
 80038a2:	603b      	str	r3, [r7, #0]
 80038a4:	460b      	mov	r3, r1
 80038a6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ac:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80038bc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d006      	beq.n	80038d2 <I2C_MasterRequestRead+0x3a>
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d003      	beq.n	80038d2 <I2C_MasterRequestRead+0x3a>
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038d0:	d108      	bne.n	80038e4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	e00b      	b.n	80038fc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e8:	2b11      	cmp	r3, #17
 80038ea:	d107      	bne.n	80038fc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	9300      	str	r3, [sp, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003908:	68f8      	ldr	r0, [r7, #12]
 800390a:	f000 fa11 	bl	8003d30 <I2C_WaitOnFlagUntilTimeout>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d00d      	beq.n	8003930 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003922:	d103      	bne.n	800392c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f44f 7200 	mov.w	r2, #512	; 0x200
 800392a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e079      	b.n	8003a24 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	691b      	ldr	r3, [r3, #16]
 8003934:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003938:	d108      	bne.n	800394c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800393a:	897b      	ldrh	r3, [r7, #10]
 800393c:	b2db      	uxtb	r3, r3
 800393e:	f043 0301 	orr.w	r3, r3, #1
 8003942:	b2da      	uxtb	r2, r3
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	611a      	str	r2, [r3, #16]
 800394a:	e05f      	b.n	8003a0c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800394c:	897b      	ldrh	r3, [r7, #10]
 800394e:	11db      	asrs	r3, r3, #7
 8003950:	b2db      	uxtb	r3, r3
 8003952:	f003 0306 	and.w	r3, r3, #6
 8003956:	b2db      	uxtb	r3, r3
 8003958:	f063 030f 	orn	r3, r3, #15
 800395c:	b2da      	uxtb	r2, r3
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	4930      	ldr	r1, [pc, #192]	; (8003a2c <I2C_MasterRequestRead+0x194>)
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	f000 fa5a 	bl	8003e24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e054      	b.n	8003a24 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800397a:	897b      	ldrh	r3, [r7, #10]
 800397c:	b2da      	uxtb	r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	4929      	ldr	r1, [pc, #164]	; (8003a30 <I2C_MasterRequestRead+0x198>)
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f000 fa4a 	bl	8003e24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e044      	b.n	8003a24 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800399a:	2300      	movs	r3, #0
 800399c:	613b      	str	r3, [r7, #16]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	695b      	ldr	r3, [r3, #20]
 80039a4:	613b      	str	r3, [r7, #16]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	699b      	ldr	r3, [r3, #24]
 80039ac:	613b      	str	r3, [r7, #16]
 80039ae:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039be:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f000 f9af 	bl	8003d30 <I2C_WaitOnFlagUntilTimeout>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00d      	beq.n	80039f4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039e6:	d103      	bne.n	80039f0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039ee:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e017      	b.n	8003a24 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80039f4:	897b      	ldrh	r3, [r7, #10]
 80039f6:	11db      	asrs	r3, r3, #7
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	f003 0306 	and.w	r3, r3, #6
 80039fe:	b2db      	uxtb	r3, r3
 8003a00:	f063 030e 	orn	r3, r3, #14
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	4907      	ldr	r1, [pc, #28]	; (8003a30 <I2C_MasterRequestRead+0x198>)
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f000 fa06 	bl	8003e24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e000      	b.n	8003a24 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3718      	adds	r7, #24
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	00010008 	.word	0x00010008
 8003a30:	00010002 	.word	0x00010002

08003a34 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b088      	sub	sp, #32
 8003a38:	af02      	add	r7, sp, #8
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	4608      	mov	r0, r1
 8003a3e:	4611      	mov	r1, r2
 8003a40:	461a      	mov	r2, r3
 8003a42:	4603      	mov	r3, r0
 8003a44:	817b      	strh	r3, [r7, #10]
 8003a46:	460b      	mov	r3, r1
 8003a48:	813b      	strh	r3, [r7, #8]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a5c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f000 f960 	bl	8003d30 <I2C_WaitOnFlagUntilTimeout>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00d      	beq.n	8003a92 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a84:	d103      	bne.n	8003a8e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a8c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a8e:	2303      	movs	r3, #3
 8003a90:	e05f      	b.n	8003b52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a92:	897b      	ldrh	r3, [r7, #10]
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	461a      	mov	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003aa0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa4:	6a3a      	ldr	r2, [r7, #32]
 8003aa6:	492d      	ldr	r1, [pc, #180]	; (8003b5c <I2C_RequestMemoryWrite+0x128>)
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f000 f9bb 	bl	8003e24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d001      	beq.n	8003ab8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e04c      	b.n	8003b52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ab8:	2300      	movs	r3, #0
 8003aba:	617b      	str	r3, [r7, #20]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	617b      	str	r3, [r7, #20]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	617b      	str	r3, [r7, #20]
 8003acc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad0:	6a39      	ldr	r1, [r7, #32]
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 fa46 	bl	8003f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00d      	beq.n	8003afa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d107      	bne.n	8003af6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e02b      	b.n	8003b52 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003afa:	88fb      	ldrh	r3, [r7, #6]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d105      	bne.n	8003b0c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b00:	893b      	ldrh	r3, [r7, #8]
 8003b02:	b2da      	uxtb	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	611a      	str	r2, [r3, #16]
 8003b0a:	e021      	b.n	8003b50 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b0c:	893b      	ldrh	r3, [r7, #8]
 8003b0e:	0a1b      	lsrs	r3, r3, #8
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	b2da      	uxtb	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b1c:	6a39      	ldr	r1, [r7, #32]
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 fa20 	bl	8003f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00d      	beq.n	8003b46 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	2b04      	cmp	r3, #4
 8003b30:	d107      	bne.n	8003b42 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b40:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e005      	b.n	8003b52 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b46:	893b      	ldrh	r3, [r7, #8]
 8003b48:	b2da      	uxtb	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3718      	adds	r7, #24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	00010002 	.word	0x00010002

08003b60 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b088      	sub	sp, #32
 8003b64:	af02      	add	r7, sp, #8
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	4608      	mov	r0, r1
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	4603      	mov	r3, r0
 8003b70:	817b      	strh	r3, [r7, #10]
 8003b72:	460b      	mov	r3, r1
 8003b74:	813b      	strh	r3, [r7, #8]
 8003b76:	4613      	mov	r3, r2
 8003b78:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003b88:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 f8c2 	bl	8003d30 <I2C_WaitOnFlagUntilTimeout>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00d      	beq.n	8003bce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bc0:	d103      	bne.n	8003bca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bc8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e0aa      	b.n	8003d24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bce:	897b      	ldrh	r3, [r7, #10]
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bdc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	6a3a      	ldr	r2, [r7, #32]
 8003be2:	4952      	ldr	r1, [pc, #328]	; (8003d2c <I2C_RequestMemoryRead+0x1cc>)
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f000 f91d 	bl	8003e24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e097      	b.n	8003d24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	617b      	str	r3, [r7, #20]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	617b      	str	r3, [r7, #20]
 8003c08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c0c:	6a39      	ldr	r1, [r7, #32]
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 f9a8 	bl	8003f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00d      	beq.n	8003c36 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	d107      	bne.n	8003c32 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e076      	b.n	8003d24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c36:	88fb      	ldrh	r3, [r7, #6]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d105      	bne.n	8003c48 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c3c:	893b      	ldrh	r3, [r7, #8]
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	611a      	str	r2, [r3, #16]
 8003c46:	e021      	b.n	8003c8c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c48:	893b      	ldrh	r3, [r7, #8]
 8003c4a:	0a1b      	lsrs	r3, r3, #8
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	b2da      	uxtb	r2, r3
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c58:	6a39      	ldr	r1, [r7, #32]
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f000 f982 	bl	8003f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00d      	beq.n	8003c82 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	d107      	bne.n	8003c7e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e050      	b.n	8003d24 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c82:	893b      	ldrh	r3, [r7, #8]
 8003c84:	b2da      	uxtb	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c8e:	6a39      	ldr	r1, [r7, #32]
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f000 f967 	bl	8003f64 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00d      	beq.n	8003cb8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d107      	bne.n	8003cb4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cb2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e035      	b.n	8003d24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cc6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	6a3b      	ldr	r3, [r7, #32]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 f82b 	bl	8003d30 <I2C_WaitOnFlagUntilTimeout>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00d      	beq.n	8003cfc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cee:	d103      	bne.n	8003cf8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cf6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e013      	b.n	8003d24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003cfc:	897b      	ldrh	r3, [r7, #10]
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	f043 0301 	orr.w	r3, r3, #1
 8003d04:	b2da      	uxtb	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	6a3a      	ldr	r2, [r7, #32]
 8003d10:	4906      	ldr	r1, [pc, #24]	; (8003d2c <I2C_RequestMemoryRead+0x1cc>)
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 f886 	bl	8003e24 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e000      	b.n	8003d24 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3718      	adds	r7, #24
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	00010002 	.word	0x00010002

08003d30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	603b      	str	r3, [r7, #0]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d40:	e048      	b.n	8003dd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d48:	d044      	beq.n	8003dd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d4a:	f7fd fb65 	bl	8001418 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	683a      	ldr	r2, [r7, #0]
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d302      	bcc.n	8003d60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d139      	bne.n	8003dd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	0c1b      	lsrs	r3, r3, #16
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d10d      	bne.n	8003d86 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	43da      	mvns	r2, r3
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	4013      	ands	r3, r2
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	bf0c      	ite	eq
 8003d7c:	2301      	moveq	r3, #1
 8003d7e:	2300      	movne	r3, #0
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	461a      	mov	r2, r3
 8003d84:	e00c      	b.n	8003da0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	43da      	mvns	r2, r3
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	4013      	ands	r3, r2
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	bf0c      	ite	eq
 8003d98:	2301      	moveq	r3, #1
 8003d9a:	2300      	movne	r3, #0
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	461a      	mov	r2, r3
 8003da0:	79fb      	ldrb	r3, [r7, #7]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d116      	bne.n	8003dd4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2220      	movs	r2, #32
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc0:	f043 0220 	orr.w	r2, r3, #32
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e023      	b.n	8003e1c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	0c1b      	lsrs	r3, r3, #16
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d10d      	bne.n	8003dfa <I2C_WaitOnFlagUntilTimeout+0xca>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	43da      	mvns	r2, r3
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	4013      	ands	r3, r2
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	bf0c      	ite	eq
 8003df0:	2301      	moveq	r3, #1
 8003df2:	2300      	movne	r3, #0
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	461a      	mov	r2, r3
 8003df8:	e00c      	b.n	8003e14 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	43da      	mvns	r2, r3
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	4013      	ands	r3, r2
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	bf0c      	ite	eq
 8003e0c:	2301      	moveq	r3, #1
 8003e0e:	2300      	movne	r3, #0
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	461a      	mov	r2, r3
 8003e14:	79fb      	ldrb	r3, [r7, #7]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d093      	beq.n	8003d42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
 8003e30:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e32:	e071      	b.n	8003f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e42:	d123      	bne.n	8003e8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e52:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003e5c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e78:	f043 0204 	orr.w	r2, r3, #4
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e067      	b.n	8003f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e92:	d041      	beq.n	8003f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e94:	f7fd fac0 	bl	8001418 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d302      	bcc.n	8003eaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d136      	bne.n	8003f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	0c1b      	lsrs	r3, r3, #16
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d10c      	bne.n	8003ece <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	43da      	mvns	r2, r3
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	bf14      	ite	ne
 8003ec6:	2301      	movne	r3, #1
 8003ec8:	2300      	moveq	r3, #0
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	e00b      	b.n	8003ee6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	43da      	mvns	r2, r3
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	bf14      	ite	ne
 8003ee0:	2301      	movne	r3, #1
 8003ee2:	2300      	moveq	r3, #0
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d016      	beq.n	8003f18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f04:	f043 0220 	orr.w	r2, r3, #32
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e021      	b.n	8003f5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	0c1b      	lsrs	r3, r3, #16
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d10c      	bne.n	8003f3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	43da      	mvns	r2, r3
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	bf14      	ite	ne
 8003f34:	2301      	movne	r3, #1
 8003f36:	2300      	moveq	r3, #0
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	e00b      	b.n	8003f54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	699b      	ldr	r3, [r3, #24]
 8003f42:	43da      	mvns	r2, r3
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	4013      	ands	r3, r2
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	bf14      	ite	ne
 8003f4e:	2301      	movne	r3, #1
 8003f50:	2300      	moveq	r3, #0
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f47f af6d 	bne.w	8003e34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f70:	e034      	b.n	8003fdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f000 f8e3 	bl	800413e <I2C_IsAcknowledgeFailed>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e034      	b.n	8003fec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f88:	d028      	beq.n	8003fdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f8a:	f7fd fa45 	bl	8001418 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d302      	bcc.n	8003fa0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d11d      	bne.n	8003fdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003faa:	2b80      	cmp	r3, #128	; 0x80
 8003fac:	d016      	beq.n	8003fdc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc8:	f043 0220 	orr.w	r2, r3, #32
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e007      	b.n	8003fec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe6:	2b80      	cmp	r3, #128	; 0x80
 8003fe8:	d1c3      	bne.n	8003f72 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004000:	e034      	b.n	800406c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f000 f89b 	bl	800413e <I2C_IsAcknowledgeFailed>
 8004008:	4603      	mov	r3, r0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e034      	b.n	800407c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004018:	d028      	beq.n	800406c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800401a:	f7fd f9fd 	bl	8001418 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	429a      	cmp	r2, r3
 8004028:	d302      	bcc.n	8004030 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d11d      	bne.n	800406c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	f003 0304 	and.w	r3, r3, #4
 800403a:	2b04      	cmp	r3, #4
 800403c:	d016      	beq.n	800406c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2200      	movs	r2, #0
 8004042:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2220      	movs	r2, #32
 8004048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004058:	f043 0220 	orr.w	r2, r3, #32
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2200      	movs	r2, #0
 8004064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e007      	b.n	800407c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	f003 0304 	and.w	r3, r3, #4
 8004076:	2b04      	cmp	r3, #4
 8004078:	d1c3      	bne.n	8004002 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004090:	e049      	b.n	8004126 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	695b      	ldr	r3, [r3, #20]
 8004098:	f003 0310 	and.w	r3, r3, #16
 800409c:	2b10      	cmp	r3, #16
 800409e:	d119      	bne.n	80040d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f06f 0210 	mvn.w	r2, #16
 80040a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2200      	movs	r2, #0
 80040ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e030      	b.n	8004136 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040d4:	f7fd f9a0 	bl	8001418 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d302      	bcc.n	80040ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d11d      	bne.n	8004126 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	695b      	ldr	r3, [r3, #20]
 80040f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f4:	2b40      	cmp	r3, #64	; 0x40
 80040f6:	d016      	beq.n	8004126 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2220      	movs	r2, #32
 8004102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004112:	f043 0220 	orr.w	r2, r3, #32
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e007      	b.n	8004136 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	695b      	ldr	r3, [r3, #20]
 800412c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004130:	2b40      	cmp	r3, #64	; 0x40
 8004132:	d1ae      	bne.n	8004092 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800413e:	b480      	push	{r7}
 8004140:	b083      	sub	sp, #12
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004150:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004154:	d11b      	bne.n	800418e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800415e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2220      	movs	r2, #32
 800416a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	f043 0204 	orr.w	r2, r3, #4
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e000      	b.n	8004190 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	bc80      	pop	{r7}
 8004198:	4770      	bx	lr
	...

0800419c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d101      	bne.n	80041ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e272      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 8087 	beq.w	80042ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041bc:	4b92      	ldr	r3, [pc, #584]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	f003 030c 	and.w	r3, r3, #12
 80041c4:	2b04      	cmp	r3, #4
 80041c6:	d00c      	beq.n	80041e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80041c8:	4b8f      	ldr	r3, [pc, #572]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f003 030c 	and.w	r3, r3, #12
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d112      	bne.n	80041fa <HAL_RCC_OscConfig+0x5e>
 80041d4:	4b8c      	ldr	r3, [pc, #560]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e0:	d10b      	bne.n	80041fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041e2:	4b89      	ldr	r3, [pc, #548]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d06c      	beq.n	80042c8 <HAL_RCC_OscConfig+0x12c>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d168      	bne.n	80042c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e24c      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004202:	d106      	bne.n	8004212 <HAL_RCC_OscConfig+0x76>
 8004204:	4b80      	ldr	r3, [pc, #512]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a7f      	ldr	r2, [pc, #508]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 800420a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800420e:	6013      	str	r3, [r2, #0]
 8004210:	e02e      	b.n	8004270 <HAL_RCC_OscConfig+0xd4>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10c      	bne.n	8004234 <HAL_RCC_OscConfig+0x98>
 800421a:	4b7b      	ldr	r3, [pc, #492]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a7a      	ldr	r2, [pc, #488]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004220:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	4b78      	ldr	r3, [pc, #480]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a77      	ldr	r2, [pc, #476]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 800422c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004230:	6013      	str	r3, [r2, #0]
 8004232:	e01d      	b.n	8004270 <HAL_RCC_OscConfig+0xd4>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800423c:	d10c      	bne.n	8004258 <HAL_RCC_OscConfig+0xbc>
 800423e:	4b72      	ldr	r3, [pc, #456]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a71      	ldr	r2, [pc, #452]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004248:	6013      	str	r3, [r2, #0]
 800424a:	4b6f      	ldr	r3, [pc, #444]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a6e      	ldr	r2, [pc, #440]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004254:	6013      	str	r3, [r2, #0]
 8004256:	e00b      	b.n	8004270 <HAL_RCC_OscConfig+0xd4>
 8004258:	4b6b      	ldr	r3, [pc, #428]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a6a      	ldr	r2, [pc, #424]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 800425e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	4b68      	ldr	r3, [pc, #416]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a67      	ldr	r2, [pc, #412]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 800426a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800426e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d013      	beq.n	80042a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004278:	f7fd f8ce 	bl	8001418 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004280:	f7fd f8ca 	bl	8001418 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b64      	cmp	r3, #100	; 0x64
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e200      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004292:	4b5d      	ldr	r3, [pc, #372]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0f0      	beq.n	8004280 <HAL_RCC_OscConfig+0xe4>
 800429e:	e014      	b.n	80042ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a0:	f7fd f8ba 	bl	8001418 <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042a8:	f7fd f8b6 	bl	8001418 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b64      	cmp	r3, #100	; 0x64
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e1ec      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042ba:	4b53      	ldr	r3, [pc, #332]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f0      	bne.n	80042a8 <HAL_RCC_OscConfig+0x10c>
 80042c6:	e000      	b.n	80042ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d063      	beq.n	800439e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042d6:	4b4c      	ldr	r3, [pc, #304]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f003 030c 	and.w	r3, r3, #12
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00b      	beq.n	80042fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80042e2:	4b49      	ldr	r3, [pc, #292]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f003 030c 	and.w	r3, r3, #12
 80042ea:	2b08      	cmp	r3, #8
 80042ec:	d11c      	bne.n	8004328 <HAL_RCC_OscConfig+0x18c>
 80042ee:	4b46      	ldr	r3, [pc, #280]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d116      	bne.n	8004328 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042fa:	4b43      	ldr	r3, [pc, #268]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d005      	beq.n	8004312 <HAL_RCC_OscConfig+0x176>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	2b01      	cmp	r3, #1
 800430c:	d001      	beq.n	8004312 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e1c0      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004312:	4b3d      	ldr	r3, [pc, #244]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	695b      	ldr	r3, [r3, #20]
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	4939      	ldr	r1, [pc, #228]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004322:	4313      	orrs	r3, r2
 8004324:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004326:	e03a      	b.n	800439e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d020      	beq.n	8004372 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004330:	4b36      	ldr	r3, [pc, #216]	; (800440c <HAL_RCC_OscConfig+0x270>)
 8004332:	2201      	movs	r2, #1
 8004334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004336:	f7fd f86f 	bl	8001418 <HAL_GetTick>
 800433a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800433c:	e008      	b.n	8004350 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800433e:	f7fd f86b 	bl	8001418 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	2b02      	cmp	r3, #2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e1a1      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004350:	4b2d      	ldr	r3, [pc, #180]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0f0      	beq.n	800433e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800435c:	4b2a      	ldr	r3, [pc, #168]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	4927      	ldr	r1, [pc, #156]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 800436c:	4313      	orrs	r3, r2
 800436e:	600b      	str	r3, [r1, #0]
 8004370:	e015      	b.n	800439e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004372:	4b26      	ldr	r3, [pc, #152]	; (800440c <HAL_RCC_OscConfig+0x270>)
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004378:	f7fd f84e 	bl	8001418 <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004380:	f7fd f84a 	bl	8001418 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e180      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004392:	4b1d      	ldr	r3, [pc, #116]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1f0      	bne.n	8004380 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d03a      	beq.n	8004420 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d019      	beq.n	80043e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043b2:	4b17      	ldr	r3, [pc, #92]	; (8004410 <HAL_RCC_OscConfig+0x274>)
 80043b4:	2201      	movs	r2, #1
 80043b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043b8:	f7fd f82e 	bl	8001418 <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043c0:	f7fd f82a 	bl	8001418 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e160      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043d2:	4b0d      	ldr	r3, [pc, #52]	; (8004408 <HAL_RCC_OscConfig+0x26c>)
 80043d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d0f0      	beq.n	80043c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80043de:	2001      	movs	r0, #1
 80043e0:	f000 face 	bl	8004980 <RCC_Delay>
 80043e4:	e01c      	b.n	8004420 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043e6:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <HAL_RCC_OscConfig+0x274>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043ec:	f7fd f814 	bl	8001418 <HAL_GetTick>
 80043f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f2:	e00f      	b.n	8004414 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043f4:	f7fd f810 	bl	8001418 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	2b02      	cmp	r3, #2
 8004400:	d908      	bls.n	8004414 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e146      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
 8004406:	bf00      	nop
 8004408:	40021000 	.word	0x40021000
 800440c:	42420000 	.word	0x42420000
 8004410:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004414:	4b92      	ldr	r3, [pc, #584]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	f003 0302 	and.w	r3, r3, #2
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1e9      	bne.n	80043f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0304 	and.w	r3, r3, #4
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 80a6 	beq.w	800457a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800442e:	2300      	movs	r3, #0
 8004430:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004432:	4b8b      	ldr	r3, [pc, #556]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10d      	bne.n	800445a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800443e:	4b88      	ldr	r3, [pc, #544]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	4a87      	ldr	r2, [pc, #540]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004448:	61d3      	str	r3, [r2, #28]
 800444a:	4b85      	ldr	r3, [pc, #532]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004452:	60bb      	str	r3, [r7, #8]
 8004454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004456:	2301      	movs	r3, #1
 8004458:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800445a:	4b82      	ldr	r3, [pc, #520]	; (8004664 <HAL_RCC_OscConfig+0x4c8>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004462:	2b00      	cmp	r3, #0
 8004464:	d118      	bne.n	8004498 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004466:	4b7f      	ldr	r3, [pc, #508]	; (8004664 <HAL_RCC_OscConfig+0x4c8>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a7e      	ldr	r2, [pc, #504]	; (8004664 <HAL_RCC_OscConfig+0x4c8>)
 800446c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004472:	f7fc ffd1 	bl	8001418 <HAL_GetTick>
 8004476:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004478:	e008      	b.n	800448c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800447a:	f7fc ffcd 	bl	8001418 <HAL_GetTick>
 800447e:	4602      	mov	r2, r0
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	1ad3      	subs	r3, r2, r3
 8004484:	2b64      	cmp	r3, #100	; 0x64
 8004486:	d901      	bls.n	800448c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004488:	2303      	movs	r3, #3
 800448a:	e103      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800448c:	4b75      	ldr	r3, [pc, #468]	; (8004664 <HAL_RCC_OscConfig+0x4c8>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004494:	2b00      	cmp	r3, #0
 8004496:	d0f0      	beq.n	800447a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	2b01      	cmp	r3, #1
 800449e:	d106      	bne.n	80044ae <HAL_RCC_OscConfig+0x312>
 80044a0:	4b6f      	ldr	r3, [pc, #444]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	4a6e      	ldr	r2, [pc, #440]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044a6:	f043 0301 	orr.w	r3, r3, #1
 80044aa:	6213      	str	r3, [r2, #32]
 80044ac:	e02d      	b.n	800450a <HAL_RCC_OscConfig+0x36e>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10c      	bne.n	80044d0 <HAL_RCC_OscConfig+0x334>
 80044b6:	4b6a      	ldr	r3, [pc, #424]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044b8:	6a1b      	ldr	r3, [r3, #32]
 80044ba:	4a69      	ldr	r2, [pc, #420]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044bc:	f023 0301 	bic.w	r3, r3, #1
 80044c0:	6213      	str	r3, [r2, #32]
 80044c2:	4b67      	ldr	r3, [pc, #412]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044c4:	6a1b      	ldr	r3, [r3, #32]
 80044c6:	4a66      	ldr	r2, [pc, #408]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044c8:	f023 0304 	bic.w	r3, r3, #4
 80044cc:	6213      	str	r3, [r2, #32]
 80044ce:	e01c      	b.n	800450a <HAL_RCC_OscConfig+0x36e>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	2b05      	cmp	r3, #5
 80044d6:	d10c      	bne.n	80044f2 <HAL_RCC_OscConfig+0x356>
 80044d8:	4b61      	ldr	r3, [pc, #388]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	4a60      	ldr	r2, [pc, #384]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044de:	f043 0304 	orr.w	r3, r3, #4
 80044e2:	6213      	str	r3, [r2, #32]
 80044e4:	4b5e      	ldr	r3, [pc, #376]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044e6:	6a1b      	ldr	r3, [r3, #32]
 80044e8:	4a5d      	ldr	r2, [pc, #372]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044ea:	f043 0301 	orr.w	r3, r3, #1
 80044ee:	6213      	str	r3, [r2, #32]
 80044f0:	e00b      	b.n	800450a <HAL_RCC_OscConfig+0x36e>
 80044f2:	4b5b      	ldr	r3, [pc, #364]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	4a5a      	ldr	r2, [pc, #360]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80044f8:	f023 0301 	bic.w	r3, r3, #1
 80044fc:	6213      	str	r3, [r2, #32]
 80044fe:	4b58      	ldr	r3, [pc, #352]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	4a57      	ldr	r2, [pc, #348]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004504:	f023 0304 	bic.w	r3, r3, #4
 8004508:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d015      	beq.n	800453e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004512:	f7fc ff81 	bl	8001418 <HAL_GetTick>
 8004516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004518:	e00a      	b.n	8004530 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800451a:	f7fc ff7d 	bl	8001418 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	f241 3288 	movw	r2, #5000	; 0x1388
 8004528:	4293      	cmp	r3, r2
 800452a:	d901      	bls.n	8004530 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800452c:	2303      	movs	r3, #3
 800452e:	e0b1      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004530:	4b4b      	ldr	r3, [pc, #300]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004532:	6a1b      	ldr	r3, [r3, #32]
 8004534:	f003 0302 	and.w	r3, r3, #2
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0ee      	beq.n	800451a <HAL_RCC_OscConfig+0x37e>
 800453c:	e014      	b.n	8004568 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800453e:	f7fc ff6b 	bl	8001418 <HAL_GetTick>
 8004542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004544:	e00a      	b.n	800455c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004546:	f7fc ff67 	bl	8001418 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	f241 3288 	movw	r2, #5000	; 0x1388
 8004554:	4293      	cmp	r3, r2
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e09b      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800455c:	4b40      	ldr	r3, [pc, #256]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1ee      	bne.n	8004546 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004568:	7dfb      	ldrb	r3, [r7, #23]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d105      	bne.n	800457a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800456e:	4b3c      	ldr	r3, [pc, #240]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	4a3b      	ldr	r2, [pc, #236]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004574:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004578:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	2b00      	cmp	r3, #0
 8004580:	f000 8087 	beq.w	8004692 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004584:	4b36      	ldr	r3, [pc, #216]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f003 030c 	and.w	r3, r3, #12
 800458c:	2b08      	cmp	r3, #8
 800458e:	d061      	beq.n	8004654 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	2b02      	cmp	r3, #2
 8004596:	d146      	bne.n	8004626 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004598:	4b33      	ldr	r3, [pc, #204]	; (8004668 <HAL_RCC_OscConfig+0x4cc>)
 800459a:	2200      	movs	r2, #0
 800459c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800459e:	f7fc ff3b 	bl	8001418 <HAL_GetTick>
 80045a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045a4:	e008      	b.n	80045b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045a6:	f7fc ff37 	bl	8001418 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d901      	bls.n	80045b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e06d      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045b8:	4b29      	ldr	r3, [pc, #164]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1f0      	bne.n	80045a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045cc:	d108      	bne.n	80045e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80045ce:	4b24      	ldr	r3, [pc, #144]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	4921      	ldr	r1, [pc, #132]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045e0:	4b1f      	ldr	r3, [pc, #124]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a19      	ldr	r1, [r3, #32]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	430b      	orrs	r3, r1
 80045f2:	491b      	ldr	r1, [pc, #108]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045f8:	4b1b      	ldr	r3, [pc, #108]	; (8004668 <HAL_RCC_OscConfig+0x4cc>)
 80045fa:	2201      	movs	r2, #1
 80045fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045fe:	f7fc ff0b 	bl	8001418 <HAL_GetTick>
 8004602:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004604:	e008      	b.n	8004618 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004606:	f7fc ff07 	bl	8001418 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	2b02      	cmp	r3, #2
 8004612:	d901      	bls.n	8004618 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004614:	2303      	movs	r3, #3
 8004616:	e03d      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004618:	4b11      	ldr	r3, [pc, #68]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004620:	2b00      	cmp	r3, #0
 8004622:	d0f0      	beq.n	8004606 <HAL_RCC_OscConfig+0x46a>
 8004624:	e035      	b.n	8004692 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004626:	4b10      	ldr	r3, [pc, #64]	; (8004668 <HAL_RCC_OscConfig+0x4cc>)
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462c:	f7fc fef4 	bl	8001418 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004634:	f7fc fef0 	bl	8001418 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e026      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004646:	4b06      	ldr	r3, [pc, #24]	; (8004660 <HAL_RCC_OscConfig+0x4c4>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1f0      	bne.n	8004634 <HAL_RCC_OscConfig+0x498>
 8004652:	e01e      	b.n	8004692 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	69db      	ldr	r3, [r3, #28]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d107      	bne.n	800466c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e019      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
 8004660:	40021000 	.word	0x40021000
 8004664:	40007000 	.word	0x40007000
 8004668:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800466c:	4b0b      	ldr	r3, [pc, #44]	; (800469c <HAL_RCC_OscConfig+0x500>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	429a      	cmp	r2, r3
 800467e:	d106      	bne.n	800468e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800468a:	429a      	cmp	r2, r3
 800468c:	d001      	beq.n	8004692 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e000      	b.n	8004694 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3718      	adds	r7, #24
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}
 800469c:	40021000 	.word	0x40021000

080046a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d101      	bne.n	80046b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e0d0      	b.n	8004856 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046b4:	4b6a      	ldr	r3, [pc, #424]	; (8004860 <HAL_RCC_ClockConfig+0x1c0>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0307 	and.w	r3, r3, #7
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d910      	bls.n	80046e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046c2:	4b67      	ldr	r3, [pc, #412]	; (8004860 <HAL_RCC_ClockConfig+0x1c0>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f023 0207 	bic.w	r2, r3, #7
 80046ca:	4965      	ldr	r1, [pc, #404]	; (8004860 <HAL_RCC_ClockConfig+0x1c0>)
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046d2:	4b63      	ldr	r3, [pc, #396]	; (8004860 <HAL_RCC_ClockConfig+0x1c0>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	429a      	cmp	r2, r3
 80046de:	d001      	beq.n	80046e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e0b8      	b.n	8004856 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0302 	and.w	r3, r3, #2
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d020      	beq.n	8004732 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d005      	beq.n	8004708 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046fc:	4b59      	ldr	r3, [pc, #356]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	4a58      	ldr	r2, [pc, #352]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 8004702:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004706:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0308 	and.w	r3, r3, #8
 8004710:	2b00      	cmp	r3, #0
 8004712:	d005      	beq.n	8004720 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004714:	4b53      	ldr	r3, [pc, #332]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	4a52      	ldr	r2, [pc, #328]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 800471a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800471e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004720:	4b50      	ldr	r3, [pc, #320]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	494d      	ldr	r1, [pc, #308]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 800472e:	4313      	orrs	r3, r2
 8004730:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d040      	beq.n	80047c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d107      	bne.n	8004756 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004746:	4b47      	ldr	r3, [pc, #284]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d115      	bne.n	800477e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e07f      	b.n	8004856 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	2b02      	cmp	r3, #2
 800475c:	d107      	bne.n	800476e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800475e:	4b41      	ldr	r3, [pc, #260]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d109      	bne.n	800477e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e073      	b.n	8004856 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800476e:	4b3d      	ldr	r3, [pc, #244]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e06b      	b.n	8004856 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800477e:	4b39      	ldr	r3, [pc, #228]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f023 0203 	bic.w	r2, r3, #3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	4936      	ldr	r1, [pc, #216]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 800478c:	4313      	orrs	r3, r2
 800478e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004790:	f7fc fe42 	bl	8001418 <HAL_GetTick>
 8004794:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004796:	e00a      	b.n	80047ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004798:	f7fc fe3e 	bl	8001418 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d901      	bls.n	80047ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047aa:	2303      	movs	r3, #3
 80047ac:	e053      	b.n	8004856 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ae:	4b2d      	ldr	r3, [pc, #180]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f003 020c 	and.w	r2, r3, #12
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	429a      	cmp	r2, r3
 80047be:	d1eb      	bne.n	8004798 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047c0:	4b27      	ldr	r3, [pc, #156]	; (8004860 <HAL_RCC_ClockConfig+0x1c0>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	683a      	ldr	r2, [r7, #0]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d210      	bcs.n	80047f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ce:	4b24      	ldr	r3, [pc, #144]	; (8004860 <HAL_RCC_ClockConfig+0x1c0>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f023 0207 	bic.w	r2, r3, #7
 80047d6:	4922      	ldr	r1, [pc, #136]	; (8004860 <HAL_RCC_ClockConfig+0x1c0>)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	4313      	orrs	r3, r2
 80047dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047de:	4b20      	ldr	r3, [pc, #128]	; (8004860 <HAL_RCC_ClockConfig+0x1c0>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0307 	and.w	r3, r3, #7
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d001      	beq.n	80047f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e032      	b.n	8004856 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d008      	beq.n	800480e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047fc:	4b19      	ldr	r3, [pc, #100]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	4916      	ldr	r1, [pc, #88]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 800480a:	4313      	orrs	r3, r2
 800480c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 0308 	and.w	r3, r3, #8
 8004816:	2b00      	cmp	r3, #0
 8004818:	d009      	beq.n	800482e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800481a:	4b12      	ldr	r3, [pc, #72]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	490e      	ldr	r1, [pc, #56]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 800482a:	4313      	orrs	r3, r2
 800482c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800482e:	f000 f821 	bl	8004874 <HAL_RCC_GetSysClockFreq>
 8004832:	4602      	mov	r2, r0
 8004834:	4b0b      	ldr	r3, [pc, #44]	; (8004864 <HAL_RCC_ClockConfig+0x1c4>)
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	091b      	lsrs	r3, r3, #4
 800483a:	f003 030f 	and.w	r3, r3, #15
 800483e:	490a      	ldr	r1, [pc, #40]	; (8004868 <HAL_RCC_ClockConfig+0x1c8>)
 8004840:	5ccb      	ldrb	r3, [r1, r3]
 8004842:	fa22 f303 	lsr.w	r3, r2, r3
 8004846:	4a09      	ldr	r2, [pc, #36]	; (800486c <HAL_RCC_ClockConfig+0x1cc>)
 8004848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800484a:	4b09      	ldr	r3, [pc, #36]	; (8004870 <HAL_RCC_ClockConfig+0x1d0>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4618      	mov	r0, r3
 8004850:	f7fc fda0 	bl	8001394 <HAL_InitTick>

  return HAL_OK;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	40022000 	.word	0x40022000
 8004864:	40021000 	.word	0x40021000
 8004868:	08006218 	.word	0x08006218
 800486c:	20000004 	.word	0x20000004
 8004870:	20000008 	.word	0x20000008

08004874 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004874:	b480      	push	{r7}
 8004876:	b087      	sub	sp, #28
 8004878:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800487a:	2300      	movs	r3, #0
 800487c:	60fb      	str	r3, [r7, #12]
 800487e:	2300      	movs	r3, #0
 8004880:	60bb      	str	r3, [r7, #8]
 8004882:	2300      	movs	r3, #0
 8004884:	617b      	str	r3, [r7, #20]
 8004886:	2300      	movs	r3, #0
 8004888:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800488a:	2300      	movs	r3, #0
 800488c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800488e:	4b1e      	ldr	r3, [pc, #120]	; (8004908 <HAL_RCC_GetSysClockFreq+0x94>)
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f003 030c 	and.w	r3, r3, #12
 800489a:	2b04      	cmp	r3, #4
 800489c:	d002      	beq.n	80048a4 <HAL_RCC_GetSysClockFreq+0x30>
 800489e:	2b08      	cmp	r3, #8
 80048a0:	d003      	beq.n	80048aa <HAL_RCC_GetSysClockFreq+0x36>
 80048a2:	e027      	b.n	80048f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80048a4:	4b19      	ldr	r3, [pc, #100]	; (800490c <HAL_RCC_GetSysClockFreq+0x98>)
 80048a6:	613b      	str	r3, [r7, #16]
      break;
 80048a8:	e027      	b.n	80048fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	0c9b      	lsrs	r3, r3, #18
 80048ae:	f003 030f 	and.w	r3, r3, #15
 80048b2:	4a17      	ldr	r2, [pc, #92]	; (8004910 <HAL_RCC_GetSysClockFreq+0x9c>)
 80048b4:	5cd3      	ldrb	r3, [r2, r3]
 80048b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d010      	beq.n	80048e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048c2:	4b11      	ldr	r3, [pc, #68]	; (8004908 <HAL_RCC_GetSysClockFreq+0x94>)
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	0c5b      	lsrs	r3, r3, #17
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	4a11      	ldr	r2, [pc, #68]	; (8004914 <HAL_RCC_GetSysClockFreq+0xa0>)
 80048ce:	5cd3      	ldrb	r3, [r2, r3]
 80048d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a0d      	ldr	r2, [pc, #52]	; (800490c <HAL_RCC_GetSysClockFreq+0x98>)
 80048d6:	fb03 f202 	mul.w	r2, r3, r2
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e0:	617b      	str	r3, [r7, #20]
 80048e2:	e004      	b.n	80048ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a0c      	ldr	r2, [pc, #48]	; (8004918 <HAL_RCC_GetSysClockFreq+0xa4>)
 80048e8:	fb02 f303 	mul.w	r3, r2, r3
 80048ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	613b      	str	r3, [r7, #16]
      break;
 80048f2:	e002      	b.n	80048fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80048f4:	4b05      	ldr	r3, [pc, #20]	; (800490c <HAL_RCC_GetSysClockFreq+0x98>)
 80048f6:	613b      	str	r3, [r7, #16]
      break;
 80048f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048fa:	693b      	ldr	r3, [r7, #16]
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	371c      	adds	r7, #28
 8004900:	46bd      	mov	sp, r7
 8004902:	bc80      	pop	{r7}
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	40021000 	.word	0x40021000
 800490c:	007a1200 	.word	0x007a1200
 8004910:	08006230 	.word	0x08006230
 8004914:	08006240 	.word	0x08006240
 8004918:	003d0900 	.word	0x003d0900

0800491c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004920:	4b02      	ldr	r3, [pc, #8]	; (800492c <HAL_RCC_GetHCLKFreq+0x10>)
 8004922:	681b      	ldr	r3, [r3, #0]
}
 8004924:	4618      	mov	r0, r3
 8004926:	46bd      	mov	sp, r7
 8004928:	bc80      	pop	{r7}
 800492a:	4770      	bx	lr
 800492c:	20000004 	.word	0x20000004

08004930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004934:	f7ff fff2 	bl	800491c <HAL_RCC_GetHCLKFreq>
 8004938:	4602      	mov	r2, r0
 800493a:	4b05      	ldr	r3, [pc, #20]	; (8004950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	0a1b      	lsrs	r3, r3, #8
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	4903      	ldr	r1, [pc, #12]	; (8004954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004946:	5ccb      	ldrb	r3, [r1, r3]
 8004948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800494c:	4618      	mov	r0, r3
 800494e:	bd80      	pop	{r7, pc}
 8004950:	40021000 	.word	0x40021000
 8004954:	08006228 	.word	0x08006228

08004958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800495c:	f7ff ffde 	bl	800491c <HAL_RCC_GetHCLKFreq>
 8004960:	4602      	mov	r2, r0
 8004962:	4b05      	ldr	r3, [pc, #20]	; (8004978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	0adb      	lsrs	r3, r3, #11
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	4903      	ldr	r1, [pc, #12]	; (800497c <HAL_RCC_GetPCLK2Freq+0x24>)
 800496e:	5ccb      	ldrb	r3, [r1, r3]
 8004970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004974:	4618      	mov	r0, r3
 8004976:	bd80      	pop	{r7, pc}
 8004978:	40021000 	.word	0x40021000
 800497c:	08006228 	.word	0x08006228

08004980 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004988:	4b0a      	ldr	r3, [pc, #40]	; (80049b4 <RCC_Delay+0x34>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a0a      	ldr	r2, [pc, #40]	; (80049b8 <RCC_Delay+0x38>)
 800498e:	fba2 2303 	umull	r2, r3, r2, r3
 8004992:	0a5b      	lsrs	r3, r3, #9
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	fb02 f303 	mul.w	r3, r2, r3
 800499a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800499c:	bf00      	nop
  }
  while (Delay --);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	1e5a      	subs	r2, r3, #1
 80049a2:	60fa      	str	r2, [r7, #12]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1f9      	bne.n	800499c <RCC_Delay+0x1c>
}
 80049a8:	bf00      	nop
 80049aa:	bf00      	nop
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bc80      	pop	{r7}
 80049b2:	4770      	bx	lr
 80049b4:	20000004 	.word	0x20000004
 80049b8:	10624dd3 	.word	0x10624dd3

080049bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e076      	b.n	8004abc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d108      	bne.n	80049e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049de:	d009      	beq.n	80049f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	61da      	str	r2, [r3, #28]
 80049e6:	e005      	b.n	80049f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d106      	bne.n	8004a14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7fc fb76 	bl	8001100 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2202      	movs	r2, #2
 8004a18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a46:	431a      	orrs	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	431a      	orrs	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a64:	431a      	orrs	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a78:	ea42 0103 	orr.w	r1, r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a80:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	0c1a      	lsrs	r2, r3, #16
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f002 0204 	and.w	r2, r2, #4
 8004a9a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	69da      	ldr	r2, [r3, #28]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004aaa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3708      	adds	r7, #8
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b088      	sub	sp, #32
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	603b      	str	r3, [r7, #0]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d101      	bne.n	8004ae6 <HAL_SPI_Transmit+0x22>
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	e12d      	b.n	8004d42 <HAL_SPI_Transmit+0x27e>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004aee:	f7fc fc93 	bl	8001418 <HAL_GetTick>
 8004af2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004af4:	88fb      	ldrh	r3, [r7, #6]
 8004af6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d002      	beq.n	8004b0a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b04:	2302      	movs	r3, #2
 8004b06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b08:	e116      	b.n	8004d38 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d002      	beq.n	8004b16 <HAL_SPI_Transmit+0x52>
 8004b10:	88fb      	ldrh	r3, [r7, #6]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d102      	bne.n	8004b1c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b1a:	e10d      	b.n	8004d38 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2203      	movs	r2, #3
 8004b20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	88fa      	ldrh	r2, [r7, #6]
 8004b34:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	88fa      	ldrh	r2, [r7, #6]
 8004b3a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b62:	d10f      	bne.n	8004b84 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b72:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b82:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8e:	2b40      	cmp	r3, #64	; 0x40
 8004b90:	d007      	beq.n	8004ba2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ba0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004baa:	d14f      	bne.n	8004c4c <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <HAL_SPI_Transmit+0xf6>
 8004bb4:	8afb      	ldrh	r3, [r7, #22]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d142      	bne.n	8004c40 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbe:	881a      	ldrh	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bca:	1c9a      	adds	r2, r3, #2
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004bde:	e02f      	b.n	8004c40 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d112      	bne.n	8004c14 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf2:	881a      	ldrh	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfe:	1c9a      	adds	r2, r3, #2
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c12:	e015      	b.n	8004c40 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c14:	f7fc fc00 	bl	8001418 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	683a      	ldr	r2, [r7, #0]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d803      	bhi.n	8004c2c <HAL_SPI_Transmit+0x168>
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2a:	d102      	bne.n	8004c32 <HAL_SPI_Transmit+0x16e>
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d106      	bne.n	8004c40 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004c3e:	e07b      	b.n	8004d38 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1ca      	bne.n	8004be0 <HAL_SPI_Transmit+0x11c>
 8004c4a:	e050      	b.n	8004cee <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d002      	beq.n	8004c5a <HAL_SPI_Transmit+0x196>
 8004c54:	8afb      	ldrh	r3, [r7, #22]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d144      	bne.n	8004ce4 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	330c      	adds	r3, #12
 8004c64:	7812      	ldrb	r2, [r2, #0]
 8004c66:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6c:	1c5a      	adds	r2, r3, #1
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004c80:	e030      	b.n	8004ce4 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d113      	bne.n	8004cb8 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	330c      	adds	r3, #12
 8004c9a:	7812      	ldrb	r2, [r2, #0]
 8004c9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca2:	1c5a      	adds	r2, r3, #1
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	86da      	strh	r2, [r3, #54]	; 0x36
 8004cb6:	e015      	b.n	8004ce4 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cb8:	f7fc fbae 	bl	8001418 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d803      	bhi.n	8004cd0 <HAL_SPI_Transmit+0x20c>
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cce:	d102      	bne.n	8004cd6 <HAL_SPI_Transmit+0x212>
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d106      	bne.n	8004ce4 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004ce2:	e029      	b.n	8004d38 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1c9      	bne.n	8004c82 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	6839      	ldr	r1, [r7, #0]
 8004cf2:	68f8      	ldr	r0, [r7, #12]
 8004cf4:	f000 fbd8 	bl	80054a8 <SPI_EndRxTxTransaction>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d002      	beq.n	8004d04 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2220      	movs	r2, #32
 8004d02:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10a      	bne.n	8004d22 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	613b      	str	r3, [r7, #16]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	613b      	str	r3, [r7, #16]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	613b      	str	r3, [r7, #16]
 8004d20:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	77fb      	strb	r3, [r7, #31]
 8004d2e:	e003      	b.n	8004d38 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d40:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3720      	adds	r7, #32
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b088      	sub	sp, #32
 8004d4e:	af02      	add	r7, sp, #8
 8004d50:	60f8      	str	r0, [r7, #12]
 8004d52:	60b9      	str	r1, [r7, #8]
 8004d54:	603b      	str	r3, [r7, #0]
 8004d56:	4613      	mov	r3, r2
 8004d58:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d002      	beq.n	8004d70 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004d6e:	e0fb      	b.n	8004f68 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d78:	d112      	bne.n	8004da0 <HAL_SPI_Receive+0x56>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10e      	bne.n	8004da0 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2204      	movs	r2, #4
 8004d86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004d8a:	88fa      	ldrh	r2, [r7, #6]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	9300      	str	r3, [sp, #0]
 8004d90:	4613      	mov	r3, r2
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	68b9      	ldr	r1, [r7, #8]
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f000 f8ef 	bl	8004f7a <HAL_SPI_TransmitReceive>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	e0e8      	b.n	8004f72 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d101      	bne.n	8004dae <HAL_SPI_Receive+0x64>
 8004daa:	2302      	movs	r3, #2
 8004dac:	e0e1      	b.n	8004f72 <HAL_SPI_Receive+0x228>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004db6:	f7fc fb2f 	bl	8001418 <HAL_GetTick>
 8004dba:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d002      	beq.n	8004dc8 <HAL_SPI_Receive+0x7e>
 8004dc2:	88fb      	ldrh	r3, [r7, #6]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d102      	bne.n	8004dce <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004dcc:	e0cc      	b.n	8004f68 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2204      	movs	r2, #4
 8004dd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	88fa      	ldrh	r2, [r7, #6]
 8004de6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	88fa      	ldrh	r2, [r7, #6]
 8004dec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e14:	d10f      	bne.n	8004e36 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e34:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e40:	2b40      	cmp	r3, #64	; 0x40
 8004e42:	d007      	beq.n	8004e54 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e52:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d16a      	bne.n	8004f32 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004e5c:	e032      	b.n	8004ec4 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d115      	bne.n	8004e98 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f103 020c 	add.w	r2, r3, #12
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e78:	7812      	ldrb	r2, [r2, #0]
 8004e7a:	b2d2      	uxtb	r2, r2
 8004e7c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e82:	1c5a      	adds	r2, r3, #1
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	3b01      	subs	r3, #1
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e96:	e015      	b.n	8004ec4 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e98:	f7fc fabe 	bl	8001418 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	683a      	ldr	r2, [r7, #0]
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d803      	bhi.n	8004eb0 <HAL_SPI_Receive+0x166>
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eae:	d102      	bne.n	8004eb6 <HAL_SPI_Receive+0x16c>
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d106      	bne.n	8004ec4 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004ec2:	e051      	b.n	8004f68 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1c7      	bne.n	8004e5e <HAL_SPI_Receive+0x114>
 8004ece:	e035      	b.n	8004f3c <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d113      	bne.n	8004f06 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68da      	ldr	r2, [r3, #12]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee8:	b292      	uxth	r2, r2
 8004eea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef0:	1c9a      	adds	r2, r3, #2
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	3b01      	subs	r3, #1
 8004efe:	b29a      	uxth	r2, r3
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f04:	e015      	b.n	8004f32 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f06:	f7fc fa87 	bl	8001418 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d803      	bhi.n	8004f1e <HAL_SPI_Receive+0x1d4>
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f1c:	d102      	bne.n	8004f24 <HAL_SPI_Receive+0x1da>
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d106      	bne.n	8004f32 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004f24:	2303      	movs	r3, #3
 8004f26:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8004f30:	e01a      	b.n	8004f68 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d1c9      	bne.n	8004ed0 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	6839      	ldr	r1, [r7, #0]
 8004f40:	68f8      	ldr	r0, [r7, #12]
 8004f42:	f000 fa5f 	bl	8005404 <SPI_EndRxTransaction>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d002      	beq.n	8004f52 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2220      	movs	r2, #32
 8004f50:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d002      	beq.n	8004f60 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	75fb      	strb	r3, [r7, #23]
 8004f5e:	e003      	b.n	8004f68 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	3718      	adds	r7, #24
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}

08004f7a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b08c      	sub	sp, #48	; 0x30
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	60f8      	str	r0, [r7, #12]
 8004f82:	60b9      	str	r1, [r7, #8]
 8004f84:	607a      	str	r2, [r7, #4]
 8004f86:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d101      	bne.n	8004fa0 <HAL_SPI_TransmitReceive+0x26>
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	e198      	b.n	80052d2 <HAL_SPI_TransmitReceive+0x358>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004fa8:	f7fc fa36 	bl	8001418 <HAL_GetTick>
 8004fac:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004fb4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004fbe:	887b      	ldrh	r3, [r7, #2]
 8004fc0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004fc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fc6:	2b01      	cmp	r3, #1
 8004fc8:	d00f      	beq.n	8004fea <HAL_SPI_TransmitReceive+0x70>
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fd0:	d107      	bne.n	8004fe2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d103      	bne.n	8004fe2 <HAL_SPI_TransmitReceive+0x68>
 8004fda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004fde:	2b04      	cmp	r3, #4
 8004fe0:	d003      	beq.n	8004fea <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004fe2:	2302      	movs	r3, #2
 8004fe4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004fe8:	e16d      	b.n	80052c6 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d005      	beq.n	8004ffc <HAL_SPI_TransmitReceive+0x82>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d002      	beq.n	8004ffc <HAL_SPI_TransmitReceive+0x82>
 8004ff6:	887b      	ldrh	r3, [r7, #2]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d103      	bne.n	8005004 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005002:	e160      	b.n	80052c6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b04      	cmp	r3, #4
 800500e:	d003      	beq.n	8005018 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	2205      	movs	r2, #5
 8005014:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	887a      	ldrh	r2, [r7, #2]
 8005028:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	887a      	ldrh	r2, [r7, #2]
 800502e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	68ba      	ldr	r2, [r7, #8]
 8005034:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	887a      	ldrh	r2, [r7, #2]
 800503a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	887a      	ldrh	r2, [r7, #2]
 8005040:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2200      	movs	r2, #0
 8005046:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005058:	2b40      	cmp	r3, #64	; 0x40
 800505a:	d007      	beq.n	800506c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800506a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005074:	d17c      	bne.n	8005170 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d002      	beq.n	8005084 <HAL_SPI_TransmitReceive+0x10a>
 800507e:	8b7b      	ldrh	r3, [r7, #26]
 8005080:	2b01      	cmp	r3, #1
 8005082:	d16a      	bne.n	800515a <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005088:	881a      	ldrh	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005094:	1c9a      	adds	r2, r3, #2
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800509e:	b29b      	uxth	r3, r3
 80050a0:	3b01      	subs	r3, #1
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80050a8:	e057      	b.n	800515a <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d11b      	bne.n	80050f0 <HAL_SPI_TransmitReceive+0x176>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050bc:	b29b      	uxth	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d016      	beq.n	80050f0 <HAL_SPI_TransmitReceive+0x176>
 80050c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d113      	bne.n	80050f0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050cc:	881a      	ldrh	r2, [r3, #0]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d8:	1c9a      	adds	r2, r3, #2
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	3b01      	subs	r3, #1
 80050e6:	b29a      	uxth	r2, r3
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d119      	bne.n	8005132 <HAL_SPI_TransmitReceive+0x1b8>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005102:	b29b      	uxth	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	d014      	beq.n	8005132 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68da      	ldr	r2, [r3, #12]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005112:	b292      	uxth	r2, r2
 8005114:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511a:	1c9a      	adds	r2, r3, #2
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005124:	b29b      	uxth	r3, r3
 8005126:	3b01      	subs	r3, #1
 8005128:	b29a      	uxth	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800512e:	2301      	movs	r3, #1
 8005130:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005132:	f7fc f971 	bl	8001418 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800513e:	429a      	cmp	r2, r3
 8005140:	d80b      	bhi.n	800515a <HAL_SPI_TransmitReceive+0x1e0>
 8005142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005148:	d007      	beq.n	800515a <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005158:	e0b5      	b.n	80052c6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800515e:	b29b      	uxth	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1a2      	bne.n	80050aa <HAL_SPI_TransmitReceive+0x130>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005168:	b29b      	uxth	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d19d      	bne.n	80050aa <HAL_SPI_TransmitReceive+0x130>
 800516e:	e080      	b.n	8005272 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d002      	beq.n	800517e <HAL_SPI_TransmitReceive+0x204>
 8005178:	8b7b      	ldrh	r3, [r7, #26]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d16f      	bne.n	800525e <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	330c      	adds	r3, #12
 8005188:	7812      	ldrb	r2, [r2, #0]
 800518a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005190:	1c5a      	adds	r2, r3, #1
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800519a:	b29b      	uxth	r3, r3
 800519c:	3b01      	subs	r3, #1
 800519e:	b29a      	uxth	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051a4:	e05b      	b.n	800525e <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f003 0302 	and.w	r3, r3, #2
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d11c      	bne.n	80051ee <HAL_SPI_TransmitReceive+0x274>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d017      	beq.n	80051ee <HAL_SPI_TransmitReceive+0x274>
 80051be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d114      	bne.n	80051ee <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	330c      	adds	r3, #12
 80051ce:	7812      	ldrb	r2, [r2, #0]
 80051d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	3b01      	subs	r3, #1
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80051ea:	2300      	movs	r3, #0
 80051ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d119      	bne.n	8005230 <HAL_SPI_TransmitReceive+0x2b6>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005200:	b29b      	uxth	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	d014      	beq.n	8005230 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68da      	ldr	r2, [r3, #12]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005210:	b2d2      	uxtb	r2, r2
 8005212:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005222:	b29b      	uxth	r3, r3
 8005224:	3b01      	subs	r3, #1
 8005226:	b29a      	uxth	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800522c:	2301      	movs	r3, #1
 800522e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005230:	f7fc f8f2 	bl	8001418 <HAL_GetTick>
 8005234:	4602      	mov	r2, r0
 8005236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800523c:	429a      	cmp	r2, r3
 800523e:	d803      	bhi.n	8005248 <HAL_SPI_TransmitReceive+0x2ce>
 8005240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005242:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005246:	d102      	bne.n	800524e <HAL_SPI_TransmitReceive+0x2d4>
 8005248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524a:	2b00      	cmp	r3, #0
 800524c:	d107      	bne.n	800525e <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 800525c:	e033      	b.n	80052c6 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005262:	b29b      	uxth	r3, r3
 8005264:	2b00      	cmp	r3, #0
 8005266:	d19e      	bne.n	80051a6 <HAL_SPI_TransmitReceive+0x22c>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800526c:	b29b      	uxth	r3, r3
 800526e:	2b00      	cmp	r3, #0
 8005270:	d199      	bne.n	80051a6 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005274:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005276:	68f8      	ldr	r0, [r7, #12]
 8005278:	f000 f916 	bl	80054a8 <SPI_EndRxTxTransaction>
 800527c:	4603      	mov	r3, r0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d006      	beq.n	8005290 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2220      	movs	r2, #32
 800528c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800528e:	e01a      	b.n	80052c6 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10a      	bne.n	80052ae <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005298:	2300      	movs	r3, #0
 800529a:	617b      	str	r3, [r7, #20]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	617b      	str	r3, [r7, #20]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	617b      	str	r3, [r7, #20]
 80052ac:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d003      	beq.n	80052be <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80052bc:	e003      	b.n	80052c6 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2201      	movs	r2, #1
 80052c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80052ce:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3730      	adds	r7, #48	; 0x30
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80052da:	b480      	push	{r7}
 80052dc:	b083      	sub	sp, #12
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052e8:	b2db      	uxtb	r3, r3
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bc80      	pop	{r7}
 80052f2:	4770      	bx	lr

080052f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b088      	sub	sp, #32
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	603b      	str	r3, [r7, #0]
 8005300:	4613      	mov	r3, r2
 8005302:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005304:	f7fc f888 	bl	8001418 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530c:	1a9b      	subs	r3, r3, r2
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	4413      	add	r3, r2
 8005312:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005314:	f7fc f880 	bl	8001418 <HAL_GetTick>
 8005318:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800531a:	4b39      	ldr	r3, [pc, #228]	; (8005400 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	015b      	lsls	r3, r3, #5
 8005320:	0d1b      	lsrs	r3, r3, #20
 8005322:	69fa      	ldr	r2, [r7, #28]
 8005324:	fb02 f303 	mul.w	r3, r2, r3
 8005328:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800532a:	e054      	b.n	80053d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005332:	d050      	beq.n	80053d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005334:	f7fc f870 	bl	8001418 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	69fa      	ldr	r2, [r7, #28]
 8005340:	429a      	cmp	r2, r3
 8005342:	d902      	bls.n	800534a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d13d      	bne.n	80053c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	685a      	ldr	r2, [r3, #4]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005358:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005362:	d111      	bne.n	8005388 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800536c:	d004      	beq.n	8005378 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005376:	d107      	bne.n	8005388 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681a      	ldr	r2, [r3, #0]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005386:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005390:	d10f      	bne.n	80053b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053a0:	601a      	str	r2, [r3, #0]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2201      	movs	r2, #1
 80053b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e017      	b.n	80053f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053cc:	2300      	movs	r3, #0
 80053ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	3b01      	subs	r3, #1
 80053d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	4013      	ands	r3, r2
 80053e0:	68ba      	ldr	r2, [r7, #8]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	bf0c      	ite	eq
 80053e6:	2301      	moveq	r3, #1
 80053e8:	2300      	movne	r3, #0
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	461a      	mov	r2, r3
 80053ee:	79fb      	ldrb	r3, [r7, #7]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d19b      	bne.n	800532c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3720      	adds	r7, #32
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	20000004 	.word	0x20000004

08005404 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b086      	sub	sp, #24
 8005408:	af02      	add	r7, sp, #8
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005418:	d111      	bne.n	800543e <SPI_EndRxTransaction+0x3a>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005422:	d004      	beq.n	800542e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800542c:	d107      	bne.n	800543e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800543c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005446:	d117      	bne.n	8005478 <SPI_EndRxTransaction+0x74>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005450:	d112      	bne.n	8005478 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	9300      	str	r3, [sp, #0]
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	2200      	movs	r2, #0
 800545a:	2101      	movs	r1, #1
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f7ff ff49 	bl	80052f4 <SPI_WaitFlagStateUntilTimeout>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d01a      	beq.n	800549e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800546c:	f043 0220 	orr.w	r2, r3, #32
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e013      	b.n	80054a0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	2200      	movs	r2, #0
 8005480:	2180      	movs	r1, #128	; 0x80
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f7ff ff36 	bl	80052f4 <SPI_WaitFlagStateUntilTimeout>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d007      	beq.n	800549e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005492:	f043 0220 	orr.w	r2, r3, #32
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e000      	b.n	80054a0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3710      	adds	r7, #16
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af02      	add	r7, sp, #8
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	60b9      	str	r1, [r7, #8]
 80054b2:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	9300      	str	r3, [sp, #0]
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	2200      	movs	r2, #0
 80054bc:	2180      	movs	r1, #128	; 0x80
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f7ff ff18 	bl	80052f4 <SPI_WaitFlagStateUntilTimeout>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d007      	beq.n	80054da <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ce:	f043 0220 	orr.w	r2, r3, #32
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e000      	b.n	80054dc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3710      	adds	r7, #16
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e042      	b.n	800557c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d106      	bne.n	8005510 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7fb fe42 	bl	8001194 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2224      	movs	r2, #36	; 0x24
 8005514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68da      	ldr	r2, [r3, #12]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005526:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f000 f91d 	bl	8005768 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	691a      	ldr	r2, [r3, #16]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800553c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	695a      	ldr	r2, [r3, #20]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800554c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	68da      	ldr	r2, [r3, #12]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800555c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2220      	movs	r2, #32
 8005568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2220      	movs	r2, #32
 8005570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2200      	movs	r2, #0
 8005578:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3708      	adds	r7, #8
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b08a      	sub	sp, #40	; 0x28
 8005588:	af02      	add	r7, sp, #8
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	603b      	str	r3, [r7, #0]
 8005590:	4613      	mov	r3, r2
 8005592:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005594:	2300      	movs	r3, #0
 8005596:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b20      	cmp	r3, #32
 80055a2:	d16d      	bne.n	8005680 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d002      	beq.n	80055b0 <HAL_UART_Transmit+0x2c>
 80055aa:	88fb      	ldrh	r3, [r7, #6]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e066      	b.n	8005682 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2221      	movs	r2, #33	; 0x21
 80055be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055c2:	f7fb ff29 	bl	8001418 <HAL_GetTick>
 80055c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	88fa      	ldrh	r2, [r7, #6]
 80055cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	88fa      	ldrh	r2, [r7, #6]
 80055d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055dc:	d108      	bne.n	80055f0 <HAL_UART_Transmit+0x6c>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d104      	bne.n	80055f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80055e6:	2300      	movs	r3, #0
 80055e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	61bb      	str	r3, [r7, #24]
 80055ee:	e003      	b.n	80055f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055f4:	2300      	movs	r3, #0
 80055f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055f8:	e02a      	b.n	8005650 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	9300      	str	r3, [sp, #0]
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	2200      	movs	r2, #0
 8005602:	2180      	movs	r1, #128	; 0x80
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f000 f840 	bl	800568a <UART_WaitOnFlagUntilTimeout>
 800560a:	4603      	mov	r3, r0
 800560c:	2b00      	cmp	r3, #0
 800560e:	d001      	beq.n	8005614 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e036      	b.n	8005682 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10b      	bne.n	8005632 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	881b      	ldrh	r3, [r3, #0]
 800561e:	461a      	mov	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005628:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	3302      	adds	r3, #2
 800562e:	61bb      	str	r3, [r7, #24]
 8005630:	e007      	b.n	8005642 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	781a      	ldrb	r2, [r3, #0]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	3301      	adds	r3, #1
 8005640:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005646:	b29b      	uxth	r3, r3
 8005648:	3b01      	subs	r3, #1
 800564a:	b29a      	uxth	r2, r3
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005654:	b29b      	uxth	r3, r3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1cf      	bne.n	80055fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	9300      	str	r3, [sp, #0]
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	2200      	movs	r2, #0
 8005662:	2140      	movs	r1, #64	; 0x40
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f000 f810 	bl	800568a <UART_WaitOnFlagUntilTimeout>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d001      	beq.n	8005674 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e006      	b.n	8005682 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2220      	movs	r2, #32
 8005678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800567c:	2300      	movs	r3, #0
 800567e:	e000      	b.n	8005682 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005680:	2302      	movs	r3, #2
  }
}
 8005682:	4618      	mov	r0, r3
 8005684:	3720      	adds	r7, #32
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800568a:	b580      	push	{r7, lr}
 800568c:	b090      	sub	sp, #64	; 0x40
 800568e:	af00      	add	r7, sp, #0
 8005690:	60f8      	str	r0, [r7, #12]
 8005692:	60b9      	str	r1, [r7, #8]
 8005694:	603b      	str	r3, [r7, #0]
 8005696:	4613      	mov	r3, r2
 8005698:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800569a:	e050      	b.n	800573e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800569c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800569e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a2:	d04c      	beq.n	800573e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80056a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d007      	beq.n	80056ba <UART_WaitOnFlagUntilTimeout+0x30>
 80056aa:	f7fb feb5 	bl	8001418 <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d241      	bcs.n	800573e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	330c      	adds	r3, #12
 80056c0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c4:	e853 3f00 	ldrex	r3, [r3]
 80056c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	330c      	adds	r3, #12
 80056d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80056da:	637a      	str	r2, [r7, #52]	; 0x34
 80056dc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056e2:	e841 2300 	strex	r3, r2, [r1]
 80056e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80056e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1e5      	bne.n	80056ba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	3314      	adds	r3, #20
 80056f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	e853 3f00 	ldrex	r3, [r3]
 80056fc:	613b      	str	r3, [r7, #16]
   return(result);
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	f023 0301 	bic.w	r3, r3, #1
 8005704:	63bb      	str	r3, [r7, #56]	; 0x38
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	3314      	adds	r3, #20
 800570c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800570e:	623a      	str	r2, [r7, #32]
 8005710:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005712:	69f9      	ldr	r1, [r7, #28]
 8005714:	6a3a      	ldr	r2, [r7, #32]
 8005716:	e841 2300 	strex	r3, r2, [r1]
 800571a:	61bb      	str	r3, [r7, #24]
   return(result);
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1e5      	bne.n	80056ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2220      	movs	r2, #32
 8005726:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2220      	movs	r2, #32
 800572e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e00f      	b.n	800575e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	4013      	ands	r3, r2
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	429a      	cmp	r2, r3
 800574c:	bf0c      	ite	eq
 800574e:	2301      	moveq	r3, #1
 8005750:	2300      	movne	r3, #0
 8005752:	b2db      	uxtb	r3, r3
 8005754:	461a      	mov	r2, r3
 8005756:	79fb      	ldrb	r3, [r7, #7]
 8005758:	429a      	cmp	r2, r3
 800575a:	d09f      	beq.n	800569c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3740      	adds	r7, #64	; 0x40
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
	...

08005768 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	68da      	ldr	r2, [r3, #12]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	430a      	orrs	r2, r1
 8005784:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	689a      	ldr	r2, [r3, #8]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	431a      	orrs	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	4313      	orrs	r3, r2
 8005796:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80057a2:	f023 030c 	bic.w	r3, r3, #12
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	6812      	ldr	r2, [r2, #0]
 80057aa:	68b9      	ldr	r1, [r7, #8]
 80057ac:	430b      	orrs	r3, r1
 80057ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	695b      	ldr	r3, [r3, #20]
 80057b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	699a      	ldr	r2, [r3, #24]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a2c      	ldr	r2, [pc, #176]	; (800587c <UART_SetConfig+0x114>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d103      	bne.n	80057d8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80057d0:	f7ff f8c2 	bl	8004958 <HAL_RCC_GetPCLK2Freq>
 80057d4:	60f8      	str	r0, [r7, #12]
 80057d6:	e002      	b.n	80057de <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80057d8:	f7ff f8aa 	bl	8004930 <HAL_RCC_GetPCLK1Freq>
 80057dc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057de:	68fa      	ldr	r2, [r7, #12]
 80057e0:	4613      	mov	r3, r2
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	4413      	add	r3, r2
 80057e6:	009a      	lsls	r2, r3, #2
 80057e8:	441a      	add	r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057f4:	4a22      	ldr	r2, [pc, #136]	; (8005880 <UART_SetConfig+0x118>)
 80057f6:	fba2 2303 	umull	r2, r3, r2, r3
 80057fa:	095b      	lsrs	r3, r3, #5
 80057fc:	0119      	lsls	r1, r3, #4
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	4613      	mov	r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	4413      	add	r3, r2
 8005806:	009a      	lsls	r2, r3, #2
 8005808:	441a      	add	r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	fbb2 f2f3 	udiv	r2, r2, r3
 8005814:	4b1a      	ldr	r3, [pc, #104]	; (8005880 <UART_SetConfig+0x118>)
 8005816:	fba3 0302 	umull	r0, r3, r3, r2
 800581a:	095b      	lsrs	r3, r3, #5
 800581c:	2064      	movs	r0, #100	; 0x64
 800581e:	fb00 f303 	mul.w	r3, r0, r3
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	011b      	lsls	r3, r3, #4
 8005826:	3332      	adds	r3, #50	; 0x32
 8005828:	4a15      	ldr	r2, [pc, #84]	; (8005880 <UART_SetConfig+0x118>)
 800582a:	fba2 2303 	umull	r2, r3, r2, r3
 800582e:	095b      	lsrs	r3, r3, #5
 8005830:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005834:	4419      	add	r1, r3
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	4613      	mov	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4413      	add	r3, r2
 800583e:	009a      	lsls	r2, r3, #2
 8005840:	441a      	add	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	fbb2 f2f3 	udiv	r2, r2, r3
 800584c:	4b0c      	ldr	r3, [pc, #48]	; (8005880 <UART_SetConfig+0x118>)
 800584e:	fba3 0302 	umull	r0, r3, r3, r2
 8005852:	095b      	lsrs	r3, r3, #5
 8005854:	2064      	movs	r0, #100	; 0x64
 8005856:	fb00 f303 	mul.w	r3, r0, r3
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	011b      	lsls	r3, r3, #4
 800585e:	3332      	adds	r3, #50	; 0x32
 8005860:	4a07      	ldr	r2, [pc, #28]	; (8005880 <UART_SetConfig+0x118>)
 8005862:	fba2 2303 	umull	r2, r3, r2, r3
 8005866:	095b      	lsrs	r3, r3, #5
 8005868:	f003 020f 	and.w	r2, r3, #15
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	440a      	add	r2, r1
 8005872:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005874:	bf00      	nop
 8005876:	3710      	adds	r7, #16
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	40013800 	.word	0x40013800
 8005880:	51eb851f 	.word	0x51eb851f

08005884 <__errno>:
 8005884:	4b01      	ldr	r3, [pc, #4]	; (800588c <__errno+0x8>)
 8005886:	6818      	ldr	r0, [r3, #0]
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	20000010 	.word	0x20000010

08005890 <__libc_init_array>:
 8005890:	b570      	push	{r4, r5, r6, lr}
 8005892:	2600      	movs	r6, #0
 8005894:	4d0c      	ldr	r5, [pc, #48]	; (80058c8 <__libc_init_array+0x38>)
 8005896:	4c0d      	ldr	r4, [pc, #52]	; (80058cc <__libc_init_array+0x3c>)
 8005898:	1b64      	subs	r4, r4, r5
 800589a:	10a4      	asrs	r4, r4, #2
 800589c:	42a6      	cmp	r6, r4
 800589e:	d109      	bne.n	80058b4 <__libc_init_array+0x24>
 80058a0:	f000 fc9c 	bl	80061dc <_init>
 80058a4:	2600      	movs	r6, #0
 80058a6:	4d0a      	ldr	r5, [pc, #40]	; (80058d0 <__libc_init_array+0x40>)
 80058a8:	4c0a      	ldr	r4, [pc, #40]	; (80058d4 <__libc_init_array+0x44>)
 80058aa:	1b64      	subs	r4, r4, r5
 80058ac:	10a4      	asrs	r4, r4, #2
 80058ae:	42a6      	cmp	r6, r4
 80058b0:	d105      	bne.n	80058be <__libc_init_array+0x2e>
 80058b2:	bd70      	pop	{r4, r5, r6, pc}
 80058b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80058b8:	4798      	blx	r3
 80058ba:	3601      	adds	r6, #1
 80058bc:	e7ee      	b.n	800589c <__libc_init_array+0xc>
 80058be:	f855 3b04 	ldr.w	r3, [r5], #4
 80058c2:	4798      	blx	r3
 80058c4:	3601      	adds	r6, #1
 80058c6:	e7f2      	b.n	80058ae <__libc_init_array+0x1e>
 80058c8:	08006278 	.word	0x08006278
 80058cc:	08006278 	.word	0x08006278
 80058d0:	08006278 	.word	0x08006278
 80058d4:	0800627c 	.word	0x0800627c

080058d8 <memset>:
 80058d8:	4603      	mov	r3, r0
 80058da:	4402      	add	r2, r0
 80058dc:	4293      	cmp	r3, r2
 80058de:	d100      	bne.n	80058e2 <memset+0xa>
 80058e0:	4770      	bx	lr
 80058e2:	f803 1b01 	strb.w	r1, [r3], #1
 80058e6:	e7f9      	b.n	80058dc <memset+0x4>

080058e8 <siprintf>:
 80058e8:	b40e      	push	{r1, r2, r3}
 80058ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80058ee:	b500      	push	{lr}
 80058f0:	b09c      	sub	sp, #112	; 0x70
 80058f2:	ab1d      	add	r3, sp, #116	; 0x74
 80058f4:	9002      	str	r0, [sp, #8]
 80058f6:	9006      	str	r0, [sp, #24]
 80058f8:	9107      	str	r1, [sp, #28]
 80058fa:	9104      	str	r1, [sp, #16]
 80058fc:	4808      	ldr	r0, [pc, #32]	; (8005920 <siprintf+0x38>)
 80058fe:	4909      	ldr	r1, [pc, #36]	; (8005924 <siprintf+0x3c>)
 8005900:	f853 2b04 	ldr.w	r2, [r3], #4
 8005904:	9105      	str	r1, [sp, #20]
 8005906:	6800      	ldr	r0, [r0, #0]
 8005908:	a902      	add	r1, sp, #8
 800590a:	9301      	str	r3, [sp, #4]
 800590c:	f000 f868 	bl	80059e0 <_svfiprintf_r>
 8005910:	2200      	movs	r2, #0
 8005912:	9b02      	ldr	r3, [sp, #8]
 8005914:	701a      	strb	r2, [r3, #0]
 8005916:	b01c      	add	sp, #112	; 0x70
 8005918:	f85d eb04 	ldr.w	lr, [sp], #4
 800591c:	b003      	add	sp, #12
 800591e:	4770      	bx	lr
 8005920:	20000010 	.word	0x20000010
 8005924:	ffff0208 	.word	0xffff0208

08005928 <__ssputs_r>:
 8005928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800592c:	688e      	ldr	r6, [r1, #8]
 800592e:	4682      	mov	sl, r0
 8005930:	429e      	cmp	r6, r3
 8005932:	460c      	mov	r4, r1
 8005934:	4690      	mov	r8, r2
 8005936:	461f      	mov	r7, r3
 8005938:	d838      	bhi.n	80059ac <__ssputs_r+0x84>
 800593a:	898a      	ldrh	r2, [r1, #12]
 800593c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005940:	d032      	beq.n	80059a8 <__ssputs_r+0x80>
 8005942:	6825      	ldr	r5, [r4, #0]
 8005944:	6909      	ldr	r1, [r1, #16]
 8005946:	3301      	adds	r3, #1
 8005948:	eba5 0901 	sub.w	r9, r5, r1
 800594c:	6965      	ldr	r5, [r4, #20]
 800594e:	444b      	add	r3, r9
 8005950:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005954:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005958:	106d      	asrs	r5, r5, #1
 800595a:	429d      	cmp	r5, r3
 800595c:	bf38      	it	cc
 800595e:	461d      	movcc	r5, r3
 8005960:	0553      	lsls	r3, r2, #21
 8005962:	d531      	bpl.n	80059c8 <__ssputs_r+0xa0>
 8005964:	4629      	mov	r1, r5
 8005966:	f000 fb6f 	bl	8006048 <_malloc_r>
 800596a:	4606      	mov	r6, r0
 800596c:	b950      	cbnz	r0, 8005984 <__ssputs_r+0x5c>
 800596e:	230c      	movs	r3, #12
 8005970:	f04f 30ff 	mov.w	r0, #4294967295
 8005974:	f8ca 3000 	str.w	r3, [sl]
 8005978:	89a3      	ldrh	r3, [r4, #12]
 800597a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800597e:	81a3      	strh	r3, [r4, #12]
 8005980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005984:	464a      	mov	r2, r9
 8005986:	6921      	ldr	r1, [r4, #16]
 8005988:	f000 face 	bl	8005f28 <memcpy>
 800598c:	89a3      	ldrh	r3, [r4, #12]
 800598e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005992:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005996:	81a3      	strh	r3, [r4, #12]
 8005998:	6126      	str	r6, [r4, #16]
 800599a:	444e      	add	r6, r9
 800599c:	6026      	str	r6, [r4, #0]
 800599e:	463e      	mov	r6, r7
 80059a0:	6165      	str	r5, [r4, #20]
 80059a2:	eba5 0509 	sub.w	r5, r5, r9
 80059a6:	60a5      	str	r5, [r4, #8]
 80059a8:	42be      	cmp	r6, r7
 80059aa:	d900      	bls.n	80059ae <__ssputs_r+0x86>
 80059ac:	463e      	mov	r6, r7
 80059ae:	4632      	mov	r2, r6
 80059b0:	4641      	mov	r1, r8
 80059b2:	6820      	ldr	r0, [r4, #0]
 80059b4:	f000 fac6 	bl	8005f44 <memmove>
 80059b8:	68a3      	ldr	r3, [r4, #8]
 80059ba:	2000      	movs	r0, #0
 80059bc:	1b9b      	subs	r3, r3, r6
 80059be:	60a3      	str	r3, [r4, #8]
 80059c0:	6823      	ldr	r3, [r4, #0]
 80059c2:	4433      	add	r3, r6
 80059c4:	6023      	str	r3, [r4, #0]
 80059c6:	e7db      	b.n	8005980 <__ssputs_r+0x58>
 80059c8:	462a      	mov	r2, r5
 80059ca:	f000 fbb1 	bl	8006130 <_realloc_r>
 80059ce:	4606      	mov	r6, r0
 80059d0:	2800      	cmp	r0, #0
 80059d2:	d1e1      	bne.n	8005998 <__ssputs_r+0x70>
 80059d4:	4650      	mov	r0, sl
 80059d6:	6921      	ldr	r1, [r4, #16]
 80059d8:	f000 face 	bl	8005f78 <_free_r>
 80059dc:	e7c7      	b.n	800596e <__ssputs_r+0x46>
	...

080059e0 <_svfiprintf_r>:
 80059e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059e4:	4698      	mov	r8, r3
 80059e6:	898b      	ldrh	r3, [r1, #12]
 80059e8:	4607      	mov	r7, r0
 80059ea:	061b      	lsls	r3, r3, #24
 80059ec:	460d      	mov	r5, r1
 80059ee:	4614      	mov	r4, r2
 80059f0:	b09d      	sub	sp, #116	; 0x74
 80059f2:	d50e      	bpl.n	8005a12 <_svfiprintf_r+0x32>
 80059f4:	690b      	ldr	r3, [r1, #16]
 80059f6:	b963      	cbnz	r3, 8005a12 <_svfiprintf_r+0x32>
 80059f8:	2140      	movs	r1, #64	; 0x40
 80059fa:	f000 fb25 	bl	8006048 <_malloc_r>
 80059fe:	6028      	str	r0, [r5, #0]
 8005a00:	6128      	str	r0, [r5, #16]
 8005a02:	b920      	cbnz	r0, 8005a0e <_svfiprintf_r+0x2e>
 8005a04:	230c      	movs	r3, #12
 8005a06:	603b      	str	r3, [r7, #0]
 8005a08:	f04f 30ff 	mov.w	r0, #4294967295
 8005a0c:	e0d1      	b.n	8005bb2 <_svfiprintf_r+0x1d2>
 8005a0e:	2340      	movs	r3, #64	; 0x40
 8005a10:	616b      	str	r3, [r5, #20]
 8005a12:	2300      	movs	r3, #0
 8005a14:	9309      	str	r3, [sp, #36]	; 0x24
 8005a16:	2320      	movs	r3, #32
 8005a18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a1c:	2330      	movs	r3, #48	; 0x30
 8005a1e:	f04f 0901 	mov.w	r9, #1
 8005a22:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a26:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005bcc <_svfiprintf_r+0x1ec>
 8005a2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a2e:	4623      	mov	r3, r4
 8005a30:	469a      	mov	sl, r3
 8005a32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a36:	b10a      	cbz	r2, 8005a3c <_svfiprintf_r+0x5c>
 8005a38:	2a25      	cmp	r2, #37	; 0x25
 8005a3a:	d1f9      	bne.n	8005a30 <_svfiprintf_r+0x50>
 8005a3c:	ebba 0b04 	subs.w	fp, sl, r4
 8005a40:	d00b      	beq.n	8005a5a <_svfiprintf_r+0x7a>
 8005a42:	465b      	mov	r3, fp
 8005a44:	4622      	mov	r2, r4
 8005a46:	4629      	mov	r1, r5
 8005a48:	4638      	mov	r0, r7
 8005a4a:	f7ff ff6d 	bl	8005928 <__ssputs_r>
 8005a4e:	3001      	adds	r0, #1
 8005a50:	f000 80aa 	beq.w	8005ba8 <_svfiprintf_r+0x1c8>
 8005a54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a56:	445a      	add	r2, fp
 8005a58:	9209      	str	r2, [sp, #36]	; 0x24
 8005a5a:	f89a 3000 	ldrb.w	r3, [sl]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	f000 80a2 	beq.w	8005ba8 <_svfiprintf_r+0x1c8>
 8005a64:	2300      	movs	r3, #0
 8005a66:	f04f 32ff 	mov.w	r2, #4294967295
 8005a6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a6e:	f10a 0a01 	add.w	sl, sl, #1
 8005a72:	9304      	str	r3, [sp, #16]
 8005a74:	9307      	str	r3, [sp, #28]
 8005a76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a7a:	931a      	str	r3, [sp, #104]	; 0x68
 8005a7c:	4654      	mov	r4, sl
 8005a7e:	2205      	movs	r2, #5
 8005a80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a84:	4851      	ldr	r0, [pc, #324]	; (8005bcc <_svfiprintf_r+0x1ec>)
 8005a86:	f000 fa41 	bl	8005f0c <memchr>
 8005a8a:	9a04      	ldr	r2, [sp, #16]
 8005a8c:	b9d8      	cbnz	r0, 8005ac6 <_svfiprintf_r+0xe6>
 8005a8e:	06d0      	lsls	r0, r2, #27
 8005a90:	bf44      	itt	mi
 8005a92:	2320      	movmi	r3, #32
 8005a94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a98:	0711      	lsls	r1, r2, #28
 8005a9a:	bf44      	itt	mi
 8005a9c:	232b      	movmi	r3, #43	; 0x2b
 8005a9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005aa2:	f89a 3000 	ldrb.w	r3, [sl]
 8005aa6:	2b2a      	cmp	r3, #42	; 0x2a
 8005aa8:	d015      	beq.n	8005ad6 <_svfiprintf_r+0xf6>
 8005aaa:	4654      	mov	r4, sl
 8005aac:	2000      	movs	r0, #0
 8005aae:	f04f 0c0a 	mov.w	ip, #10
 8005ab2:	9a07      	ldr	r2, [sp, #28]
 8005ab4:	4621      	mov	r1, r4
 8005ab6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005aba:	3b30      	subs	r3, #48	; 0x30
 8005abc:	2b09      	cmp	r3, #9
 8005abe:	d94e      	bls.n	8005b5e <_svfiprintf_r+0x17e>
 8005ac0:	b1b0      	cbz	r0, 8005af0 <_svfiprintf_r+0x110>
 8005ac2:	9207      	str	r2, [sp, #28]
 8005ac4:	e014      	b.n	8005af0 <_svfiprintf_r+0x110>
 8005ac6:	eba0 0308 	sub.w	r3, r0, r8
 8005aca:	fa09 f303 	lsl.w	r3, r9, r3
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	46a2      	mov	sl, r4
 8005ad2:	9304      	str	r3, [sp, #16]
 8005ad4:	e7d2      	b.n	8005a7c <_svfiprintf_r+0x9c>
 8005ad6:	9b03      	ldr	r3, [sp, #12]
 8005ad8:	1d19      	adds	r1, r3, #4
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	9103      	str	r1, [sp, #12]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	bfbb      	ittet	lt
 8005ae2:	425b      	neglt	r3, r3
 8005ae4:	f042 0202 	orrlt.w	r2, r2, #2
 8005ae8:	9307      	strge	r3, [sp, #28]
 8005aea:	9307      	strlt	r3, [sp, #28]
 8005aec:	bfb8      	it	lt
 8005aee:	9204      	strlt	r2, [sp, #16]
 8005af0:	7823      	ldrb	r3, [r4, #0]
 8005af2:	2b2e      	cmp	r3, #46	; 0x2e
 8005af4:	d10c      	bne.n	8005b10 <_svfiprintf_r+0x130>
 8005af6:	7863      	ldrb	r3, [r4, #1]
 8005af8:	2b2a      	cmp	r3, #42	; 0x2a
 8005afa:	d135      	bne.n	8005b68 <_svfiprintf_r+0x188>
 8005afc:	9b03      	ldr	r3, [sp, #12]
 8005afe:	3402      	adds	r4, #2
 8005b00:	1d1a      	adds	r2, r3, #4
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	9203      	str	r2, [sp, #12]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	bfb8      	it	lt
 8005b0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b0e:	9305      	str	r3, [sp, #20]
 8005b10:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005bd0 <_svfiprintf_r+0x1f0>
 8005b14:	2203      	movs	r2, #3
 8005b16:	4650      	mov	r0, sl
 8005b18:	7821      	ldrb	r1, [r4, #0]
 8005b1a:	f000 f9f7 	bl	8005f0c <memchr>
 8005b1e:	b140      	cbz	r0, 8005b32 <_svfiprintf_r+0x152>
 8005b20:	2340      	movs	r3, #64	; 0x40
 8005b22:	eba0 000a 	sub.w	r0, r0, sl
 8005b26:	fa03 f000 	lsl.w	r0, r3, r0
 8005b2a:	9b04      	ldr	r3, [sp, #16]
 8005b2c:	3401      	adds	r4, #1
 8005b2e:	4303      	orrs	r3, r0
 8005b30:	9304      	str	r3, [sp, #16]
 8005b32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b36:	2206      	movs	r2, #6
 8005b38:	4826      	ldr	r0, [pc, #152]	; (8005bd4 <_svfiprintf_r+0x1f4>)
 8005b3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b3e:	f000 f9e5 	bl	8005f0c <memchr>
 8005b42:	2800      	cmp	r0, #0
 8005b44:	d038      	beq.n	8005bb8 <_svfiprintf_r+0x1d8>
 8005b46:	4b24      	ldr	r3, [pc, #144]	; (8005bd8 <_svfiprintf_r+0x1f8>)
 8005b48:	bb1b      	cbnz	r3, 8005b92 <_svfiprintf_r+0x1b2>
 8005b4a:	9b03      	ldr	r3, [sp, #12]
 8005b4c:	3307      	adds	r3, #7
 8005b4e:	f023 0307 	bic.w	r3, r3, #7
 8005b52:	3308      	adds	r3, #8
 8005b54:	9303      	str	r3, [sp, #12]
 8005b56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b58:	4433      	add	r3, r6
 8005b5a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b5c:	e767      	b.n	8005a2e <_svfiprintf_r+0x4e>
 8005b5e:	460c      	mov	r4, r1
 8005b60:	2001      	movs	r0, #1
 8005b62:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b66:	e7a5      	b.n	8005ab4 <_svfiprintf_r+0xd4>
 8005b68:	2300      	movs	r3, #0
 8005b6a:	f04f 0c0a 	mov.w	ip, #10
 8005b6e:	4619      	mov	r1, r3
 8005b70:	3401      	adds	r4, #1
 8005b72:	9305      	str	r3, [sp, #20]
 8005b74:	4620      	mov	r0, r4
 8005b76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b7a:	3a30      	subs	r2, #48	; 0x30
 8005b7c:	2a09      	cmp	r2, #9
 8005b7e:	d903      	bls.n	8005b88 <_svfiprintf_r+0x1a8>
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d0c5      	beq.n	8005b10 <_svfiprintf_r+0x130>
 8005b84:	9105      	str	r1, [sp, #20]
 8005b86:	e7c3      	b.n	8005b10 <_svfiprintf_r+0x130>
 8005b88:	4604      	mov	r4, r0
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b90:	e7f0      	b.n	8005b74 <_svfiprintf_r+0x194>
 8005b92:	ab03      	add	r3, sp, #12
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	462a      	mov	r2, r5
 8005b98:	4638      	mov	r0, r7
 8005b9a:	4b10      	ldr	r3, [pc, #64]	; (8005bdc <_svfiprintf_r+0x1fc>)
 8005b9c:	a904      	add	r1, sp, #16
 8005b9e:	f3af 8000 	nop.w
 8005ba2:	1c42      	adds	r2, r0, #1
 8005ba4:	4606      	mov	r6, r0
 8005ba6:	d1d6      	bne.n	8005b56 <_svfiprintf_r+0x176>
 8005ba8:	89ab      	ldrh	r3, [r5, #12]
 8005baa:	065b      	lsls	r3, r3, #25
 8005bac:	f53f af2c 	bmi.w	8005a08 <_svfiprintf_r+0x28>
 8005bb0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bb2:	b01d      	add	sp, #116	; 0x74
 8005bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bb8:	ab03      	add	r3, sp, #12
 8005bba:	9300      	str	r3, [sp, #0]
 8005bbc:	462a      	mov	r2, r5
 8005bbe:	4638      	mov	r0, r7
 8005bc0:	4b06      	ldr	r3, [pc, #24]	; (8005bdc <_svfiprintf_r+0x1fc>)
 8005bc2:	a904      	add	r1, sp, #16
 8005bc4:	f000 f87c 	bl	8005cc0 <_printf_i>
 8005bc8:	e7eb      	b.n	8005ba2 <_svfiprintf_r+0x1c2>
 8005bca:	bf00      	nop
 8005bcc:	08006242 	.word	0x08006242
 8005bd0:	08006248 	.word	0x08006248
 8005bd4:	0800624c 	.word	0x0800624c
 8005bd8:	00000000 	.word	0x00000000
 8005bdc:	08005929 	.word	0x08005929

08005be0 <_printf_common>:
 8005be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005be4:	4616      	mov	r6, r2
 8005be6:	4699      	mov	r9, r3
 8005be8:	688a      	ldr	r2, [r1, #8]
 8005bea:	690b      	ldr	r3, [r1, #16]
 8005bec:	4607      	mov	r7, r0
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	bfb8      	it	lt
 8005bf2:	4613      	movlt	r3, r2
 8005bf4:	6033      	str	r3, [r6, #0]
 8005bf6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005bfa:	460c      	mov	r4, r1
 8005bfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c00:	b10a      	cbz	r2, 8005c06 <_printf_common+0x26>
 8005c02:	3301      	adds	r3, #1
 8005c04:	6033      	str	r3, [r6, #0]
 8005c06:	6823      	ldr	r3, [r4, #0]
 8005c08:	0699      	lsls	r1, r3, #26
 8005c0a:	bf42      	ittt	mi
 8005c0c:	6833      	ldrmi	r3, [r6, #0]
 8005c0e:	3302      	addmi	r3, #2
 8005c10:	6033      	strmi	r3, [r6, #0]
 8005c12:	6825      	ldr	r5, [r4, #0]
 8005c14:	f015 0506 	ands.w	r5, r5, #6
 8005c18:	d106      	bne.n	8005c28 <_printf_common+0x48>
 8005c1a:	f104 0a19 	add.w	sl, r4, #25
 8005c1e:	68e3      	ldr	r3, [r4, #12]
 8005c20:	6832      	ldr	r2, [r6, #0]
 8005c22:	1a9b      	subs	r3, r3, r2
 8005c24:	42ab      	cmp	r3, r5
 8005c26:	dc28      	bgt.n	8005c7a <_printf_common+0x9a>
 8005c28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005c2c:	1e13      	subs	r3, r2, #0
 8005c2e:	6822      	ldr	r2, [r4, #0]
 8005c30:	bf18      	it	ne
 8005c32:	2301      	movne	r3, #1
 8005c34:	0692      	lsls	r2, r2, #26
 8005c36:	d42d      	bmi.n	8005c94 <_printf_common+0xb4>
 8005c38:	4649      	mov	r1, r9
 8005c3a:	4638      	mov	r0, r7
 8005c3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c40:	47c0      	blx	r8
 8005c42:	3001      	adds	r0, #1
 8005c44:	d020      	beq.n	8005c88 <_printf_common+0xa8>
 8005c46:	6823      	ldr	r3, [r4, #0]
 8005c48:	68e5      	ldr	r5, [r4, #12]
 8005c4a:	f003 0306 	and.w	r3, r3, #6
 8005c4e:	2b04      	cmp	r3, #4
 8005c50:	bf18      	it	ne
 8005c52:	2500      	movne	r5, #0
 8005c54:	6832      	ldr	r2, [r6, #0]
 8005c56:	f04f 0600 	mov.w	r6, #0
 8005c5a:	68a3      	ldr	r3, [r4, #8]
 8005c5c:	bf08      	it	eq
 8005c5e:	1aad      	subeq	r5, r5, r2
 8005c60:	6922      	ldr	r2, [r4, #16]
 8005c62:	bf08      	it	eq
 8005c64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	bfc4      	itt	gt
 8005c6c:	1a9b      	subgt	r3, r3, r2
 8005c6e:	18ed      	addgt	r5, r5, r3
 8005c70:	341a      	adds	r4, #26
 8005c72:	42b5      	cmp	r5, r6
 8005c74:	d11a      	bne.n	8005cac <_printf_common+0xcc>
 8005c76:	2000      	movs	r0, #0
 8005c78:	e008      	b.n	8005c8c <_printf_common+0xac>
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	4652      	mov	r2, sl
 8005c7e:	4649      	mov	r1, r9
 8005c80:	4638      	mov	r0, r7
 8005c82:	47c0      	blx	r8
 8005c84:	3001      	adds	r0, #1
 8005c86:	d103      	bne.n	8005c90 <_printf_common+0xb0>
 8005c88:	f04f 30ff 	mov.w	r0, #4294967295
 8005c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c90:	3501      	adds	r5, #1
 8005c92:	e7c4      	b.n	8005c1e <_printf_common+0x3e>
 8005c94:	2030      	movs	r0, #48	; 0x30
 8005c96:	18e1      	adds	r1, r4, r3
 8005c98:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c9c:	1c5a      	adds	r2, r3, #1
 8005c9e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ca2:	4422      	add	r2, r4
 8005ca4:	3302      	adds	r3, #2
 8005ca6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005caa:	e7c5      	b.n	8005c38 <_printf_common+0x58>
 8005cac:	2301      	movs	r3, #1
 8005cae:	4622      	mov	r2, r4
 8005cb0:	4649      	mov	r1, r9
 8005cb2:	4638      	mov	r0, r7
 8005cb4:	47c0      	blx	r8
 8005cb6:	3001      	adds	r0, #1
 8005cb8:	d0e6      	beq.n	8005c88 <_printf_common+0xa8>
 8005cba:	3601      	adds	r6, #1
 8005cbc:	e7d9      	b.n	8005c72 <_printf_common+0x92>
	...

08005cc0 <_printf_i>:
 8005cc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005cc4:	7e0f      	ldrb	r7, [r1, #24]
 8005cc6:	4691      	mov	r9, r2
 8005cc8:	2f78      	cmp	r7, #120	; 0x78
 8005cca:	4680      	mov	r8, r0
 8005ccc:	460c      	mov	r4, r1
 8005cce:	469a      	mov	sl, r3
 8005cd0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005cd2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005cd6:	d807      	bhi.n	8005ce8 <_printf_i+0x28>
 8005cd8:	2f62      	cmp	r7, #98	; 0x62
 8005cda:	d80a      	bhi.n	8005cf2 <_printf_i+0x32>
 8005cdc:	2f00      	cmp	r7, #0
 8005cde:	f000 80d9 	beq.w	8005e94 <_printf_i+0x1d4>
 8005ce2:	2f58      	cmp	r7, #88	; 0x58
 8005ce4:	f000 80a4 	beq.w	8005e30 <_printf_i+0x170>
 8005ce8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005cec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005cf0:	e03a      	b.n	8005d68 <_printf_i+0xa8>
 8005cf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005cf6:	2b15      	cmp	r3, #21
 8005cf8:	d8f6      	bhi.n	8005ce8 <_printf_i+0x28>
 8005cfa:	a101      	add	r1, pc, #4	; (adr r1, 8005d00 <_printf_i+0x40>)
 8005cfc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d00:	08005d59 	.word	0x08005d59
 8005d04:	08005d6d 	.word	0x08005d6d
 8005d08:	08005ce9 	.word	0x08005ce9
 8005d0c:	08005ce9 	.word	0x08005ce9
 8005d10:	08005ce9 	.word	0x08005ce9
 8005d14:	08005ce9 	.word	0x08005ce9
 8005d18:	08005d6d 	.word	0x08005d6d
 8005d1c:	08005ce9 	.word	0x08005ce9
 8005d20:	08005ce9 	.word	0x08005ce9
 8005d24:	08005ce9 	.word	0x08005ce9
 8005d28:	08005ce9 	.word	0x08005ce9
 8005d2c:	08005e7b 	.word	0x08005e7b
 8005d30:	08005d9d 	.word	0x08005d9d
 8005d34:	08005e5d 	.word	0x08005e5d
 8005d38:	08005ce9 	.word	0x08005ce9
 8005d3c:	08005ce9 	.word	0x08005ce9
 8005d40:	08005e9d 	.word	0x08005e9d
 8005d44:	08005ce9 	.word	0x08005ce9
 8005d48:	08005d9d 	.word	0x08005d9d
 8005d4c:	08005ce9 	.word	0x08005ce9
 8005d50:	08005ce9 	.word	0x08005ce9
 8005d54:	08005e65 	.word	0x08005e65
 8005d58:	682b      	ldr	r3, [r5, #0]
 8005d5a:	1d1a      	adds	r2, r3, #4
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	602a      	str	r2, [r5, #0]
 8005d60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e0a4      	b.n	8005eb6 <_printf_i+0x1f6>
 8005d6c:	6820      	ldr	r0, [r4, #0]
 8005d6e:	6829      	ldr	r1, [r5, #0]
 8005d70:	0606      	lsls	r6, r0, #24
 8005d72:	f101 0304 	add.w	r3, r1, #4
 8005d76:	d50a      	bpl.n	8005d8e <_printf_i+0xce>
 8005d78:	680e      	ldr	r6, [r1, #0]
 8005d7a:	602b      	str	r3, [r5, #0]
 8005d7c:	2e00      	cmp	r6, #0
 8005d7e:	da03      	bge.n	8005d88 <_printf_i+0xc8>
 8005d80:	232d      	movs	r3, #45	; 0x2d
 8005d82:	4276      	negs	r6, r6
 8005d84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d88:	230a      	movs	r3, #10
 8005d8a:	485e      	ldr	r0, [pc, #376]	; (8005f04 <_printf_i+0x244>)
 8005d8c:	e019      	b.n	8005dc2 <_printf_i+0x102>
 8005d8e:	680e      	ldr	r6, [r1, #0]
 8005d90:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005d94:	602b      	str	r3, [r5, #0]
 8005d96:	bf18      	it	ne
 8005d98:	b236      	sxthne	r6, r6
 8005d9a:	e7ef      	b.n	8005d7c <_printf_i+0xbc>
 8005d9c:	682b      	ldr	r3, [r5, #0]
 8005d9e:	6820      	ldr	r0, [r4, #0]
 8005da0:	1d19      	adds	r1, r3, #4
 8005da2:	6029      	str	r1, [r5, #0]
 8005da4:	0601      	lsls	r1, r0, #24
 8005da6:	d501      	bpl.n	8005dac <_printf_i+0xec>
 8005da8:	681e      	ldr	r6, [r3, #0]
 8005daa:	e002      	b.n	8005db2 <_printf_i+0xf2>
 8005dac:	0646      	lsls	r6, r0, #25
 8005dae:	d5fb      	bpl.n	8005da8 <_printf_i+0xe8>
 8005db0:	881e      	ldrh	r6, [r3, #0]
 8005db2:	2f6f      	cmp	r7, #111	; 0x6f
 8005db4:	bf0c      	ite	eq
 8005db6:	2308      	moveq	r3, #8
 8005db8:	230a      	movne	r3, #10
 8005dba:	4852      	ldr	r0, [pc, #328]	; (8005f04 <_printf_i+0x244>)
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005dc2:	6865      	ldr	r5, [r4, #4]
 8005dc4:	2d00      	cmp	r5, #0
 8005dc6:	bfa8      	it	ge
 8005dc8:	6821      	ldrge	r1, [r4, #0]
 8005dca:	60a5      	str	r5, [r4, #8]
 8005dcc:	bfa4      	itt	ge
 8005dce:	f021 0104 	bicge.w	r1, r1, #4
 8005dd2:	6021      	strge	r1, [r4, #0]
 8005dd4:	b90e      	cbnz	r6, 8005dda <_printf_i+0x11a>
 8005dd6:	2d00      	cmp	r5, #0
 8005dd8:	d04d      	beq.n	8005e76 <_printf_i+0x1b6>
 8005dda:	4615      	mov	r5, r2
 8005ddc:	fbb6 f1f3 	udiv	r1, r6, r3
 8005de0:	fb03 6711 	mls	r7, r3, r1, r6
 8005de4:	5dc7      	ldrb	r7, [r0, r7]
 8005de6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005dea:	4637      	mov	r7, r6
 8005dec:	42bb      	cmp	r3, r7
 8005dee:	460e      	mov	r6, r1
 8005df0:	d9f4      	bls.n	8005ddc <_printf_i+0x11c>
 8005df2:	2b08      	cmp	r3, #8
 8005df4:	d10b      	bne.n	8005e0e <_printf_i+0x14e>
 8005df6:	6823      	ldr	r3, [r4, #0]
 8005df8:	07de      	lsls	r6, r3, #31
 8005dfa:	d508      	bpl.n	8005e0e <_printf_i+0x14e>
 8005dfc:	6923      	ldr	r3, [r4, #16]
 8005dfe:	6861      	ldr	r1, [r4, #4]
 8005e00:	4299      	cmp	r1, r3
 8005e02:	bfde      	ittt	le
 8005e04:	2330      	movle	r3, #48	; 0x30
 8005e06:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e0a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e0e:	1b52      	subs	r2, r2, r5
 8005e10:	6122      	str	r2, [r4, #16]
 8005e12:	464b      	mov	r3, r9
 8005e14:	4621      	mov	r1, r4
 8005e16:	4640      	mov	r0, r8
 8005e18:	f8cd a000 	str.w	sl, [sp]
 8005e1c:	aa03      	add	r2, sp, #12
 8005e1e:	f7ff fedf 	bl	8005be0 <_printf_common>
 8005e22:	3001      	adds	r0, #1
 8005e24:	d14c      	bne.n	8005ec0 <_printf_i+0x200>
 8005e26:	f04f 30ff 	mov.w	r0, #4294967295
 8005e2a:	b004      	add	sp, #16
 8005e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e30:	4834      	ldr	r0, [pc, #208]	; (8005f04 <_printf_i+0x244>)
 8005e32:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005e36:	6829      	ldr	r1, [r5, #0]
 8005e38:	6823      	ldr	r3, [r4, #0]
 8005e3a:	f851 6b04 	ldr.w	r6, [r1], #4
 8005e3e:	6029      	str	r1, [r5, #0]
 8005e40:	061d      	lsls	r5, r3, #24
 8005e42:	d514      	bpl.n	8005e6e <_printf_i+0x1ae>
 8005e44:	07df      	lsls	r7, r3, #31
 8005e46:	bf44      	itt	mi
 8005e48:	f043 0320 	orrmi.w	r3, r3, #32
 8005e4c:	6023      	strmi	r3, [r4, #0]
 8005e4e:	b91e      	cbnz	r6, 8005e58 <_printf_i+0x198>
 8005e50:	6823      	ldr	r3, [r4, #0]
 8005e52:	f023 0320 	bic.w	r3, r3, #32
 8005e56:	6023      	str	r3, [r4, #0]
 8005e58:	2310      	movs	r3, #16
 8005e5a:	e7af      	b.n	8005dbc <_printf_i+0xfc>
 8005e5c:	6823      	ldr	r3, [r4, #0]
 8005e5e:	f043 0320 	orr.w	r3, r3, #32
 8005e62:	6023      	str	r3, [r4, #0]
 8005e64:	2378      	movs	r3, #120	; 0x78
 8005e66:	4828      	ldr	r0, [pc, #160]	; (8005f08 <_printf_i+0x248>)
 8005e68:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005e6c:	e7e3      	b.n	8005e36 <_printf_i+0x176>
 8005e6e:	0659      	lsls	r1, r3, #25
 8005e70:	bf48      	it	mi
 8005e72:	b2b6      	uxthmi	r6, r6
 8005e74:	e7e6      	b.n	8005e44 <_printf_i+0x184>
 8005e76:	4615      	mov	r5, r2
 8005e78:	e7bb      	b.n	8005df2 <_printf_i+0x132>
 8005e7a:	682b      	ldr	r3, [r5, #0]
 8005e7c:	6826      	ldr	r6, [r4, #0]
 8005e7e:	1d18      	adds	r0, r3, #4
 8005e80:	6961      	ldr	r1, [r4, #20]
 8005e82:	6028      	str	r0, [r5, #0]
 8005e84:	0635      	lsls	r5, r6, #24
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	d501      	bpl.n	8005e8e <_printf_i+0x1ce>
 8005e8a:	6019      	str	r1, [r3, #0]
 8005e8c:	e002      	b.n	8005e94 <_printf_i+0x1d4>
 8005e8e:	0670      	lsls	r0, r6, #25
 8005e90:	d5fb      	bpl.n	8005e8a <_printf_i+0x1ca>
 8005e92:	8019      	strh	r1, [r3, #0]
 8005e94:	2300      	movs	r3, #0
 8005e96:	4615      	mov	r5, r2
 8005e98:	6123      	str	r3, [r4, #16]
 8005e9a:	e7ba      	b.n	8005e12 <_printf_i+0x152>
 8005e9c:	682b      	ldr	r3, [r5, #0]
 8005e9e:	2100      	movs	r1, #0
 8005ea0:	1d1a      	adds	r2, r3, #4
 8005ea2:	602a      	str	r2, [r5, #0]
 8005ea4:	681d      	ldr	r5, [r3, #0]
 8005ea6:	6862      	ldr	r2, [r4, #4]
 8005ea8:	4628      	mov	r0, r5
 8005eaa:	f000 f82f 	bl	8005f0c <memchr>
 8005eae:	b108      	cbz	r0, 8005eb4 <_printf_i+0x1f4>
 8005eb0:	1b40      	subs	r0, r0, r5
 8005eb2:	6060      	str	r0, [r4, #4]
 8005eb4:	6863      	ldr	r3, [r4, #4]
 8005eb6:	6123      	str	r3, [r4, #16]
 8005eb8:	2300      	movs	r3, #0
 8005eba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ebe:	e7a8      	b.n	8005e12 <_printf_i+0x152>
 8005ec0:	462a      	mov	r2, r5
 8005ec2:	4649      	mov	r1, r9
 8005ec4:	4640      	mov	r0, r8
 8005ec6:	6923      	ldr	r3, [r4, #16]
 8005ec8:	47d0      	blx	sl
 8005eca:	3001      	adds	r0, #1
 8005ecc:	d0ab      	beq.n	8005e26 <_printf_i+0x166>
 8005ece:	6823      	ldr	r3, [r4, #0]
 8005ed0:	079b      	lsls	r3, r3, #30
 8005ed2:	d413      	bmi.n	8005efc <_printf_i+0x23c>
 8005ed4:	68e0      	ldr	r0, [r4, #12]
 8005ed6:	9b03      	ldr	r3, [sp, #12]
 8005ed8:	4298      	cmp	r0, r3
 8005eda:	bfb8      	it	lt
 8005edc:	4618      	movlt	r0, r3
 8005ede:	e7a4      	b.n	8005e2a <_printf_i+0x16a>
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	4632      	mov	r2, r6
 8005ee4:	4649      	mov	r1, r9
 8005ee6:	4640      	mov	r0, r8
 8005ee8:	47d0      	blx	sl
 8005eea:	3001      	adds	r0, #1
 8005eec:	d09b      	beq.n	8005e26 <_printf_i+0x166>
 8005eee:	3501      	adds	r5, #1
 8005ef0:	68e3      	ldr	r3, [r4, #12]
 8005ef2:	9903      	ldr	r1, [sp, #12]
 8005ef4:	1a5b      	subs	r3, r3, r1
 8005ef6:	42ab      	cmp	r3, r5
 8005ef8:	dcf2      	bgt.n	8005ee0 <_printf_i+0x220>
 8005efa:	e7eb      	b.n	8005ed4 <_printf_i+0x214>
 8005efc:	2500      	movs	r5, #0
 8005efe:	f104 0619 	add.w	r6, r4, #25
 8005f02:	e7f5      	b.n	8005ef0 <_printf_i+0x230>
 8005f04:	08006253 	.word	0x08006253
 8005f08:	08006264 	.word	0x08006264

08005f0c <memchr>:
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	b510      	push	{r4, lr}
 8005f10:	b2c9      	uxtb	r1, r1
 8005f12:	4402      	add	r2, r0
 8005f14:	4293      	cmp	r3, r2
 8005f16:	4618      	mov	r0, r3
 8005f18:	d101      	bne.n	8005f1e <memchr+0x12>
 8005f1a:	2000      	movs	r0, #0
 8005f1c:	e003      	b.n	8005f26 <memchr+0x1a>
 8005f1e:	7804      	ldrb	r4, [r0, #0]
 8005f20:	3301      	adds	r3, #1
 8005f22:	428c      	cmp	r4, r1
 8005f24:	d1f6      	bne.n	8005f14 <memchr+0x8>
 8005f26:	bd10      	pop	{r4, pc}

08005f28 <memcpy>:
 8005f28:	440a      	add	r2, r1
 8005f2a:	4291      	cmp	r1, r2
 8005f2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005f30:	d100      	bne.n	8005f34 <memcpy+0xc>
 8005f32:	4770      	bx	lr
 8005f34:	b510      	push	{r4, lr}
 8005f36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f3a:	4291      	cmp	r1, r2
 8005f3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f40:	d1f9      	bne.n	8005f36 <memcpy+0xe>
 8005f42:	bd10      	pop	{r4, pc}

08005f44 <memmove>:
 8005f44:	4288      	cmp	r0, r1
 8005f46:	b510      	push	{r4, lr}
 8005f48:	eb01 0402 	add.w	r4, r1, r2
 8005f4c:	d902      	bls.n	8005f54 <memmove+0x10>
 8005f4e:	4284      	cmp	r4, r0
 8005f50:	4623      	mov	r3, r4
 8005f52:	d807      	bhi.n	8005f64 <memmove+0x20>
 8005f54:	1e43      	subs	r3, r0, #1
 8005f56:	42a1      	cmp	r1, r4
 8005f58:	d008      	beq.n	8005f6c <memmove+0x28>
 8005f5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005f62:	e7f8      	b.n	8005f56 <memmove+0x12>
 8005f64:	4601      	mov	r1, r0
 8005f66:	4402      	add	r2, r0
 8005f68:	428a      	cmp	r2, r1
 8005f6a:	d100      	bne.n	8005f6e <memmove+0x2a>
 8005f6c:	bd10      	pop	{r4, pc}
 8005f6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005f72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005f76:	e7f7      	b.n	8005f68 <memmove+0x24>

08005f78 <_free_r>:
 8005f78:	b538      	push	{r3, r4, r5, lr}
 8005f7a:	4605      	mov	r5, r0
 8005f7c:	2900      	cmp	r1, #0
 8005f7e:	d040      	beq.n	8006002 <_free_r+0x8a>
 8005f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f84:	1f0c      	subs	r4, r1, #4
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	bfb8      	it	lt
 8005f8a:	18e4      	addlt	r4, r4, r3
 8005f8c:	f000 f910 	bl	80061b0 <__malloc_lock>
 8005f90:	4a1c      	ldr	r2, [pc, #112]	; (8006004 <_free_r+0x8c>)
 8005f92:	6813      	ldr	r3, [r2, #0]
 8005f94:	b933      	cbnz	r3, 8005fa4 <_free_r+0x2c>
 8005f96:	6063      	str	r3, [r4, #4]
 8005f98:	6014      	str	r4, [r2, #0]
 8005f9a:	4628      	mov	r0, r5
 8005f9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005fa0:	f000 b90c 	b.w	80061bc <__malloc_unlock>
 8005fa4:	42a3      	cmp	r3, r4
 8005fa6:	d908      	bls.n	8005fba <_free_r+0x42>
 8005fa8:	6820      	ldr	r0, [r4, #0]
 8005faa:	1821      	adds	r1, r4, r0
 8005fac:	428b      	cmp	r3, r1
 8005fae:	bf01      	itttt	eq
 8005fb0:	6819      	ldreq	r1, [r3, #0]
 8005fb2:	685b      	ldreq	r3, [r3, #4]
 8005fb4:	1809      	addeq	r1, r1, r0
 8005fb6:	6021      	streq	r1, [r4, #0]
 8005fb8:	e7ed      	b.n	8005f96 <_free_r+0x1e>
 8005fba:	461a      	mov	r2, r3
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	b10b      	cbz	r3, 8005fc4 <_free_r+0x4c>
 8005fc0:	42a3      	cmp	r3, r4
 8005fc2:	d9fa      	bls.n	8005fba <_free_r+0x42>
 8005fc4:	6811      	ldr	r1, [r2, #0]
 8005fc6:	1850      	adds	r0, r2, r1
 8005fc8:	42a0      	cmp	r0, r4
 8005fca:	d10b      	bne.n	8005fe4 <_free_r+0x6c>
 8005fcc:	6820      	ldr	r0, [r4, #0]
 8005fce:	4401      	add	r1, r0
 8005fd0:	1850      	adds	r0, r2, r1
 8005fd2:	4283      	cmp	r3, r0
 8005fd4:	6011      	str	r1, [r2, #0]
 8005fd6:	d1e0      	bne.n	8005f9a <_free_r+0x22>
 8005fd8:	6818      	ldr	r0, [r3, #0]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	4401      	add	r1, r0
 8005fde:	6011      	str	r1, [r2, #0]
 8005fe0:	6053      	str	r3, [r2, #4]
 8005fe2:	e7da      	b.n	8005f9a <_free_r+0x22>
 8005fe4:	d902      	bls.n	8005fec <_free_r+0x74>
 8005fe6:	230c      	movs	r3, #12
 8005fe8:	602b      	str	r3, [r5, #0]
 8005fea:	e7d6      	b.n	8005f9a <_free_r+0x22>
 8005fec:	6820      	ldr	r0, [r4, #0]
 8005fee:	1821      	adds	r1, r4, r0
 8005ff0:	428b      	cmp	r3, r1
 8005ff2:	bf01      	itttt	eq
 8005ff4:	6819      	ldreq	r1, [r3, #0]
 8005ff6:	685b      	ldreq	r3, [r3, #4]
 8005ff8:	1809      	addeq	r1, r1, r0
 8005ffa:	6021      	streq	r1, [r4, #0]
 8005ffc:	6063      	str	r3, [r4, #4]
 8005ffe:	6054      	str	r4, [r2, #4]
 8006000:	e7cb      	b.n	8005f9a <_free_r+0x22>
 8006002:	bd38      	pop	{r3, r4, r5, pc}
 8006004:	2000021c 	.word	0x2000021c

08006008 <sbrk_aligned>:
 8006008:	b570      	push	{r4, r5, r6, lr}
 800600a:	4e0e      	ldr	r6, [pc, #56]	; (8006044 <sbrk_aligned+0x3c>)
 800600c:	460c      	mov	r4, r1
 800600e:	6831      	ldr	r1, [r6, #0]
 8006010:	4605      	mov	r5, r0
 8006012:	b911      	cbnz	r1, 800601a <sbrk_aligned+0x12>
 8006014:	f000 f8bc 	bl	8006190 <_sbrk_r>
 8006018:	6030      	str	r0, [r6, #0]
 800601a:	4621      	mov	r1, r4
 800601c:	4628      	mov	r0, r5
 800601e:	f000 f8b7 	bl	8006190 <_sbrk_r>
 8006022:	1c43      	adds	r3, r0, #1
 8006024:	d00a      	beq.n	800603c <sbrk_aligned+0x34>
 8006026:	1cc4      	adds	r4, r0, #3
 8006028:	f024 0403 	bic.w	r4, r4, #3
 800602c:	42a0      	cmp	r0, r4
 800602e:	d007      	beq.n	8006040 <sbrk_aligned+0x38>
 8006030:	1a21      	subs	r1, r4, r0
 8006032:	4628      	mov	r0, r5
 8006034:	f000 f8ac 	bl	8006190 <_sbrk_r>
 8006038:	3001      	adds	r0, #1
 800603a:	d101      	bne.n	8006040 <sbrk_aligned+0x38>
 800603c:	f04f 34ff 	mov.w	r4, #4294967295
 8006040:	4620      	mov	r0, r4
 8006042:	bd70      	pop	{r4, r5, r6, pc}
 8006044:	20000220 	.word	0x20000220

08006048 <_malloc_r>:
 8006048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800604c:	1ccd      	adds	r5, r1, #3
 800604e:	f025 0503 	bic.w	r5, r5, #3
 8006052:	3508      	adds	r5, #8
 8006054:	2d0c      	cmp	r5, #12
 8006056:	bf38      	it	cc
 8006058:	250c      	movcc	r5, #12
 800605a:	2d00      	cmp	r5, #0
 800605c:	4607      	mov	r7, r0
 800605e:	db01      	blt.n	8006064 <_malloc_r+0x1c>
 8006060:	42a9      	cmp	r1, r5
 8006062:	d905      	bls.n	8006070 <_malloc_r+0x28>
 8006064:	230c      	movs	r3, #12
 8006066:	2600      	movs	r6, #0
 8006068:	603b      	str	r3, [r7, #0]
 800606a:	4630      	mov	r0, r6
 800606c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006070:	4e2e      	ldr	r6, [pc, #184]	; (800612c <_malloc_r+0xe4>)
 8006072:	f000 f89d 	bl	80061b0 <__malloc_lock>
 8006076:	6833      	ldr	r3, [r6, #0]
 8006078:	461c      	mov	r4, r3
 800607a:	bb34      	cbnz	r4, 80060ca <_malloc_r+0x82>
 800607c:	4629      	mov	r1, r5
 800607e:	4638      	mov	r0, r7
 8006080:	f7ff ffc2 	bl	8006008 <sbrk_aligned>
 8006084:	1c43      	adds	r3, r0, #1
 8006086:	4604      	mov	r4, r0
 8006088:	d14d      	bne.n	8006126 <_malloc_r+0xde>
 800608a:	6834      	ldr	r4, [r6, #0]
 800608c:	4626      	mov	r6, r4
 800608e:	2e00      	cmp	r6, #0
 8006090:	d140      	bne.n	8006114 <_malloc_r+0xcc>
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	4631      	mov	r1, r6
 8006096:	4638      	mov	r0, r7
 8006098:	eb04 0803 	add.w	r8, r4, r3
 800609c:	f000 f878 	bl	8006190 <_sbrk_r>
 80060a0:	4580      	cmp	r8, r0
 80060a2:	d13a      	bne.n	800611a <_malloc_r+0xd2>
 80060a4:	6821      	ldr	r1, [r4, #0]
 80060a6:	3503      	adds	r5, #3
 80060a8:	1a6d      	subs	r5, r5, r1
 80060aa:	f025 0503 	bic.w	r5, r5, #3
 80060ae:	3508      	adds	r5, #8
 80060b0:	2d0c      	cmp	r5, #12
 80060b2:	bf38      	it	cc
 80060b4:	250c      	movcc	r5, #12
 80060b6:	4638      	mov	r0, r7
 80060b8:	4629      	mov	r1, r5
 80060ba:	f7ff ffa5 	bl	8006008 <sbrk_aligned>
 80060be:	3001      	adds	r0, #1
 80060c0:	d02b      	beq.n	800611a <_malloc_r+0xd2>
 80060c2:	6823      	ldr	r3, [r4, #0]
 80060c4:	442b      	add	r3, r5
 80060c6:	6023      	str	r3, [r4, #0]
 80060c8:	e00e      	b.n	80060e8 <_malloc_r+0xa0>
 80060ca:	6822      	ldr	r2, [r4, #0]
 80060cc:	1b52      	subs	r2, r2, r5
 80060ce:	d41e      	bmi.n	800610e <_malloc_r+0xc6>
 80060d0:	2a0b      	cmp	r2, #11
 80060d2:	d916      	bls.n	8006102 <_malloc_r+0xba>
 80060d4:	1961      	adds	r1, r4, r5
 80060d6:	42a3      	cmp	r3, r4
 80060d8:	6025      	str	r5, [r4, #0]
 80060da:	bf18      	it	ne
 80060dc:	6059      	strne	r1, [r3, #4]
 80060de:	6863      	ldr	r3, [r4, #4]
 80060e0:	bf08      	it	eq
 80060e2:	6031      	streq	r1, [r6, #0]
 80060e4:	5162      	str	r2, [r4, r5]
 80060e6:	604b      	str	r3, [r1, #4]
 80060e8:	4638      	mov	r0, r7
 80060ea:	f104 060b 	add.w	r6, r4, #11
 80060ee:	f000 f865 	bl	80061bc <__malloc_unlock>
 80060f2:	f026 0607 	bic.w	r6, r6, #7
 80060f6:	1d23      	adds	r3, r4, #4
 80060f8:	1af2      	subs	r2, r6, r3
 80060fa:	d0b6      	beq.n	800606a <_malloc_r+0x22>
 80060fc:	1b9b      	subs	r3, r3, r6
 80060fe:	50a3      	str	r3, [r4, r2]
 8006100:	e7b3      	b.n	800606a <_malloc_r+0x22>
 8006102:	6862      	ldr	r2, [r4, #4]
 8006104:	42a3      	cmp	r3, r4
 8006106:	bf0c      	ite	eq
 8006108:	6032      	streq	r2, [r6, #0]
 800610a:	605a      	strne	r2, [r3, #4]
 800610c:	e7ec      	b.n	80060e8 <_malloc_r+0xa0>
 800610e:	4623      	mov	r3, r4
 8006110:	6864      	ldr	r4, [r4, #4]
 8006112:	e7b2      	b.n	800607a <_malloc_r+0x32>
 8006114:	4634      	mov	r4, r6
 8006116:	6876      	ldr	r6, [r6, #4]
 8006118:	e7b9      	b.n	800608e <_malloc_r+0x46>
 800611a:	230c      	movs	r3, #12
 800611c:	4638      	mov	r0, r7
 800611e:	603b      	str	r3, [r7, #0]
 8006120:	f000 f84c 	bl	80061bc <__malloc_unlock>
 8006124:	e7a1      	b.n	800606a <_malloc_r+0x22>
 8006126:	6025      	str	r5, [r4, #0]
 8006128:	e7de      	b.n	80060e8 <_malloc_r+0xa0>
 800612a:	bf00      	nop
 800612c:	2000021c 	.word	0x2000021c

08006130 <_realloc_r>:
 8006130:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006134:	4680      	mov	r8, r0
 8006136:	4614      	mov	r4, r2
 8006138:	460e      	mov	r6, r1
 800613a:	b921      	cbnz	r1, 8006146 <_realloc_r+0x16>
 800613c:	4611      	mov	r1, r2
 800613e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006142:	f7ff bf81 	b.w	8006048 <_malloc_r>
 8006146:	b92a      	cbnz	r2, 8006154 <_realloc_r+0x24>
 8006148:	f7ff ff16 	bl	8005f78 <_free_r>
 800614c:	4625      	mov	r5, r4
 800614e:	4628      	mov	r0, r5
 8006150:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006154:	f000 f838 	bl	80061c8 <_malloc_usable_size_r>
 8006158:	4284      	cmp	r4, r0
 800615a:	4607      	mov	r7, r0
 800615c:	d802      	bhi.n	8006164 <_realloc_r+0x34>
 800615e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006162:	d812      	bhi.n	800618a <_realloc_r+0x5a>
 8006164:	4621      	mov	r1, r4
 8006166:	4640      	mov	r0, r8
 8006168:	f7ff ff6e 	bl	8006048 <_malloc_r>
 800616c:	4605      	mov	r5, r0
 800616e:	2800      	cmp	r0, #0
 8006170:	d0ed      	beq.n	800614e <_realloc_r+0x1e>
 8006172:	42bc      	cmp	r4, r7
 8006174:	4622      	mov	r2, r4
 8006176:	4631      	mov	r1, r6
 8006178:	bf28      	it	cs
 800617a:	463a      	movcs	r2, r7
 800617c:	f7ff fed4 	bl	8005f28 <memcpy>
 8006180:	4631      	mov	r1, r6
 8006182:	4640      	mov	r0, r8
 8006184:	f7ff fef8 	bl	8005f78 <_free_r>
 8006188:	e7e1      	b.n	800614e <_realloc_r+0x1e>
 800618a:	4635      	mov	r5, r6
 800618c:	e7df      	b.n	800614e <_realloc_r+0x1e>
	...

08006190 <_sbrk_r>:
 8006190:	b538      	push	{r3, r4, r5, lr}
 8006192:	2300      	movs	r3, #0
 8006194:	4d05      	ldr	r5, [pc, #20]	; (80061ac <_sbrk_r+0x1c>)
 8006196:	4604      	mov	r4, r0
 8006198:	4608      	mov	r0, r1
 800619a:	602b      	str	r3, [r5, #0]
 800619c:	f7fb f882 	bl	80012a4 <_sbrk>
 80061a0:	1c43      	adds	r3, r0, #1
 80061a2:	d102      	bne.n	80061aa <_sbrk_r+0x1a>
 80061a4:	682b      	ldr	r3, [r5, #0]
 80061a6:	b103      	cbz	r3, 80061aa <_sbrk_r+0x1a>
 80061a8:	6023      	str	r3, [r4, #0]
 80061aa:	bd38      	pop	{r3, r4, r5, pc}
 80061ac:	20000224 	.word	0x20000224

080061b0 <__malloc_lock>:
 80061b0:	4801      	ldr	r0, [pc, #4]	; (80061b8 <__malloc_lock+0x8>)
 80061b2:	f000 b811 	b.w	80061d8 <__retarget_lock_acquire_recursive>
 80061b6:	bf00      	nop
 80061b8:	20000228 	.word	0x20000228

080061bc <__malloc_unlock>:
 80061bc:	4801      	ldr	r0, [pc, #4]	; (80061c4 <__malloc_unlock+0x8>)
 80061be:	f000 b80c 	b.w	80061da <__retarget_lock_release_recursive>
 80061c2:	bf00      	nop
 80061c4:	20000228 	.word	0x20000228

080061c8 <_malloc_usable_size_r>:
 80061c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061cc:	1f18      	subs	r0, r3, #4
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	bfbc      	itt	lt
 80061d2:	580b      	ldrlt	r3, [r1, r0]
 80061d4:	18c0      	addlt	r0, r0, r3
 80061d6:	4770      	bx	lr

080061d8 <__retarget_lock_acquire_recursive>:
 80061d8:	4770      	bx	lr

080061da <__retarget_lock_release_recursive>:
 80061da:	4770      	bx	lr

080061dc <_init>:
 80061dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061de:	bf00      	nop
 80061e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061e2:	bc08      	pop	{r3}
 80061e4:	469e      	mov	lr, r3
 80061e6:	4770      	bx	lr

080061e8 <_fini>:
 80061e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ea:	bf00      	nop
 80061ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ee:	bc08      	pop	{r3}
 80061f0:	469e      	mov	lr, r3
 80061f2:	4770      	bx	lr
